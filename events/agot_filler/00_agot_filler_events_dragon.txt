namespace = agot_filler_dragon

###############################################################################
# Dragon filler works by having a hidden event on the dragon which then sends the real
# event to either the dragon, its owner, or the dragon's location owner. These should
# be arranged in sequence in order to maintain readability.
#
# As these necessitate many handler events, please write the id of the hidden event
# that should be called on the dragon in the on_action for all events in this file below:
###############################################################################
# DRAGONPIT STORMING (0001-0002)
#	agot_filler_dragon.0002 - Low popular opinion dragonrider with dragonpit has it stormed
#
# CHILD APPROACHES DRAGON (0003-0004)
#	agot_filler_dragon.0004 - Child at court approached dragon and died / gets burned
#
# DRAGON SHOW FOR MONEY (0005-0006)
#	agot_filler_dragon.0006 - Dragonrider in debt wonders if they should do show for money
#
# WILD DRAGON WORSHIP (0007-0011)
#	agot_filler_dragon.0007 - 0011, Wild dragon worshipped by local peasants
#
# DRAGON STRESS TRAIT (0012-0039)
#	agot_filler_dragon.0012 - 0013, Comfort eater
#	agot_filler_dragon.0014 - 0015, Contrite
#	agot_filler_dragon.0016 - 0017, Drunkard
#	agot_filler_dragon.0018 - 0019, Flagellant
#	agot_filler_dragon.0020 - 0021, Improvident
#	agot_filler_dragon.0022 - 0023, Inappetetic
#	agot_filler_dragon.0024 - 0025, Irritable
#	agot_filler_dragon.0026 - 0027, Profligate
#	agot_filler_dragon.0028 - 0029, Rakish
#	agot_filler_dragon.0030 - 0031, Reclusive
#	agot_filler_dragon.0032 - 0033, Athletic
#	agot_filler_dragon.0034 - 0035, Confider
#	agot_filler_dragon.0036 - 0037, Journaller
#	agot_filler_dragon.0038 - 0039, Uncouth
#
# DRAGON EDUCATION TRAIT (0040-0049)
#	agot_filler_dragon.0040 - 0041, Diplomacy
#	agot_filler_dragon.0042 - 0043, Martial
#	agot_filler_dragon.0044 - 0045, Stewardship
#	agot_filler_dragon.0046 - 0047, Intrigue
#	agot_filler_dragon.0048 - 0049, Learning
#
# DRAGONRIDER LIFESTYLE TRAITS (0050-0063)
#	agot_filler_dragon.0050 - 0051, Reveler
#	agot_filler_dragon.0052 - 0053, Blademaster
#	agot_filler_dragon.0054 - 0055, Hunter
#	agot_filler_dragon.0056 - 0057, Mystic
#	agot_filler_dragon.0058 - 0059, Physician
#	agot_filler_dragon.0060 - 0061, Herbalist
#	agot_filler_dragon.0062 - 0063, Gardener
#
# MAESTER / COURT PHYSICIAN WANTS TO USE DRAGON FOR elixir (0064-0065)
#	agot_filler_dragon.0064 - 0065, Maester / court physician wants to use dragon for elixir
#
# elixir OF DRAGONKIND EVENTS (0066-0074)
#	agot_filler_dragon.0066 - 0067, elixir of dragonkind events
#
# WALK YOUR DRAGON (0075-0080)
#	agot_filler_dragon.0075 - 76, Lunatic/eccentric dragonrider walking their dragon as a dog
#	(77-80 left as room for additional outcomes if we ever get round to it)
#
# KNIGHT & MERCHANT OFFERS (0081-0087)
#	agot_filler_dragon.0081 - 0085, Knight wants to fight your dragon
#	agot_filler_dragon.0086 - 0087, Rich noble wants to pay you to ride your dragon
#
# WRITTEN BY LORD (0088-0091)
#	agot_filler_dragon.0088 - 0089, Craven dragonrider wants to face fear
#	agot_filler_dragon.0090 - 0091, Crazy dragonrider can get fire obsessed
#
# CHILD WANTS TO RIDE DRAGON (0092-0094)
#	agot_filler_dragon.0092 - 0094, Child wants to ride dragon & consequences
#
# WILD DRAGON DAMAGES COUNTRYSIDE (0095-0100)
#	agot_filler_dragon.0095 - Wild dragon does something bad
#		agot_filler_dragon.0096 - Wild dragon killed some peasants
#		agot_filler_dragon.0097 - Wild dragon kills farm animals
#		agot_filler_dragon.0098 - Wild dragon kills crops
#		agot_filler_dragon.0099 - Wild dragon attacks the holding
#		agot_filler_dragon.0100 - Wild dragon slew courtier
#
# ATTRACTED TO DRAGONRIDER (0101-0102)
#	agot_filler_dragon.0101 - 0102, Lord is attracted to courtier dragonrider
#
# DRAGONRIDER IS IN PRISON (0103-0104)
#	agot_filler_dragon.0103 - 0104, Dragonrider is in prison, thinks about dragon
#
###############################################################################
# Some ideas:
# agot_filler_dragon.XXXX - XXXX, Dragon in same province as another dragon is attacked
#							- Dragon can be killed
#							- Dragon is injured
#							- Dragon is fine
# agot_filler_dragon.XXXX - XXXX, Dragon is refusing to eat (event chain)
#							- Dragon is sick
#							- Dragon is hiding injury
#							- Dragon is just a picky eater
# agot_filler_dragon.XXXX - XXXX, Dragonrider senses dragon is in danger
#							- Coward dragon is scared of mouse
#							- Dragonkeeper is actually a spy
#							- Food is being prepared badly
#							- Dragon is sick
# agot_filler_dragon.XXXX - XXXX, Dragonrider knight with low opinion wants to duel you
#						    on the ground
# agot_filler_dragon.XXXX - XXXX, Dull courtier tried to pet dragon and was burned / died (50/50)
# agot_filler_dragon.XXXX - XXXX, Eccentric courtier wants you to kill your dragon and have you
#							eat their bones and blood to gain their power
# agot_filler_dragon.XXXX - XXXX, Eccentric courtier wants to make armor out of your dragon's bones
# agot_filler_dragon.XXXX - XXXX, Dragon seems restless, wants to do something
# agot_filler_dragon.XXXX - XXXX, Local lord offers money for dragons help clearing forest
# agot_filler_dragon.XXXX - XXXX, Nearby scholar lord wants to study your dragon
# agot_filler_dragon.XXXX - XXXX, You (journaller / scholar) write a book about your dragon
# agot_filler_dragon.XXXX - XXXX, Zealous court chaplin wants you to kill or release your dragon
# agot_filler_dragon.XXXX - XXXX, Court chaplin wants to bless your dragon
###############################################################################

#########################################
# STORMING OF THE DRAGONPIT (0001-0002) #
# by: Sililex                           #
#########################################
agot_filler_dragon.0001 = {
	hidden = yes
	cooldown = {
		years = 5
	}
	trigger = {
		has_character_flag = in_dragonpit
		has_variable = current_rider
		location = {
			root.var:current_rider = { is_alive = yes }
			# An event about dragonpits should probably check for the dragonpit buildings
			has_any_dragonpits = yes
			OR = {
				root.var:current_rider = province_owner
				root.var:current_rider.employer ?= province_owner
			}
			NOT = { county = title:c_dragonstone } # Dragonmont doesn't really make sense
			county = {
				OR = {
					county_opinion <= -50 # Dragonrider / controller is not popular
					AND = { # KL has popular opinion buffs that mean we need to nerf it a bit here
						this = title:c_kings_landing
						county_opinion <= -25
					}
				}
			}
			county.holder = {
				any_courtier = {
					has_trait = dragon # Is a dragon
					exists = var:pitted_dragon_location # Is in the dragonpit
					var:pitted_dragon_location = scope:dragonpit_location # Is in the same dragonpit
					count > 2 # There is more than two dragons in the dragonpit (mainly done to avoid 200 loc permutations)
				}
			}
		}
	}
	immediate = {
		location.county = {
			save_scope_as = dragonpit_location
		}
		location.county.holder = {
			every_courtier_or_guest = {
				limit = {
					has_trait = dragon # Is a dragon
					exists = var:pitted_dragon_location # Is in the dragonpit
					var:pitted_dragon_location = scope:dragonpit_location # Is in the same dragonpit
				}
				# Create peasant mob for each dragon to kill
				set_variable = {
					name = peasant_murders
					value = {
						value = 0
						add = prowess # So there's a ceiling to how many
						multiply = { 0 0.25 }
					}
				}
				set_variable = {
					name = created_peasants
					value = 0
				}
				while = {
					limit = { var:created_peasants < var:peasant_murders }
					hidden_effect = {
						create_character = { # Created just to die - what a fate
							age = { 14 70 }
							gender_female_chance = root_soldier_female_chance
							culture = location.culture
							faith = location.faith
							location = ROOT.location
							random_traits = yes
							dynasty = none
							after_creation = {
								death = {
									death_reason = death_dragon
									killer = prev
								}
							}
						}
					}
					change_variable = {
						name = created_peasants
						add = 1
					}
				}
				remove_variable = peasant_murders
				remove_variable = created_peasants
				# Determine the dragon's fate
				random_list = {
					20 = {
						modifier = {
							add = {
								value = prowess
								multiply = 0.2
							}
						}
						modifier = { # Owned dragons cannot go wild
							factor = 0
							any_relation = {
								type = agot_dragon
							}
						}
						root.location.county.holder = {
							add_to_variable_list = {
								name = dragonpit_escaped_dragons
								target = prev
							}
						}
					}
					30 = {
						modifier = {
							add = {
								value = prowess
								multiply = 0.2
							}
						}
						root.location.county.holder = {
							add_to_variable_list = {
								name = dragonpit_wounded_dragons
								target = prev
							}
						}
						random_list = {
							33 = { }
							33 = {
								add_character_flag = {
									flag = dragonpit_wounded_2
									days = 3
								}
							}
							33 = {
								add_character_flag = {
									flag = dragonpit_wounded_3
									days = 3
								}
							}
						}
					}
					40 = {
						modifier = { # Weaker dragons are more likely to die
							add = {
								value = prowess
								multiply = -0.2
							}
						}
						root.location.county.holder = {
							add_to_variable_list = {
								name = dragonpit_died_dragons
								target = prev
							}
						}
					}
				}
			}
			trigger_event = {
				id = agot_filler_dragon.0002
			}
		}
	}
}

agot_filler_dragon.0002 = {
	type = character_event
	window = dragon_character_event
	title = agot_filler_dragon.0002.t
	desc = {
		desc = agot_filler_dragon.0002.desc.intro
		first_valid = {
			triggered_desc = {
				trigger = {
					has_character_flag = dragonpit_escaped
					NOT = { has_character_flag = dragonpit_wounded }
					NOT = { has_character_flag = dragonpit_died }
				}
				desc = agot_filler_dragon.0002.desc.escaped_only
			}
			triggered_desc = {
				trigger = {
					has_character_flag = dragonpit_wounded
					NOT = { has_character_flag = dragonpit_escaped }
					NOT = { has_character_flag = dragonpit_died }
				}
				desc = agot_filler_dragon.0002.desc.wounded_only
			}
			triggered_desc = {
				trigger = {
					has_character_flag = dragonpit_died
					NOT = { has_character_flag = dragonpit_escaped }
					NOT = { has_character_flag = dragonpit_wounded }
				}
				desc = agot_filler_dragon.0002.desc.died_only
			}
			triggered_desc = {
				trigger = {
					has_character_flag = dragonpit_escaped
					has_character_flag = dragonpit_wounded
					NOT = { has_character_flag = dragonpit_died }
				}
				desc = agot_filler_dragon.0002.desc.escaped_and_wounded
			}
			triggered_desc = {
				trigger = {
					has_character_flag = dragonpit_escaped
					has_character_flag = dragonpit_died
					NOT = { has_character_flag = dragonpit_wounded }
				}
				desc = agot_filler_dragon.0002.desc.escaped_and_died
			}
			triggered_desc = {
				trigger = {
					has_character_flag = dragonpit_wounded
					has_character_flag = dragonpit_died
					NOT = { has_character_flag = dragonpit_escaped }
				}
				desc = agot_filler_dragon.0002.desc.wounded_and_died
			}
			triggered_desc = {
				trigger = {
					has_character_flag = dragonpit_escaped
					has_character_flag = dragonpit_wounded
					has_character_flag = dragonpit_died
				}
				desc = agot_filler_dragon.0002.desc.escaped_and_wounded_and_died
			}
		}
		triggered_desc = {
			trigger = {
				has_character_flag = dragonpit_died
				exists = var:current_dragon
				var:current_dragon = {
					is_alive = yes
				}
				NOT = {
					any_in_list = {
						variable = dragonpit_wounded_dragons
						this = prev.var:current_dragon
					}
				}
			}
			desc = agot_filler_dragon.0002.desc.dragon_alive
		}
		triggered_desc = {
			trigger = {
				has_character_flag = dragonpit_died
				exists = var:current_dragon
				var:current_dragon = {
					is_alive = yes
				}
				any_in_list = {
					variable = dragonpit_wounded_dragons
					this = prev.var:current_dragon
				}
			}
			desc = agot_filler_dragon.0002.desc.dragon_wounded
		}
		triggered_desc = {
			trigger = {
				exists = var:current_dragon
				var:current_dragon = {
					is_alive = no
					days_since_death = 0
					death_reason = death_torn_to_pieces_by_mob
				}
			}
			desc = agot_filler_dragon.0002.desc.dragon_died
		}
		triggered_desc = {
			trigger = {
				NOT = { has_character_flag = dragonpit_died }
			}
			desc = agot_filler_dragon.0002.desc.end_fine
		}
		triggered_desc = {
			trigger = {
				has_character_flag = dragonpit_died
			}
			desc = agot_filler_dragon.0002.desc.end_died
		}
	}
	theme = dragon
	left_portrait = {
		character = ROOT
		animation = worry
	}
	right_portrait = {
		character = scope:right_dragon_head
		animation = dragon_main
		camera = camera_dragon_event_standing

		#Add this so dragon fits within event window
		outfit_tags = { linear_camera_zoom }
	}

	immediate = {
		# Get current dragon if I have one
		var:current_dragon ?= {
			save_scope_as = right_dragon_head
		}
		# Apply effects to the dragon(s)
		if = {
			limit = {
				any_in_list = {
					variable = dragonpit_escaped_dragons
					count > 0
				}
			}
			add_character_flag = dragonpit_escaped
			every_in_list = {
				variable = dragonpit_escaped_dragons
				agot_dragon_flees_province = yes
			}
		}
		if = {
			limit = {
				any_in_list = {
					variable = dragonpit_wounded_dragons
					count > 0
				}
			}
			add_character_flag = dragonpit_wounded
			every_in_list = {
				variable = dragonpit_wounded_dragons
				# Wound the dragon based on flags
				hidden_effect = {
					if = {
						limit = {
							has_character_flag = dragonpit_wounded_3
						}
						wound_dragon = yes
						wound_dragon = yes
						wound_dragon = yes
					}
					else_if = {
						limit = {
							has_character_flag = dragonpit_wounded_2
						}
						wound_dragon = yes
						wound_dragon = yes
					}
					else = {
						wound_dragon = yes
					}
				}
				save_scope_as = wounded_dragon
				custom_tooltip = agot_filler_dragon.0002.wounded_dragon_tt
				# Free unbonded dragons
				if = {
					limit = {
						any_relation = {
							type = agot_dragon
							count = 0
						}
					}
					agot_dragon_flees_province = yes
				}
			}
		}
		if = {
			limit = {
				any_in_list = {
					variable = dragonpit_died_dragons
					count > 0
				}
			}
			add_character_flag = dragonpit_died
			every_in_list = {
				variable = dragonpit_died_dragons
				death = {
					death_reason = death_torn_to_pieces_by_mob
				}
			}
		}
		# TODO: Destroy dragonpit building - probably need Dylan to do this
	}

	option = {
		name = agot_filler_dragon.0002.a
		flavor = agot_filler_dragon.0002.a.f
		stress_impact = {
			compassionate = 40
			vengeful = -40
			wrathful = -20
			sadistic = -20
			just = -10
		}
	}

	option = {
		name = agot_filler_dragon.0002.b
		flavor = agot_filler_dragon.0002.b.f
		trigger = { # Only if compassionate OR no dragons were injured
			OR = {
				AND = {
					NOT = { has_character_flag = dragonpit_wounded }
					NOT = { has_character_flag = dragonpit_died }
				}
				has_trait = compassionate
			}
		}
		stress_impact = {
			vengeful = 40
			wrathful = 20
			sadistic = 20
			compassionate = -20
		}
	}

	after = {
		remove_character_flag = dragonpit_escaped
		remove_character_flag = dragonpit_wounded
		remove_character_flag = dragonpit_died
		remove_variable = dragonpit_escaped_dragons
		remove_variable = dragonpit_wounded_dragons
		remove_variable = dragonpit_died_dragons
	}
}

#########################################
# CHILD APPROACHES DRAGON (0003-0004)   #
# by: Sililex                           #
#########################################
# Non-dragonrider child approaches dragon and dies / gets burned
agot_filler_dragon.0003 = {
	hidden = yes
	cooldown = {
		years = 5
	}
	trigger = {
		has_character_flag = in_dragonpit
		location = {
			has_any_dragonpits = yes
			county.holder = {
				AND = {
					has_royal_court = yes
					amenity_level = { type = agot_dragonpit_amenities value <= 2 }
				}
				any_courtier = {
					is_ruler = no
					is_available = yes
					AND = {
						age >= 5
						age < 16
					}
					NOR = {
						has_trait = craven
						any_relation = {
							type = agot_dragon
							count > 0
						}
					}
				}
			}
		}
	}
	immediate = {
		save_scope_as = visited_dragon
		location.county.holder = {
			trigger_event = {
				id = agot_filler_dragon.0004
			}
		}
	}
}

agot_filler_dragon.0004 = {
	type = character_event
	title = agot_filler_dragon.0002.t
	desc = {
		first_valid = {
			triggered_desc = {
				trigger = {
					scope:dragon_investigating_child = { is_alive = yes }
				}
				desc = agot_filler_dragon.0004.desc.burned
			}
			desc = agot_filler_dragon.0004.desc.died
		}
	}
	theme = dragon
	left_portrait = {
		character = prev
		animation = worry
	}
	right_portrait = {
		character = scope:dragon_investigating_child
	}
	lower_right_portrait = {
		character = scope:visited_dragon
	}

	immediate = {
		every_courtier_or_guest = {
			limit = {
				is_ruler = no
				is_available = yes
				AND = {
					age >= 5
					age < 16
				}
				NOR = {
					has_trait = craven
					any_relation = {
						type = agot_dragon
						count > 0
					}
				}
				OR = { # Check for curious or brave children first
					has_trait = brave
					has_trait = curious
				}
			}
			save_scope_as = dragon_investigating_child
		}
		if = {
			limit = {
				NOT = { exists = scope:dragon_investigating_child }
			}
			every_courtier_or_guest = {
				limit = {
					is_ruler = no
					is_available = yes
					AND = {
						age >= 5
						age < 16
					}
					NOR = {
						has_trait = craven
						any_relation = {
							type = agot_dragon
							count > 0
						}
					}
				}
				save_scope_as = dragon_investigating_child
			}
		}
		scope:dragon_investigating_child = {
			random_list = {
				50 = {
					random_list = {
						50 = {
							death = {
								death_reason = death_dragon_ate
								killer = scope:visited_dragon
							}
						}
						50 = {
							add_trait = burned
							add_trait_xp = {
								trait = burned
								value = 100
							}
							death = {
								death_reason = death_dragon_fire
								killer = scope:visited_dragon
							}
						}
					}
				}
				50 = {
					scope:dragon_investigating_child = {
						add_trait = burned
						add_trait_xp = {
							trait = burned
							value = {
								integer_range = {
									min = 10
									max = 75
								}
							}
						}
					}
				}
			}
		}
	}

	option = { # Chain the dragon
		name = agot_filler_dragon.0004.a

		stress_impact = {
			just = -20
		}

		scope:visited_dragon = {
			add_character_modifier = {
				modifier = agot_chain_dragon_filler_modifier
				years = 1
			}
		}
	}

	option = { # Do nothing
		name = agot_filler_dragon.0004.b
		flavor = agot_filler_dragon.0004.b.f

		stress_impact = {
			just = 20
		}

		scope:dragon_investigating_child = {
			every_close_family_member = {
				limit  = {
					NOT = {
						this = root
					}
				}
				add_opinion = {
					modifier = did_not_punish_dragon_opinion
					target = ROOT
				}
			}
		}
	}
}

#########################################
# RIDER GETS MONEY FOR SHOW (0005-0006) #
# by: Sililex                           #
#########################################
# Dragonrider needs money and considers show
agot_filler_dragon.0005 = {
	hidden = yes
	cooldown = {
		years = 5
	}
	trigger = {
		exists = var:current_rider
		var:current_rider = {
			is_available_adult = yes
			is_ruler = yes
			debt_level >= 1 # Is in quite a bit of debt
		}
	}
	immediate = {
		var:current_rider = {
			trigger_event = {
				id = agot_filler_dragon.0006
			}
		}
	}
}

agot_filler_dragon.0006 = {
	type = character_event
	title = agot_filler_dragon.0006.t
	desc = agot_filler_dragon.0006.desc
	theme = dragon
	right_portrait = {
		character = root
		animation = worry
	}

	option = {
		name = agot_filler_dragon.0006.a
		flavor = agot_filler_dragon.0006.a.f

		add_prestige = minor_prestige_loss
		add_gold = medium_gold_value

		stress_impact = {
			greedy = medium_stress_impact_loss
			arrogant = medium_stress_impact_gain
		}
	}

	option = {
		name = agot_filler_dragon.0006.b
		flavor = agot_filler_dragon.0006.b.f
		stress_impact = {
			greedy = medium_stress_impact_gain
		}
	}
}

#########################################
# WILD DRAGON WORSHIP (0007-0011) #
# by: Sililex                           #
#########################################
# Wild dragon is being worshiped
agot_filler_dragon.0007 = {
	hidden = yes
	cooldown = {
		years = 5
	}
	trigger = {
		NOT = { has_character_flag = owned_dragon }
		age >= dragon_maturity_age
		var:lair ?= location # Dragon is home
		location.county = {
			NOT = { has_county_modifier = agot_worshiping_dragon }
			NOT = { has_county_modifier = agot_restricted_dragon_worship }
			NOT = { has_county_modifier = agot_dragon_worship_massacre }
			NOT = { has_county_modifier = agot_dragon_cult_gone_wrong }
			holder = {
				NOT = {
					any_courtier = { # No dragon owners get event - not really on theme
						has_trait = dragon
						has_character_flag = owned_dragon
					}
				}
			}
		}
	}
	immediate = {
		save_scope_as = worshiped_dragon
		location.county = {
			save_scope_as = worshiping_county
		}
		location.county.holder = {
			trigger_event = {
				id = agot_filler_dragon.0008
			}
		}
	}
}

agot_filler_dragon.0008 = {
	type = character_event
	title = agot_filler_dragon.0008.t
	desc = agot_filler_dragon.0008.desc
	theme = dragon
	right_portrait = {
		character = root
		animation = worry
	}
	override_background = {
		reference = council_chamber
	}

	immediate = {
		scope:worshiping_county = {
			set_local_variable = { # For loc tracking
				name = worshiped_dragon
				value = scope:worshiped_dragon
			}
			add_county_modifier = agot_worshiping_dragon
		}
	}

	option = { # Peasants have queer customs, this is just another
		name = agot_filler_dragon.0008.a
		flavor = agot_filler_dragon.0008.a.f

		stress_impact = {
			curious = minor_stress_impact_gain
			zealous = medium_stress_impact_gain
		}

		ai_chance = {
			base = 50
			modifier = {
				add = 20
				has_trait = arrogant
			}
			modifier = {
				add = 20
				has_trait = compassionate
			}
			modifier = {
				add = 10
				has_trait = just
			}
			ai_value_modifier = {
				ai_boldness = -1
			}
		}
	}

	option = { # This is heresy, we must stop it
		name = agot_filler_dragon.0008.b
		flavor = agot_filler_dragon.0008.b.f

		stress_impact = {
			zealous = minor_stress_impact_loss
			cynical = medium_stress_impact_gain
		}

		ai_chance = {
			base = 30
			modifier = {
				add = 20
				has_trait = zealous
			}
			modifier = {
				add = 20
				has_trait = wrathful
			}
			ai_value_modifier = {
				ai_boldness = 2
			}
		}

		scope:worshiping_county = {
			remove_county_modifier = agot_worshiping_dragon
			add_county_modifier = {
				modifier = agot_restricted_dragon_worship
				years = 2
			}
		}

		hidden_effect = {
			random_list = {
				95 = {}
				5 = { # DRAGON PEASANT REVOLT OMG
					trigger_event = {
						id = agot_filler_dragon.0009
						days = { 2 4 }
					}
				}
			}
		}
	}

	option = { # Perhaps I should attend a service?
		name = agot_filler_dragon.0008.c
		flavor = agot_filler_dragon.0008.c.f
		trigger = {
			age >= 12
		}

		stress_impact = {
			zealous = major_stress_impact_gain
			lifestyle_mystic = minor_stress_impact_loss
			fire_obsessed = medium_stress_impact_loss
			cynical = minor_stress_impact_loss
			curious = minor_stress_impact_loss
		}

		ai_chance = {
			base = 30
			modifier = {
				add = 20
				has_trait = cynical
			}
			modifier = {
				add = 20
				has_trait = curious
			}
			modifier = {
				add = -20
				has_trait = craven
			}
		}

		trigger_event = {
			id = agot_filler_dragon.0010
			days = { 2 4 }
		}
	}
}

# Dragon peasant revolt
agot_filler_dragon.0009 = {
	type = character_event
	title = agot_filler_dragon.0009.t
	desc = agot_filler_dragon.0009.desc
	theme = dragon
	left_portrait = {
		character = root
		animation = worry
		triggered_animation = {
			trigger = {
				NOT = { has_trait = craven }
				OR = {
					has_trait = wrathful
					has_trait = brave
				}
			}
			animation = anger
		}
	}
	right_portrait = {
		character = scope:peasant_leader
		animation = aggressive_sword
	}
	override_background = {
		reference = council_chamber
	}

	immediate = {
		hidden_effect = { # Do all the back end stuff
			scope:worshiping_county = { # Needed for character template
				save_scope_as = project_county
			}
			create_character = {
				template = peasant_leader_martial_character
				gender = male
				employer = root
				save_scope_as = peasant_leader
				after_creation = {
					add_trait = peasant_leader
					add_trait = lifestyle_mystic
					add_character_flag = dragon_cult_leader
					agot_tame_dragon = {
						TAMER = scope:peasant_leader
						DRAGON = scope:worshiped_dragon
					}
					add_gold = 100
				}
			}
			create_dynamic_title = {
				tier = duchy
				name = agot_filler_dragon.worshiping_rebels_title
			}
			create_title_and_vassal_change = {
				type = created
				save_scope_as = change
				add_claim_on_loss = no
			}
			scope:new_title = {
				set_capital_county = scope:worshiping_county
				set_landless_title = yes
				set_destroy_on_succession = yes
				set_delete_on_destroy = yes
				set_no_automatic_claims = yes
				set_definitive_form = yes
				set_can_be_named_after_dynasty = no
				change_title_holder = {
					holder = scope:peasant_leader
					change = scope:change
				}
			}
			resolve_title_and_vassal_change = scope:change
			scope:peasant_leader = {
				if = {
					limit = {
						scope:worshiped_dragon = {
							NOT = { is_courtier_of = scope:peasant_leader }
						}
					}
					add_courtier = scope:worshiped_dragon
				}
				start_war = {
					casus_belli = dragon_county_conquest_cb
					claimant = scope:peasant_leader
					target = root
					target_title = scope:worshiping_county
				}
				spawn_army = {
					location = scope:worshiping_county.title_province
					levies = { 100 1000 }
					inheritable = no
					uses_supply = no
					name = agot_filler_dragon.worshiping_rebels_army_name
				}
				every_army = {
					assign_commander = scope:peasant_leader
				}
			}
		}
		show_as_tooltip = { # Only show the war declaration though
			scope:peasant_leader = {
				start_war = {
					casus_belli = dragon_county_conquest_cb
					claimant = scope:peasant_leader
					target = root
					target_title = scope:worshiping_county
				}
			}
		}
	}

	option = { # Quickly men! To arms!
		name = agot_filler_dragon.0009.a
		flavor = agot_filler_dragon.0009.a.f

		stress_impact = {
			brave = minor_stress_impact_loss
			zealous = minor_stress_impact_loss
			craven = medium_stress_impact_gain
		}
	}
}

# Dragon worship service
agot_filler_dragon.0010 = {
	type = character_event
	title = agot_filler_dragon.0010.t
	desc = agot_filler_dragon.0010.desc
	theme = dragon
	right_portrait = {
		character = root
		animation = lantern
	}
	override_background = {
		reference = bp1_bonfire
	}


	option = { # Massacre the heritics!
		name = {
			trigger = {
				NOT = { has_trait = wrathful }
			}
			text = agot_filler_dragon.0010.a.wrathful
		}
		name = {
			trigger = {
				has_trait = zealous
			}
			text = agot_filler_dragon.0010.a.zealous
		}
		name = {
			trigger = {
				has_trait = craven
			}
			text = agot_filler_dragon.0010.a.craven
		}
		name = {
			trigger = {
				has_trait = sadistic
			}
			text = agot_filler_dragon.0010.a.sadistic
		}
		flavor = agot_filler_dragon.0010.a.f
		trigger = {
			OR = {
				has_trait = wrathful
				has_trait = zealous
				has_trait = craven
				has_trait = sadistic
			}
		}

		ai_chance = {
			base = 0
			modifier = {
				add = 30
				has_trait = sadistic
			}
			modifier = {
				add = 20
				has_trait = wrathful
			}
			modifier = {
				add = 20
				has_trait = zealous
			}
			modifier = {
				add = 10
				has_trait = callous
			}
			modifier = {
				add = -20
				has_trait = craven
			}
			modifier = {
				add = -20
				has_trait = compassionate
			}
			modifier = {
				add = -20
				has_trait = just
			}
		}

		add_character_flag = dragon_worship_massacre
	}

	option = { # I will not participate in this...ritual.
		name = agot_filler_dragon.0010.b
		flavor = agot_filler_dragon.0010.b.f

		stress_impact = {
			zealous = minor_stress_impact_loss
			lifestyle_mystic = medium_stress_impact_gain
			fire_obsessed = medium_stress_impact_gain
			cynical = minor_stress_impact_gain
			curious = minor_stress_impact_gain
		}

		ai_chance = {
			base = 10
			modifier = {
				add = 20
				has_trait = craven
			}
			modifier = {
				add = 20
				has_trait = greedy
			}
			modifier = {
				add = -20
				has_trait = curious
			}
		}

		add_character_flag = dragon_worship_watch
	}

	option = { # "Fascinating! I should add some of my own meat too!"
		name = agot_filler_dragon.0010.c
		flavor = agot_filler_dragon.0010.c.f

		stress_impact = {
			zealous = minor_stress_impact_gain
			lifestyle_mystic = medium_stress_impact_loss
			fire_obsessed = medium_stress_impact_loss
			cynical = minor_stress_impact_loss
			curious = minor_stress_impact_loss
		}

		ai_chance = {
			base = 10
			modifier = {
				add = 20
				has_trait = brave
			}
			modifier = {
				add = 20
				has_trait = curious
			}
			modifier = {
				add = 10
				has_trait = generous
			}
			modifier = {
				add = -10
				has_trait = gluttonous
			}
		}

		add_character_flag = dragon_worship_participate
	}

	after = {
		trigger_event = {
			id = agot_filler_dragon.0011
		}
	}
}

# Dragon worship aftermath
agot_filler_dragon.0011 = {
	type = character_event
	window = dragon_character_event
	title = agot_filler_dragon.0011.t
	desc = {
		first_valid = {
			triggered_desc = {
				trigger = {
					has_character_flag = dragon_worship_massacre
				}
				desc = agot_filler_dragon.0011.desc.massacre
			}
			triggered_desc = {
				trigger = {
					has_character_flag = dragon_worship_watch
					scope:worshiped_dragon = {
						has_character_flag = dragon_worship_ate
					}
				}
				desc = agot_filler_dragon.0011.desc.watch_ate
			}
			triggered_desc = {
				trigger = {
					has_character_flag = dragon_worship_watch
					scope:worshiped_dragon = {
						has_character_flag = dragon_worship_attacked
					}
				}
				desc = agot_filler_dragon.0011.desc.watch_attacked
			}
			triggered_desc = {
				trigger = {
					has_character_flag = dragon_worship_participate
					scope:worshiped_dragon = {
						has_character_flag = dragon_worship_ate
					}
				}
				desc = agot_filler_dragon.0011.desc.participate_ate
			}
			triggered_desc = {
				trigger = {
					has_character_flag = dragon_worship_participate
					scope:worshiped_dragon = {
						has_character_flag = dragon_worship_attacked
					}
				}
				desc = agot_filler_dragon.0011.desc.participate_attacked
			}
		}
	}
	theme = dragon
	left_portrait = {
		character = root
		animation = shock
		triggered_animation = {
			trigger = {
				has_character_flag = dragon_worship_massacre
				has_trait = sadistic
			}
			animation = lunatic
		}
		triggered_animation = {
			trigger = {
				has_character_flag = dragon_worship_participate
				scope:worshiped_dragon = {
					has_character_flag = dragon_worship_attacked
				}
			}
			animation = fear
		}
	}
	right_portrait = {
		character = scope:worshiped_dragon
		animation = dragon_main
		camera = camera_dragon_event_standing

		#Add this so dragon fits within event window
		outfit_tags = { linear_camera_zoom }
	}
	override_background = {
		reference = bp1_bonfire
	}

	immediate = {
		if = { # Massacred the peasants - no more worship
			limit = {
				has_character_flag = dragon_worship_massacre
			}
			scope:worshiping_county = {
				remove_county_modifier = agot_worshiping_dragon
				remove_county_modifier = agot_restricted_dragon_worship
				add_county_modifier = {
					modifier = agot_dragon_worship_massacre
					years = 2
				}
			}
		}
		else = { # Else need to check what happened
			scope:worshiped_dragon = { # What did the dragon do?
				random_list = {
					50 = {
						modifier = {
							add = 20
							has_trait = dragon_friendly
						}
						modifier = {
							add = 20
							has_trait = dragon_skittish
						}
						modifier = {
							add = 10
							has_trait = dragon_accepting
						}
						modifier = {
							add = 10
							has_trait = dragon_calculating
						}
						modifier = {
							add = 10
							has_trait = dragon_cooperative
						}
						add_character_flag = dragon_worship_ate
					}
					50 = {
						modifier = {
							add = 20
							has_trait = dragon_aggressive
						}
						modifier = {
							add = 20
							has_trait = dragon_bloodthirsty
						}
						modifier = {
							add = 10
							has_trait = dragon_defiant
						}
						modifier = {
							add = 10
							has_trait = dragon_impulsive
						}
						modifier = {
							add = 10
							has_trait = dragon_solitary
						}
						add_character_flag = dragon_worship_attacked
					}
				}
			}
			if = {
				limit = { # I watched, dragon attacked
					has_character_flag = dragon_worship_watch
					scope:worshiped_dragon = {
						has_character_flag = dragon_worship_attacked
					}
				}
				scope:worshiping_county = {
					remove_county_modifier = agot_worshiping_dragon
					remove_county_modifier = agot_restricted_dragon_worship
					add_county_modifier = {
						modifier = agot_dragon_cult_gone_wrong
						years = 2
					}
				}
			}
			else_if = {
				limit = { # I watched, dragon ate
					has_character_flag = dragon_worship_watch
					scope:worshiped_dragon = {
						has_character_flag = dragon_worship_ate
					}
				}
				stress_impact = {
					lifestyle_mystic = minor_stress_impact_loss
				}
			}
			else_if = {
				limit = { # I participated, dragon attacked
					has_character_flag = dragon_worship_participate
					scope:worshiped_dragon = {
						has_character_flag = dragon_worship_attacked
					}
				}
				show_as_tooltip = {
					death = {
						killer = scope:worshiped_dragon
						death_reason = death_dragon_ate
					}
				}
				scope:worshiping_county = {
					remove_county_modifier = agot_worshiping_dragon
					remove_county_modifier = agot_restricted_dragon_worship
					add_county_modifier = {
						modifier = agot_dragon_cult_gone_wrong
						years = 2
					}
				}
			}
			else_if = {
				limit = { # I participated, dragon ate
					has_character_flag = dragon_worship_participate
					scope:worshiped_dragon = {
						has_character_flag = dragon_worship_ate
					}
				}
				add_prestige = medium_prestige_gain
				stress_impact = {
					lifestyle_mystic = minor_stress_impact_loss
				}
			}
		}
	}

	option = { # Witnessing the massacre aftermath
		name = {
			trigger = {
				NOT = { has_trait = sadistic }
			}
			text = agot_filler_dragon.0011.a
		}
		name = {
			trigger = {
				has_trait = sadistic
			}
			text = agot_filler_dragon.0011.a.sadistic
		}
		flavor = agot_filler_dragon.0011.a.f
		trigger = {
			has_character_flag = dragon_worship_massacre
		}

		stress_impact = {
			compassionate = medium_stress_impact_gain
			sadistic = medium_stress_impact_loss
			wrathful = minor_stress_impact_loss
		}
	}

	option = { # Watched the dragon eat
		name = agot_filler_dragon.0011.b
		flavor = agot_filler_dragon.0011.b.f
		trigger = {
			has_character_flag = dragon_worship_watch
			scope:worshiped_dragon = {
				has_character_flag = dragon_worship_ate
			}
		}
		stress_impact = {
			brave = minor_stress_impact_gain
			sadistic = minor_stress_impact_gain
		}
	}

	option = { # Watched the dragon attack
		name = agot_filler_dragon.0011.c
		flavor = agot_filler_dragon.0011.c.f
		trigger = {
			has_character_flag = dragon_worship_watch
			scope:worshiped_dragon = {
				has_character_flag = dragon_worship_attacked
			}
		}

		stress_impact = {
			compassionate = medium_stress_impact_gain
			paranoid = medium_stress_impact_loss
			sadistic = medium_stress_impact_loss
			wrathful = minor_stress_impact_loss
		}
	}

	option = { # Participated in the ritual
		name = agot_filler_dragon.0011.d
		flavor = agot_filler_dragon.0011.d.f
		trigger = {
			has_character_flag = dragon_worship_participate
			scope:worshiped_dragon = {
				has_character_flag = dragon_worship_ate
			}
		}

		stress_impact = {
			brave = minor_stress_impact_loss
		}
	}

	option = { # Was eaten by the dragon
		name = agot_filler_dragon.0011.e
		flavor = agot_filler_dragon.0011.e.f
		trigger = {
			has_character_flag = dragon_worship_participate
			scope:worshiped_dragon = {
				has_character_flag = dragon_worship_attacked
			}
		}
		hidden_effect = { # Resolved here to let player see
			death = {
				death_reason = death_dragon_ate
				killer = scope:worshiped_dragon
			}
		}
	}

	after = { # Remove flags
		remove_character_flag = dragon_worship_massacre
		remove_character_flag = dragon_worship_watch
		remove_character_flag = dragon_worship_participate
		scope:worshiped_dragon = {
			remove_character_flag = dragon_worship_ate
			remove_character_flag = dragon_worship_attacked
		}
	}
}

#########################################
# RIDER STRESS TRAIT EVENTS (0012-0039) #
# by: Sililex                           #
#########################################
# Ridden dragon stress trait events - Comfort eater
agot_filler_dragon.0012 = {
	hidden = yes
	cooldown = {
		years = 5
	}
	trigger = {
		has_character_flag = owned_dragon
		exists = var:current_rider
		age >= dragon_maturity_age
		var:current_rider = {
			is_available_adult = yes
			has_trait = comfort_eater
		}
	}
	immediate = {
		var:current_rider = {
			trigger_event = agot_filler_dragon.0013
		}
	}
}

agot_filler_dragon.0013 = { # Eating, wonders if they should give dragon food
	type = character_event
	title = agot_filler_dragon.0013.t
	desc = agot_filler_dragon.0013.desc
	theme = dragon
	right_portrait = {
		character = root
		animation = drink
	}
	lower_left_portrait = {
		character = var:current_dragon
	}
	override_background = {
		reference = feast
	}

	immediate = {
		var:current_dragon = {
			save_scope_as = dragon # For loc
		}
	}

	option = { # My feast, my food
		name = agot_filler_dragon.0013.a
		flavor = agot_filler_dragon.0013.a.f
		ai_chance = {
			base = 50
			modifier = {
				add = 100
				stress_level >= 1
			}
		}
		stress_impact = {
			comfort_eater = medium_stress_impact_loss
		}
	}

	option = { # I should share
		name = agot_filler_dragon.0013.b
		flavor = agot_filler_dragon.0013.b.f
		ai_chance = {
			base = 50
			modifier = {
				add = 100
				has_trait = compassionate
			}
		}
		if = {
			limit = {
				var:current_dragon = { has_trait = dragon_voracious }
			}
			custom_tooltip = agot_filler_dragon.0013.b.tt_gluttonous
			add_trait_xp = {
				trait = dragonrider
				track = dragon_bond
				value = 15
			}
		}
		else_if = {
			limit = {
				var:current_dragon = { has_trait = dragon_restrained }
			}
			custom_tooltip = agot_filler_dragon.0013.b.tt_temperate
			add_trait_xp = {
				trait = dragonrider
				track = dragon_bond
				value = 2
			}
		}
		else = {
			custom_tooltip = agot_filler_dragon.0013.b.tt
			add_trait_xp = {
				trait = dragonrider
				track = dragon_bond
				value = 10
			}
		}
		stress_impact = {
			comfort_eater = medium_stress_impact_gain
		}
	}
}

# Ridden dragon stress trait events - Contrite
agot_filler_dragon.0014 = {
	hidden = yes
	cooldown = {
		years = 5
	}
	trigger = {
		has_character_flag = owned_dragon
		exists = var:current_rider
		age >= dragon_maturity_age
		var:current_rider = {
			is_available_adult = yes
			has_trait = contrite
			any_courtier_or_guest = {
				NOT = { this = prev }
				is_available_healthy_ai_adult = yes
				any_secret = {
					secret_type = secret_lover
					secret_target = {
						is_available_healthy_ai_adult = yes
					}
					is_blackmailable_secret_trigger = { BLACKMAILER = root PARTICIPANT = prev }
				}
			}
		}
	}
	immediate = {
		var:current_rider = {
			trigger_event = agot_filler_dragon.0015
		}
	}
}

agot_filler_dragon.0015 = { # Contrite finds out lover secret, wonders if they should tell
	type = character_event
	title = agot_filler_dragon.0015.t
	desc = agot_filler_dragon.0015.desc
	theme = dragon
	lower_left_portrait = {
		character = scope:court_lover
	}
	lower_center_portrait = {
		character = scope:court_lover_partner
	}
	right_portrait = {
		character = root
		animation = stress
	}
	lower_right_portrait = {
		character = var:current_dragon
	}
	override_background = {
		reference = feast
	}

	immediate = {
		var:current_dragon = {
			save_scope_as = dragon # For loc
		}
		random_courtier_or_guest = {
			limit = {
				NOT = { this = root }
				is_available_healthy_ai_adult = yes
				any_secret = {
					secret_type = secret_lover
					secret_target = {
						is_available_healthy_ai_adult = yes
					}
					is_blackmailable_secret_trigger = { BLACKMAILER = root PARTICIPANT = prev }
				}
			}
			random_secret = {
				limit = {
					secret_type = secret_lover
					is_blackmailable_secret_trigger = { BLACKMAILER = root PARTICIPANT = prev }
				}
				save_scope_as = secret
			}
			scope:secret = {
				secret_owner = { save_scope_as = court_lover }
				secret_target = { save_scope_as = court_lover_partner }
			}
		}
		scope:secret = {
			reveal_to = root
		}
	}

	option = { # Of course, I have to tell the court!
		name = agot_filler_dragon.0015.a
		ai_chance = {
			base = 50
			modifier = {
				add = 100
				has_trait = sadistic
			}
			modifier = {
				add = 100
				stress_level >= 1
			}
			modifier = {
				add = ai_honor
			}
			modifier = {
				factor = 0
				OR = {
					is_parent_of = scope:court_lover
					is_parent_of = scope:court_lover_partner
					is_child_of = scope:court_lover
					is_child_of = scope:court_lover_partner
					is_sibling_of = scope:court_lover
					is_sibling_of = scope:court_lover_partner
					has_relation_friend = scope:court_lover
					has_relation_friend = scope:court_lover_partner
					has_relation_best_friend = scope:court_lover
					has_relation_best_friend = scope:court_lover_partner
				}
			}
		}
		stress_impact = {
			contrite = medium_stress_impact_loss
		}
		scope:secret = {
			expose_secret = root
		}
	}

	option = { # I can use this...
		name = agot_filler_dragon.0015.b
		ai_chance = {
			base = 50
			modifier = {
				add = 100
				has_trait = ambitious
			}
			modifier = {
				factor = 0.5
				OR = {
					is_parent_of = scope:court_lover
					is_parent_of = scope:court_lover_partner
					is_child_of = scope:court_lover
					is_child_of = scope:court_lover_partner
					is_sibling_of = scope:court_lover
					is_sibling_of = scope:court_lover_partner
					has_relation_friend = scope:court_lover
					has_relation_friend = scope:court_lover_partner
					has_relation_best_friend = scope:court_lover
					has_relation_best_friend = scope:court_lover_partner
				}
			}
		}
		stress_impact = {
			contrite = medium_stress_impact_gain
		}
		blackmail_target_with_secret_effect = {
			SECRET = scope:secret
			TARGET = scope:court_lover
		}
	}

	option = { # I shant
		name = agot_filler_dragon.0015.c
		ai_chance = {
			base = 50
			modifier = {
				add = 100
				has_trait = compassionate
			}
			opinion_modifier = {
				opinion_target = scope:court_lover
				who = root
				multiplier = 0.5
			}
			opinion_modifier = {
				opinion_target = scope:court_lover_partner
				who = root
				multiplier = 0.5
			}
		}
		stress_impact = {
			contrite = medium_stress_impact_gain
		}
	}
}

# Ridden dragon stress trait events - Drunkard
agot_filler_dragon.0016 = {
	hidden = yes
	cooldown = {
		years = 5
	}
	trigger = {
		has_character_flag = owned_dragon
		exists = var:current_rider
		age >= dragon_maturity_age
		var:current_rider = {
			is_available_adult = yes
			has_trait = drunkard
		}
	}
	immediate = {
		var:current_rider = {
			trigger_event = agot_filler_dragon.0017
		}
	}
}

agot_filler_dragon.0017 = { # Drunkard promised dragon ride
	type = character_event
	title = agot_filler_dragon.0017.t
	desc = agot_filler_dragon.0017.desc
	theme = dragon
	left_portrait = {
		character = scope:courtier
		animation = admiration
	}
	right_portrait = {
		character = root
		animation = sick
	}
	lower_right_portrait = {
		character = var:current_dragon
	}
	override_background = {
		reference = feast
	}

	immediate = {
		var:current_dragon = {
			save_scope_as = dragon # For loc
		}
		random_courtier = {
			limit = {
				is_available_adult = yes
				NOT = { has_trait = dragonrider }
				NOT = { has_relation_rival = root }
				NOT = { has_trait = temperate }
			}
			save_scope_as = courtier
		}
	}

	option = { # Later maybe, my head is killing me
		name = agot_filler_dragon.0017.a
		flavor = agot_filler_dragon.0017.a.f
		ai_chance = {
			base = 50
			modifier = {
				add = 100
				has_trait = lazy
			}
		}
		scope:courtier = {
			add_opinion = {
				modifier = refused_me_dragon_ride
				target = root
			}
		}
		stress_impact = {
			brave = minor_stress_impact_gain
			just = medium_stress_impact_gain
		}
	}

	option = { # I will keep my promise
		name = agot_filler_dragon.0017.b
		flavor = agot_filler_dragon.0017.b.f
		ai_chance = {
			base = 50
			modifier = {
				add = 100
				has_trait = just
			}
			modifier = {
				add = 100
				has_trait = brave
			}
			modifier = {
				add = -100
				stress_level >= 1
			}
		}
		add_stress = medium_stress_gain
		random_list = {
			95 = {
				desc = agot_filler_dragon.0017.b.live
				scope:courtier = {
					add_opinion = {
						modifier = let_me_dragon_ride
						target = root
					}
				}
			}
			5 = {
				desc = agot_filler_dragon.0017.b.death
				scope:courtier = {
					death = {
						death_reason = death_fell_from_other_dragon
					}
				}
				death = {
					death_reason = death_fell_from_dragon
				}
			}
		}
	}
}

# Ridden dragon stress trait events - Flagellant
agot_filler_dragon.0018 = {
	hidden = yes
	cooldown = {
		years = 5
	}
	trigger = {
		has_character_flag = owned_dragon
		exists = var:current_rider
		age >= dragon_maturity_age
		var:current_rider = {
			is_available_adult = yes
			has_trait = flagellant
		}
	}
	immediate = {
		var:current_rider = {
			trigger_event = agot_filler_dragon.0019
		}
	}
}

agot_filler_dragon.0019 = { # Flagellant rider wants to use dragon
	type = character_event
	title = agot_filler_dragon.0019.t
	desc = agot_filler_dragon.0019.desc
	theme = dragon
	right_portrait = {
		character = root
		animation = ecstasy
	}
	lower_right_portrait = {
		character = var:current_dragon
	}

	immediate = {
		var:current_dragon = {
			save_scope_as = dragon # For loc
		}
	}

	option = { # Dragonfire
		name = agot_filler_dragon.0019.a
		flavor = agot_filler_dragon.0019.a.f
		ai_chance = {
			base = 10
			modifier = {
				add = 15
				has_trait = brave
			}
		}
		random_list = {
			30 = {}
			20 = {
				change_trait_rank = {
					trait = wounded
					rank = 1
					max = 3
				}
			}
			20 = {
				change_trait_rank = {
					trait = wounded
					rank = 1
					max = 3
				}
				add_trait = burned
				add_trait_xp = {
					trait = burned
					value = {
						integer_range = {
							min = 25
							max = 50
						}
					}
				}
			}
			10 = {
				add_trait = burned
				add_trait_xp = {
					trait = burned
					value = 100
				}
				death = {
					death_reason = death_dragon_fire
					killer = var:current_dragon
				}
			}
		}
		stress_impact = {
			flagellant = major_stress_impact_loss
			brave = minor_stress_impact_loss
		}
	}

	option = { # Dragon claws!
		name = agot_filler_dragon.0019.b
		flavor = agot_filler_dragon.0019.b.f
		ai_chance = {
			base = 40
			modifier = {
				add = -15
				has_trait = brave
			}
		}
		random_list = {
			50 = {}
			45 = {
				change_trait_rank = {
					trait = wounded
					rank = 1
					max = 3
				}
			}
			5 = {
				death = {
					death_reason = death_dragon
					killer = var:current_dragon
				}
			}
		}
		stress_impact = {
			flagellant = medium_stress_impact_loss
		}
	}

	option = { # This is crazy!
		name = agot_filler_dragon.0019.c
		flavor = agot_filler_dragon.0019.c.f
		ai_chance = {
			base = 50
			modifier = {
				add = -100
				stress_level >= 1
			}
		}
		stress_impact = {
			flagellant = medium_stress_impact_gain
			brave = minor_stress_impact_gain
		}
	}
}

# Ridden dragon stress trait events - Improvident
agot_filler_dragon.0020 = {
	hidden = yes
	cooldown = {
		years = 5
	}
	trigger = {
		has_character_flag = owned_dragon
		exists = var:current_rider
		age >= dragon_maturity_age
		var:current_rider = {
			is_available_adult = yes
			has_trait = improvident
		}
	}
	immediate = {
		var:current_rider = {
			trigger_event = agot_filler_dragon.0021
		}
	}
}

agot_filler_dragon.0021 = { # Improvident rider wants to use dragon to give money
	type = character_event
	title = agot_filler_dragon.0021.t
	desc = agot_filler_dragon.0021.desc
	theme = dragon
	right_portrait = {
		character = root
		animation = worry
	}
	lower_right_portrait = {
		character = var:current_dragon
	}
	override_background = {
		reference = study
	}

	immediate = {
		var:current_dragon = {
			save_scope_as = dragon # For loc
		}
	}

	option = { # I will take the risk
		name = agot_filler_dragon.0021.a
		flavor = agot_filler_dragon.0021.a.f
		ai_chance = {
			base = 50
			modifier = {
				add = 100
				stress_level >= 1
			}
			modifier = {
				add = 100
				has_trait = eccentric
			}
		}
		stress_impact = {
			improvident = medium_stress_impact_loss
			greedy = minor_stress_impact_gain
			eccentric = major_stress_impact_loss
		}
		remove_short_term_gold = minor_gold_value
		capital_county = {
			random_list = {
				50 = {
					desc = agot_filler_dragon.0021.a.bad
					add_county_modifier = {
						modifier = agot_dropping_coins_from_dragon
						months = 6
					}
				}
				50 = {
					desc = agot_filler_dragon.0021.a.good
					add_county_modifier = {
						modifier = agot_raining_money
						months = 6
					}
					root = {
						add_prestige = medium_prestige_gain
					}
				}
			}
		}
	}

	option = { # I will not risk it
		name = agot_filler_dragon.0021.b
		flavor = agot_filler_dragon.0021.b.f
		ai_chance = {
			base = 50
			modifier = {
				add = -100
				stress_level >= 1
			}
			modifier = {
				add = -100
				has_trait = greedy
			}
		}
		stress_impact = {
			generous = medium_stress_impact_gain
			eccentric = minor_stress_impact_gain
		}
	}
}

# Ridden dragon stress trait events - Inappetetic
agot_filler_dragon.0022 = {
	hidden = yes
	cooldown = {
		years = 5
	}
	trigger = {
		has_character_flag = owned_dragon
		exists = var:current_rider
		age >= dragon_maturity_age
		var:current_rider = {
			is_available_adult = yes
			has_trait = inappetetic
		}
	}
	immediate = {
		var:current_rider = {
			trigger_event = agot_filler_dragon.0023
		}
	}
}

agot_filler_dragon.0023 = { # Inappetetic rider faints as they climb
	type = character_event
	window = dragon_character_event
	title = agot_filler_dragon.0023.t
	desc = agot_filler_dragon.0023.desc
	theme = dragon
	left_portrait = {
		character = root
		animation = worry
	}
	right_portrait = {
		character = var:current_dragon
		animation = dragon_main
		camera = camera_dragon_event_standing

		#Add this so dragon fits within event window
		outfit_tags = { linear_camera_zoom }
	}

	immediate = {
		var:current_dragon = {
			save_scope_as = dragon # For loc
		}
	}

	option = { # I really must try to eat
		name = agot_filler_dragon.0023.a
		flavor = agot_filler_dragon.0023.a.f
		ai_chance = {
			base = 100
			modifier = {
				add = -100
				stress_level >= 1
			}
		}
		add_stress = major_stress_gain
		random_list = {
			50 = {}
			50 = {
				modifier = {
					add = 100
					has_trait = diligent
				}
				remove_trait = inappetetic
			}
		}
	}

	option = { # This is fine
		name = agot_filler_dragon.0023.b
		flavor = agot_filler_dragon.0023.b.f
		ai_chance = {
			base = 0
			modifier = {
				add = 100
				stress_level >= 1
			}
		}
		add_stress = medium_stress_gain
	}
}

# Ridden dragon stress trait events - Irritable
agot_filler_dragon.0024 = {
	hidden = yes
	cooldown = {
		years = 5
	}
	trigger = {
		has_character_flag = owned_dragon
		exists = var:current_rider
		age >= dragon_maturity_age
		var:current_rider = {
			is_available_adult = yes
			has_trait = irritable
			is_landed = yes
			highest_held_title_tier >= tier_county
		}
	}
	immediate = {
		var:current_rider = {
			trigger_event = agot_filler_dragon.0025
		}
	}
}

agot_filler_dragon.0025 = { # Irritable rider wants to burn neighboring holding
	type = character_event
	title = agot_filler_dragon.0025.t
	desc = agot_filler_dragon.0025.desc
	theme = dragon
	right_portrait = {
		character = root
		animation = rage
	}
	lower_right_portrait = {
		character = var:current_dragon
	}
	override_background = {
		reference = agot_open_sky
	}
	trigger = {
		capital_county = {
			any_title_to_title_neighboring_and_across_water_county = {
				NOT = { holder = root }
			}
		}
	}

	immediate = {
		var:current_dragon = {
			save_scope_as = dragon # For loc
		}
		capital_county = {
			random_title_to_title_neighboring_and_across_water_county = {
				limit = { NOT = { holder = root }}
				save_scope_as = target_county
			}
		}
	}

	option = { # Burn the holding
		name = agot_filler_dragon.0025.a
		flavor = agot_filler_dragon.0025.a.f
		ai_chance = {
			base = 50
			modifier = {
				add = 100
				stress_level >= 1
			}
			modifier = {
				add = -100
				has_trait = compassionate
			}
		}
		scope:target_county= {
			agot_dragon_damage_county_effect = yes
			# Opinion effect
			# Firstly, owner of county + liege
			if = {
				limit = {
					holder = holder.top_liege # Is independent
				}
				holder = {
					add_opinion = {
						target = root
						modifier = burned_my_holding
					}
				}
			}
			else_if = {
				limit = {
					holder.liege = holder.top_liege # Has one direct liege
				}
				holder = {
					add_opinion = {
						target = root
						modifier = burned_my_holding
					}
				}
				holder.liege = {
					if = {
						limit = { NOT = { this = root } }
						add_opinion = {
							target = root
							modifier = burned_my_vassals_holding
						}
					}
				}
			}
			else_if = {
				limit = {
					holder.liege.liege = holder.top_liege # Has two direct lieges
				}
				holder = {
					add_opinion = {
						target = root
						modifier = burned_my_holding
					}
				}
				holder.liege = {
					if = {
						limit = { NOT = { this = root } }
						add_opinion = {
							target = root
							modifier = burned_my_vassals_holding
						}
					}
				}
				holder.liege.liege = {
					if = {
						limit = { NOT = { this = root } }
						add_opinion = {
							target = root
							modifier = burned_my_vassals_holding
						}
					}
				}
			}
			else = { # has three direct lieges - thus is count and can't go lower
				holder = {
					add_opinion = {
						target = root
						modifier = burned_my_holding
					}
				}
				holder.liege = {
					if = {
						limit = { NOT = { this = root } }
						add_opinion = {
							target = root
							modifier = burned_my_vassals_holding
						}
					}
				}
				holder.liege.liege = {
					if = {
						limit = { NOT = { this = root } }
						add_opinion = {
							target = root
							modifier = burned_my_vassals_holding
						}
					}
				}
				holder.liege.liege.liege = {
					if = {
						limit = { NOT = { this = root } }
						add_opinion = {
							target = root
							modifier = burned_my_vassals_holding
						}
					}
				}
			}
		}
		stress_impact = {
			base = medium_stress_impact_loss
			sadistic = medium_stress_impact_loss
		}
	}

	option = { # I will resist
		name = agot_filler_dragon.0025.b
		ai_chance = {
			base = 50
			modifier = {
				add = -100
				stress_level >= 1
			}
			modifier = {
				add = 100
				has_trait = compassionate
			}
		}
		stress_impact = {
			base = medium_stress_impact_gain
			sadistic = medium_stress_impact_gain
		}
	}
}

# Ridden dragon stress trait events - Profligate
agot_filler_dragon.0026 = {
	hidden = yes
	cooldown = {
		years = 5
	}
	trigger = {
		has_character_flag = owned_dragon
		exists = var:current_rider
		age >= dragon_maturity_age
		var:current_rider = {
			NOT = { has_character_flag = has_grand_dragon_ride_procession }
			is_available_adult = yes
			has_trait = profligate
		}
	}
	immediate = {
		var:current_rider = {
			trigger_event = agot_filler_dragon.0027
		}
	}
}

agot_filler_dragon.0027 = { # Profligate wants more fanfair
	type = character_event
	title = agot_filler_dragon.0027.t
	desc = agot_filler_dragon.0027.desc
	theme = dragon
	right_portrait = {
		character = root
		animation = worry
	}
	lower_right_portrait = {
		character = var:current_dragon
	}

	immediate = {
		var:current_dragon = {
			save_scope_as = dragon # For loc
		}
	}

	option = { # I will have a grand procession!
		name = agot_filler_dragon.0027.a
		ai_chance = {
			base = 50
			modifier = {
				add = 100
				stress_level >= 1
			}
			modifier = {
				add = 100
				gold > massive_gold_value
			}
		}
		stress_impact = {
			base = medium_stress_impact_loss
			fashionable = medium_stress_impact_loss
			greedy = medium_stress_impact_gain
			uncouth = minor_stress_impact_gain
		}
		remove_short_term_gold = medium_gold_value
		custom_tooltip = agot_filler_dragon.0027.a.tt
		add_character_flag = has_grand_dragon_ride_procession
	}

	option = { # Too expensive
		name = agot_filler_dragon.0027.b
		ai_chance = {
			base = 50
			modifier = {
				add = -100
				has_trait = greedy
			}
			modifier = {
				add = -100
				gold < medium_gold_value
			}
		}
		stress_impact = {
			base = medium_stress_impact_gain
			fashionable = medium_stress_impact_gain
			greedy = medium_stress_impact_loss
			uncouth = minor_stress_impact_loss
		}
	}
}

# Ridden dragon stress trait events - Rakish
agot_filler_dragon.0028 = {
	hidden = yes
	cooldown = {
		years = 5
	}
	trigger = {
		has_character_flag = owned_dragon
		exists = var:current_rider
		age >= dragon_maturity_age
		var:current_rider = {
			is_available_adult = yes
			NOT = { has_sexuality = asexual }
			NOT = { has_sexuality = none }
			has_trait = rakish
		}
	}
	immediate = {
		var:current_rider = {
			trigger_event = agot_filler_dragon.0029
		}
	}
}

agot_filler_dragon.0029 = { # Rakish is asked to take prostitute with them
	type = character_event
	title = agot_filler_dragon.0029.t
	desc = agot_filler_dragon.0029.desc
	theme = dragon
	right_portrait = {
		character = root
		animation = drink
	}
	left_portrait = {
		character = scope:prostitute_character
		animation = flirtation_left
	}
	lower_right_portrait = {
		character = var:current_dragon
	}
	override_background = {
		reference = tavern
	}

	immediate = {
		var:current_dragon = {
			save_scope_as = dragon # For loc
		}
		create_character = {
			template = brothel_character_template
			location = root.location
			save_scope_as = prostitute_character
			after_creation = {
				if = {
					limit = {
						has_trait = paranoid
					}
					remove_trait = paranoid
					add_trait = trusting
				}
				if = {
					limit = {
						has_trait = craven
					}
					remove_trait = craven
					add_trait = brave
				}
			}
		}
	}

	option = { # I will take them
		name = agot_filler_dragon.0029.a
		flavor = agot_filler_dragon.0029.a.f
		ai_chance = {
			base = 50
			modifier = {
				add = 100
				has_trait = brave
			}
			modifier = {
				add = 100
				stress_level >= 1
			}
		}
		random_list = {
			75 = {
				desc = agot_filler_dragon.0029.a.good
				agot_add_dragon_training_xp = { VALUE = 5 }
				scope:prostitute_character = {
					add_opinion = {
						modifier = let_me_dragon_ride
						target = root
					}
					had_sex_with_effect = {
						CHARACTER = root
						PREGNANCY_CHANCE = seduce_pregnancy_chance
					}
				}
				stress_impact = {
					base = massive_stress_impact_loss
					lustful = massive_stress_impact_loss
					brave = minor_stress_impact_loss
					craven = minor_stress_impact_gain
				}
			}
			25 = {
				desc = agot_filler_dragon.0029.a.bad
				random_list = {
					33 = {
						scope:prostitute_character = {
							death = {
								death_reason = death_fell_from_other_dragon
							}
						}
						death = {
							death_reason = death_fell_from_dragon
						}
					}
					33 = {
						scope:prostitute_character = {
							death = {
								death_reason = death_fell_from_other_dragon
							}
						}
					}
					33 = {
						death = {
							death_reason = death_fell_from_dragon
						}
					}
				}
			}
		}
	}

	option = { # You want to do what now?
		name = agot_filler_dragon.0029.b
		flavor = agot_filler_dragon.0029.b.f
		ai_chance = {
			base = 50
			modifier = {
				add = 100
				has_trait = craven
			}
		}
		stress_impact = {
			base = minor_stress_impact_gain
			brave = minor_stress_impact_gain
			lustful = minor_stress_impact_gain
			craven = minor_stress_impact_loss
		}
	}
}

# Ridden dragon stress trait events - Reclusive
agot_filler_dragon.0030 = {
	hidden = yes
	cooldown = {
		years = 5
	}
	trigger = {
		has_character_flag = owned_dragon
		exists = var:current_rider
		age >= dragon_maturity_age
		var:current_rider = {
			is_available_adult = yes
			has_trait = reclusive
		}
	}
	immediate = {
		var:current_rider = {
			trigger_event = agot_filler_dragon.0031
		}
	}
}

agot_filler_dragon.0031 = { # Reclusive contemplates giving up dragonriding
	type = character_event
	title = agot_filler_dragon.0031.t
	desc = agot_filler_dragon.0031.desc
	theme = dragon
	right_portrait = {
		character = root
		animation = worry
	}
	lower_right_portrait = {
		character = var:current_dragon
	}
	override_background = {
		reference = bedchamber
	}
	trigger = {
		NOT = { has_character_flag = cant_go_dragonriding }
	}

	immediate = {
		var:current_dragon = {
			save_scope_as = dragon # For loc
		}
	}

	option = { # I'll never ride again
		name = agot_filler_dragon.0031.a
		custom_tooltip = agot_filler_dragon.0031.a.tt
		ai_chance = {
			base = 25
		}
		add_character_flag = cant_go_dragonriding
		add_stress = monumental_stress_loss
	}

	option = { # I must resist
		name = agot_filler_dragon.0031.b
		custom_tooltip = agot_filler_dragon.0031.b.tt
		ai_chance = {
			base = 75
			modifier = {
				add = 100
				stress_level < 2
			}
		}
		stress_impact = {
			base = medium_stress_impact_gain
			gregarious = minor_stress_impact_loss
		}
	}
}

# Ridden dragon stress trait events - Athletic
agot_filler_dragon.0032 = {
	hidden = yes
	cooldown = {
		years = 5
	}
	trigger = {
		has_character_flag = owned_dragon
		exists = var:current_rider
		age >= dragon_maturity_age
		var:current_rider = {
			is_available_adult = yes
			has_trait = athletic
		}
	}
	immediate = {
		var:current_rider = {
			trigger_event = agot_filler_dragon.0033
		}
	}
}

agot_filler_dragon.0033 = { # Athletic contemplates race
	type = character_event
	title = agot_filler_dragon.0033.t
	desc = agot_filler_dragon.0033.desc
	theme = dragon
	right_portrait = {
		character = root
		animation = worry
	}
	lower_right_portrait = {
		character = var:current_dragon
	}
	override_background = {
		reference = courtyard
	}

	immediate = {
		var:current_dragon = {
			save_scope_as = dragon # For loc
		}
	}

	option = {
		name = agot_filler_dragon.0033.a
		ai_chance = {
			base = 50
			modifier = {
				add = 50
				has_trait = diligent
			}
		}
		random_list = {
			50 = {
				desc = agot_filler_dragon.0033.a.good
				add_stress = medium_stress_loss
				add_trait_xp = {
					trait = dragonrider
					track = dragon_bond
					value = 10
				}
				modifier = {
					add = 50
					var:current_dragon = {
						has_trait = dragon_calculating
					}
				}
			}
			50 = {
				desc = agot_filler_dragon.0033.a.bad
				add_stress = minor_stress_gain
				modifier = {
					add = 50
					var:current_dragon = {
						has_trait = dragon_impulsive
					}
				}
			}
		}
	}

	option = {
		name = agot_filler_dragon.0033.b
		ai_chance = {
			base = 50
			modifier = {
				add = 50
				has_trait = lazy
			}
		}
		add_stress = medium_stress_gain
	}
}

# Ridden dragon stress trait events - Confider
agot_filler_dragon.0034 = {
	hidden = yes
	cooldown = {
		years = 5
	}
	trigger = {
		has_character_flag = owned_dragon
		exists = var:current_rider
		age >= dragon_maturity_age
		var:current_rider = {
			is_available_adult = yes
			has_trait = confider
		}
	}
	immediate = {
		var:current_rider = {
			trigger_event = agot_filler_dragon.0035
		}
	}
}


agot_filler_dragon.0035 = { # Confider talks to dragon
	type = character_event
	window = dragon_character_event
	title = agot_filler_dragon.0035.t
	desc = agot_filler_dragon.0035.desc
	theme = dragon
	left_portrait = {
		character = root
		animation = worry
	}
	right_portrait = {
		character = var:current_dragon
		animation = dragon_main
		camera = camera_dragon_event_standing

		#Add this so dragon fits within event window
		outfit_tags = { linear_camera_zoom }
	}

	immediate = {
		var:current_dragon = {
			save_scope_as = dragon # For loc
		}
	}

	option = {
		name = agot_filler_dragon.0035.a
		ai_chance = {
			base = 50
			modifier = {
				add = 75
				has_trait = gregarious
			}
			modifier = {
				add = 100
				stress_level >= 1
			}
		}
		add_stress = medium_stress_loss
		add_trait_xp = {
			trait = dragonrider
			track = dragon_bond
			value = 10
		}
		random_list = {
			50 = {
				desc = agot_filler_dragon.0035.a.good
			}
			50 = {
				desc = agot_filler_dragon.0035.a.bad
				add_prestige = medium_prestige_loss
			}
		}
	}

	option = {
		name = agot_filler_dragon.0035.b
		ai_chance = {
			base = 50
			modifier = {
				add = 50
				has_trait = reclusive
			}
			modifier = {
				add = 50
				has_trait = shy
			}
		}
		add_stress = minor_stress_gain
	}
}

# Ridden dragon stress trait events - Journaller
agot_filler_dragon.0036 = {
	hidden = yes
	cooldown = {
		years = 5
	}
	trigger = {
		has_character_flag = owned_dragon
		exists = var:current_rider
		age >= dragon_maturity_age
		var:current_rider = {
			is_available_adult = yes
			has_trait = journaller
		}
	}
	immediate = {
		var:current_rider = {
			trigger_event = agot_filler_dragon.0037
		}
	}
}

agot_filler_dragon.0037 = { # Journaller writes about dragon
	type = character_event
	title = agot_filler_dragon.0037.t
	desc = agot_filler_dragon.0037.desc
	theme = dragon
	right_portrait = {
		character = root
		animation = throne_room_writer
	}
	lower_right_portrait = {
		character = var:current_dragon
	}
	override_background = {
		reference = study
	}

	immediate = {
		var:current_dragon = {
			save_scope_as = dragon # For loc
		}
	}

	option = {
		name = agot_filler_dragon.0037.a
		flavor = agot_filler_dragon.0037.a.f
		add_stress = minor_stress_loss
	}
}

# Ridden dragon stress trait events - Uncouth
agot_filler_dragon.0038 = {
	hidden = yes
	cooldown = {
		years = 5
	}
	trigger = {
		has_character_flag = owned_dragon
		exists = var:current_rider
		age >= dragon_maturity_age
		var:current_rider = {
			is_available_adult = yes
			has_trait = uncouth
		}
	}
	immediate = {
		var:current_rider = {
			trigger_event = agot_filler_dragon.0039
		}
	}
}

agot_filler_dragon.0039 = { # Uncouth stinks the dragon away
	type = character_event
	window = dragon_character_event
	title = agot_filler_dragon.0039.t
	desc = agot_filler_dragon.0039.desc
	theme = dragon
	left_portrait = {
		character = root
		animation = worry
	}
	right_portrait = {
		character = var:current_dragon
		animation = dragon_main
		camera = camera_dragon_event_standing

		#Add this so dragon fits within event window
		outfit_tags = { linear_camera_zoom }
	}

	immediate = {
		var:current_dragon = {
			save_scope_as = dragon # For loc
		}
	}

	option = { # I really must try to bathe
		name = agot_filler_dragon.0039.a
		flavor = agot_filler_dragon.0039.a.f
		ai_chance = {
			base = 100
			modifier = {
				add = -100
				stress_level >= 1
			}
		}
		add_stress = major_stress_gain
		random_list = {
			50 = {}
			50 = {
				modifier = {
					add = 100
					has_trait = diligent
				}
				remove_trait = uncouth
			}
		}
	}

	option = { # This is fine
		name = agot_filler_dragon.0039.b
		flavor = agot_filler_dragon.0039.b.f
		ai_chance = {
			base = 0
			modifier = {
				add = 100
				stress_level >= 1
			}
		}
	}
}

#########################################
# RIDER EDUCATION EVENTS    (0040-0049) #
# by: Sililex                           #
#########################################
# Dragon education trait event - Diplomacy
agot_filler_dragon.0040 = {
	hidden = yes
	cooldown = {
		years = 5
	}
	trigger = {
		has_character_flag = owned_dragon
		exists = var:current_rider
		age >= dragon_maturity_age
		var:current_rider = {
			is_available_healthy_adult = yes
			days_of_continuous_peace > 0
			has_trait = education_diplomacy
			any_powerful_vassal	= {
				opinion = {
					target = prev
					value < 0
				}
				NOT = { has_trait = dragonrider }
			}
		}
	}
	immediate = {
		var:current_rider = {
			trigger_event = agot_filler_dragon.0041
		}
	}
}

agot_filler_dragon.0041 = { # Contemplate using dragon to help with vassals
	type = character_event
	window = dragon_character_event
	title = agot_filler_dragon.0041.t
	desc = {
		desc = agot_filler_dragon.0041.desc
		first_valid = {
			triggered_desc = {
				trigger = { # Both
					exists = scope:flight_offer_vassal
					exists = scope:threaten_offer_vassal
				}
				desc = agot_filler_dragon.0041.desc.both
			}
			triggered_desc = {
				trigger = { # Flight
					exists = scope:flight_offer_vassal
				}
				desc = agot_filler_dragon.0041.desc.flight
			}
			triggered_desc = {
				trigger = { # Threaten
					exists = scope:threaten_offer_vassal
				}
				desc = agot_filler_dragon.0041.desc.threaten
			}
		}
	}
	theme = dragon
	left_portrait = {
		character = root
		animation = chancellor
	}
	right_portrait = {
		character = var:current_dragon
		animation = dragon_main
		camera = camera_dragon_event_standing

		#Add this so dragon fits within event window
		outfit_tags = { linear_camera_zoom }
	}
	lower_right_portrait = {
		character = scope:flight_offer_vassal
	}
	lower_left_portrait = {
		character = scope:threaten_offer_vassal
	}
	override_background = {
		reference = council_chamber
	}

	immediate = {
		var:current_dragon = {
			save_scope_as = dragon # For loc
		}
		every_powerful_vassal = {
			limit = {
				is_available_healthy_adult = yes
				opinion = {
					target = root
					value < 0
				}
				NOT = { has_trait = dragonrider }
			}
			if = {
				limit = {
					NOT = { has_trait = callous }
					NOT = { has_trait = paranoid }
					NOT = { has_trait = craven }
					OR = {
						has_trait = brave
						has_trait = curious
						has_trait = trusting
						has_trait = gregarious
					}
				}
				save_scope_as = flight_offer_vassal
			}
			else = {
				save_scope_as = threaten_offer_vassal
			}
		}
	}

	option = { # Offer interested vassal a flight
		name = agot_filler_dragon.0041.a
		flavor = agot_filler_dragon.0041.a.f
		trigger = {
			exists = scope:flight_offer_vassal
		}
		ai_chance = {
			base = 40
			modifier = {
				add = 50
				OR = {
					has_trait = gregarious
					has_trait = humble
					has_trait = trusting
					has_trait = calm
					has_trait = forgiving
				}
			}
		}
		scope:flight_offer_vassal = {
			add_opinion = {
				modifier = let_me_dragon_ride
				target = root
			}
		}
		add_prestige = minor_prestige_gain
	}

	option = { # Invite vassal to dragon lunch
		name = agot_filler_dragon.0041.b
		flavor = agot_filler_dragon.0041.b.f
		trigger = {
			exists = scope:threaten_offer_vassal
		}
		ai_chance = {
			base = 40
			modifier = {
				add = 50
				OR = {
					has_trait = sadistic
					has_trait = callous
					has_trait = wrathful
					has_trait = vengeful
					has_trait = stubborn
				}
			}
		}
		scope:threaten_offer_vassal = {
			add_opinion = {
				modifier = threatened_opinion
				target = root
			}
		}
		add_dread = 10
	}

	option = { # Do neither
		name = agot_filler_dragon.0041.c
		ai_chance = {
			base = 20
			modifier = {
				add = 50
				OR = {
					has_trait = humble
					has_trait = content
					has_trait = craven
				}
			}
		}
	}
}

# Dragon education trait event - Martial
agot_filler_dragon.0042 = {
	hidden = yes
	cooldown = {
		years = 5
	}
	trigger = {
		has_character_flag = owned_dragon
		exists = var:current_rider
		age >= dragon_maturity_age
		var:current_rider = {
			is_available_healthy_adult = yes
			days_of_continuous_peace > 0
			has_trait = education_martial
		}
	}
	immediate = {
		var:current_rider = {
			trigger_event = agot_filler_dragon.0043
		}
	}
}

agot_filler_dragon.0043 = {
	type = character_event
	title = agot_filler_dragon.0043.t
	desc = agot_filler_dragon.0043.desc
	theme = dragon
	right_portrait = {
		character = root
		animation = marshal
	}
	lower_right_portrait = {
		character = var:current_dragon
	}
	override_background = {
		reference = council_chamber
	}

	immediate = {
		var:current_dragon = {
			save_scope_as = dragon # For loc
		}
	}

	option = { # Chart the realm
		name = agot_filler_dragon.0043.a
		flavor = agot_filler_dragon.0043.a.f
		ai_chance = {
			base = 50
			modifier = {
				add = ai_rationality
			}
		}
		add_character_modifier = {
			modifier = agot_charted_realm_dragonback
			years = 10
		}
	}

	option = { # Training
		name = agot_filler_dragon.0043.b
		flavor = agot_filler_dragon.0043.b.f
		ai_chance = {
			base = 50
			modifier = {
				add = ai_boldness
			}
		}
		agot_add_dragon_training_xp = { VALUE = 15 }
	}
}

# Dragon education trait event - Stewardship
agot_filler_dragon.0044 = {
	hidden = yes
	cooldown = {
		years = 5
	}
	trigger = {
		has_character_flag = owned_dragon
		exists = var:current_rider
		age >= dragon_maturity_age
		var:current_rider = {
			is_available_healthy_adult = yes
			days_of_continuous_peace > 0
			has_trait = education_stewardship
		}
	}
	immediate = {
		var:current_rider = {
			trigger_event = agot_filler_dragon.0045
		}
	}
}

agot_filler_dragon.0045 = {
	type = character_event
	window = dragon_character_event
	title = agot_filler_dragon.0045.t
	desc = agot_filler_dragon.0045.desc
	theme = dragon
	left_portrait = {
		character = root
		animation = steward
	}
	right_portrait = {
		character = var:current_dragon
		animation = dragon_main
		camera = camera_dragon_event_standing

		#Add this so dragon fits within event window
		outfit_tags = { linear_camera_zoom }
	}
	override_background = {
		reference = council_chamber
	}

	immediate = {
		var:current_dragon = {
			save_scope_as = dragon # For loc
		}
	}

	option = { # I will clear land for development
		name = agot_filler_dragon.0045.a
		flavor = agot_filler_dragon.0045.a.f
		ai_chance = {
			base = 50
			modifier = {
				add = ai_rationality
			}
		}
		add_character_modifier = {
			modifier = agot_clearing_woods_with_dragonfire
			years = 5
		}
	}

	option = { # I will survey the lands for smugglers
		name = agot_filler_dragon.0045.b
		flavor = agot_filler_dragon.0045.b.f
		ai_chance = {
			base = 50
			modifier = {
				add = ai_greed
			}
		}
		custom_tooltip = agot_filler_dragon.0045.b.tt
		hidden_effect = {
			capital_county = {
				every_neighboring_county = {
					every_neighboring_county = {
						limit = {
							holder.top_liege = root.top_liege # Same realm
						}
						add_county_modifier = {
							modifier = agot_patrolled_on_dragonback
							years = 10
						}
					}
				}
			}
		}
	}

	option = {
		name = agot_filler_dragon.0045.c
		trigger = {
			has_trait = sadistic
		}
		ai_chance = {
			base = 100
			modifier = {
				add = ai_greed
			}
		}
		flavor = agot_filler_dragon.0045.c.f
		every_held_county = {
			add_county_modifier = {
				modifier = agot_dragon_fertilizer
				years = 4
			}
		}
		stress_impact = {
			sadistic = minor_stress_impact_loss
		}
		if = {
			limit = {
				var:current_dragon = { has_trait = dragon_bloodthirsty }
			}
			add_trait_xp = {
				trait = dragonrider
				track = dragon_bond
				value = 15
			}
		}
	}

	option = {
		name = agot_filler_dragon.0045.d
		flavor = agot_filler_dragon.0045.d.f
		trigger = {
			has_trait = eccentric
			NOT = { has_trait = sadistic }
		}
		ai_chance = {
			base = 100
			modifier = {
				add = ai_greed
			}
		}
		every_held_county = {
			title_province = {
				add_province_modifier = {
					modifier = agot_dragon_fertilizer
					years = 4
				}
			}
		}
	}
}

# Dragon education trait event - Intrigue
agot_filler_dragon.0046 = {
	hidden = yes
	cooldown = {
		years = 5
	}
	trigger = {
		has_character_flag = owned_dragon
		exists = var:current_rider
		age >= dragon_maturity_age
		var:current_rider = {
			is_available_healthy_adult = yes
			days_of_continuous_peace > 0
			has_trait = education_intrigue
		}
	}
	immediate = {
		var:current_rider = {
			trigger_event = agot_filler_dragon.0047
		}
	}
}

agot_filler_dragon.0047 = {
	type = character_event
	window = dragon_character_event
	title = agot_filler_dragon.0047.t
	desc = agot_filler_dragon.0047.desc
	theme = dragon
	left_portrait = {
		character = root
		animation = scheme
	}
	right_portrait = {
		character = var:current_dragon
		animation = dragon_main
		camera = camera_dragon_event_standing

		#Add this so dragon fits within event window
		outfit_tags = { linear_camera_zoom }
	}

	immediate = {
		var:current_dragon = {
			save_scope_as = dragon # For loc
		}
		random_prisoner = {
			limit = {
				any_known_secret = { NOT = { is_known_by = root } }
			}
			random_known_secret = {
				limit = {
					NOT = { is_known_by = root }
				}
				save_scope_as = prisoner_secret
			}
			save_scope_as = prisoner
		}
		random_close_family_member = {
			limit = {
				NOT = { has_trait = dragonrider }
				any_known_secret = { NOT = { is_known_by = root } }
			}
			random_known_secret = {
				limit = {
					NOT = { is_known_by = root }
				}
				save_scope_as = family_secret
			}
			save_scope_as = family_member
		}
		random_powerful_vassal = {
			limit = {
				NOT = { has_trait = dragonrider }
				any_known_secret = { NOT = { is_known_by = root } }
			}
			random_known_secret = {
				limit = {
					NOT = { is_known_by = root }
				}
				save_scope_as = vassal_secret
			}
			save_scope_as = vassal
		}
		random_courtier_or_guest = {
			limit = {
				NOT = { has_trait = dragonrider }
				any_known_secret = { NOT = { is_known_by = root } }
			}
			random_known_secret = {
				limit = {
					NOT = { is_known_by = root }
				}
				save_scope_as = courtier_secret
			}
			save_scope_as = courtier
		}
	}

	option = { # I will learn about my prisoners secrets
		name = agot_filler_dragon.0047.a
		flavor = agot_filler_dragon.0047.a.f
		trigger = {
			exists = scope:prisoner_secret
		}
		ai_chance = {
			base = 0
			opinion_modifier = {
				opinion_target = scope:prisoner
				who = root
				multiplier = -0.25
			}
		}
		custom_tooltip = {
			text = agot_filler_dragon.0047.a.tt
			scope:prisoner_secret = {
				reveal_to = root
			}
		}
		scope:prisoner = {
			add_opinion = {
				modifier = threatened_opinion
				target = root
			}
			save_scope_as = target
		}
		scope:prisoner_secret = {
			save_scope_as = target_secret
		}
	}

	option = { # I will learn about my family members secrets
		name = agot_filler_dragon.0047.b
		flavor = agot_filler_dragon.0047.b.f
		trigger = {
			exists = scope:family_secret
		}
		ai_chance = {
			base = 0
			opinion_modifier = {
				opinion_target = scope:family_member
				who = root
				multiplier = -0.25
			}
		}
		custom_tooltip = {
			text = agot_filler_dragon.0047.b.tt
			scope:family_secret = {
				reveal_to = root
			}
		}
		scope:family_member = {
			add_opinion = {
				modifier = threatened_opinion
				target = root
			}
			save_scope_as = target
		}
		scope:family_secret = {
			save_scope_as = target_secret
		}
	}

	option = { # I will learn about my vassals secrets
		name = agot_filler_dragon.0047.c
		flavor = agot_filler_dragon.0047.c.f
		trigger = {
			exists = scope:vassal_secret
		}
		ai_chance = {
			base = 0
			opinion_modifier = {
				opinion_target = scope:vassal
				who = root
				multiplier = -0.25
			}
		}
		custom_tooltip = {
			text = agot_filler_dragon.0047.c.tt
			scope:vassal_secret = {
				reveal_to = root
			}
		}
		scope:vassal = {
			add_opinion = {
				modifier = threatened_opinion
				target = root
			}
			save_scope_as = target
		}
		scope:vassal_secret = {
			save_scope_as = target_secret
		}
	}

	option = { # I will learn about my courtiers secrets
		name = agot_filler_dragon.0047.d
		flavor = agot_filler_dragon.0047.d.f
		trigger = {
			exists = scope:courtier_secret
		}
		ai_chance = {
			base = 0
			opinion_modifier = {
				opinion_target = scope:courtier
				who = root
				multiplier = -0.25
			}
		}
		custom_tooltip = {
			text = agot_filler_dragon.0047.d.tt
			scope:courtier_secret = {
				reveal_to = root
			}
		}
		scope:courtier = {
			add_opinion = {
				modifier = threatened_opinion
				target = root
			}
			save_scope_as = target
		}
		scope:courtier_secret = {
			save_scope_as = target_secret
		}
	}

	option = { # I will do nothing
		name = agot_filler_dragon.0047.e
		flavor = agot_filler_dragon.0047.e.f
		ai_chance = {
			base = 1
			modifier = {
				add = 100
				has_trait = deceitful
			}
		}
		stress_impact = {
			deceitful = minor_stress_impact_loss
		}
	}

	after = {
		if = {
			limit = {
				exists = scope:target_secret
			}
			send_interface_toast = {
				type = dragon_neutral_toast
				title = agot_filler_dragon.0047.toast.title
				desc = agot_filler_dragon.0047.toast.desc
				left_icon = scope:target
				right_icon = var:current_dragon
			}
		}
	}
}

# Dragon education trait event - Learning
agot_filler_dragon.0048 = {
	hidden = yes
	cooldown = {
		years = 5
	}
	trigger = {
		has_character_flag = owned_dragon
		exists = var:current_rider
		var:current_rider = {
			is_available_healthy_adult = yes
			days_of_continuous_peace > 0
			has_trait = education_learning
		}
		any_culture_global = {
			NOT = { this = root.culture } # Not dragon culture
			exists = culture_head
			culture_head = { is_alive = yes }
			exists = culture_head.location.empire # Not in the sea or something
			exists = root.var:current_rider.location.empire # Not in the sea or something
			NOT = { culture_head.location.empire = root.var:current_rider.location.empire }
			cultural_acceptance = { target = root.var:current_rider.culture value < 10 }
		}
	}
	immediate = {
		var:current_rider = {
			trigger_event = agot_filler_dragon.0049
		}
	}
}

agot_filler_dragon.0049 = {
	type = character_event
	window = dragon_character_event
	title = agot_filler_dragon.0049.t
	desc = agot_filler_dragon.0049.desc
	theme = dragon
	left_portrait = {
		character = root
		animation = admiration
	}
	right_portrait = {
		character = var:current_dragon
		animation = dragon_main
		camera = camera_dragon_event_standing

		#Add this so dragon fits within event window
		outfit_tags = { linear_camera_zoom }
	}
	override_background = {
		reference = study
	}

	immediate = {
		var:current_dragon = {
			save_scope_as = dragon # For loc
		}
		random_culture_global = {
			limit = {
				NOT = { this = root.var:current_dragon.culture } # Not dragon culture
				exists = culture_head
				culture_head = { is_alive = yes }
				NOT = { culture_head.location.empire = root.location.empire }
				cultural_acceptance = { target = root.culture value < 10 }
			}
			save_scope_as = investigate_culture
		}
	}

	option = {
		name = agot_filler_dragon.0049.a
		flavor = agot_filler_dragon.0049.a.f
		ai_chance = {
			base = 50
			modifier = {
				add = 50
				OR = {
					has_trait = gregarious
					has_trait = humble
					has_trait = trusting
				}
			}
		}
		scope:investigate_culture = {
			change_cultural_acceptance= {
				target = root.culture
				value = 10
				desc = agot_visiting_dragonrider_culture_acceptance
			}
		}
		add_prestige = minor_prestige_gain
	}

	option = {
		name = agot_filler_dragon.0049.b
		flavor = agot_filler_dragon.0049.b.f
		ai_chance = {
			base = 50
			modifier = {
				add = 50
				OR = {
					has_trait = diligent
					has_trait = paranoid
					has_trait = arrogant
				}
			}
		}
		add_character_modifier = {
			modifier = agot_contributing_to_dragonlore
			years = 5
		}
	}
}

#########################################
# RIDER LIFESTYLE EVENTS    (0050-0063) #
# by: Sililex                           #
#########################################
# Lifestyle trait event
# Dragon lifestyle trait event - Reveler
agot_filler_dragon.0050 = {
	hidden = yes
	cooldown = {
		years = 5
	}
	trigger = {
		has_character_flag = owned_dragon
		exists = var:current_rider
		var:current_rider = {
			is_available_healthy_adult = yes
			days_of_continuous_peace > 0
			has_trait = lifestyle_reveler
		}
	}
	immediate = {
		var:current_rider = {
			trigger_event = agot_filler_dragon.0051
		}
	}
}

agot_filler_dragon.0051 = {
	type = character_event
	title = agot_filler_dragon.0051.t
	desc = agot_filler_dragon.0051.desc
	theme = dragon
	right_portrait = {
		character = root
		animation = boredom
	}
	lower_left_portrait = {
		character = var:current_dragon
	}
	override_background = {
		reference = corridor_day
	}

	immediate = {
		var:current_dragon = {
			save_scope_as = dragon # For loc
		}
	}

	option = { # I will throw a party
		name = agot_filler_dragon.0051.a
		flavor = agot_filler_dragon.0051.a.f

		ai_chance = {
			base = 50
			ai_value_modifier = {
				ai_boldness = 0.5
				ai_sociability = 0.5
				ai_greed = -0.1
			}
		}
		stress_impact = {
			base = medium_stress_loss
			shy = massive_stress_gain
		}
		remove_short_term_gold = medium_gold_value
		random_list = {
			50 = {
				modifier = {
					add = var:current_dragon.temperament
				}
				desc = agot_filler_dragon.0051.a.good
				send_interface_toast = {
					title = agot_filler_dragon.0051.a.good.title
					left_icon = var:current_dragon
					right_icon = root
					add_character_modifier = {
						modifier = agot_dragon_party
						years = 1
					}
				}
			}
			50 = {
				desc = agot_filler_dragon.0051.a.bad
				send_interface_toast = {
					title = agot_filler_dragon.0051.a.bad.title
					left_icon = var:current_dragon
					right_icon = root
					add_character_modifier = {
						modifier = agot_feast_hall_destroyed_by_dragon
						years = 1
					}
				}
			}

		}
	}

	option = { # I will not throw a party
		name = agot_filler_dragon.0051.b
		flavor = agot_filler_dragon.0051.b.f
		ai_chance = {
			base = 50
			ai_value_modifier = {
				ai_boldness = -0.5
				ai_rationality = 1
			}
		}
	}
}

# Dragon lifestyle trait event - Blademaster
agot_filler_dragon.0052 = {
	hidden = yes
	cooldown = {
		years = 5
	}
	trigger = {
		has_character_flag = owned_dragon
		exists = var:current_rider
		var:current_rider = {
			is_available_healthy_adult = yes
			days_of_continuous_peace > 0
			has_trait = lifestyle_blademaster
		}
	}
	immediate = {
		var:current_rider = {
			trigger_event = agot_filler_dragon.0053
		}
	}
}

agot_filler_dragon.0053 = {
	type = character_event
	title = agot_filler_dragon.0053.t
	desc = agot_filler_dragon.0053.desc
	theme = dragon
	override_background = {
		reference = army_camp
	}
	left_portrait = {
		character = root
		animation = aggressive_sword
	}
	lower_right_portrait = {
		character = var:current_dragon
	}

	immediate = {
		var:current_dragon = {
			save_scope_as = dragon # For loc
		}
	}

	option = { # I will train with my dragon only, no need for a sword
		name = agot_filler_dragon.0053.a
		ai_chance = {
			base = 25
			modifier = {
				add = 25
				OR = {
					has_trait = craven
					has_trait = calm
				}
			}
			ai_value_modifier = {
				ai_rationality = 0.5
			}
		}
		remove_trait = lifestyle_blademaster
		agot_add_dragon_training_xp = { VALUE = 100 }
	}

	option = { # Keep training as a blademaster
		name = agot_filler_dragon.0053.b
		flavor = agot_filler_dragon.0053.b.f
		ai_chance = {
			base = 50
			modifier = {
				add = 25
				OR = {
					has_trait = diligent
					has_trait = content
					has_trait = wrathful
				}
			}
			ai_value_modifier = {
				ai_honor = 0.5
			}
		}
		stress_impact = {
			diligent = medium_stress_impact_loss
			content = minor_stress_impact_loss
			wrathful = minor_stress_impact_loss
		}
		add_trait_xp = {
			trait = lifestyle_blademaster
			value = 20
		}
	}

	option = { # I will train with both!
		name = agot_filler_dragon.0053.c
		flavor = agot_filler_dragon.0053.c.f
		ai_chance = {
			base = 50
			modifier = {
				add = 25
				OR = {
					has_trait = ambitious
					has_trait = arrogant
				}
			}
			ai_value_modifier = {
				ai_boldness = 0.5
			}
		}
		random_list = {
			40 = {
				desc = agot_filler_dragon.0053.c.good
				add_prestige = minor_prestige_gain
				modifier = {
					add = prowess
				}
			}
			60 = {
				desc = agot_filler_dragon.0053.c.bad
				add_prestige = minor_prestige_loss
			}
		}
		agot_add_dragon_training_xp = { VALUE = 10 }
		add_trait_xp = {
			trait = lifestyle_blademaster
			value = 10
		}
	}
}

# Dragon lifestyle trait event - Hunter
agot_filler_dragon.0054 = {
	hidden = yes
	cooldown = {
		years = 5
	}
	trigger = {
		has_character_flag = owned_dragon
		exists = var:current_rider
		var:current_rider = {
			is_available_healthy_adult = yes
			days_of_continuous_peace > 0
			has_trait = lifestyle_hunter
		}
	}
	immediate = {
		var:current_rider = {
			trigger_event = agot_filler_dragon.0055
		}
	}
}

agot_filler_dragon.0055 = {
	type = character_event
	title = agot_filler_dragon.0055.t
	desc = agot_filler_dragon.0055.desc
	theme = dragon
	right_portrait = {
		character = root
		animation = personality_rational
	}
	lower_left_portrait = {
		character = var:current_dragon
	}
	override_background = {
		reference = study
	}

	immediate = {
		var:current_dragon = {
			save_scope_as = dragon # For loc
		}
	}

	option = {
		name = agot_filler_dragon.0055.a
		flavor = agot_filler_dragon.0055.a.f
		ai_chance = {
			base = 50
			ai_value_modifier = {
				ai_greed = 0.5
			}
		}
		add_prestige = minor_prestige_gain
		agot_add_dragon_training_xp = { VALUE = 5 }
	}

	option = {
		name = agot_filler_dragon.0055.b
		flavor = agot_filler_dragon.0055.b.f
		ai_chance = {
			base = 50
			ai_value_modifier = {
				ai_honor = 0.5
			}
		}
		add_stress = medium_stress_loss
	}
}

# Dragon lifestyle trait event - Mystic
agot_filler_dragon.0056 = {
	hidden = yes
	cooldown = {
		years = 5
	}
	trigger = {
		has_character_flag = owned_dragon
		exists = var:current_rider
		var:current_rider = {
			is_available_healthy_adult = yes
			days_of_continuous_peace > 0
			has_trait = lifestyle_mystic
		}
	}
	immediate = {
		var:current_rider = {
			trigger_event = agot_filler_dragon.0057
		}
	}
}

agot_filler_dragon.0057 = {
	type = character_event
	window = dragon_character_event
	title = agot_filler_dragon.0057.t
	desc = agot_filler_dragon.0057.desc
	theme = dragon
	left_portrait = {
		character = root
		animation = ecstasy
	}
	right_portrait = {
		character = var:current_dragon
		animation = dragon_main
		camera = camera_dragon_event_standing

		#Add this so dragon fits within event window
		outfit_tags = { linear_camera_zoom }
	}

	immediate = {
		var:current_dragon = {
			save_scope_as = dragon # For loc
		}
	}

	option = { # Both
		name = agot_filler_dragon.0057.a
		flavor = agot_filler_dragon.0057.a.f
		ai_chance = {
			base = 30
			ai_value_modifier = {
				ai_rationality = 0.5
			}
		}
		add_trait_xp = {
			trait = dragonrider
			track = dragon_bond
			value = 15
		}
		agot_add_dragon_training_xp = { VALUE = 15 }
	}

	option = { # Training
		name = agot_filler_dragon.0057.b
		flavor = agot_filler_dragon.0057.b.f
		ai_chance = {
			base = 30
			ai_value_modifier = {
				ai_boldness = 0.5
			}
		}
		trigger = {
			var:current_dragon = {
				NOT = { has_trait = dragon_skittish }
			}
		}
		agot_add_dragon_training_xp = { VALUE = 30 }
	}

	option = { # Bond
		name = agot_filler_dragon.0057.c
		flavor = agot_filler_dragon.0057.c.f
		ai_chance = {
			base = 30
			ai_value_modifier = {
				ai_sociability = 0.5
			}
		}
		trigger = {
			var:current_dragon = {
				NOT = { has_trait = dragon_bloodthirsty }
			}
		}
		add_trait_xp = {
			trait = dragonrider
			track = dragon_bond
			value = 30
		}
	}
}

# Dragon lifestyle trait event - Physician
agot_filler_dragon.0058 = {
	hidden = yes
	cooldown = {
		years = 5
	}
	trigger = {
		has_character_flag = owned_dragon
		exists = var:current_rider
		var:current_rider = {
			is_available_healthy_adult = yes
			days_of_continuous_peace > 0
			has_trait = lifestyle_physician
		}
	}
	immediate = {
		var:current_rider = {
			trigger_event = agot_filler_dragon.0059
		}
	}
}

agot_filler_dragon.0059 = {
	type = character_event
	title = agot_filler_dragon.0059.t
	desc = agot_filler_dragon.0059.desc
	theme = dragon
	right_portrait = {
		character = root
		animation = personality_rational
	}
	lower_left_portrait = {
		character = var:current_dragon
	}
	override_background = {
		reference = study
	}

	immediate = {
		var:current_dragon = {
			save_scope_as = dragon # For loc
		}
	}

	option = { # Execute the dragon for his blood and bones, you monster
		name = agot_filler_dragon.0059.a
		flavor = agot_filler_dragon.0059.a.f
		highlight_portrait = var:current_dragon
		add_internal_flag = dangerous
		ai_chance = {
			base = 0
			modifier = {
				add = 2
				has_trait = callous
			}
			modifier = {
				add = 10
				OR = {
					has_trait = eccentric
					has_trait = sadistic
				}
			}
		}
		create_artifact = {
			name = dragon_blood_and_bones_potion
			description = dragon_blood_and_bones_potion_desc
			type = miscellaneous
			visuals = flask
			modifier = dragon_blood_and_bones_potion_modifier
			rarity = illustrious
			save_scope_as = potion
		}
		create_story = story_dragonkind_elixir
		var:current_dragon = {
			death = {
				death_reason = death_execution
				killer = root
			}
		}
		stress_impact = {
			compassionate = major_stress_impact_gain
		}
	}

	option = { # Study the dragon's anatomy and share findings
		name = agot_filler_dragon.0059.b
		trigger = {
			NOT = { has_character_modifier = agot_contributing_to_dragonlore }
		}
		ai_chance = {
			base = 30
			ai_value_modifier = {
				ai_rationality = 0.2
			}
		}
		add_character_modifier = {
			modifier = agot_contributing_to_dragonlore
			years = 5
		}
		add_trait_xp = {
			trait = lifestyle_physician
			value = 5
		}
		stress_impact = {
			shy = minor_stress_impact_gain
		}
	}

	option = { # Study the dragon's anatomy for yourself
		name = agot_filler_dragon.0059.c
		flavor = agot_filler_dragon.0059.c.f
		ai_chance = {
			base = 30
			ai_value_modifier = {
				ai_greed = 0.2
			}
		}
		add_trait_xp = {
			trait = lifestyle_physician
			value = 5
		}
		add_trait_xp = {
			trait = dragonrider
			track = dragon_bond
			value = 5
		}
	}

	option = { # Study humans instead
		name = agot_filler_dragon.0059.d
		flavor = agot_filler_dragon.0059.d.f
		ai_chance = {
			base = 30
			ai_value_modifier = {
				ai_boldness = -0.2
			}
		}
		add_trait_xp = {
			trait = lifestyle_physician
			value = 15
		}
	}
}

# Dragon lifestyle trait event - Herbalist
agot_filler_dragon.0060 = {
	hidden = yes
	cooldown = {
		years = 5
	}
	trigger = {
		has_character_flag = owned_dragon
		exists = var:current_rider
		var:current_rider = {
			is_available_healthy_adult = yes
			days_of_continuous_peace > 0
			has_trait = lifestyle_herbalist
		}
	}
	immediate = {
		var:current_rider = {
			trigger_event = agot_filler_dragon.0061
		}
	}
}

agot_filler_dragon.0061 = {
	type = character_event
	title = agot_filler_dragon.0061.t
	desc = agot_filler_dragon.0061.desc
	theme = dragon
	override_background = {
		reference = physicians_study
	}
	right_portrait = {
		character = root
		animation = admiration
	}
	lower_left_portrait = {
		character = var:current_dragon
	}

	immediate = {
		var:current_dragon = {
			save_scope_as = dragon # For loc
		}
	}

	option = { # Scale poltice
		name = agot_filler_dragon.0061.a
		trigger = {
			NOT = { has_character_modifier = agot_dragon_scale_poltice }
		}
		ai_chance = {
			base = 20
			ai_value_modifier = {
				ai_boldness = 0.2
			}
		}
		add_character_modifier = {
			modifier = agot_dragon_scale_poltice
			years = 1
		}
	}

	option = { # Blood poltice
		name = agot_filler_dragon.0061.b
		trigger = {
			NOT = { has_character_modifier = agot_dragon_blood_poltice }
		}
		ai_chance = {
			base = 20
			ai_value_modifier = {
				ai_sociability = 0.2
			}
		}
		add_character_modifier = {
			modifier = agot_dragon_blood_poltice
			years = 1
		}
	}

	option = { # Claw poltice
		name = agot_filler_dragon.0061.c
		trigger = {
			NOT = { has_character_modifier = agot_dragon_claw_poltice }
		}
		ai_chance = {
			base = 20
			ai_value_modifier = {
				ai_greed = 0.2
			}
		}
		add_character_modifier = {
			modifier = agot_dragon_claw_poltice
			years = 1
		}
	}

	option = { # Tooth poltice
		name = agot_filler_dragon.0061.d
		trigger = {
			NOT = { has_character_modifier = agot_dragon_tooth_poltice }
		}
		ai_chance = {
			base = 20
			ai_value_modifier = {
				ai_rationality = 0.2
			}
		}
		add_character_modifier = {
			modifier = agot_dragon_tooth_poltice
			years = 1
		}
	}

	option = { # Excrement poltice - for the crazy only
		name = agot_filler_dragon.0061.e
		trigger = {
			OR = {
				has_trait = eccentric
				has_trait = lunatic_1
				has_trait = lunatic_genetic
			}
			NOT = { has_character_modifier = agot_dragon_excrement_poltice }
		}
		ai_chance = {
			base = 100
		}
		add_character_modifier = {
			modifier = agot_dragon_excrement_poltice
			years = 1
		}
	}
}

# Dragon lifestyle trait event - Gardener
agot_filler_dragon.0062 = {
	hidden = yes
	cooldown = {
		years = 5
	}
	trigger = {
		has_character_flag = owned_dragon
		exists = var:current_rider
		var:current_rider = {
			is_available_healthy_adult = yes
			days_of_continuous_peace > 0
			has_trait = lifestyle_gardener
		}
	}
	immediate = {
		var:current_rider = {
			trigger_event = agot_filler_dragon.0063
		}
	}
}

agot_filler_dragon.0063 = {
	type = character_event
	title = agot_filler_dragon.0063.t
	desc = {
		desc = agot_filler_dragon.0063.desc
		first_valid = {
			triggered_desc = {
				trigger = { var:current_dragon = { has_character_modifier = agot_dragon_in_dragonpit } }
				desc = agot_filler_dragon.0063.desc.dragonpit
			}
			desc = agot_filler_dragon.0063.desc.else
		}
		desc = agot_filler_dragon.0063.desc.end
	}
	theme = dragon
	override_background = {
		reference = garden
	}
	right_portrait = {
		character = root
		animation = personality_rational
	}
	lower_left_portrait = {
		character = var:current_dragon
	}

	immediate = {
		var:current_dragon = {
			save_scope_as = dragon # For loc
		}
	}

	option = { # Build the dragon a garden
		name = agot_filler_dragon.0063.a
		flavor = agot_filler_dragon.0063.a.f
		ai_chance = {
			base = 50
			ai_value_modifier = {
				ai_sociability = 0.5
			}
		}
		random_list = {
			50 = {
				modifier = {
					add = diplomacy
				}
				desc = agot_filler_dragon.0063.a.good
				send_interface_toast = {
					title = agot_filler_dragon.0063.a.good.toast.t
					left_icon = var:current_dragon
					custom_tooltip = agot_filler_dragon.0063.a.good.tt
					var:current_dragon = {
						change_temperament = {
							VALUE = 5
						}
					}
				}
			}
			50 = {
				modifier = {
					add = 10
					var:current_dragon = { has_trait = dragon_bloodthirsty }
				}
				modifier = {
					add = 10
					var:current_dragon = { has_trait = dragon_aggressive }
				}
				modifier = {
					add = 10
					var:current_dragon = { has_trait = dragon_defiant }
				}
				modifier = {
					add = 10
					var:current_dragon = { has_trait = dragon_solitary }
				}
				desc = agot_filler_dragon.0063.a.bad
				send_interface_toast = {
					type = dragon_neutral_toast
					title = agot_filler_dragon.0063.a.bad.toast.t
					left_icon = var:current_dragon
					desc = agot_filler_dragon.0063.a.bad.toast.desc
				}
			}
		}
		remove_short_term_gold = minor_gold_value
	}

	option = { # Do not build the dragon a garden
		name = agot_filler_dragon.0063.b
		flavor = agot_filler_dragon.0063.b.f
		ai_chance = {
			base = 50
			ai_value_modifier = {
				ai_greed = 0.5
			}
		}
	}
}

#########################################
# elixir OF DRAGONKIND		(0064-0074) #
# by: Sililex                           #
#########################################
# Physician wants to create a potion from your dragon
agot_filler_dragon.0064 = {
	hidden = yes
	cooldown = {
		years = 10
	}
	trigger = {
		has_character_flag = owned_dragon
		exists = var:current_rider
		var:current_rider = {
			has_royal_court = yes
			is_available_healthy_adult = yes
			days_of_continuous_peace > 0
			OR = {
				AND = {
					employs_court_position = court_physician_court_position
					court_position:court_physician_court_position = {
						is_available_ai_adult = yes
						has_court_event_flag = no
						OR = {
							has_trait = eccentric
							has_trait = sadistic
							has_trait = possessed
							has_trait = lunatic_1
							has_trait = lunatic_genetic
						}
						learning > 12
					}
				}
				AND = {
					employs_court_position = maester_court_position
					court_position:maester_court_position = {
						is_available_ai_adult = yes
						has_court_event_flag = no
						OR = {
							has_trait = eccentric
							has_trait = sadistic
							has_trait = possessed
							has_trait = lunatic_1
							has_trait = lunatic_genetic
						}
						learning > 12
					}
				}
			}
		}
	}
	immediate = {
		var:current_rider = {
			trigger_event = agot_filler_dragon.0065
		}
	}
}

agot_filler_dragon.0065 = {
	type = court_event
	title = agot_filler_dragon.0065.t
	desc = agot_filler_dragon.0065.desc
	theme = court
	lower_left_portrait = var:current_dragon
	court_scene = {
		button_position_character = scope:proposing_courtier
		roles = {
			scope:proposing_courtier = {
				group = event_group
				animation = admiration
			}
			root = {
				group = event_group
				animation = personality_rational
			}
		}
	}

	immediate = {
		if = {
			limit = {
				AND = {
					employs_court_position = court_physician_court_position
					court_position:court_physician_court_position = {
						is_available_ai_adult = yes
						has_court_event_flag = no
					}
				}
			}
			court_position:court_physician_court_position = {
				save_scope_as = proposing_courtier
			}
		}
		else = {
			court_position:maester_court_position = {
				save_scope_as = proposing_courtier
			}
		}
		var:current_dragon = {
			save_scope_as = dragon # For loc
		}
	}

	option = { # Excuse me what the fuck
		name = agot_filler_dragon.0065.a
		flavor = agot_filler_dragon.0065.a.f
		ai_chance = {
			base = 50
		}
		add_opinion = {
			modifier = disgusted_opinion
			target = scope:proposing_courtier
			opinion = -20
		}
		scope:proposing_courtier = {
			add_opinion = {
				modifier = insulted_courtier
				target = root
				opinion = -15
			}
		}
	}

	option = { # Arrest this fool!
		name = agot_filler_dragon.0065.b
		flavor = agot_filler_dragon.0065.b.f
		ai_chance = {
			base = 50
		}
		imprison = {
			target = scope:proposing_courtier
			type = dungeon
		}
	}

	option = { # You know what...okay!
		name = agot_filler_dragon.0065.c
		flavor = agot_filler_dragon.0065.c.f
		highlight_portrait = var:current_dragon
		add_internal_flag = dangerous
		ai_chance = {
			base = 2
			modifier = {
				add = 2
				has_trait = callous
			}
			modifier = {
				add = 10
				OR = {
					has_trait = eccentric
					has_trait = sadistic
				}
			}
		}
		hidden_effect = {
			scope:proposing_courtier = {
				create_artifact = {
					name = dragon_blood_and_bones_potion
					description = dragon_blood_and_bones_potion_desc
					type = miscellaneous
					visuals = flask
					modifier = dragon_blood_and_bones_potion_modifier
					rarity = illustrious
					save_scope_as = potion
				}
			}
		}
		show_as_tooltip = {
			create_artifact = {
				name = dragon_blood_and_bones_potion
				description = dragon_blood_and_bones_potion_desc
				type = miscellaneous
				visuals = flask
				modifier = dragon_blood_and_bones_potion_modifier
				rarity = illustrious
			}
		}
		send_interface_toast = {
			title = agot_filler_dragon.0059.toast.t
			scope:potion = {
				set_owner = root
			}
			create_story = story_dragonkind_elixir
			left_icon = var:current_dragon
		}
		var:current_dragon = {
			death = {
				death_reason = death_execution
				killer = scope:proposing_courtier
			}
		}
		stress_impact = {
			compassionate = major_stress_impact_gain
		}
	}

	option = {
		name = agot_filler_dragon.0065.d
		flavor = agot_filler_dragon.0065.d.f
		ai_chance = {
			base = 30
			ai_value_modifier = {
				ai_rationality = 0.1
				ai_sociability = -0.1
			}
		}
		scope:proposing_courtier = {
			add_opinion = {
				modifier = disappointed_opinion
				target = root
				opinion = -5
			}
		}
	}

	after = {
		root = {
			clear_court_event_participation = yes
		}
		scope:proposing_courtier = {
			clear_court_event_participation = yes
		}
	}
}

# Dragon elixir events
agot_filler_dragon.0066 = {
	type = character_event
	title = agot_filler_dragon.0066.t
	desc = agot_filler_dragon.0066.desc
	theme = dragon
	override_background = {
		reference = study
	}
	right_portrait = {
		character = root
		animation = personality_rational
	}

	trigger = {
		any_equipped_character_artifact = {
			has_artifact_modifier = dragon_blood_and_bones_potion_modifier
		}
	}

	immediate = {
		every_equipped_character_artifact = {
			limit = {
				has_artifact_modifier = dragon_blood_and_bones_potion_modifier
			}
			save_scope_as = artifact
		}
		add_diplomacy_skill = 1
	}

	option = {
		name = agot_filler_dragon.0066.a
	}
}

agot_filler_dragon.0067 = {
	type = character_event
	title = agot_filler_dragon.0067.t
	desc = agot_filler_dragon.0067.desc
	theme = dragon
	override_background = {
		reference = study
	}
	right_portrait = {
		character = root
		animation = personality_rational
	}

	trigger = {
		any_equipped_character_artifact = {
			has_artifact_modifier = dragon_blood_and_bones_potion_modifier
		}
	}

	immediate = {
		every_equipped_character_artifact = {
			limit = {
				has_artifact_modifier = dragon_blood_and_bones_potion_modifier
			}
			save_scope_as = artifact
		}
		add_martial_skill = 1
	}

	option = {
		name = agot_filler_dragon.0067.a
	}
}

agot_filler_dragon.0068 = {
	type = character_event
	title = agot_filler_dragon.0068.t
	desc = agot_filler_dragon.0068.desc
	theme = dragon
	override_background = {
		reference = study
	}
	right_portrait = {
		character = root
		animation = personality_rational
	}

	trigger = {
		any_equipped_character_artifact = {
			has_artifact_modifier = dragon_blood_and_bones_potion_modifier
		}
	}

	immediate = {
		every_equipped_character_artifact = {
			limit = {
				has_artifact_modifier = dragon_blood_and_bones_potion_modifier
			}
			save_scope_as = artifact
		}
		add_stewardship_skill = 1
	}

	option = {
		name = agot_filler_dragon.0068.a
	}
}

agot_filler_dragon.0069 = {
	type = character_event
	title = agot_filler_dragon.0069.t
	desc = agot_filler_dragon.0069.desc
	theme = dragon
	override_background = {
		reference = study
	}
	right_portrait = {
		character = root
		animation = personality_rational
	}

	trigger = {
		any_equipped_character_artifact = {
			has_artifact_modifier = dragon_blood_and_bones_potion_modifier
		}
	}

	immediate = {
		every_equipped_character_artifact = {
			limit = {
				has_artifact_modifier = dragon_blood_and_bones_potion_modifier
			}
			save_scope_as = artifact
		}
		add_intrigue_skill = 1
	}

	option = {
		name = agot_filler_dragon.0069.a
	}
}

agot_filler_dragon.0070 = {
	type = character_event
	title = agot_filler_dragon.0070.t
	desc = agot_filler_dragon.0070.desc
	theme = dragon
	override_background = {
		reference = study
	}
	right_portrait = {
		character = root
		animation = personality_rational
	}

	trigger = {
		any_equipped_character_artifact = {
			has_artifact_modifier = dragon_blood_and_bones_potion_modifier
		}
	}

	immediate = {
		every_equipped_character_artifact = {
			limit = {
				has_artifact_modifier = dragon_blood_and_bones_potion_modifier
			}
			save_scope_as = artifact
		}
		add_learning_skill = 1
	}

	option = {
		name = agot_filler_dragon.0070.a
	}
}

agot_filler_dragon.0071 = {
	type = character_event
	title = agot_filler_dragon.0071.t
	desc = agot_filler_dragon.0071.desc
	theme = dragon
	override_background = {
		reference = bedchamber
	}
	right_portrait = {
		character = root
		animation = pain
	}

	trigger = {
		any_equipped_character_artifact = {
			has_artifact_modifier = dragon_blood_and_bones_potion_modifier
		}
	}

	immediate = {
		every_equipped_character_artifact = {
			limit = {
				has_artifact_modifier = dragon_blood_and_bones_potion_modifier
			}
			save_scope_as = artifact
		}
		increase_wounds_effect = { REASON = wounds }
	}

	option = {
		name = agot_filler_dragon.0071.a
	}
}

agot_filler_dragon.0072 = {
	type = character_event
	title = agot_filler_dragon.0072.t
	desc = {
		first_valid = {
			triggered_desc = {
				trigger = {
					has_character_flag = dragon_potion_bad_health
				}
				desc = agot_filler_dragon.0072.desc.bad
			}
			desc = agot_filler_dragon.0072.desc.good
		}
	}
	theme = dragon
	override_background = {
		reference = bedchamber
	}
	right_portrait = {
		character = root
		animation = personality_rational
	}

	trigger = {
		any_equipped_character_artifact = {
			has_artifact_modifier = dragon_blood_and_bones_potion_modifier
		}
	}

	immediate = {
		random_list = {
			50 = {
				add_character_flag = {
					flag = dragon_potion_bad_health
					days = 2
				}
			}
			50 = {
				add_character_flag = {
					flag = dragon_potion_good_health
					days = 2
				}
			}
		}
		every_equipped_character_artifact = {
			limit = {
				has_artifact_modifier = dragon_blood_and_bones_potion_modifier
			}
			save_scope_as = artifact
		}
	}

	option = {
		name = agot_filler_dragon.0072.a
		trigger = {
			has_character_flag = dragon_potion_bad_health
			NOT = { has_character_flag = dragon_potion_good_health }
		}
		add_character_modifier = {
			modifier = agot_dragon_potion_bad_health
			years = 2
		}
	}

	option = {
		name = agot_filler_dragon.0072.b
		trigger = {
			has_character_flag = dragon_potion_good_health
			NOT = { has_character_flag = dragon_potion_bad_health }
		}
		add_character_modifier = {
			modifier = agot_dragon_potion_good_health
			years = 2
		}
	}
}

agot_filler_dragon.0073 = {
	type = character_event
	title = agot_filler_dragon.0073.t
	desc = {
		first_valid = {
			triggered_desc = {
				trigger = {
					has_character_flag = dragon_potion_bad_dreams
				}
				desc = agot_filler_dragon.0073.desc.bad
			}
			desc = agot_filler_dragon.0073.desc.good
		}
	}
	theme = dragon
	override_background = {
		reference = bedchamber
	}
	right_portrait = {
		character = root
		animation = fear
		triggered_animation = {
			trigger = {
				has_character_flag = dragon_potion_good_dreams
			}
			animation = happiness
		}
	}

	trigger = {
		any_equipped_character_artifact = {
			has_artifact_modifier = dragon_blood_and_bones_potion_modifier
		}
	}

	immediate = {
		random_list = {
			50 = {
				add_character_flag = {
					flag = dragon_potion_bad_dreams
					days = 2
				}
				add_stress = medium_stress_gain
			}
			50 = {
				add_character_flag = {
					flag = dragon_potion_good_dreams
					days = 2
				}
				add_stress = medium_stress_loss
			}
		}
		every_equipped_character_artifact = {
			limit = {
				has_artifact_modifier = dragon_blood_and_bones_potion_modifier
			}
			save_scope_as = artifact
		}
	}

	option = {
		name = agot_filler_dragon.0073.a
		trigger = {
			has_character_flag = dragon_potion_bad_dreams
		}
	}

	option = {
		name = agot_filler_dragon.0073.b
		trigger = {
			has_character_flag = dragon_potion_good_dreams
		}
	}
}

agot_filler_dragon.0074 = {
	type = character_event
	title = agot_filler_dragon.0074.t
	desc = agot_filler_dragon.0074.desc
	theme = dragon
	override_background = {
		reference = corridor_day
	}
	right_portrait = {
		character = root
		animation = severelywounded
	}

	trigger = {
		any_equipped_character_artifact = {
			has_artifact_modifier = dragon_blood_and_bones_potion_modifier
		}
	}

	immediate = {
		every_equipped_character_artifact = {
			limit = {
				has_artifact_modifier = dragon_blood_and_bones_potion_modifier
			}
			save_scope_as = artifact
		}
	}

	option = {
		name = agot_filler_dragon.0074.a
		flavor = agot_filler_dragon.0074.a.f
		death = {
			death_reason = death_spontaneous_combustion
			artifact = scope:artifact
		}
	}
}

################################
# WALK YOUR DRAGON (0075-0076) #
# by: Steelers                 #
################################
# 0075 - The dragon setup event for 0076
agot_filler_dragon.0075 = {
	hidden = yes
	cooldown = {
		years = 5
	}
	trigger = {
		exists = var:current_rider
		var:current_rider = {
			OR = {
				has_trait = lunatic_1
				has_trait = lunatic_genetic
				has_trait = eccentric
			}
		}
	}

	immediate = {
		var:current_rider = {
			trigger_event = agot_filler_dragon.0076
		}
	}
}

scripted_effect agot_filler_dragon_0076_murderer_opinion_impact_effect = {
	# cruelty -> angry -> hurt -> disappointed <- pleased <- amused <- admiration
	if = {
		limit = { ai_compassion >= very_high_positive_ai_value }
		add_opinion = {
			target = root
			modifier = cruelty_opinion
			opinion = -35
		}
	}
	else_if = {
		limit = { ai_compassion >= high_positive_ai_value }
		add_opinion = {
			target = root
			modifier = angry_opinion
			opinion = -25
		}
	}
	else_if = {
		limit = { ai_compassion >= medium_positive_ai_value }
		add_opinion = {
			target = root
			modifier = hurt_opinion
			opinion = -15
		}
	}
	else_if = {
		limit = { ai_compassion <= very_high_negative_ai_value }
		add_opinion = {
			target = root
			modifier = admiration_opinion
			opinion = 20
		}
	}
	else_if = {
		limit = { ai_compassion <= high_negative_ai_value }
		add_opinion = {
			target = root
			modifier = amused_opinion
			opinion = 10
		}
	}
	else_if = {
		limit = { ai_compassion <= medium_negative_ai_value }
		add_opinion = {
			target = root
			modifier = pleased_opinion
			opinion = 0
		}
	}
	else = {
		add_opinion = {
			target = root
			modifier = disappointed_opinion
			opinion = -10
		}
	}
}

# 0076 - Take your dragon for a walk
agot_filler_dragon.0076 = {
	type = character_event
	title = agot_filler_dragon.0076.t
	desc = agot_filler_dragon.0076.desc
	theme = dragon
	override_background = {
		reference = market
	}

	right_portrait = {
		character = root
		animation = ecstasy
	}
	# left_portrait = {  # AGOT TODO: Uncomment when dragon portraits work
	# 	character = prev
	# 	# animation = idle
	# }

	immediate = {
		var:current_dragon = {
			save_scope_as = pet_dragon
		}
	}

	option = {  # Sit
		name = agot_filler_dragon.0076.a

		random_list = {
			50 = {  # Success - Give a little prestige and dragonrider exp
				desc = agot_filler_dragon.0076.success.sit
				modifier = {  # Dragon's temperament value
					add = scope:pet_dragon.temperament
				}
				modifier = {  # Has lvl 1 rider training/bond
					add = 10
					OR = {
						has_trait_xp = {
							trait = dragonrider
							track = dragon_training
							value >= 30  # Level 1
						}
						has_trait_xp = {
							trait = dragonrider
							track = dragon_bond
							value >= 30  # Level 1
						}
					}
				}
				modifier = {  # Has lvl 2 rider training/bond
					add = 10
					OR = {
						has_trait_xp = {
							trait = dragonrider
							track = dragon_training
							value >= 65  # Level 2
						}
						has_trait_xp = {
							trait = dragonrider
							track = dragon_bond
							value >= 65  # Level 2
						}
					}
				}
				modifier = {  # Has lvl 3 rider training/bond
					add = 10
					OR = {
						has_trait_xp = {
							trait = dragonrider
							track = dragon_training
							value >= 100  # Level 3
						}
						has_trait_xp = {
							trait = dragonrider
							track = dragon_bond
							value >= 100  # Level 3
						}
					}
				}

				add_prestige = miniscule_prestige_gain
				agot_add_dragon_training_xp = { VALUE = 2 }
				add_trait_xp = {
					trait = dragonrider
					track = dragon_bond
					value = 2
				}
				hidden_effect = {
					send_interface_toast = {
						title = agot_filler_dragon.0076.success
						custom_tooltip = agot_filler_dragon.0076.success.sat
						left_icon = root
						right_icon = scope:pet_dragon
					}
				}
			}
			50 = {  # Failure - Loss a little prestige and dragonrider exp
				desc = agot_filler_dragon.0076.failure.sit
				modifier = {  # Dragon's temperament value
					add = {
						value = 0
						subtract = scope:pet_dragon.temperament
					}
				}
				modifier = {  # Has lvl 1 rider training/bond
					add = -10
					OR = {
						has_trait_xp = {
							trait = dragonrider
							track = dragon_training
							value >= 30  # Level 1
						}
						has_trait_xp = {
							trait = dragonrider
							track = dragon_bond
							value >= 30  # Level 1
						}
					}
				}
				modifier = {  # Has lvl 2 rider training/bond
					add = -10
					OR = {
						has_trait_xp = {
							trait = dragonrider
							track = dragon_training
							value >= 65  # Level 2
						}
						has_trait_xp = {
							trait = dragonrider
							track = dragon_bond
							value >= 65  # Level 2
						}
					}
				}
				modifier = {  # Has lvl 3 rider training/bond
					add = -10
					OR = {
						has_trait_xp = {
							trait = dragonrider
							track = dragon_training
							value >= 100  # Level 3
						}
						has_trait_xp = {
							trait = dragonrider
							track = dragon_bond
							value >= 100  # Level 3
						}
					}
				}

				add_prestige = miniscule_prestige_loss
				add_trait_xp = {
					trait = dragonrider
					track = dragon_training
					value = -2
				}
				add_trait_xp = {
					trait = dragonrider
					track = dragon_bond
					value = -2
				}
				hidden_effect = {
					send_interface_toast = {
						title = agot_filler_dragon.0076.success
						custom_tooltip = agot_filler_dragon.0076.failure.sat
						left_icon = root
						right_icon = scope:pet_dragon
					}
				}
			}
		}

		ai_chance = {
			base = 30
			modifier = {  # The more irrational, the more likely to do this
				add = {
					value = 0
					subtract = ai_rationality
				}
			}
		}
	}

	option = {  # Shake
		name = agot_filler_dragon.0076.b

		random_list = {
			50 = {  # Success - Give a decent prestige and dragonrider exp + potential modifier
				desc = agot_filler_dragon.0076.success.shake
				modifier = {  # Dragon's temperament value
					add = {
						value = scope:pet_dragon.temperament
						multiply = 0.5
					}
				}
				modifier = {  # Has lvl 1 rider training/bond
					add = 10
					OR = {
						has_trait_xp = {
							trait = dragonrider
							track = dragon_training
							value >= 30  # Level 1
						}
						has_trait_xp = {
							trait = dragonrider
							track = dragon_bond
							value >= 30  # Level 1
						}
					}
				}
				modifier = {  # Has lvl 2 rider training/bond
					add = 10
					OR = {
						has_trait_xp = {
							trait = dragonrider
							track = dragon_training
							value >= 65  # Level 2
						}
						has_trait_xp = {
							trait = dragonrider
							track = dragon_bond
							value >= 65  # Level 2
						}
					}
				}
				modifier = {  # Has lvl 3 rider training/bond
					add = 10
					OR = {
						has_trait_xp = {
							trait = dragonrider
							track = dragon_training
							value >= 100  # Level 3
						}
						has_trait_xp = {
							trait = dragonrider
							track = dragon_bond
							value >= 100  # Level 3
						}
					}
				}

				add_prestige = minor_prestige_gain
				random_list = {
					50 = {
						# Nothing :)
					}
					50 = {
						location.county = {
							add_county_modifier = {
								modifier = entertained_peasants
								years = 2
							}
						}
					}
				}
				agot_add_dragon_training_xp = { VALUE = 10 }
				add_trait_xp = {
					trait = dragonrider
					track = dragon_bond
					value = 5
				}
				hidden_effect = {
					send_interface_toast = {
						title = agot_filler_dragon.0076.success
						custom_tooltip = agot_filler_dragon.0076.success.shook
						left_icon = root
						right_icon = scope:pet_dragon
					}
				}
			}
			50 = {  # Failure - Loss a decent prestige and dragonrider exp + potential injury
				desc = agot_filler_dragon.0076.failure.shake
				modifier = {  # Dragon's temperament value
					add = {
						value = 0
						subtract = scope:pet_dragon.temperament
						multiply = 0.5
					}
				}
				modifier = {  # Has lvl 1 rider training/bond
					add = -10
					OR = {
						has_trait_xp = {
							trait = dragonrider
							track = dragon_training
							value >= 30  # Level 1
						}
						has_trait_xp = {
							trait = dragonrider
							track = dragon_bond
							value >= 30  # Level 1
						}
					}
				}
				modifier = {  # Has lvl 2 rider training/bond
					add = -10
					OR = {
						has_trait_xp = {
							trait = dragonrider
							track = dragon_training
							value >= 65  # Level 2
						}
						has_trait_xp = {
							trait = dragonrider
							track = dragon_bond
							value >= 65  # Level 2
						}
					}
				}
				modifier = {  # Has lvl 3 rider training/bond
					add = -10
					OR = {
						has_trait_xp = {
							trait = dragonrider
							track = dragon_training
							value >= 100  # Level 3
						}
						has_trait_xp = {
							trait = dragonrider
							track = dragon_bond
							value >= 100  # Level 3
						}
					}
				}

				add_prestige = minor_prestige_loss
				custom_tooltip = agot_filler_dragon.0076.injury_warning
				hidden_effect = {
					send_interface_toast = {
						title = agot_filler_dragon.0076.failure
						custom_tooltip = agot_filler_dragon.0076.failure.shook
						left_icon = root
						right_icon = scope:pet_dragon
						random_list = {
							100 = { modifier = { add = prowess } }  # Nothing
							1 = { add_trait = blind }
							1 = { add_trait = one_eyed }
							1 = { add_trait = maimed }
							1 = { add_trait = disfigured }
							1 = { add_trait = incapable }
							20 = { add_trait = scarred }
							10 = { add_trait = wounded_3 }
							25 = { add_trait = wounded_2 }
							40 = { add_trait = wounded_1 }
						}
					}
				}
				add_trait_xp = {
					trait = dragonrider
					track = dragon_training
					value = -2
				}
				add_trait_xp = {
					trait = dragonrider
					track = dragon_bond
					value = -2
				}
			}
		}

		ai_chance = {
			base = 20
			modifier = {  # The more irrational, the more likely to do this
				add = {
					value = 0
					subtract = ai_rationality
				}
			}
		}
	}

	option = {  # Do a flip!
		name = agot_filler_dragon.0076.c

		random_list = {
			50 = {  # Success - Give a decent prestige and dragonrider exp + potential modifier
				desc = agot_filler_dragon.0076.success.flip_past
				modifier = {  # Dragon's temperament value
					add = {
						value = scope:pet_dragon.temperament
						multiply = 0.5
					}
				}
				modifier = {  # Has lvl 1 rider training/bond
					add = 10
					OR = {
						has_trait_xp = {
							trait = dragonrider
							track = dragon_training
							value >= 30  # Level 1
						}
						has_trait_xp = {
							trait = dragonrider
							track = dragon_bond
							value >= 30  # Level 1
						}
					}
				}
				modifier = {  # Has lvl 2 rider training/bond
					add = 10
					OR = {
						has_trait_xp = {
							trait = dragonrider
							track = dragon_training
							value >= 65  # Level 2
						}
						has_trait_xp = {
							trait = dragonrider
							track = dragon_bond
							value >= 65  # Level 2
						}
					}
				}
				modifier = {  # Has lvl 3 rider training/bond
					add = 10
					OR = {
						has_trait_xp = {
							trait = dragonrider
							track = dragon_training
							value >= 100  # Level 3
						}
						has_trait_xp = {
							trait = dragonrider
							track = dragon_bond
							value >= 100  # Level 3
						}
					}
				}

				add_prestige = major_prestige_gain
				hidden_effect = {
					send_interface_toast = {
						title = agot_filler_dragon.0076.success
						custom_tooltip = agot_filler_dragon.0076.success.flip
						left_icon = root
						right_icon = scope:pet_dragon
						random_list = {
							50 = {
								# Nothing :)
							}
							50 = {
								location.county = {  # :,) they really pulled it off
									add_county_modifier = {
										modifier = county_confident_in_humanity_modifier
										years = 2
									}
								}
							}
						}
					}
				}
				agot_add_dragon_training_xp = { VALUE = 10 }
				add_trait_xp = {
					trait = dragonrider
					track = dragon_bond
					value = 10
				}
			}
			50 = {  # Failure - Loss a decent prestige and dragonrider exp + potential injury
				desc = agot_filler_dragon.0076.failure.flip_past
				modifier = {  # Dragon's temperament value
					add = {
						value = 0
						subtract = scope:pet_dragon.temperament
						multiply = 0.5
					}
				}
				modifier = {  # Has lvl 1 rider training/bond
					add = -10
					OR = {
						has_trait_xp = {
							trait = dragonrider
							track = dragon_training
							value >= 30  # Level 1
						}
						has_trait_xp = {
							trait = dragonrider
							track = dragon_bond
							value >= 30  # Level 1
						}
					}
				}
				modifier = {  # Has lvl 2 rider training/bond
					add = -10
					OR = {
						has_trait_xp = {
							trait = dragonrider
							track = dragon_training
							value >= 65  # Level 2
						}
						has_trait_xp = {
							trait = dragonrider
							track = dragon_bond
							value >= 65  # Level 2
						}
					}
				}
				modifier = {  # Has lvl 3 rider training/bond
					add = -10
					OR = {
						has_trait_xp = {
							trait = dragonrider
							track = dragon_training
							value >= 100  # Level 3
						}
						has_trait_xp = {
							trait = dragonrider
							track = dragon_bond
							value >= 100  # Level 3
						}
					}
				}

				add_prestige = medium_prestige_loss
				custom_tooltip = agot_filler_dragon.0076.injury_warning
				hidden_effect = {
					send_interface_toast = {
						title = agot_filler_dragon.0076.failure
						custom_tooltip = agot_filler_dragon.0076.failure.flip
						left_icon = root
						right_icon = scope:pet_dragon
						random_list = {
							100 = { modifier = { add = prowess } }  # Nothing
							1 = { add_trait = one_legged }
							1 = { add_trait = maimed }
							1 = { add_trait = disfigured }
							7 = { add_trait = incapable }
							10 = { add_trait = scarred }
							30 = { add_trait = wounded_3 }
							35 = { add_trait = wounded_2 }
							15 = { add_trait = wounded_1 }
						}
					}
				}
				add_trait_xp = {
					trait = dragonrider
					track = dragon_training
					value = -2
				}
				add_trait_xp = {
					trait = dragonrider
					track = dragon_bond
					value = -2
				}
			}
		}

		ai_chance = {
			base = 15
			modifier = {  # The more irrational, the more likely to do this
				add = {
					value = 0
					subtract = ai_rationality
				}
			}
		}
	}

	option = {  # Murder the innocents
		name = agot_filler_dragon.0076.d
		trigger = {
			OR = {
				has_trait = lunatic_1
				has_trait = lunatic_genetic
				has_trait = sadistic
			}
		}
		custom_tooltip = agot_filler_dragon.0076.d.tt

		add_prestige = medium_prestige_loss
		add_dread = major_dread_gain
		location.county = {
			add_county_modifier = {
				modifier = agot_murdered_the_innocents
				years = 2
			}
		}
		custom_tooltip = agot_filler_dragon.0076.d.tt.vassals_warning
		hidden_effect = {
			every_vassal_or_below = {
				agot_filler_dragon_0076_murderer_opinion_impact_effect = yes
			}
		}
		custom_tooltip = agot_filler_dragon.0076.d.tt.courtiers_warning
		hidden_effect = {
			every_courtier_or_guest = {
				agot_filler_dragon_0076_murderer_opinion_impact_effect = yes
			}
		}

		ai_chance = {
			base = 5
			modifier = {  # The more cruel, the more likely to do this
				add = {
					value = 0
					subtract = ai_compassion
					divide = 2  # For balancing as AI should not choose this as much
				}
			}
		}
	}

	option = {  # They don't deserve a performance
		name = agot_filler_dragon.0076.e

		ai_chance = {
			base = 30
		}
	}
}

#########################################
# KNIGHT & MERCHANT FILLER	(0081-0087) #
# by: Sililex                           #
#########################################
# 0081 - The dragon setup event for 0082
agot_filler_dragon.0081 = {
	hidden = yes
	cooldown = {
		years = 5
	}
	trigger = {
		age >= 16
		exists = var:current_rider
		var:current_rider = {
			is_landed = yes
			is_available_healthy_adult = yes
			location = capital_province # At home
			is_at_war = no # Knights should be serving if at war
		}
	}
	immediate = {
		create_character = {
			template = agot_hedgeknight_character
			location = var:current_rider.location
			after_creation = {
				add_prowess_skill = { 5 12 } # They're decent or they wouldn't be here
				save_scope_as = brave_knight
			}
		}
		save_scope_as = dragon
		var:current_rider = {
			if = {
				limit = {
					has_royal_court = yes
				}
				trigger_event = agot_filler_dragon.0082
			}
			else = {
				trigger_event = agot_filler_dragon.0083
			}
		}
	}
}

agot_filler_dragon.0082 = { # Royal Court Version
	type = court_event
	title = agot_filler_dragon.0082.t
	desc = agot_filler_dragon.0082.desc
	theme = court
	lower_left_portrait = var:current_dragon
	court_scene = {
		button_position_character = scope:brave_knight
		roles = {
			scope:brave_knight = {
				group = event_group
				animation = personality_bold
			}
			root = {
				group = event_group
				animation = eyeroll
				triggered_animation = {
					trigger = {
						OR = {
							has_trait = brave
							has_trait = just
							has_trait = humble
						}
					}
					animation = personality_rational
				}
			}
		}
	}

	option = {
		name = agot_filler_dragon.0082.a
		flavor = agot_filler_dragon.0082.a.f
		ai_chance = {
			base = 50
			ai_value_modifier = {
				ai_boldness = 0.5
			}
		}
		custom_tooltip = agot_filler_dragon.0082.a.tt_1
		custom_tooltip = agot_filler_dragon.0082.a.tt_2
		hidden_effect = {
			random_list = {
				100 = { # Dragons almost always win
					modifier = {
						add = var:current_dragon.dragon_size
					}
					scope:brave_knight = {
						random_list = {
							33 = {
								death = {
									death_reason = death_dragon_ate
									killer = root.var:current_dragon
								}
							}
							33 = {
								death = {
									death_reason = death_dragon_stomped
									killer = root.var:current_dragon
								}
							}
							33 = {
								death = {
									death_reason = death_dragon_fire
									killer = root.var:current_dragon
								}
							}
						}
					}
					trigger_event = agot_filler_dragon.0084
				}
				0 = { # But it's not outright impossible
					modifier = {
						add = scope:brave_knight.prowess
						add = -20
						scope:brave_knight.prowess > 20 # Only decent warriors even have a chance
					}
					scope:brave_knight = {
						add_prestige = 1000
						set_variable = {
							name = slain_dragon
							value = root.var:current_dragon
						}
						add_trait = dragonslayer
						give_nickname = nick_the_dragonslayer
						create_character_memory = {
							type = agot_slayed_dragon
							participants = {
								slayed_dragon = root.var:current_dragon
							}
						}
						if = {
							limit = {
								is_acclaimed = yes
							}
							accolade = {
								add_glory = major_glory_gain
							}
						}
					}
					var:current_dragon = {
						death = {
							death_reason = death_duel
							killer = scope:brave_knight
						}
					}
					trigger_event = agot_filler_dragon.0085
				}
			}
		}
		stress_impact = {
			compassionate = medium_stress_impact_gain
			arrogant = minor_stress_impact_loss
			sadistic = minor_stress_impact_loss
		}
	}

	option = { # Are you out of your mind?
		name = agot_filler_dragon.0082.b
		flavor = agot_filler_dragon.0082.b.f
		ai_chance = {
			base = 50
			ai_value_modifier = {
				ai_boldness = -0.5
			}
		}
		add_prestige = minor_prestige_loss
		remove_courtier_or_guest = scope:brave_knight
		stress_impact = {
			arrogant = medium_stress_impact_gain
		}
	}
}


agot_filler_dragon.0083 = { # DLC-Free Version
	type = character_event
	title = agot_filler_dragon.0082.t
	desc = agot_filler_dragon.0082.desc
	theme = dragon
	override_background = {
		reference = throne_room
	}
	lower_right_portrait = var:current_dragon
	right_portrait = {
		character = root
		animation = eyeroll
		triggered_animation = {
			trigger = {
				OR = {
					has_trait = brave
					has_trait = just
					has_trait = humble
				}
			}
			animation = personality_rational
		}
	}
	left_portrait = {
		character = scope:brave_knight
		animation = personality_bold
	}

	option = {
		name = agot_filler_dragon.0082.a
		flavor = agot_filler_dragon.0082.a.f
		ai_chance = {
			base = 50
			ai_value_modifier = {
				ai_boldness = -0.5
			}
		}
		custom_tooltip = agot_filler_dragon.0082.a.tt_1
		custom_tooltip = agot_filler_dragon.0082.a.tt_2
		hidden_effect = {
			random_list = {
				100 = { # Dragons almost always win
					modifier = {
						add = var:current_dragon.dragon_size
					}
					scope:brave_knight = {
						random_list = {
							33 = {
								death = {
									death_reason = death_dragon_ate
									killer = root.var:current_dragon
								}
							}
							33 = {
								death = {
									death_reason = death_dragon_stomped
									killer = root.var:current_dragon
								}
							}
							33 = {
								death = {
									death_reason = death_dragon_fire
									killer = root.var:current_dragon
								}
							}
						}
					}
					trigger_event = agot_filler_dragon.0084
				}
				0 = { # But it's not outright impossible
					modifier = {
						add = scope:brave_knight.prowess
						add = -20
						scope:brave_knight.prowess > 20 # Only decent warriors even have a chance
					}
					scope:brave_knight = {
						add_prestige = 1000
						set_variable = {
							name = slain_dragon
							value = root.var:current_dragon
						}
						add_trait = dragonslayer
						give_nickname = nick_the_dragonslayer
						create_character_memory = {
							type = agot_slayed_dragon
							participants = {
								slayed_dragon = root.var:current_dragon
							}
						}
						if = {
							limit = {
								is_acclaimed = yes
							}
							accolade = {
								add_glory = major_glory_gain
							}
						}
					}
					var:current_dragon = {
						death = {
							death_reason = death_duel
							killer = scope:brave_knight
						}
					}
					trigger_event = agot_filler_dragon.0085
				}
			}
		}
		stress_impact = {
			compassionate = medium_stress_impact_gain
			arrogant = minor_stress_impact_loss
			sadistic = minor_stress_impact_loss
		}
	}

	option = { # Are you out of your mind?
		name = agot_filler_dragon.0082.b
		flavor = agot_filler_dragon.0082.b.f
		ai_chance = {
			base = 50
			ai_value_modifier = {
				ai_boldness = -0.5
			}
		}
		add_prestige = minor_prestige_loss
		stress_impact = {
			arrogant = medium_stress_impact_gain
		}
	}
}

agot_filler_dragon.0084 = { # Dragon won the duel
	type = character_event
	title = agot_filler_dragon.0084.t
	desc = {
		desc = agot_filler_dragon.0084.desc
		triggered_desc = {
			trigger = { scope:brave_knight = { death_reason = death_dragon_ate }}
			desc = agot_filler_dragon.0084.desc.eaten
		}
		triggered_desc = {
			trigger = { scope:brave_knight = { death_reason = death_dragon_stomped }}
			desc = agot_filler_dragon.0084.desc.crushed
		}
		triggered_desc = {
			trigger = { scope:brave_knight = { death_reason = death_dragon_fire }}
			desc = agot_filler_dragon.0084.desc.burned
		}
		desc = agot_filler_dragon.0084.desc_end
	}
	theme = dragon
	override_background = {
		reference = throne_room
	}
	lower_right_portrait = var:current_dragon
	right_portrait = {
		character = root
		animation = dismissal
	}
	lower_left_portrait = scope:brave_knight

	option = {
		name = agot_filler_dragon.0084.a
		flavor = agot_filler_dragon.0084.a.f
		add_prestige = minor_prestige_gain
	}
}

agot_filler_dragon.0085 = { # Knight won the duel
	type = character_event
	title = agot_filler_dragon.0085.t
	desc = agot_filler_dragon.0085.desc
	theme = dragon
	override_background = {
		reference = throne_room
	}
	lower_right_portrait = var:current_dragon
	right_portrait = {
		character = root
		animation = grief
	}
	left_portrait = {
		character = scope:brave_knight
		animation = celebrate_sword
	}

	immediate = {
		show_as_tooltip = {
			scope:brave_knight = {
				add_prestige = 1000
				set_variable = {
					name = slain_dragon
					value = root.var:current_dragon
				}
				add_trait = dragonslayer
				give_nickname = nick_the_dragonslayer
				create_character_memory = {
					type = agot_slayed_dragon
					participants = {
						slayed_dragon = root.var:current_dragon
					}
				}
				if = {
					limit = {
						is_acclaimed = yes
					}
					accolade = {
						add_glory = major_glory_gain
					}
				}
			}
			var:current_dragon = {
				death = {
					death_reason = death_duel
					killer = scope:brave_knight
				}
			}
		}
		add_stress = medium_stress_gain
	}

	option = { # You must join me!
		name = agot_filler_dragon.0085.a
		flavor = agot_filler_dragon.0085.a.f
		ai_chance = {
			base = 20
			ai_value_modifier = {
				ai_rationality = 0.2
				ai_compassion = 0.8
			}
		}
		stress_impact = {
			arrogant = major_stress_impact_gain
			vengeful = major_stress_impact_gain
			wrathful = major_stress_impact_gain
		}
	}

	option = { # GET OUT!
		name = agot_filler_dragon.0085.b
		flavor = agot_filler_dragon.0085.b.f
		ai_chance = {
			base = 20
			ai_value_modifier = {
				ai_vengefulness = 0.2
				ai_rationality = 0.8
			}
		}
		set_relation_rival = scope:brave_knight
		stress_impact = {
			base = medium_stress_impact_gain
			arrogant = medium_stress_impact_gain
		}
		remove_courtier_or_guest = scope:brave_knight
	}

	option = { # To prison lol
		name = agot_filler_dragon.0085.c
		flavor = agot_filler_dragon.0085.c.f
		ai_chance = {
			base = 20
			ai_value_modifier = {
				ai_boldness = 0.2
				ai_vengefulness = 0.8
			}
		}
		set_relation_rival = scope:brave_knight
		stress_impact = {
			arrogant = minor_stress_impact_loss
			vengeful = minor_stress_impact_loss
			wrathful = minor_stress_impact_loss
			compassionate = medium_stress_impact_gain
		}
		imprison = {
			target = scope:brave_knight
			type = dungeon
		}
	}
}

# 0086 - The dragon setup event for 0087
agot_filler_dragon.0086 = {
	hidden = yes
	trigger = {
		age >= 16
		exists = var:current_rider
		var:current_rider = {
			is_landed = yes
			is_available_healthy_adult = yes
			location = capital_province # At home
		}
		location = var:current_rider.capital_province # Also at home
	}
	immediate = {
		save_scope_as = dragon
		var:current_rider = {
			create_character = {
				template = agot_merchant_character
				culture = this.location.culture
				faith = this.location.faith
				location = this.location
				after_creation = {
					save_scope_as = merchant_petitioner
				}
			}
			trigger_event = agot_filler_dragon.0087
		}
	}
}

# 0087 - The merchant's request
agot_filler_dragon.0087 = {
	type = character_event
	title = agot_filler_dragon.0087.t
	desc = agot_filler_dragon.0087.desc
	theme = dragon
	override_background = {
		reference = throne_room
	}
	lower_right_portrait = var:current_dragon
	right_portrait = {
		character = root
		animation = dismissal
		triggered_animation = {
			trigger = {
				OR = {
					has_trait = compassionate
					has_trait = humble
					has_trait = greedy
				}
			}
			animation = personality_rational
		}
	}
	left_portrait = {
		character = scope:merchant_petitioner
		animation = personality_bold
	}

	option = {
		name = agot_filler_dragon.0087.a
		flavor = agot_filler_dragon.0087.a.f
		ai_chance = {
			base = 50
			ai_value_modifier = {
				ai_rationality = 0.5
			}
			modifier = {
				factor = 0
				OR = {
					has_trait = sadistic
					has_trait = vengeful
				}
			}
		}
		add_prestige = medium_prestige_loss
		add_gold = medium_gold_value
		stress_impact = {
			greedy = minor_stress_impact_loss
			arrogant = minor_stress_impact_gain
		}
	}

	option = {
		name = agot_filler_dragon.0087.b
		flavor = agot_filler_dragon.0087.b.f
		ai_chance = {
			base = 50
			ai_value_modifier = {
				ai_honor = 0.5
			}
			modifier = {
				factor = 0
				OR = {
					has_trait = sadistic
					has_trait = vengeful
				}
			}
		}
		add_prestige = minor_prestige_gain
		stress_impact = {
			greedy = minor_stress_impact_gain
			arrogant = minor_stress_impact_loss
		}
	}

	option = {
		name = agot_filler_dragon.0087.c
		flavor = agot_filler_dragon.0087.c.f
		trigger = {
			OR = {
				has_trait = sadistic
				has_trait = vengeful
			}
		}
		ai_chance = {
			base = 100
		}
		add_gold = medium_gold_value
		add_prestige = medium_prestige_loss
		add_dread = minor_dread_gain
		scope:merchant_petitioner = {
			death = {
				death_reason = death_dropped_from_dragon
				killer = root.var:current_dragon
			}
		}
	}
}

#########################################
# LORD'S FILLER (0088-0091)             #
# Scripted by Sililex, written by Lord  #
#########################################
agot_filler_dragon.0088 = {
	hidden = yes
	cooldown = {
		years = 5
	}
	trigger = {
		has_character_flag = owned_dragon
		exists = var:current_rider
		age >= dragon_maturity_age
		var:current_rider = {
			is_available_adult = yes
			has_trait = craven
		}
	}
	immediate = {
		var:current_rider = {
			trigger_event = {
				id = agot_filler_dragon.0089
			}
		}
	}
}

agot_filler_dragon.0089 = {
	type = character_event
	window = dragon_character_event
	title = agot_filler_dragon.0089.t
	desc = {
		desc = agot_filler_dragon.0089.desc
		first_valid = {
			triggered_desc = {
				trigger = { is_married = yes }
				desc = agot_filler_dragon.0089.desc_spouse
			}
			desc = agot_filler_dragon.0089.desc_no_spouse
		}
		desc = agot_filler_dragon.0089.desc_cont
	}
	theme = dragon
	left_portrait = {
		character = root
		animation = worry
	}
	right_portrait = {
		character = var:current_dragon
		animation = dragon_idle
		camera = camera_dragon_event_right
	}

	immediate = {
		var:current_dragon = {
			save_scope_as = dragon
		}
	}

	option = { # Prowess
		name = agot_filler_dragon.0089.a
		flavor = agot_filler_dragon.0089.a.f
		ai_chance = {
			base = 30
			modifier = {
				add = prowess
			}
		}
		trigger = {
			AND = {
				NOT = { has_trait = calm }
				NOT = { has_trait = wrathful }
			}
		}
		duel = {
			skill = prowess
			value = 20
			50 = {
				compare_modifier = {
					value = scope:duel_value
					multiplier = 2.5
				}
				remove_trait = craven
				add_trait = calm
			}
			50 = {
				compare_modifier = {
					value = scope:duel_value
					multiplier = -2.5
				}
				send_interface_toast = {
					title = agot_filler_dragon.0089.stress.t
					left_icon = root
					right_icon = var:current_dragon
					add_stress = medium_stress_gain
				}
			}
		}
	}

	option = { # Learning
		name = agot_filler_dragon.0089.b
		flavor = agot_filler_dragon.0089.b.f
		ai_chance = {
			base = 35
			modifier = {
				add = learning
			}
		}
		trigger = {
			AND = {
				NOT = { has_trait = calm }
				NOT = { has_trait = wrathful }
			}
		}
		duel = {
			skill = learning
			value = 15
			50 = {
				compare_modifier = {
					value = scope:duel_value
					multiplier = 2.5
				}
				remove_trait = craven
				add_trait = calm
			}
			50 = {
				compare_modifier = {
					value = scope:duel_value
					multiplier = -2.5
				}
				send_interface_toast = {
					title = agot_filler_dragon.0089.stress.t
					left_icon = root
					right_icon = var:current_dragon
					add_stress = medium_stress_gain
				}
			}
		}
	}

	option = {
		name = agot_filler_dragon.0089.c
		flavor = agot_filler_dragon.0089.c.f
		trigger = {
			has_trait = calm
			NOT = { has_trait = authoritative }
		}
		ai_chance = {
			base = 50
		}
		remove_trait = craven
		if = {
			limit = {
				NOT = { has_trait = authoritative }
			}
			add_trait = authoritative
		}
	}

	option = {
		name = agot_filler_dragon.0089.d
		flavor = agot_filler_dragon.0089.d.f
		trigger = {
			has_trait = wrathful
			NOT = { has_trait = authoritative }
		}
		ai_chance = {
			base = 50
		}
		remove_trait = craven
		if = {
			limit = {
				NOT = { has_trait = authoritative }
			}
			add_trait = authoritative
		}
	}

	option = {
		name = agot_filler_dragon.0089.e
		flavor = agot_filler_dragon.0089.e.f
		trigger = {
			has_trait = fire_obsessed
			NOR = {
				has_trait = vengeful
				has_trait = forgiving
			}
		}
		ai_chance = {
			base = 50
		}
		remove_trait = craven
		add_trait = vengeful
	}

	option = {
		name = agot_filler_dragon.0089.f
		flavor = agot_filler_dragon.0089.f.f
		trigger = {
			has_trait = ambitious
			NOT = {
				OR = {
					has_trait = greedy
					has_trait = generous
				}
			}
		}
		remove_trait = craven
		add_trait = greedy
	}

	option = {
		name = agot_filler_dragon.0089.g
		flavor = agot_filler_dragon.0089.g.f
		trigger = {
			has_trait = patient
			NOT = {
				OR = {
					has_trait = calm
					has_trait = wrathful
				}
			}
		}
		ai_chance = {
			base = 50
		}
		remove_trait = craven
		add_trait = calm
	}

	option = {
		name = agot_filler_dragon.0089.h
		ai_chance = {
			base = 1
		}
	}
}

agot_filler_dragon.0090 = {
	hidden = yes
	trigger = {
		has_character_flag = owned_dragon
		exists = var:current_rider
		var:current_rider = {
			is_available_adult = yes
			OR = {
				has_trait = eccentric
				has_trait = lunatic_1
				has_trait = lunatic_genetic
			}
			NOT = { has_trait = fire_obsessed }
		}
	}
	immediate = {
		var:current_rider = {
			trigger_event = {
				id = agot_filler_dragon.0091
			}
		}
	}
}

agot_filler_dragon.0091 = {
	type = character_event
	title = agot_filler_dragon.0091.t
	desc = agot_filler_dragon.0091.desc
	theme = dragon
	override_background = {
		reference = bedchamber
	}
	right_portrait = {
		character = root
		animation = worry
	}
	lower_right_portrait = {
		character = var:current_dragon
		# camera = camera_dragon_head
		animation = dragon_head
		# camera = camera_dragon_event_center
	}

	immediate = {
		var:current_dragon = {
			save_scope_as = dragon
		}
	}


	widgets = {
		widget = {
			gui = "agot_shader_event_sparks"
			container = "agot_shader_event_foreground"
		}
	}

	option = {
		name = agot_filler_dragon.0091.a
		random_list = {
			50 = {
				add_trait = fire_obsessed
			}
			50 = {}
		}
	}

	option = {
		name = agot_filler_dragon.0091.b
		add_stress = medium_stress_gain
	}
}

############################################
# CHILD WANTS TO RIDE DRAGON (0092 - 0094) #
# by: Sililex                              #
############################################
agot_filler_dragon.0092 = {
	hidden = yes
	cooldown = {
		years = 5
	}
	trigger = {
		has_character_flag = owned_dragon
		exists = var:current_rider
		AND = {
			var:current_rider = {
				is_available = yes
				is_landed = yes
				location = capital_province
				any_child = {
					is_available = yes
					NOT = { has_trait = dragonrider }
					age >= 4
					age <= 13
					NOT = { has_character_flag = agot_child_asked_to_ride_dragon }
				}
			}
			location = var:current_rider.capital_province
		}
		location = var:current_rider.capital_province
	}
	immediate = {
		var:current_rider = {
			trigger_event = {
				id = agot_filler_dragon.0093
			}
		}
	}
}

agot_filler_dragon.0093 = {
	type = character_event
	title = agot_filler_dragon.0093.t
	desc = {
		first_valid = {
			triggered_desc = {
				trigger = { is_male = yes }
				desc = agot_filler_dragon.0093.desc_father
			}
			desc = agot_filler_dragon.0093.desc_mother
		}
		first_valid = {
			triggered_desc = {
				trigger = { scope:child = { has_trait = bossy } }
				desc = agot_filler_dragon.0093.desc_bossy
			}
			triggered_desc = {
				trigger = { scope:child = { has_trait = charming } }
				desc = agot_filler_dragon.0093.desc_charming
			}
			triggered_desc = {
				trigger = { scope:child = { has_trait = curious } }
				desc = agot_filler_dragon.0093.desc_curious
			}
			triggered_desc = {
				trigger = { scope:child = { has_trait = pensive } }
				desc = agot_filler_dragon.0093.desc_pensive
			}
			triggered_desc = {
				trigger = { scope:child = { has_trait = rowdy } }
				desc = agot_filler_dragon.0093.desc_rowdy
			}
		}
		desc = agot_filler_dragon.0093.desc_end
	}
	theme = dragon
	override_background = {
		reference = sitting_room
	}
	right_portrait = {
		character = root
		animation = worry
	}
	lower_right_portrait = {
		character = var:current_dragon
	}
	left_portrait = {
		character = scope:child
		animation = personality_greedy
		triggered_animation = {
			trigger = {
				scope:child = {
					has_trait = charming
				}
			}
			animation = personality_content
		}
		triggered_animation = {
			trigger = {
				scope:child = {
					has_trait = curious
				}
			}
			animation = personality_cynical
		}
		triggered_animation = {
			trigger = {
				scope:child = {
					has_trait = pensive
				}
			}
			animation = personality_rational
		}
		triggered_animation = {
			trigger = {
				scope:child = {
					has_trait = rowdy
				}
			}
			animation = personality_irrational
		}
	}

	immediate = {
		var:current_dragon = {
			save_scope_as = dragon
		}
		random_child = {
			limit = {
				is_available = yes
				NOT = { has_trait = dragonrider }
				age >= 4
				age <= 13
				NOT = { has_character_flag = agot_child_asked_to_ride_dragon }
			}
			save_scope_as = child
			add_character_flag = {
				flag = agot_child_asked_to_ride_dragon
				years = 10
			}
		}
	}

	option = { # No, it is too dangerous
		name = agot_filler_dragon.0093.a
		flavor = agot_filler_dragon.0093.a.f
		ai_chance = {
			base = 50
			ai_value_modifier = {
				ai_boldness = -0.5
			}
			modifier = {
				factor = 0
				OR = {
					has_trait = sadistic
					has_trait = eccentric
				}
			}
		}
		scope:child = {
			add_opinion = {
				modifier = disappointed_opinion
				target = ROOT
				opinion = -15
			}
			if = { # If they are not brave or craven, may become craven
				limit = {
					NOT = { has_trait = brave }
					NOT = { has_trait = craven }
					number_of_personality_traits < personality_trait_limit
				}
				random_list = {
					50 = {
						desc = agot_filler_dragon.0093.a.cowardly
						scope:child = {
							add_trait = craven
						}
					}
					50 = {
						desc = agot_filler_dragon.0093.a.not
					}
				}
			}
			else_if = { # Brave children 90% go
				limit = {
					has_trait = brave
				}
				hidden_effect = {
					random_list = {
						90 = {
							root = {
								trigger_event = {
									id = agot_filler_dragon.0094
									days = 1
								}
							}
						}
						10 = { }
					}
				}
			}
			else_if = { # Else use AI modifiers if not craven
				limit = {
					NOT = { has_trait = craven }
				}
				hidden_effect = {
					random_list = {
						50 = {
							ai_value_modifier = {
								ai_rationality = -0.2
								ai_boldness = 1
							}
							root = {
								trigger_event = {
									id = agot_filler_dragon.0094
									days = 1
								}
							}
						}
						50 = {
							ai_value_modifier = {
								ai_rationality = 0.2
								ai_boldness = -1
							}
						}
					}
				}
			}
		}
	}

	option = { # Alright, lets go!
		name = agot_filler_dragon.0093.b
		flavor = agot_filler_dragon.0093.b.f
		trigger = {
			NOT = {
				has_trait_xp = {
					trait = dragonrider
					track = dragon_bond
					value > 65
				}
			}
		}
		ai_chance = {
			base = 50
			ai_value_modifier = {
				ai_boldness = 0.5
			}
			modifier = {
				factor = 0
				OR = {
					has_trait = sadistic
					has_trait = eccentric
				}
			}
		}
		random_list = {
			90 = {
				desc = agot_filler_dragon.0093.b.good
				scope:child = {
					add_opinion = {
						modifier = grateful_opinion
						target = ROOT
						opinion = 15
					}
					if = {
						limit = {
							NOT = {
								OR = {
									has_trait = brave
									has_trait = craven
								}
							}
							number_of_personality_traits < personality_trait_limit
						}
						random_list = {
							20 = {
								desc = agot_filler_dragon.0093.b.love
								add_trait = brave
								add_stress = medium_stress_loss
							}
							80 = {
								desc = agot_filler_dragon.0093.b.indifferent
								add_stress = minor_stress_loss
							}
							20 = {
								desc = agot_filler_dragon.0093.b.hate
								add_trait = craven
								add_stress = medium_stress_gain
							}
						}
					}
				}
			}
			10 = {
				desc = agot_filler_dragon.0093.b.bad
				scope:child = {
					death = {
						death_reason = death_fell_from_other_dragon
					}
				}
			}
		}
	}

	option = { # Alright, lets go!
		name = agot_filler_dragon.0093.b_trait
		flavor = agot_filler_dragon.0093.b.good
		trigger = {
			has_trait_xp = {
				trait = dragonrider
				track = dragon_bond
				value > 65
			}
		}
		ai_chance = {
			base = 50
			ai_value_modifier = {
				ai_boldness = 0.5
			}
			modifier = {
				factor = 0
				OR = {
					has_trait = sadistic
					has_trait = eccentric
				}
			}
		}
		scope:child = {
			add_opinion = {
				modifier = grateful_opinion
				target = ROOT
				opinion = 15
			}
			if = {
				limit = {
					NOT = {
						OR = {
							has_trait = brave
							has_trait = craven
						}
					}
					number_of_personality_traits < personality_trait_limit
				}
				random_list = {
					20 = {
						desc = agot_filler_dragon.0093.b.love
						add_trait = brave
						add_stress = medium_stress_loss
					}
					80 = {
						desc = agot_filler_dragon.0093.b.indifferent
						add_stress = minor_stress_loss
					}
					20 = {
						desc = agot_filler_dragon.0093.b.hate
						add_trait = craven
						add_stress = medium_stress_gain
					}
				}
			}
		}
	}

	option = { # Oh I'll find you a dragon to ride!
		name = agot_filler_dragon.0093.c
		flavor = agot_filler_dragon.0093.c.f
		trigger = {
			OR = {
				has_trait = sadistic
				has_trait = eccentric
			}
		}
		ai_chance = {
			base = 100
		}
		scope:child = {
			if = {
				limit = {
					NOT = { has_relation_rival = root }
				}
				set_relation_rival = {
					target = root
					reason = rival_made_ride_dragon_piggyback
				}
			}
			add_stress = major_stress_gain
		}
		add_stress = major_stress_loss
	}
}

agot_filler_dragon.0094 = { # Child snuck in to ride dragon!
	type = character_event
	title = agot_filler_dragon.0094.t
	desc = {
		first_valid = {
			triggered_desc = {
				trigger = {
					scope:child = {
						is_alive = yes
					}
				}
				desc = agot_filler_dragon.0094.desc_alive
			}
			desc = agot_filler_dragon.0094.desc_dead
		}
	}
	theme = dragon
	override_background = {
		reference = fp3_courtyard_night
	}
	right_portrait = {
		character = root
		animation = shock
	}
	lower_right_portrait = {
		character = var:current_dragon
	}
	left_portrait = {
		character = scope:child
		animation = severely_injured
		triggered_animation = {
			trigger = {
				scope:child = {
					is_alive = yes
				}
			}
			animation = throne_room_cheer_2a
		}
	}

	immediate = {
		var:current_dragon = {
			save_scope_as = dragon
		}
		scope:child = {
			random_list = {
				50 = {
					if = {
						limit = { # To prevent weird tooltips
							is_alive = yes
						}
						if = {
							limit = {
								number_of_personality_traits < personality_trait_limit
							}
							add_trait = brave
						}
						add_prestige = 350
						random_list = {
							30 = {}
							10 = {
								give_nickname = nick_drakethief
							}
							10 = {
								give_nickname = nick_scalesnatcher
							}
							10 = {
								give_nickname = nick_the_rogue_rider
							}
						}
					}
				}
				50 = {
					death = {
						death_reason = death_fell_from_other_dragon
					}
					random_list = {
						90 = {}
						10 = {
							give_nickname = nick_the_dragonfaller
						}
					}
				}
			}
		}
	}

	option = {
		name = agot_filler_dragon.0094.a
		flavor = agot_filler_dragon.0094.a.f
		trigger = {
			scope:child = {
				is_alive = yes
			}
		}
	}

	option = {
		name = agot_filler_dragon.0094.b
		flavor = agot_filler_dragon.0094.b.f
		trigger = {
			NOT = { has_trait = sadistic }
			NOT = { has_trait = callous }
			scope:child = {
				is_alive = no
			}
		}
	}

	option = {
		name = agot_filler_dragon.0094.c
		flavor = agot_filler_dragon.0094.c.f
		trigger = {
			OR = {
				has_trait = sadistic
				has_trait = callous
			}
			scope:child = {
				is_alive = no
			}
		}
	}
}


#############################################
# WILD DRAGON DOES BAD THINGS (0095 - 0100) #
# by: Sililex                               #
#############################################

# Wild dragon does something bad
agot_filler_dragon.0095 = {
	hidden = yes
	cooldown = {
		months = 3
	}
	trigger = {
		NOT = { has_character_flag = owned_dragon }
		age >= dragon_maturity_age
		NOR = { # Dragon is not badly wounded
			has_trait = dragon_wounded_3
			has_trait = dragon_wounded_4
			has_trait = dragon_wounded_5
		}
		location.county = {
			NOT = { this = title:c_dragonstone } # No canon examples afaik
		}
	}
	immediate = {
		save_scope_as = wild_dragon
		location = {
			save_scope_as = wild_dragon_location
		}
		location.county.holder = {
			random_list = {
				20 = {
					trigger_event = {
						id = agot_filler_dragon.0096
					}
				}
				20 = {
					trigger_event = {
						id = agot_filler_dragon.0097
					}
				}
				20 = {
					trigger_event = {
						id = agot_filler_dragon.0098
					}
				}
				20 = {
					trigger_event = {
						id = agot_filler_dragon.0099
					}
				}
				20 = {
					trigger_event = {
						id = agot_filler_dragon.0100
					}
				}
			}
			random = {
				chance = 20
				trigger_event = {
					id = agot_dragon.0200
					days = { 50 200 }
				}
			}
		}
	}
}

agot_filler_dragon.0096 = { # Wild dragon killed some peasants
	type = character_event
	title = agot_filler_dragon.0096.t
	desc = agot_filler_dragon.0096.desc
	theme = dragon
	override_background = {
		reference = throne_room
	}
	right_portrait = {
		character = root
		animation = worry
	}
	lower_left_portrait = {
		character = scope:wild_dragon
	}

	immediate = {
		scope:wild_dragon_location.county = {
			add_county_modifier = {
				modifier = agot_wild_dragon_killed_peasants
				years = 1
			}
		}
	}

	option = {
		name = agot_filler_dragon.0096.a
		flavor = agot_filler_dragon.0096.a.f
		ai_chance = {
			base = 100
			modifier = {
				factor = 0
				OR = {
					has_trait = greedy
					has_trait = arrogant
					has_trait = callous
					has_trait = sadistic
				}
			}
		}
		add_prestige = minor_prestige_gain
		remove_short_term_gold = minor_gold_value
		stress_impact = {
			greedy = medium_stress_impact_gain
			arrogant = minor_stress_impact_gain
			callous = minor_stress_impact_gain
			sadistic = medium_stress_impact_gain
			improvident = minor_stress_impact_loss
			compassionate = minor_stress_impact_loss
			generous = minor_stress_impact_loss
		}
	}

	option = {
		name = {
			text = agot_filler_dragon.0096.b
			trigger = {
				NOR = {
					has_trait = greedy
					has_trait = arrogant
					has_trait = callous
					has_trait = sadistic
				}
			}
		}
		name = {
			text = agot_filler_dragon.0096.b.asshole
			trigger = {
				OR = {
					has_trait = greedy
					has_trait = arrogant
					has_trait = callous
					has_trait = sadistic
				}
			}
		}
		ai_chance = {
			base = 100
			modifier = {
				factor = 0
				OR = {
					has_trait = improvident
					has_trait = compassionate
					has_trait = generous
				}
			}
		}
		add_prestige = minor_prestige_loss
		stress_impact = {
			greedy = minor_stress_impact_loss
			arrogant = minor_stress_impact_loss
			callous = minor_stress_impact_loss
			sadistic = minor_stress_impact_loss
			improvident = medium_stress_impact_gain
			compassionate = medium_stress_impact_gain
			generous = medium_stress_impact_gain
		}
	}
}

agot_filler_dragon.0097 = { # Wild dragon kills farm animals
	type = character_event
	title = agot_filler_dragon.0097.t
	desc = agot_filler_dragon.0097.desc
	theme = dragon
	override_background = {
		reference = throne_room
	}
	right_portrait = {
		character = root
		animation = worry
	}
	lower_left_portrait = {
		character = scope:wild_dragon
	}

	immediate = {
		scope:wild_dragon_location.county = {
			add_county_modifier = {
				modifier = agot_wild_dragon_killed_livestock
				years = 1
			}
		}
	}

	option = {
		name = agot_filler_dragon.0097.a
		flavor = agot_filler_dragon.0097.a.f
		trigger = {
			stewardship > 15
		}
		ai_chance = {
			base = 100
		}
		add_prestige = minor_prestige_gain
		stress_impact = {
			compassionate = minor_stress_impact_loss
		}
		scope:wild_dragon_location.county = {
			remove_county_modifier = agot_wild_dragon_killed_livestock
		}
	}

	option = {
		name = agot_filler_dragon.0097.b
		ai_chance = {
			base = 1
		}
		add_prestige = minor_prestige_loss
	}
}

agot_filler_dragon.0098 = { # Wild dragon kills crops
	type = character_event
	title = agot_filler_dragon.0098.t
	desc = agot_filler_dragon.0098.desc
	theme = dragon
	override_background = {
		reference = throne_room
	}
	right_portrait = {
		character = root
		animation = worry
	}
	lower_left_portrait = {
		character = scope:wild_dragon
	}

	immediate = {
		scope:wild_dragon_location.county = {
			add_county_modifier = {
				modifier = agot_wild_dragon_killed_peasants
				years = 1
			}
		}
	}

	option = {
		name = agot_filler_dragon.0098.a
		flavor = agot_filler_dragon.0098.a.f
		ai_chance = {
			base = 100
			modifier = {
				factor = 0
				OR = {
					has_trait = greedy
					has_trait = arrogant
					has_trait = callous
					has_trait = sadistic
				}
			}
		}
		add_prestige = minor_prestige_gain
		remove_short_term_gold = medium_gold_value
		scope:wild_dragon_location.county = {
			remove_county_modifier = agot_wild_dragon_destroyed_crops
		}
		stress_impact = {
			greedy = medium_stress_impact_gain
			arrogant = minor_stress_impact_gain
			callous = minor_stress_impact_gain
			sadistic = medium_stress_impact_gain
			improvident = minor_stress_impact_loss
			compassionate = minor_stress_impact_loss
			generous = minor_stress_impact_loss
		}
	}

	option = {
		name = agot_filler_dragon.0096.b
		ai_chance = {
			base = 100
			modifier = {
				factor = 0
				OR = {
					has_trait = improvident
					has_trait = compassionate
					has_trait = generous
				}
			}
		}
		add_prestige = minor_prestige_loss
		stress_impact = {
			greedy = minor_stress_impact_loss
			arrogant = minor_stress_impact_loss
			callous = minor_stress_impact_loss
			sadistic = minor_stress_impact_loss
			improvident = medium_stress_impact_gain
			compassionate = medium_stress_impact_gain
			generous = medium_stress_impact_gain
		}
	}
}

agot_filler_dragon.0099 = { # Wild dragon attacks the holding
	type = character_event
	title = agot_filler_dragon.0099.t
	desc = agot_filler_dragon.0099.desc
	theme = dragon
	override_background = {
		reference = throne_room
	}
	right_portrait = {
		character = root
		animation = worry
	}
	lower_left_portrait = {
		character = scope:wild_dragon
	}

	trigger = {
		any_sub_realm_barony = {
			county = scope:wild_dragon_location.county
			title_province = {
				num_buildings > 1
				OR = {
					has_building_or_higher = outposts_01
					has_building_or_higher = logging_camps_01
					has_building_or_higher = peat_quarries_01
					has_building_or_higher = hill_forts_01
					has_building_or_higher = plantations_01
					has_building_or_higher = quarries_01
					has_building_or_higher = hunting_grounds_01
					has_building_or_higher = military_camps_01
					has_building_or_higher = pastures_01
					has_building_or_higher = ramparts_01
					has_building_or_higher = curtain_walls_01
					has_building_or_higher = watchtowers_01
					has_building_or_higher = cereal_fields_01
					has_building_or_higher = barracks_01
					has_building_or_higher = camel_farms_01
					has_building_or_higher = hill_farms_01
					has_building_or_higher = elephant_pens_01
					has_building_or_higher = common_tradeport_01
					has_building_or_higher = orchards_01
					has_building_or_higher = farm_estates_01
					has_building_or_higher = regimental_grounds_01
					has_building_or_higher = monastic_schools_01
				}
			}
		}
	}

	immediate = {
		random_sub_realm_barony = {
			limit = {
				county = scope:wild_dragon_location.county
				title_province = {
					num_buildings > 1
					OR = {
						has_building_or_higher = outposts_01
						has_building_or_higher = logging_camps_01
						has_building_or_higher = peat_quarries_01
						has_building_or_higher = hill_forts_01
						has_building_or_higher = plantations_01
						has_building_or_higher = quarries_01
						has_building_or_higher = hunting_grounds_01
						has_building_or_higher = military_camps_01
						has_building_or_higher = pastures_01
						has_building_or_higher = ramparts_01
						has_building_or_higher = curtain_walls_01
						has_building_or_higher = watchtowers_01
						has_building_or_higher = cereal_fields_01
						has_building_or_higher = barracks_01
						has_building_or_higher = camel_farms_01
						has_building_or_higher = hill_farms_01
						has_building_or_higher = elephant_pens_01
						has_building_or_higher = common_tradeport_01
						has_building_or_higher = orchards_01
						has_building_or_higher = farm_estates_01
						has_building_or_higher = regimental_grounds_01
						has_building_or_higher = monastic_schools_01
					}
				}
			}
			save_scope_as = target_barony
		}
		scope:target_barony.title_province = {
			destroy_random_building_variable_effect = yes
			destroy_random_building_effect = yes
		}
	}

	option = {
		name = agot_filler_dragon.0099.a
	}
}

agot_filler_dragon.0100 = { # Wild dragon slew courtier
	type = character_event
	title = agot_filler_dragon.0100.t
	desc = agot_filler_dragon.0100.desc
	trigger = {
		any_courtier = {
			is_available_healthy_ai_adult = yes
			location = root.capital_province # Not away
			is_current_dragonrider = no
			NOT = { is_close_or_extended_family_of = root }
		}
	}
	theme = dragon
	override_background = {
		reference = throne_room
	}
	right_portrait = {
		character = root
		animation = worry
	}
	left_portrait = {
		character = scope:dead_courtier
		animation = severely_injured
	}
	lower_center_portrait = {
		character = scope:wild_dragon
	}

	immediate = {
		random_courtier = {
			limit = {
				is_available_healthy_ai_adult = yes
				location = root.capital_province # Not away
				is_current_dragonrider = no
				NOT = { is_close_or_extended_family_of = root }
			}
			save_scope_as = dead_courtier
			random_list = {
				50 = {
					death = {
						death_reason = death_dragon
						killer = scope:wild_dragon
					}
				}
				50 = {
					hidden_effect = {
						add_trait = burned
						add_trait_xp = {
							trait = burned
							track = burned
							value = { 50 200 }
						}
					}
					death = {
						death_reason = death_dragon_fire
						killer = scope:wild_dragon
					}
				}
			}
		}
		add_character_modifier = {
			modifier = agot_wild_dragon_killed_courtier
			years = 2
		}
	}

	option = {
		name = agot_filler_dragon.0100.a
	}
}

###########################################
# ATTRACTED TO DRAGONRIDER  (0101 - 0102) #
# by: Sililex                             #
###########################################
agot_filler_dragon.0101 = {
	hidden = yes
	cooldown = {
		years = 30
	}
	trigger = {
		has_character_flag = owned_dragon
		exists = var:current_rider
		exists = var:current_rider.court_owner
		AND = {
			var:current_rider = { # Ridden by courtier
				is_adult = yes
				is_available = yes
				is_landed = no
				NOT = { has_trait = celibate }
				court_owner = {
					is_adult = yes
					is_available = yes
					NOT = { has_trait = celibate }
					location = prev.location # Court owner is in the same province
					might_cheat_on_every_partner_trigger = yes
					would_attempt_to_seduce_trigger = {
						CHARACTER = prev
					}
					OR = {
						AND = {
							NOT = { has_relation_lover = prev }
							can_start_scheme = {
								type = seduce
								target_character = prev
							}
						}
						AND = {
							has_relation_lover = prev
							can_start_scheme = {
								type = courting
								target_character = prev
							}
						}
					}
				}
			}
			location = var:current_rider.court_owner.capital_province # That province is the capital
		}
		location = var:current_rider.court_owner.capital_province # Dragon is also in the capital
	}
	immediate = {
		var:current_rider = {
			save_scope_as = dragonrider_in_court
			court_owner = {
				trigger_event = {
					id = agot_filler_dragon.0102
				}
			}
		}
	}
}

agot_filler_dragon.0102 = {
	type = character_event
	title = agot_filler_dragon.0102.t
	desc = agot_filler_dragon.0102.desc
	theme = dragon
	override_background = {
		reference = garden
	}
	left_portrait = {
		character = root
		animation = admiration
	}
	right_portrait = {
		character = scope:dragonrider_in_court
		camera = camera_dragonrider_flying_event_front
		animation = dragon_main
		outfit_tags = { dragonrider linear_camera_zoom }
	}

	immediate = {
		scope:dragonrider_in_court = {
			agot_set_dragon_animation_flag_effect = { FLAG = dragon_flying RIDING_DRAGON = yes }
			var:current_dragon = {
				save_scope_as = dragon_of_courtier
			}
		}
	}

	option = {
		name = agot_filler_dragon.0102.a
		trigger = {
			NOT = {
				has_relation_lover = scope:dragonrider_in_court
			}
			# Can seduce is already checked in caller event - putting it here just clogs the tooltip
		}
		ai_chance = {
			base = 0
			opinion_modifier = {
				opinion_target = scope:dragonrider_in_court
				multiplier = 0.4
			}
			compatibility_modifier = {
				compatibility_target = scope:dragonrider_in_court
				multiplier = 1
				max = court_scheme_max_compatability_value
			}
			modifier = {
				factor = 25
				culture = {
					has_cultural_parameter = ai_romance_scheme_increase
				}
			}
			modifier = {
				factor = 25
				has_focus = martial_chivalry_focus
			}
			modifier = {
				add = 50
				has_opinion_modifier = {
					modifier = childhood_crush
					target = scope:dragonrider_in_court
				}
			}
			modifier = {
				add = -50
				is_close_family_of = scope:dragonrider_in_court
				NOR = {
					is_deviant_trigger = yes
					has_trait = lustful
				}
			}
			modifier = {
				factor = 3
				scope:dragonrider_in_court = {
					OR = {
						is_landed = yes
						any_spouse = {
							is_landed = yes
						}
					}
				}
			}
			modifier = {
				factor = 1.25
				scope:dragonrider_in_court = {
					has_trait = beauty_good
				}
			}
			modifier = { # Don't cheat if has soulmate
				factor = 0.1
				num_of_relation_soulmate > 0
			}
			modifier = { # Try to avoid 0% success chance
				factor = {
					value = 0.1
					if = {
						limit = {
							scope:dragonrider_in_court = {
								opinion = {
									target = root
									value < -20
								}
							}
						}
						value = 0
					}
				}
				scope:dragonrider_in_court = {
					opinion = {
						target = root
						value < 0
					}
				}
			}
		}
		start_scheme = {
			type = seduce
			target_character = scope:dragonrider_in_court
		}
		stress_impact = {
			lustful = medium_stress_impact_loss
			chaste = medium_stress_impact_gain
		}
	}

	option = {
		name = agot_filler_dragon.0102.b
		trigger = {
			has_relation_lover = scope:dragonrider_in_court
			can_start_scheme = {
				type = courting
				target_character = scope:dragonrider_in_court
			}
		}
		ai_chance = {
			base = 100
		}
		start_scheme = {
			type = courting
			target_character = scope:dragonrider_in_court
		}
		stress_impact = {
			lustful = medium_stress_impact_loss
			chaste = medium_stress_impact_gain
		}
	}

	option = {
		name = agot_filler_dragon.0102.c
		ai_chance = {
			base = 50
			modifier = {
				factor = 0
				OR = {
					has_trait = lustful
					has_trait = seducer
					has_trait = deviant
					has_relation_lover = scope:dragonrider_in_court
				}
			}
			modifier = {
				factor = 2
				has_trait = chaste
			}
		}
		stress_impact = {
			lustful = medium_stress_impact_gain
			chaste = medium_stress_impact_loss
		}
	}


	after = {
		scope:dragonrider_in_court = {
			agot_clear_dragon_animation_flags = yes
		}
	}
}

#########################################
# PRISONER FILLER (0103-0104)           #
# Scripted by Sililex, written by Lord  #
#########################################
agot_filler_dragon.0103 = {
	hidden = yes
	cooldown = {
		years = 5
	}
	trigger = {
		exists = var:current_rider
		var:current_rider = {
			age > 10
			is_imprisoned = yes
		}
	}
	immediate = {
		var:current_rider = {
			trigger_event = {
				id = agot_filler_dragon.0104
			}
		}
	}
}

agot_filler_dragon.0104 = {
	type = character_event
	title = agot_filler_dragon.0104.t
	desc = agot_filler_dragon.0104.desc
	theme = dragon
	override_background = {
		reference = dungeon
	}
	right_portrait = {
		character = root
		animation = worry
	}
	lower_left_portrait = {
		character = scope:dragon
	}

	immediate = {
		var:current_dragon = {
			save_scope_as = dragon
		}
	}

	option = {
		name = agot_filler_dragon.0104.a
		flavor = agot_filler_dragon.0104.a.f
		trait = dragonrider
		trigger = {
			has_trait_xp = {
				trait = dragonrider
				track = dragon_bond
				value > 32
			}
		}
		ai_chance = {
			base = 50
			modifier = { # Pick health instead
				factor = 0
				health < 3
			}
		}
		add_stress = medium_stress_loss
		add_character_modifier = {
			modifier = agot_bond_gives_relief
			years = 1
		}
	}

	option = {
		name = agot_filler_dragon.0104.b
		flavor = agot_filler_dragon.0104.b.f
		ai_chance = {
			base = 1 # Only pick if no other option is available
			modifier = { # Unless you are a dreamer, then 50/50
				add = 49
				has_character_flag = dragon_dreams
			}
			modifier = { # Unless you may die or are stressed af
				factor = 0
				has_trait_xp = {
					trait = dragonrider
					track = dragon_bond
					value > 32
				}
				OR = {
					stress_level >= 2
					health < 3
				}
			}
		}
		add_stress = minor_stress_gain
		random_list = {
			70 = {}
			30 = {
				add_trait = fire_obsessed
			}
		}
		if = {
			limit = {
				has_character_flag = dragon_dreams
			}
			add_trait = dragon_dreams
		}
	}

	option = {
		name = agot_filler_dragon.0104.c
		flavor = agot_filler_dragon.0104.c.f
		trait = dragonrider
		trigger = {
			health < 3
			has_trait_xp = {
				trait = dragonrider
				track = dragon_bond
				value > 32
			}
		}
		ai_chance = {
			base = 100
		}
		add_stress = minor_stress_loss
		add_character_modifier = {
			modifier = agot_bond_gives_strength
			years = 1
		}
	}
}