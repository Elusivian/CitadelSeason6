namespace = agot_filler_nights_watch

###########################################
# MULE SHORTAGE (0001 - 0006) // pbbm
###########################################

# Shortage of mules because someone has been making personal deals with smugglers
agot_filler_nights_watch.0001 = {
	hidden = yes

	trigger = {
		is_available_adult = yes
		NOT = { has_character_flag = had_nights_watch_0001 }
		has_trait = nightswatch
		exists = location
		location = { geographical_region = world_westeros_the_wall }
		OR = {
			any_held_title = {
				this = title:c_eastwatch
			}
			any_vassal = {
				is_alive = yes
				is_imprisoned = no
				any_held_title = {
					this = title:c_eastwatch
				}
				OR = {
					AND = {
						ai_greed >= 35
						ai_honor <= -35
					}
					AND = {
						has_trait = greedy
						NOR = {
							has_trait = just
							has_trait = honest
						}
					}
				}
			}
		}
	}

	immediate = {
		add_character_flag = {
			flag = had_nights_watch_0001
			years = 10
		}
		send_interface_message = {
			type = event_generic_bad
			title = agot_filler_nights_watch.0001.message.t
			right_icon = title:c_eastwatch
			custom_tooltip = agot_filler_nights_watch.0001.message.tt
			title:c_eastwatch = {
				add_county_modifier = {
					modifier = mule_shortage_modifier
					days = 1825
				}
			}
		}
		trigger_event = {
			id = agot_filler_nights_watch.0002
			days = { 1400 2200 }
		}
	}
}
# Someone has been undercutting Eastwatch's training of mules for patrol
agot_filler_nights_watch.0002 = {
	type = character_event
	title = agot_filler_nights_watch.0002.t
	desc = {
		desc = agot_filler_nights_watch.0002.opening
		random_valid = {
			triggered_desc = {
				trigger = {
					OR = {
						AND = {
							scope:teller.ai_boldness >= 20
							scope:teller.ai_zeal >= 10
						}
						AND = {
							scope:teller.ai_boldness >= 20
							scope:teller.ai_greed >= 35
						}
						AND = {
							scope:teller.ai_boldness >= 20
							scope:teller.ai_vengefulness >= 10
						}
					}
				}
				desc = agot_filler_nights_watch.0002.bold
			}
			triggered_desc = {
				trigger = {
					OR = {
						AND = {
							scope:teller.ai_vengefulness >= 20
							scope:teller.ai_greed >= 10
						}
						AND = {
							scope:teller.ai_vengefulness >= 20
							scope:teller.ai_rationality <= -10
						}
						scope:teller.ai_vengefulness >= 35
					}
				}
				desc = agot_filler_nights_watch.0002.anger
			}
			triggered_desc = {
				trigger = {
					OR = {
						scope:teller = {
							has_trait = paranoid
							has_trait = lunatic
						}
					}
				}
				desc = agot_filler_nights_watch.0002.paranoia
			}
			triggered_desc = {
				trigger = { always = yes }
				desc = agot_filler_nights_watch.0002.fallback
			}
		}
		desc = agot_filler_nights_watch.0002.middle
		random_valid = {
			triggered_desc = {
				trigger = {
					learning >= very_high_skill_rating
					learning <= scope:teller.learning
				}
				desc = agot_filler_nights_watch.0002.special.less_than.learning
			}
			triggered_desc = {
				trigger = {
					learning >= very_high_skill_rating
					learning <= scope:teller.learning
					has_trait = humble
				}
				desc = agot_filler_nights_watch.0002.special.less_than.learning.humble
			}
			triggered_desc = {
				trigger = {
					learning >= very_high_skill_rating
					learning > scope:teller.learning
				}
				desc = agot_filler_nights_watch.0002.special.greater_than.learning
			}
			triggered_desc = {
				trigger = {
					learning >= very_high_skill_rating
					learning > scope:teller.learning
					has_trait = arrogant
				}
				desc = agot_filler_nights_watch.0002.special.greater_than.learning.arrogant
			}
			triggered_desc = {
				trigger = {
					stewardship >= very_high_skill_rating
					stewardship <= scope:teller.stewardship
				}
				desc = agot_filler_nights_watch.0002.special.less_than.stewardship
			}
			triggered_desc = {
				trigger = {
					stewardship >= very_high_skill_rating
					stewardship <= scope:teller.stewardship
					has_trait = humble
				}
				desc = agot_filler_nights_watch.0002.special.less_than.stewardship.humble
			}
			triggered_desc = {
				trigger = {
					stewardship >= very_high_skill_rating
					stewardship > scope:teller.stewardship
				}
				desc = agot_filler_nights_watch.0002.special.greater_than.stewardship
			}
			triggered_desc = {
				trigger = {
					stewardship >= very_high_skill_rating
					stewardship > scope:teller.stewardship
					has_trait = arrogant
				}
				desc = agot_filler_nights_watch.0002.special.greater_than.stewardship.arrogant
			}
		}
		random_valid = {
			triggered_desc = {
				trigger = {
					OR = {
						learning >= very_high_skill_rating
						stewardship >= very_high_skill_rating
					}
					scope:fallguy.ai_rationality < -10
				}
				desc = agot_filler_nights_watch.0002.special.stupid
			}
			triggered_desc = {
				trigger = {
					OR = {
						learning >= very_high_skill_rating
						stewardship >= very_high_skill_rating
					}
					scope:fallguy.ai_boldness < -10
				}
				desc = agot_filler_nights_watch.0002.special.cowardly
			}
			triggered_desc = {
				trigger = {
					OR = {
						learning >= very_high_skill_rating
						stewardship >= very_high_skill_rating
					}
				}
				desc = agot_filler_nights_watch.0002.special.fallback
			}
		}
		first_valid = {
			triggered_desc = {
				trigger = {
					OR = {
						learning >= very_high_skill_rating
						stewardship >= very_high_skill_rating
					}
				}
				desc = agot_filler_nights_watch.0002.special.closing
			}
		}
	}

	theme = realm
	left_portrait = {
		character = root
		triggered_animation = {
			trigger = {
				OR = {
					has_trait = just
					has_trait = honest
					has_trait = wrathful
					has_trait = vengeful
					has_trait = diligent
					has_trait = greedy
				}
			}
			animation = personality_vengeful
		}
		triggered_animation = {
			trigger = {
				OR = {
					has_trait = shy
					has_trait = generous
					has_trait = humble
					has_trait = calm
					has_trait = temperate
					has_trait = patient
					has_trait = forgiving
				}
			}
			animation = personality_forgiving
		}
		triggered_animation = {
			trigger = {
				OR = {
					has_trait = stubborn
					has_trait = lazy
					has_trait = arbitrary
					has_trait = callous
					has_trait = content
				}
			}
			animation = boredom
		}
		triggered_animation = {
			trigger = { always = yes }
			animation = disbelief
		}
	}
	right_portrait = {
		character = scope:teller
		triggered_animation = {
			trigger = {
				OR = {
					AND = {
						scope:teller.ai_boldness >= 20
						scope:teller.ai_zeal >= 10
					}
					AND = {
						scope:teller.ai_boldness >= 20
						scope:teller.ai_greed >= 35
					}
					AND = {
						scope:teller.ai_boldness >= 20
						scope:teller.ai_vengefulness >= 10
					}
				}
			}
			animation = personality_bold
		}
		triggered_animation = {
			trigger = {
				OR = {
					AND = {
						scope:teller.ai_vengefulness >= 20
						scope:teller.ai_greed >= 10
					}
					AND = {
						scope:teller.ai_vengefulness >= 20
						scope:teller.ai_rationality <= -10
					}
					scope:teller.ai_vengefulness >= 35
				}
			}
			animation = anger
		}
		triggered_animation = {
			trigger = {
				scope:teller = {
					OR = {
						has_trait = paranoid
						has_trait = lunatic
					}
				}
			}
			animation = paranoia
		}
		triggered_animation = {
			trigger = { always = yes }
			animation = stress
		}
	}
	lower_center_portrait = scope:fallguy
	# Can only detect that fallguy isn't good for the crime if you're learned or stewardly
	# enough
	lower_right_portrait = {
		trigger = {
			OR = {
				scope:learning_value >= very_high_skill_rating
				scope:stewardship_value >= very_high_skill_rating
			}
		}
		character = scope:undercutter
	}

	trigger = {
		location = { geographical_region = world_westeros_the_wall }
		title:c_eastwatch = { has_county_modifier = mule_shortage_modifier }
		has_trait = nightswatch
		OR = {
			AND = {
				any_held_title = {
					this = title:c_eastwatch
				}
				OR = {
					any_courtier_or_guest = {
						OR = {
							AND = {
								ai_greed >= 35
								ai_honor <= -35
							}
							AND = {
								has_trait = greedy
								NOR = {
									has_trait = just
									has_trait = honest
								}
							}
						}
					}
					any_vassal_or_below = {
						OR = {
							AND = {
								ai_greed >= 35
								ai_honor <= -35
							}
							AND = {
								has_trait = greedy
								NOR = {
									has_trait = just
									has_trait = honest
								}
							}
						}
					}
				}
			}

			any_vassal = {
				is_alive = yes
				is_imprisoned = no
				any_held_title = {
					this = title:c_eastwatch
				}
				OR = {
					AND = {
						ai_greed >= 35
						ai_honor <= -35
					}
					AND = {
						has_trait = greedy
						NOR = {
							has_trait = just
							has_trait = honest
						}
					}
				}
			}
		}
	}

	immediate = {
		# Finding people dishonourable and/or greedy enough to sell Night's Watch supplies
		# for personal gain
		save_scope_value_as = {
			name = learning_value
			value = learning
		}
		save_scope_value_as = {
			name = stewardship_value
			value = stewardship
		}
		every_courtier_or_guest = {
			limit = {
				OR = {
					AND = {
						ai_greed >= 35
						ai_honor <= -35
					}
					AND = {
						has_trait = greedy
						NOR = {
							has_trait = just
							has_trait = honest
						}
					}
				}
			}
			add_to_list = undercutter_list
		}
		every_vassal_or_below = {
			limit = {
				OR = {
					AND = {
						ai_greed >= 35
						ai_honor <= -35
					}
					AND = {
						has_trait = greedy
						NOR = {
							has_trait = just
							has_trait = honest
						}
					}
				}
			}
			add_to_list = undercutter_list
		}
		# The party responsible
		ordered_in_list = {
			list = undercutter_list
			order_by = {
				value = {
					value = ai_greed
					multiply = 0.05
				}
				subtract = {
					value = ai_honor
					multiply = 0.02
				}
				if = {
					limit = { is_male = yes }
					add = 1
				}
				if = {
					limit = { has_trait = nightswatch }
					add = 1
				}
				# More likely if cynical, putting self-interest above the cause
				if = {
					limit = { ai_zeal < 0 }
					add = {
						value = ai_zeal
						multiply = -0.05
					}
				}
			}
			save_scope_as = undercutter
		}
		# The party to be framed
		# If there's more than one character in undercutter_list, draw from there
		if = {
			limit = {
				list_size = {
					name = undercutter_list
					value > 1
				}
			}
			random_in_list = {
				list = undercutter_list
				limit = {
					NOT = { this = scope:undercutter }
				}
				weight = {
					ai_value_modifier = {
						who = this
						ai_rationality = -0.05
						ai_sociability = -0.02
					}
					opinion_modifier = {
						who = scope:undercutter
						opinion_target = this
						multiplier = -0.05
					}
					modifier = {
						add = 5
						OR = {
							has_trait = intellect_bad
							has_trait = dull
						}
					}
					modifier = {
						add = 2
						has_trait = possessed
					}
					modifier = {
						add = 2
						has_trait = lunatic
					}
					modifier = {
						add = 2
						has_trait = depressed
					}
				}
				save_scope_as = fallguy
			}
		}
		# Else, make the fallguy any similar random courtier whom the undercutter dislikes
		else = {
			random_courtier = {
				limit = {
					NOT = { prev = scope:undercutter }
				}
				weight = {
					opinion_modifier = {
						who = scope:undercutter
						opinion_target = prev
						multiplier = -0.05
					}
					ai_value_modifier = {
						who = prev
						ai_rationality = -0.05
						ai_sociability = -0.02
					}
					modifier = {
						add = 2
						number_of_opposing_personality_traits = {
							target = scope:undercutter
							value > 0
						}
					}
					modifier = {
						add = 2
						number_of_opposing_personality_traits = {
							target = scope:undercutter
							value > 1
						}
					}
					modifier = {
						add = 2
						number_of_opposing_personality_traits = {
							target = scope:undercutter
							value > 2
						}
					}
				}
				save_scope_as = fallguy
			}
		}
		# Find the character who will reveal the issue
		if = {
			limit = {
				any_court_position_holder = {
					type = court_physician_court_position
					NOT = { this = scope:undercutter }
					NOT = { this = scope:fallguy }
				}
			}
			random_court_position_holder = {
				type = court_physician_court_position
				save_scope_as = teller
			}
		}
		# If there is no maester, take the steward
		else_if = {
			limit = {
				any_stewardship_councillor = {
					exists = this
					NOT = { this = scope:undercutter }
					NOT = { this = scope:fallguy }
				}
			}
			random_stewardship_councillor = {
				limit = {
					NOT = { this = scope:undercutter }
					NOT = { this = scope:fallguy }
				}
				save_scope_as = teller
			}
		}
		# If there is no steward, pick the most stewardly courtier
		else = {
			random_courtier = {
				limit = {
					NOT = { this = scope:undercutter }
					NOT = { this = scope:fallguy }
				}
				# Prefer characters who might conceivably be keeping track of the finances
				weight = {
					# Prefer characters with better stewardship
					#modifier = { # AGOT TODO this is broken
					#	add = stewardship
					#	max = very_high_skill_rating
					#}
					# Prefer characters with stewardship education
					modifier = {
						add = 10
						has_trait = education_stewardship_4
					}
					# Prefer characters with stewardship education
					modifier = {
						add = 8
						has_trait = education_stewardship_3
					}
					# Prefer characters with stewardship education
					modifier = {
						add = 6
						has_trait = education_stewardship_2
					}
					# Prefer characters with stewardship education
					modifier = {
						add = 4
						has_trait = education_stewardship_1
					}
					# Prefer civil-servant-types
					modifier = {
						add = 6
						has_trait = administrator
					}
					modifier = {
						add = 4
						has_trait = architect
					}
				}
				save_scope_as = teller
			}
		}
		hidden_effect = {
			save_scope_value_as = {
				name = gold_to_pay
				value = { 90 200 }
			}
			# Planting evidence of embezzlement for keen-eyed players
			scope:undercutter = {
				add_gold = scope:gold_to_pay
			}
		}
	}
	# Demand undercutter repay what's been stolen
	option = {
		name = {
			text = {
				first_valid = {
					triggered_desc = {
						trigger = {
							OR = {
								has_trait = greedy
								has_trait = avaricious
								has_trait = deceitful
							}
							NOR = {
								has_trait = paranoid
								has_trait = honest
							}
						}
						desc = agot_filler_nights_watch.0002.a.greedy
					}
					triggered_desc = {
						trigger = { always = yes }
						desc = agot_filler_nights_watch.0002.a.fallback
					}
				}
			}
		}
		# Only available if you are skilled enough to know who the real scammer is
		trigger = {
			# These use scope values instead of directly checking skill values to avoid
			# having the icons show up, as I think it works better in this case without
			# them
			OR = {
				scope:learning_value >= very_high_skill_rating
				scope:stewardship_value >= very_high_skill_rating
			}
		}
		# Blackmail undercutter
		if = {
			limit = {
				OR = {
					has_trait = greedy
					has_trait = avaricious
					has_trait = deceitful
				}
				NOR = {
					has_trait = paranoid
					has_trait = honest
				}
			}
			# undercutter pays back the gold, and you gain a passive income modifier
			root = {
				#add_character_modifier = mule_shortage_scam_modifier # AGOT TODO
			}
			scope:undercutter = {
				pay_short_term_gold = {
					target = root
					gold = scope:gold_to_pay
				}
			}
			#add_hook = { # AGOT TODO
			#	target = scope:undercutter
			#	type = weak_blackmail_hook
			#}
		}
		# Else undercutter pays back what was stolen
		else = {
			random_list = {
				40 = {
					desc = agot_filler_nights_watch.0002.a.random_1.desc
					# Modified by undercutter's rationality
					compare_modifier = {
						value = scope:undercutter.ai_rationality
						multiplier = 0.5
					}
					# Pay back the gold
					scope:undercutter = {
						pay_short_term_gold = {
							target = root
							gold = scope:gold_to_pay
						}
						add_opinion = {
							target = root
							modifier = caught_redhanded_opinion
							opinion = -20
						}
					}
				}
				50 = {
					desc = agot_filler_nights_watch.0002.a.random_2.desc
					hidden_effect = {
						send_interface_toast = {
							title = agot_filler_nights_watch.0002.c.toast.t
							right_icon = scope:undercutter
							custom_tooltip = agot_filler_nights_watch.0002.c.toast.tt
						}
					}
					scope:undercutter = { move_to_pool = yes }
					# If Night's Watch member, become deserter
					if = {
						limit = {
							scope:undercutter = { has_trait = nightswatch }
						}
						scope:undercutter = {
							remove_trait = nightswatch
							add_trait = deserter
						}
					}
					# If landed, title is revoked
					if = {
						limit = { scope:fallguy = { is_landed = yes } }
						run_interaction = {
							interaction = revoke_title_interaction
							redirect = yes
							actor = root
							recipient = scope:fallguy
							execute_threshold = decline
						}
					}
				}
			}
		}
	}
	# Banish or execute undercutter
	option = {
		name = {
			text = {
				first_valid = {
					triggered_desc = {
						trigger = {
							OR = {
								has_trait = compassionate
								has_trait = forgiving
								has_trait = generous
							}
						}
						desc = agot_filler_nights_watch.0002.b.banish
					}
					triggered_desc = {
						trigger = { always = yes }
						desc = agot_filler_nights_watch.0002.b.execute
					}
				}
			}
		}
		# Only available if you're skilled enough to know who the real scammer is
		trigger = {
			OR = {
				scope:learning_value >= very_high_skill_rating
				scope:stewardship_value >= very_high_skill_rating
			}
		}
		# If you're nice, banish them, and everyone hates that
		if = {
			limit = {
				OR = {
					has_trait = compassionate
					has_trait = forgiving
					has_trait = generous
				}
			}
			scope:undercutter = {
				agot_banish_effect = { BANISHER = root }
				pay_short_term_gold = {
					target = root
					gold = scope:gold_to_pay
				}
				remove_trait = nightswatch
			}
			add_prestige = -150
			every_living_black_brother = {
				custom = every_member_of_nights_watch
				add_opinion = {
					modifier = spared_thief_opinion
					target = root
					opinion = -20
				}
			}
			trigger_event = {
				id = agot_filler_nights_watch.0003 # Choose to reinvest the gold
				days = { 20 35 }
			}
		}
		# Otherwise execute them
		else = {
			send_interface_toast = {
				title = agot_filler_nights_watch.0002.a.message.t
				left_icon = root
				right_icon = scope:undercutter
				scope:undercutter = {
					death = {
						death_reason = death_execution
						killer = root
					}
				}
			}
			scope:undercutter = {
				if = {
					limit = {
						any_relation = {
							type = friend
							NOT = { this = root }
						}
					}
					every_relation = {
						type = friend
						limit = {
							NOT = { this = root }
						}
						add_opinion = {
							target = root
							modifier = executed_friend_opinion
						}
					}
				}
			}
		}
		# The mule shortage is over
		title:c_eastwatch = { remove_county_modifier = mule_shortage_modifier }
	}
	# Demand the accused repay what they're accused of stealing
	option = {
		name = agot_filler_nights_watch.0002.c
		# Only available if you're too unskilled to know the real culprit
		trigger = {
			scope:stewardship_value < very_high_skill_rating
			scope:learning_value < very_high_skill_rating
		}
		random_list = {
			# The fallguy runs for it
			30 = {
				desc = agot_filler_nights_watch.0002.c.random_1.desc
				# More likely to run if cowardly
				compare_modifier = {
					value = scope:fallguy.ai_boldness
					multiplier = -0.5
				}
				# More likely to run if stupid
				compare_modifier = {
					value = scope:fallguy.ai_rationality
					multiplier = -0.25
				}
				hidden_effect = {
					send_interface_toast = {
						title = agot_filler_nights_watch.0002.c.toast.t
						right_icon = scope:fallguy
						custom_tooltip = agot_filler_nights_watch.0002.c.toast.tt
					}
				}
				if = {
					limit = { scope:fallguy = { any_held_title = { this = title:c_eastwatch } } }
					hidden_effect = { scope:fallguy = { move_to_pool = yes } }
				}
				else = { scope:fallguy = { move_to_pool = yes } }
				# If Night's Watch member, become deserter
				if = {
					limit = {
						scope:fallguy = { has_trait = nightswatch }
					}
					scope:fallguy = {
						remove_trait = nightswatch
						add_trait = deserter
					}
				}
				# If landed, title is revoked
				#if = { # AGOT TODO
				#	limit = { scope:fallguy = { is_landed = yes } }
				#	run_interaction = { # TODO: better to just straight revoke?
				#		interaction = revoke_title_interaction
				#		redirect = yes
				#		actor = root
				#		recipient = scope:fallguy
				#		execute_threshold = decline
				#		send_threshold = maybe
				#	}
				#}
			}
			50 = {
				desc = agot_filler_nights_watch.0002.c.random_2.desc
				custom_tooltip = agot_filler_nights_watch.0002.c.random_2.tt
				trigger_event = {
					id = agot_filler_nights_watch.0004 # Fallguy begs for mercy
					days = { 6 36 }
				}
			}
		}
	}
	# Banish or execute the accused
	option = {
		name = {
			text = {
				first_valid = {
					triggered_desc = {
						trigger = {
							OR = {
								has_trait = forgiving
								has_trait = generous
								has_trait = compassionate
							}
						}
						desc = agot_filler_nights_watch.0002.d.banish
					}
					triggered_desc = {
						trigger = { always = yes }
						desc = agot_filler_nights_watch.0002.d.execute
					}
				}
			}
		}
		# Only available if you're too unskilled to know the real culprit
		trigger = {
			scope:stewardship_value < very_high_skill_rating
			scope:learning_value < very_high_skill_rating
		}

		if = {
			limit = {
				OR = {
					has_trait = forgiving
					has_trait = generous
					has_trait = compassionate
				}
			}
			# Banishing someone from the Night's Watch, rather than executing them, is
			# looked upon poorly as Lord Commander
			add_prestige = -150
			scope:fallguy = {
				agot_banish_effect = { BANISHER = root }
				#add_character_flag = banished_from_nights_watch Unused, reenable when used
				remove_trait = nightswatch
			}
			every_living_black_brother = {
				custom = every_member_of_nights_watch
				add_opinion = {
					modifier = spared_thief_opinion
					target = root
					opinion = -20
				}
			}
		}
		else = {
			send_interface_toast = {
				title = agot_filler_nights_watch.0002.d.message.t
				left_icon = root
				right_icon = scope:fallguy
				scope:fallguy = {
					death = {
						death_reason = death_execution
						killer = root
					}
				}
			}
			reverse_add_opinion = {
				target = scope:teller
				modifier = listened_opinion
			}
			scope:fallguy = {
				if = {
					limit = {
						any_relation = {
							type = friend
							NOT = { this = root }
						}
					}
					every_relation = {
						type = friend
						limit = {
							NOT = { this = root }
						}
						add_opinion = {
							target = root
							modifier = executed_friend_opinion
						}
					}
				}
			}
		}
	}
	# Chastise the teller for not minding his own business
	option = {
		name = {
			text = {
				random_valid = {
					triggered_desc = {
						trigger = {
							OR = {
								has_trait = arrogant
								has_trait = stubborn
								has_trait = fickle
								has_trait = craven
								has_trait = calm
							}
						}
						desc = agot_filler_nights_watch.0002.e.arrogant
					}
					triggered_desc = {
						trigger = {
							OR = {
								has_trait = arbitrary
								has_trait = impatient
								has_trait = callous
								has_trait = cynical
								has_trait = lazy
							}
						}
						desc = agot_filler_nights_watch.0002.e.arbitrary
					}
					triggered_desc = {
						trigger = {
							OR = {
								has_trait = just
								has_trait = patient
								has_trait = generous
								has_trait = diligent
								has_trait = honest
								has_trait = trusting
							}
						}
						desc = agot_filler_nights_watch.0002.e.just
					}
					triggered_desc = {
						trigger = { always = yes }
						desc = agot_filler_nights_watch.0002.e.fallback
					}
				}
			}
		}
		reverse_add_opinion = {
			modifier = dismissed_me_opinion
			target = scope:teller
			opinion = -10
		}
		# If the teller is the right personality, knowing you don't care about stealing,
		# he will begin stealing himself
		if = {
			limit = {
				# Teller has to like money or be vengeful
				OR = {
					has_trait = greedy
					has_trait = avaricious
					has_trait = vengeful
				}
				# Teller also has to be bold enough to do it
				scope:teller = {
					dread_modified_ai_boldness = {
						dreaded_character = root
						value > 0
					}
				}
			}
			trigger_event = {
				id = agot_filler_nights_watch.0005 # The teller begins to steal
				days = { 500 800 }
			}
		}
	}
}

scripted_trigger any_reaction_trigger = {
	OR = {
		var:reaction_1 = $REACTION$
		var:reaction_2 = $REACTION$
		var:reaction_3 = $REACTION$
	}
}
# Having banished the culprit, you are expected to re-invest the gold in the Night's Watch
agot_filler_nights_watch.0003 = {
	type = character_event
	title = agot_filler_nights_watch.0003.t
	desc = agot_filler_nights_watch.0003.desc
	theme = realm
	override_background = council_chamber
	left_portrait = root #TODO: triggered_animations
	right_portrait = scope:teller

	trigger = {
		location = { geographical_region = world_westeros_the_wall }
		scope:teller = {
			is_alive = yes
			is_imprisoned = no
		}
		has_trait = nightswatch
	}

	immediate = {
		# This is used to randomly sync loc with relevant trait-based effects
		hidden_effect = {
			set_while_counter_variable_effect = yes
			while = {
				limit = {
					var:while_counter < 3
				}
				increase_while_counter_variable_effect = yes
				random_list = {
					50 = {
						trigger = {
							OR = {
								has_trait = wrathful
								has_trait = stubborn
								has_trait = arrogant
								has_trait = brave
								has_trait = ambitious
								has_trait = gluttonous
							}
							NOT = {
								any_reaction_trigger = { REACTION = flag:wrathful }
							}
						}
						set_local_variable = {
							name = reaction
							value = flag:wrathful
						}
					}
					50 = {
						trigger = {
							OR = {
								has_trait = calm
								has_trait = patient
								has_trait = chaste
								has_trait = arbitrary
								has_trait = greedy
								has_trait = lustful
								has_trait = temperate
							}
							NOT = {
								any_reaction_trigger = { REACTION = flag:calm }
							}
						}
						set_local_variable = {
							name = reaction
							value = flag:calm
						}
					}
					50 = {
						trigger = {
							OR = {
								has_trait = cynical
								has_trait = paranoid
							}
							NOT = {
								any_reaction_trigger = { REACTION = flag:cynical }
							}
						}
						set_local_variable = {
							name = reaction
							value = flag:cynical
						}
					}
					50 = {
						trigger = {
							OR = {
								has_trait = vengeful
								has_trait = shy
								has_trait = deceitful
								has_trait = sadistic
							}
							NOT = {
								any_reaction_trigger = { REACTION = flag:vengeful }
							}
						}
						set_local_variable = {
							name = reaction
							value = flag:vengeful
						}
					}
					50 = {
						trigger = {
							has_trait = zealous
							NOT = {
								any_reaction_trigger = { REACTION = flag:zealous }
							}
						}
						set_local_variable = {
							name = reaction
							value = flag:zealous
						}
					}
					50 = {
						trigger = {
							OR = {
								has_trait = impatient
								has_trait = lazy
								has_trait = fickle
								has_trait = craven
							}
							NOT = {
								any_reaction_trigger = { REACTION = flag:impatient }
							}
						}
						set_local_variable = {
							name = reaction
							value = flag:impatient
						}
					}
					50 = {
						trigger = {
							OR = {
								has_trait = content
								has_trait = generous
								has_trait = gregarious
								has_trait = honest
								has_trait = diligent
								has_trait = just
							}
							NOT = {
								any_reaction_trigger = { REACTION = flag:content }
							}
						}
						set_local_variable = {
							name = reaction
							value = flag:content
						}
					}
					50 = {
						trigger = {
							OR = {
								has_trait = forgiving
								has_trait = trusting
								has_trait = compassionate
								has_trait = humble
							}
							NOT = {
								any_reaction_trigger = { REACTION = flag:forgiving }
							}
						}
						set_local_variable = {
							name = reaction
							value = flag:forgiving
						}
					}
				}
				if = {
					limit = {
						exists = local_var:reaction
						NOT = { exists = var:reaction_1 }
					}
					set_variable = {
						name = reaction_1
						value = local_var:reaction
					}
				}
				else_if = {
					limit = {
						exists = local_var:reaction
						exists = var:reaction_1
						NOT = { exists = var:reaction_2 }
					}
					set_variable = {
						name = reaction_2
						value = local_var:reaction
					}
				}
				else_if = {
					limit = {
						exists = local_var:reaction
						exists = var:reaction_1
						exists = var:reaction_2
						NOT = { exists = var:reaction_3 }
					}
					set_variable = {
						name = reaction_3
						value = local_var:reaction
					}
				}
				remove_local_variable = reaction
			}
			remove_while_counter_variable_effect = yes
		}
	}

	# Decline
	option = {
		name = {
			text = {
				first_valid = {
					# "I must? I #EMP must?#! Is that an order from you?"
					triggered_desc = {
						trigger = { any_reaction_trigger = { REACTION = flag:wrathful } }
						desc = agot_filler_nights_watch.0003.a.wrathful
					}
					# "At my leisure, [teller.GetFirstNameNoTooltip]."
					triggered_desc = {
						trigger = { any_reaction_trigger = { REACTION = flag:calm } }
						desc = agot_filler_nights_watch.0003.a.calm
					}
					# "And leave it with #EMP you?#! I think not."
					triggered_desc = {
						trigger = { any_reaction_trigger = { REACTION = flag:cynical } }
						desc = agot_filler_nights_watch.0003.a.cynical
					}
					# "Don't mention it again."
					triggered_desc = {
						trigger = { any_reaction_trigger = { REACTION = flag:vengeful } }
						desc = agot_filler_nights_watch.0003.a.vengeful
					}
					# "By the Old Gods and the New, leave it be."
					triggered_desc = {
						trigger = { any_reaction_trigger = { REACTION = flag:zealous } }
						desc = agot_filler_nights_watch.0003.a.zealous
					}
					# Keep the gold for yourself
					triggered_desc = {
						trigger = { always = yes }
						desc = agot_filler_nights_watch.0003.a.fallback
					}
				}
			}
		}
		if = {
			limit = {
				OR = {
					any_reaction_trigger = { REACTION = flag:wrathful }
					any_reaction_trigger = { REACTION = flag:calm }
					any_reaction_trigger = { REACTION = flag:cynical }
					any_reaction_trigger = { REACTION = flag:vengeful }
					any_reaction_trigger = { REACTION = flag:zealous }
				}
			}
			custom_tooltip = agot_filler_nights_watch.0003.a.tt
		}
		reverse_add_opinion = {
			target = scope:teller
			modifier = ignored_opinion
			opinion = -15
		}
		# "I must? I #EMP must?#! Is that an order from you?"
		if = {
			limit = { any_reaction_trigger = { REACTION = flag:wrathful } }
			add_dread = 10
		}
		# "At my leisure, [teller.GetFirstNameNoTooltip]."
		else_if = {
			limit = { any_reaction_trigger = { REACTION = flag:calm } }
			add_diplomacy_lifestyle_xp = 60
		}
		# "And leave it with #EMP you?#! I think not."
		else_if = {
			limit = { any_reaction_trigger = { REACTION = flag:cynical } }
			custom_tooltip = agot_filler_nights_watch.0003.a.cynical.tt
			hidden_effect = {
				every_living_black_brother = {
					limit = {
						has_trait = honest
						has_trait = just
						has_trait = vengeful
						has_trait = cynical
					}
					add_opinion = {
						target = scope:teller
						modifier = fostered_mistrust_opinion
						opinion = -10
					}
				}
			}
		}
		# "Don't mention it again."
		else_if = {
			limit = { any_reaction_trigger = { REACTION = flag:vengeful } }
			add_dread = 20
			if = {
				limit = { scope:teller = { ai_boldness <= -35 } }
				add_hook = {
					type = threat_hook
					target = scope:teller
					years = 10
				}
			}
		}
		# "By the Old Gods and the New, leave it be."
		else_if = {
			limit = { any_reaction_trigger = { REACTION = flag:zealous } }
			add_piety = 50
		}
	}
	# Accept
	option = {
		name = {
			text = {
				first_valid = {
					# "Yes, yes—take it then."
					triggered_desc = {
						trigger = { any_reaction_trigger = { REACTION = flag:impatient } }
						desc = agot_filler_nights_watch.0003.b.impatient
					}
					# "Well, I hardly need it."
					triggered_desc = {
						trigger = { any_reaction_trigger = { REACTION = flag:content } }
						desc = agot_filler_nights_watch.0003.b.content
					}
					# "I trust you'll be kinder to it than you've been to me."
					triggered_desc = {
						trigger = { any_reaction_trigger = { REACTION = flag:forgiving } }
						desc = agot_filler_nights_watch.0003.b.forgiving
					}
					# Gift the gold to the Watch
					triggered_desc = {
						trigger = { always = yes }
						desc = agot_filler_nights_watch.0003.b.fallback
					}
				}
			}
		}

		if = {
			limit = {
				OR = {
					any_reaction_trigger = { REACTION = flag:impatient }
					any_reaction_trigger = { REACTION = flag:content }
					any_reaction_trigger = { REACTION = flag:forgiving }
				}
			}
			custom_tooltip = agot_filler_nights_watch.0003.b.tt
		}
		remove_short_term_gold = scope:gold_to_pay
		reverse_add_opinion = {
			target = scope:teller
			modifier = listened_opinion
			opinion = 10
		}
		# "Yes, yes—take it then."
		if = {
			limit = { any_reaction_trigger = { REACTION = flag:impatient } }
			add_prestige = 75
		}
		# "Well, I hardly need it."
		else_if = {
			limit = { any_reaction_trigger = { REACTION = flag:content } }
			every_vassal_or_below = {
				limit = { gold < scope:gold_to_pay }
				custom = agot_filler_nights_watch_0003_b_content
				add_opinion = {
					target = root
					modifier = jealous_opinion
					opinion = -5
				}
			}
		}
		# "I trust you'll be kinder to it than you've been to me."
		else_if = {
			limit = { any_reaction_trigger = { REACTION = flag:forgiving } }
			custom_tooltip = agot_filler_nights_watch.0003.b.forgiving.tt
			add_hook = {
				type = manipulation_hook
				target = scope:teller
				years = 10
			}
		}
	}
	after = {
		remove_local_variable = reaction_1
		remove_local_variable = reaction_2
		remove_local_variable = reaction_3
	}
}

scripted_trigger traits_before_trigger = {
	NOR = {
		has_trait = humble
		has_trait = compassionate
		has_trait = zealous
		has_trait = vengeful
		has_trait = arrogant
		has_trait = sadistic
		has_trait = avaricious
		has_trait = stubborn
		has_trait = diligent
		has_trait = just
		has_trait = temperate
		has_trait = trusting
		has_trait = ambitious
		has_trait = lazy
		has_trait = gluttonous
		has_trait = cynical
		has_trait = impatient
		has_trait = paranoid
		has_trait = fickle
		has_trait = wrathful
		has_trait = shy
		has_trait = honest
		has_trait = calm
		has_trait = content
	}
}
# The accused begs for mercy because they can't repay the gold
agot_filler_nights_watch.0004 = {
	type = character_event
	title = agot_filler_nights_watch.0004.t
	desc = {
		desc = agot_filler_nights_watch.0004.opening
		first_valid = {
			triggered_desc = {
				trigger = {
					scope:fallguy = {
						OR = {
							has_trait = humble
							has_trait = compassionate
							has_trait = zealous
						}
					}
				}
				desc = agot_filler_nights_watch.0004.humble
			}
			triggered_desc = {
				trigger = {
					scope:fallguy = {
						OR = {
							has_trait = vengeful
							has_trait = arrogant
							has_trait = sadistic
							has_trait = avaricious
							has_trait = stubborn
						}
					}
				}
				desc = agot_filler_nights_watch.0004.vengeful
			}
			triggered_desc = {
				trigger = {
					scope:fallguy = {
						OR = {
							has_trait = diligent
							has_trait = just
							has_trait = temperate
							has_trait = trusting
							has_trait = ambitious
						}
					}
				}
				desc = agot_filler_nights_watch.0004.diligent
			}
			triggered_desc = {
				trigger = {
					scope:fallguy = {
						OR = {
							has_trait = lazy
							has_trait = gluttonous
							has_trait = cynical
						}
					}
				}
				desc = agot_filler_nights_watch.0004.lazy
			}
			triggered_desc = {
				trigger = {
					scope:fallguy = {
						OR = {
							has_trait = impatient
							has_trait = paranoid
							has_trait = fickle
							has_trait = wrathful
						}
					}
				}
				desc = agot_filler_nights_watch.0004.impatient
			}
			triggered_desc = {
				trigger = {
					scope:fallguy = {
						OR = {
							has_trait = shy
							has_trait = honest
							has_trait = calm
							has_trait = content
						}
					}
				}
				desc = agot_filler_nights_watch.0004.shy
			}
			triggered_desc = {
				trigger = {
					scope:fallguy = {
						OR = {
							exists = scope:benefactor
							has_trait = deceitful
						}
					}
				}
				desc = agot_filler_nights_watch.0004.deceitful
			}
			triggered_desc = {
				trigger = { always = yes }
				desc = agot_filler_nights_watch.0004.fallback
			}
		}
	}
	theme = realm #TODO: placeholder
	left_portrait = root #TODO: animations
	right_portrait = scope:fallguy

	trigger = {
		location = { geographical_region = world_westeros_the_wall }
		has_trait = nightswatch
	}

	immediate = {
		if = {
			limit = {
				scope:fallguy = {
					traits_before_trigger = yes
					OR = {
						has_trait = generous
						has_trait = gregarious
					}
					any_close_or_extended_family_member = {
						gold >= scope:gold_to_pay
						opinion = {
							target = scope:fallguy
							value >= 20
						}
					}
				}
			}
			scope:fallguy = {
				random_close_or_extended_family_member = {
					limit = {
						gold >= scope:gold_to_pay
						opinion = {
							target = scope:fallguy
							value >= 20
						}
					}
					weight = {
						modifier = {
							add = 5
							has_important_relationship_trigger = { CHARACTER = scope:fallguy }
						}
						ai_value_modifier = {
							who = this
							ai_greed = -0.1
							ai_honor = 0.1
							ai_sociability = 0.05
						}
					}
					save_scope_as = benefactor
				}
			}
		}
	}

	# Show mercy
	option = {
		name = {
			text = {
				first_valid = {
					triggered_desc = {
						trigger = {
							scope:fallguy = {
								traits_before_trigger = yes
								OR = {
									has_trait = generous
									has_trait = gregarious
								}
								any_close_or_extended_family_member = {
									gold >= scope:gold_to_pay
									opinion = {
										target = scope:fallguy
										value >= 20
									}
								}
							}
						}
						desc = agot_filler_nights_watch.0004.a.gold
					}
					desc = agot_filler_nights_watch.0004.a.fallback
				}
			}
		}
		custom_tooltip = agot_filler_nights_watch.0004.a.tt
		reverse_add_opinion = {
			target = scope:fallguy
			modifier = happy_opinion
			opinion = 40
		}
		add_hook = {
			type = favor_hook
			target = scope:fallguy
		}
		every_living_black_brother = {
			limit = { NOT = { this = scope:fallguy } }
			custom = every_member_of_nights_watch
			add_opinion = {
				target = root
				modifier = spared_thief_opinion
				opinion = -10
			}
		}
	}
	# Insist he pay his debts
	option = {
		name = {
			text = {
				first_valid = {
					triggered_desc = {
						trigger = {
							scope:fallguy = {
								NOR = {
									has_trait = humble
									has_trait = compassionate
									has_trait = zealous
								}
								OR = {
									has_trait = vengeful
									has_trait = arrogant
									has_trait = sadistic
									has_trait = avaricious
									has_trait = stubborn
								}
								can_start_scheme = {
									type = murder
									target_character = root
								}
							}
						}
						desc = agot_filler_nights_watch.0004.b.vengeful
					}
					triggered_desc = {
						trigger = {
							scope:fallguy = {
								traits_before_trigger = yes
								OR = {
									has_trait = generous
									has_trait = gregarious
								}
								exists = scope:benefactor
							}
						}
						desc = agot_filler_nights_watch.0004.b.deceitful
					}
					desc = agot_filler_nights_watch.0004.b.fallback
				}
			}
		}
		if = {
			limit = {
				scope:fallguy = {
					NOR = {
						has_trait = humble
						has_trait = compassionate
						has_trait = zealous
					}
					OR = {
						has_trait = vengeful
						has_trait = arrogant
						has_trait = sadistic
						has_trait = avaricious
						has_trait = stubborn
					}
					can_start_scheme = {
						type = murder
						target_character = root
					}
				}
			}
			hidden_effect = {
				scope:fallguy = {
					start_scheme = {
						type = murder
						target_character = root
					}
				}
			}
			add_dread = 10
			scope:fallguy = {
				pay_short_term_gold = {
					target = root
					gold = { 5 40 }
				}
			}
			reverse_add_opinion = {
				target = scope:fallguy
				modifier = gave_no_forgiveness_opinion
				opinion = -30
			}
		}
		else_if = {
			limit = {
				exists = scope:benefactor
				scope:fallguy = {
					traits_before_trigger = yes
					OR = {
						has_trait = generous
						has_trait = gregarious
					}
				}
			}
			custom_tooltip = agot_filler_nights_watch.0004.b.deceitful.tt
			random_list = {
				25 = {
					opinion_modifier = {
						who = scope:benefactor
						opinion_target = scope:fallguy
						multiplier = 0.25
					}
					ai_value_modifier = {
						who = scope:benefactor
						ai_honor = 0.1
						ai_rationality = -0.1
						ai_greed = -0.2
					}
					modifier = {
						add = 15
						scope:benefactor = { has_trait = improvident }
					}
					modifier = {
						add = 15
						scope:benefactor = { has_trait = profligate }
					}
					trigger_event = {
						id = agot_filler_nights_watch.0007 # Gets the gold but w/ hook
						days = { 30 120 }
					}
				}
				50 = {
					ai_value_modifier = {
						who = scope:fallguy
						ai_boldness = -0.25
					}
					trigger_event = {
						id = agot_filler_nights_watch.0008 # They abandon their post
						days = { 30 120 }
					}
				}
			}
		}
		else_if = {
			limit = {
				scope:fallguy = {
					has_trait = deceitful
				}
			}
			custom_tooltip = agot_filler_nights_watch.0004.b.deceitful.tt
			trigger_event = {
				id = agot_filler_nights_watch.0008 # They abandon their post
				days = { 30 120 }
			}
		}
		else = {
			scope:fallguy = {
				pay_short_term_gold = {
					target = root
					gold = { 18 40 }
				}
			}
			reverse_add_opinion = {
				target = scope:fallguy
				modifier = gave_no_forgiveness_opinion
				opinion = -30
			}
		}
	}
}
# Teller takes to crime now that he doesn't think you care
agot_filler_nights_watch.0005 = {
	hidden = yes

	trigger = {
		#location = { geographical_region = world_westeros_the_wall } # AGOT TODO
		scope:teller = {
			is_alive = yes
			is_imprisoned = no
		}
		has_trait = nightswatch
	}

	immediate = {
		# Another theft ring that expires after a certain time
		scope:teller.location = {
			county = {
				add_county_modifier = {
					modifier = county_corruption_smuggling_ring_modifier
					years = 3
				}
			}
		}
		random = {
			chance = 5
			ai_value_modifier = {
				who = scope:teller
				ai_vengefulness = 0.2
				ai_boldness = 0.2
				ai_greed = 0.1
				ai_rationality = -0.2
			}
			trigger_event = {
				id = agot_filler_nights_watch.0006
				days = { 300 500 }
			}
		}
	}
}
# The teller gets in a fight with one of his conspirators and kills them
agot_filler_nights_watch.0006 = {
	hidden = yes

	trigger = {
		scope:teller = {
			is_alive = yes
			is_imprisoned = no
		}
		has_trait = nightswatch
	}

	immediate = {
		random_living_black_brother = {
			limit = {
				NOT = { this = root }
				NOT = { this = scope:teller }
				is_imprisoned = no
				is_alive = yes
			}
			weight = {
				ai_value_modifier = {
					who = this
					ai_greed = 0.05
					ai_honor = -0.05
				}
				opinion_modifier = {
					who = scope:teller
					opinion_target = this
					multiplier = -0.05
				}
				modifier = {
					add = -5
					is_landed = yes
				}
			}
			save_scope_as = victim
		}

		send_interface_message = {
			type = event_martial_bad
			title = agot_filler_nights_watch.0006.message.t
			right_icon = scope:teller
			custom_tooltip = agot_filler_nights_watch.0006.message.tt
			title:k_the_wall.holder = {
				imprison = {
					target = scope:teller
					type = dungeon
				}
			}
		}
	}
}
# Gets the gold but you give a hook to the benefactor
agot_filler_nights_watch.0007 = {
	type = letter_event
	opening = agot_filler_nights_watch.0007.t
	desc = agot_filler_nights_watch.0007.desc
	sender = scope:benefactor

	immediate = {
		scope:benefactor = {
			pay_short_term_gold = {
				gold = {
					value = scope:gold_to_pay
					multiply = 1.5
				}
				target = root
			}
			add_hook = {
				type = favor_hook
				target = root
				years = 10
			}
		}
	}

	option = {
		name = agot_filler_nights_watch.0007.a
	}
}
# They abandon their post
agot_filler_nights_watch.0008 = {
	type = letter_event
	opening = {
		first_valid = {
			triggered_desc = {
				trigger = {
					reverse_opinion = {
						target = scope:fallguy
						value >= 0
					}
				}
				desc = agot_filler_nights_watch.0008.t.good
			}
			triggered_desc = {
				trigger = {
					reverse_opinion = {
						target = scope:fallguy
						value < 0
					}
				}
				desc = agot_filler_nights_watch.0008.t.bad
			}
		}
	}
	desc = {
		first_valid = {
			triggered_desc = {
				trigger = {
					reverse_opinion = {
						target = scope:fallguy
						value >= 0
					}
				}
				desc = agot_filler_nights_watch.0008.desc.good
			}
			triggered_desc = {
				trigger = {
					reverse_opinion = {
						target = scope:fallguy
						value < 0
					}
				}
				desc = agot_filler_nights_watch.0008.desc.bad
			}
		}
	}
	sender = scope:fallguy

	immediate = {
		scope:fallguy = {
			move_to_pool = yes
			remove_trait = nightswatch
			add_trait = deserter
			if = {
				limit = {
					opinion = {
						target = root
						value >= 0
					}
				}
				#add_character_flag = wants_to_clear_name Unused, reenable when used
			}
		}
	}

	option = {
		name = {
			text = {
				first_valid = {
					triggered_desc = {
						trigger = {
							reverse_opinion = {
								target = scope:fallguy
								value >= 0
							}
						}
						desc = agot_filler_nights_watch.0008.a.good
					}
					triggered_desc = {
						trigger = {
							reverse_opinion = {
								target = scope:fallguy
								value < 0
							}
						}
						desc = agot_filler_nights_watch.0008.a.bad
					}
				}
			}
		}
	}
}

scripted_trigger nights_watch_0009_valid_brother_trigger = {
	age < 20
	is_adult = yes
	is_male = yes
	is_imprisoned = no
	is_incapable = no
}

###########################################
# TROUBLE ADJUSTING ( 0009 - 0010 ) \\ pbbm
###########################################

# Young recruit is having trouble adjusting
agot_filler_nights_watch.0009 = {
	type = character_event
	title = agot_filler_nights_watch.0009.t
	desc = agot_filler_nights_watch.0009.desc
	theme = martial
	override_background = courtyard
	left_portrait = root #TODO: animations
	right_portrait = scope:troublemaker

	trigger = {
		is_available_adult = yes
		NOT = { has_character_flag = had_nights_watch_0009 }
		location = { geographical_region = world_westeros_the_wall }
		has_trait = nightswatch
		any_courtier_or_guest = { nights_watch_0009_valid_brother_trigger = yes }
	}

	immediate = {
		add_character_flag = {
			flag = had_nights_watch_0009
			years = 5
		}
		random_courtier_or_guest = {
			limit = { nights_watch_0009_valid_brother_trigger = yes }
			weight = {
				ai_value_modifier = {
					who = this
					ai_vengefulness = 0.1
					ai_boldness = 0.1
					ai_sociability = -0.1
					ai_honor = -0.1
				}
				modifier = {
					add = 10
					has_trait = wrathful
				}
			}
			save_scope_as = troublemaker
		}
	}
	# Execute him
	option = {
		name = agot_filler_nights_watch.0009.a
		trigger = {
			OR = {
				has_trait = callous
				has_trait = sadistic
				has_trait = torturer
			}
		}
		trait = sadistic
		#custom_tooltip = agot_filler_nights_watch.0009.a.tt
		add_dread = 5
		scope:troublemaker = {
			death = {
				death_reason = death_execution
				killer = root
			}
		}
	}
	# Scare him
	option = {
		name = agot_filler_nights_watch.0009.b
		if = {
			limit = {
				scope:troublemaker = {
					OR = {
						has_trait = diligent
						has_trait = stubborn
						has_trait = humble
						has_trait = trusting
					}
				}
			}
			reverse_add_opinion = {
				target = scope:troublemaker
				modifier = helped_me_in_time_of_need
				opinion = 15
			}
			add_prestige = 35
		}
		else_if = {
			limit = {
				scope:troublemaker = {
					OR = {
						has_trait = wrathful
						has_trait = vengeful
						has_trait = cynical
					}
				}
			}
			# Might desert out of spite
			hidden_effect = {
				random = {
					chance = 3 # Maximum 33% chance of fleeing
					ai_value_modifier = {
						who = scope:troublemaker
						ai_boldness = -0.2
						ai_rationality = -0.1
					}
					# But won't desert if honorable
					modifier = {
						factor = 0
						scope:troublemaker = { has_trait = just }
					}
					scope:troublemaker = {
						move_to_pool = yes
						remove_trait = nightswatch
						add_trait = deserter
					}
				}
			}
			reverse_add_opinion = {
				target = scope:troublemaker
				modifier = unhelpful_opinion
				opinion = -10
			}
		}
		else = {
			reverse_add_opinion = {
				target = scope:troublemaker
				modifier = unhelpful_opinion
				opinion = -10
			}
		}
	}
	# Empathize/Encourage
	option = {
		name = agot_filler_nights_watch.0009.c
		if = {
			limit = {
				scope:troublemaker = {
					OR = {
						has_trait = vengeful
						has_trait = arrogant
						has_trait = arbitrary
						has_trait = wrathful
						has_trait = impatient
						has_trait = paranoid
						has_trait = lazy
						has_trait = craven
					}
				}
			}
			scope:troublemaker = {
				random_list = {
					10 = { add_trait = drunkard }
					10 = { add_trait = flagellant }
					10 = { add_trait = inappetetic }
					10 = { add_trait = irritable }
					5 = { add_trait = confider }
					5 = { add_trait = rakish }
					5 = { add_trait = depressed_1 }
				}
			}
		}
		else = {
			reverse_add_opinion = {
				target = scope:troublemaker
				modifier = helped_me_in_time_of_need
				opinion = 15
			}
			add_prestige = 70
		}
	}
	# Strike him
	option = {
		name = agot_filler_nights_watch.0009.d

		scope:troublemaker = {
			increase_wounds_no_death_effect = { REASON = fight }
			if = {
				limit = {
					OR = {
						has_trait = vengeful
						has_trait = wrathful
						has_trait = sadistic
						has_trait = torturer
					}
					can_start_scheme = {
						type = murder
						target_character = root
					}
				}
				hidden_effect = {
					start_scheme = {
						target_character = root
						type = murder
					}
				}
			}
			else_if = {
				limit = {
					OR = {
						has_trait = forgiving
						has_trait = content
						has_trait = gregarious
						has_trait = patient
						has_trait = trusting
						has_trait = arbitrary
					}
				}
				add_opinion = {
					target = root
					modifier = helped_me_in_time_of_need
					opinion = 5
				}
			}
			else = {
				add_opinion = {
					target = root
					modifier = unhelpful_opinion
					opinion = -20
				}
			}
		}
	}
	# Give him a specific job/court position
	option = {
		name = agot_filler_nights_watch.0009.e

		custom_tooltip = agot_filler_nights_watch.0009.court_position.tt
		reverse_add_opinion = {
			target = scope:troublemaker
			modifier = helped_me_in_time_of_need
			opinion = 20
		}
		trigger_event = {
			id = agot_filler_nights_watch.0010 # Did not get a position
			days = { 20 35 }
		}
	}
}
# You break your promise and make troublemaker sad
agot_filler_nights_watch.0010 = {
	hidden = yes

	trigger = {
		scope:troublemaker = {
			NOT = { has_any_court_position = yes }
		}
		has_trait = nightswatch
	}

	immediate = {
		scope:troublemaker = {
			remove_opinion = {
				target = root
				modifier = helped_me_in_time_of_need
			}
		}
		send_interface_toast = {
			title = agot_filler_nights_watch.0010.toast.t
			left_icon = root
			right_icon = scope:troublemaker
			scope:troublemaker = {
				add_trait = depressed_1
				add_opinion = {
					target = root
					modifier = broke_promise
					opinion = -10
				}
			}
		}
	}
}

scripted_trigger every_province_has_holding_trigger = {
	title:c_$COUNTY$ = {
		any_province = {
			count = all
			OR = {
				has_holding_type = monastery_holding
				has_holding_type = church_holding
				has_holding_type = castle_holding
				has_holding_type = city_holding
			}
		}
	}
}

scripted_trigger has_any_holding_trigger = {
	OR = {
		has_holding_type = monastery_holding
		has_holding_type = church_holding
		has_holding_type = castle_holding
		has_holding_type = city_holding
	}
}

###########################################
# SQUATTER AT THE WALL // pbbm
###########################################

# Squatter in an unmaintained castle
agot_filler_nights_watch.0011 = {
	type = character_event
	orphan = yes #AGOT TODO/ Event is broken as of now
	title = agot_filler_nights_watch.0011.t
	desc = {
		desc = agot_filler_nights_watch.0011.opening
		first_valid = {
			triggered_desc = {
				trigger = { local_var:secret_to_reveal = flag:murder }
				desc = agot_filler_nights_watch.0011.secret_murder
			}
			triggered_desc = {
				trigger = { local_var:secret_to_reveal = flag:murder_attempt }
				desc = agot_filler_nights_watch.0011.secret_murder_attempt
			}
			triggered_desc = {
				trigger = { local_var:secret_to_reveal = flag:cannibal }
				desc = agot_filler_nights_watch.0011.secret_cannibal
			}
			triggered_desc = {
				trigger = { local_var:secret_to_reveal = flag:lover }
				desc = agot_filler_nights_watch.0011.secret_lover
			}
			triggered_desc = {
				trigger = { local_var:secret_to_reveal = flag:incest }
				desc = agot_filler_nights_watch.0011.secret_incest
			}
			triggered_desc = {
				trigger = { local_var:secret_to_reveal = flag:sodomite }
				desc = agot_filler_nights_watch.0011.secret_deviant
			}
			triggered_desc = {
				trigger = { local_var:secret_to_reveal = flag:heritage }
				desc = agot_filler_nights_watch.0011.secret_heritage
			}
			triggered_desc = {
				trigger = { local_var:secret_to_reveal = flag:deviant }
				desc = agot_filler_nights_watch.0011.secret_deviant
			}
		}
		desc = agot_filler_nights_watch.0011.closing
	}
	theme = martial
	left_portrait = {
		character = scope:councillor
		animation = anger
	}
	right_portrait = {
		character = scope:squatter_1
		animation = disapproval
	}

	trigger = {
		is_available_adult = yes
		location = { geographical_region = world_westeros_the_wall }
		any_held_title = {
			OR = {
				this = title:k_the_wall
				this = title:c_the_shadow_tower
				this = title:c_castle_black
				this = title:c_eastwatch
			}
		}
		OR = {
			title:c_the_shadow_tower = {
				any_province = {
					NOT = { has_any_holding_trigger = yes }
				}
			}
			title:c_castle_black = {
				any_province = {
					NOT = { has_any_holding_trigger = yes }
				}
			}
			title:c_eastwatch = {
				any_province = {
					NOT = { has_any_holding_trigger = yes }
				}
			}
		}
		any_councillor = {
			any_secret = { exists = this }
		}
		has_trait = nightswatch
	}

	weight_multiplier = {
		base = 1
		modifier = {
			add = 0.5
			any_secret = { exists = this }
		}
	}

	immediate = {
		random_list = {
			50 = {
				trigger = {
					OR = {
						title:k_the_wall = { holder = root }
						title:c_the_shadow_tower = { holder = root }
					}
					NOT = { every_province_has_holding_trigger = { COUNTY = the_shadow_tower } }
				}
				#modifier = { # AGOT TODO this is not how modifiers work, it needs a trigger!
				#	subtract = {
				#		value = title:c_the_shadow_tower.holder.stewardship
				#		max = very_high_skill_rating
				#	}
				#}
				#modifier = { # AGOT TODO, same here
				#	subtract = title:c_the_shadow_tower.holder.dread
				#}
				title:c_the_shadow_tower = {
					random_county_province = {
						limit = {
							NOT = { has_any_holding_trigger = yes }
						}
						barony = { save_scope_as = derelict }
					}
				}
			}
			50 = {
				trigger = {
					OR = {
						title:k_the_wall = { holder = root }
						title:c_castle_black = { holder = root }
					}
					NOT = { every_province_has_holding_trigger = { COUNTY = castle_black } }
				}
				#modifier = { # AGOT TODO, trigger!
				#	subtract = {
				#		value = title:c_castle_black.holder.stewardship
				#		max = very_high_skill_rating
				#	}
				#}
				#modifier = { # AGOT TODO, trigger!
				#	subtract = title:c_castle_black.holder.dread
				#}
				title:c_castle_black = {
					random_county_province = {
						limit = {
							NOT = { has_any_holding_trigger = yes }
						}
						barony = { save_scope_as = derelict }
					}
				}
			}
			50 = {
				trigger = {
					OR = {
						title:k_the_wall = { holder = root }
						title:c_eastwatch = { holder = root }
					}
					NOT = { every_province_has_holding_trigger = { COUNTY = eastwatch } }
				}
				#modifier = { # AGOT TODO, trigger!
				#	subtract = {
				#		value = title:c_eastwatch.holder.stewardship
				#		max = very_high_skill_rating
				#	}
				#}
				#modifier = { # AGOT TODO, trigger!
				#	subtract = title:c_eastwatch.holder.dread
				#}
				title:c_eastwatch = {
					random_county_province = {
						limit = {
							NOT = { has_any_holding_trigger = yes }
						}
						barony = { save_scope_as = derelict }
					}
				}
			}
		}
		create_character = {
			save_scope_as = squatter_1
			age = { 26 55 }
			location = root.location
			random_traits = no
			gender_female_chance = 70
			dynasty = none
			intrigue = { 6 16 }
			learning = { 12 20 }
			random_traits_list = {
				count = { 1 2 }
				brave = {}
				diligent = {}
				ambitious = {}
				wrathful = {}
				arbitrary = {}
				callous = {}
				deceitful = {}
			}
			random_traits_list = {
				count = 2
				impatient = {}
				gluttonous = {}
				just = {}
				compassionate = {}
				arrogant = {}
				vengeful = {}
			}
			trait = greensight
			trait = uncouth
			trait = drunkard
			random_faith = {
				faith:old_gods_btw = { weight = { base = 12 } }
				faith:the_seven_main = { weight = { base = 6 } }
				faith:drowned_god_main = { weight = { base = 6 } }
				faith:baelorism = { weight = { base = 2 } }
				faith:warring_star = { weight = { base = 2 } }
				faith:old_gods_vale = { weight = { base = 2 } }
				faith:old_gods_south = { weight = { base = 2 } }
				faith:drowned_god_foe = { weight = { base = 2 } }
				faith:storm_god = { weight = { base = 2 } }
			}
			random_culture = {
				culture:crannogman = { weight = { base = 32 } }
				culture:forestman = { weight = { base = 12 } }
				culture:northman = { weight = { base = 12 } }
				culture:riverlander = { weight = { base = 6 } }
				culture:crownlander = { weight = { base = 6 } }
				culture:andal = { weight = { base = 6 } }
				culture:reachman = { weight = { base = 6 } }
				culture:stormlander = { weight = { base = 6 } }
				culture:valeman = { weight = { base = 6 } }
				culture:westerman = { weight = { base = 6 } }
				culture:frozen_shoreman = { weight = { base = 6 } }
				culture:first_man = { weight = { base = 6 } }
				culture:ironborn = { weight = { base = 6 } }
				culture:sisterman = { weight = { base = 4 } }
				culture:hill_clansman = { weight = { base = 4 } }
				culture:moonman = { weight = { base = 4 } }
				culture:harborman = { weight = { base = 4 } }
				culture:stone_dornish = { weight = { base = 4 } }
				culture:clawman = { weight = { base = 4 } }
				culture:skagosi = { weight = { base = 2 } }
				culture:fangman = { weight = { base = 2 } }
				culture:forestman = { weight = { base = 2 } }
				culture:nightrunner = { weight = { base = 2 } }
				culture:frozen_shoreman = { weight = { base = 2 } }
				culture:hornfoot = { weight = { base = 2 } }
				culture:ice_riverman = { weight = { base = 2 } }
				culture:lakeman = { weight = { base = 2 } }
				culture:thenn = { weight = { base = 2 } }
			}
		}
		ordered_councillor = {
			limit = {
				any_secret = { exists = this }
			}
			order_by = {
				value = ai_boldness
				multiply = -1
			}
			save_scope_as = councillor
		}
		scope:councillor = {
			random_secret = {
				limit = {
					NOT = { secret_target = { this = root } }
					NOR = {
						secret_type = secret_witch
						secret_type = secret_non_believer
					}
				}
				weight = {
					modifier = {
						add = 3
						secret_target = {
							is_close_or_extended_family_of = root
						}
					}
					modifier = {
						add = 3
						secret_target = {
							has_any_relation_trigger = { CHARACTER = root }
						}
					}
				}
				save_scope_as = secret
				reveal_to = root
			}
		}
		scope:secret.secret_target = { save_scope_as = target }
		random_list = {
			10 = {
				trigger = {
					scope:secret = {
						secret_type = secret_murder
					}
				}
				set_local_variable = {
					name = secret_to_reveal
					value = flag:murder
				}
			}
			10 = {
				trigger = {
					scope:secret = {
						secret_type = secret_murder_attempt
					}
				}
				set_local_variable = {
					name = secret_to_reveal
					value = flag:murder_attempt
				}
			}
			10 = {
				trigger = {
					scope:secret = {
						OR = {
							secret_type = secret_unmarried_illegitimate_child
							secret_type = secret_disputed_heritage
						}
					}
				}
				set_local_variable = {
					name = secret_to_reveal
					value = flag:heritage
				}
			}
			10 = {
				trigger = {
					scope:secret = {
						secret_type = secret_deviant
					}
				}
				set_local_variable = {
					name = secret_to_reveal
					value = flag:deviant
				}
			}
			10 = {
				trigger = {
					scope:secret = {
						secret_type = secret_homosexual
					}
				}
				set_local_variable = {
					name = secret_to_reveal
					value = flag:sodomite
				}
			}
			10 = {
				trigger = {
					scope:secret = {
						secret_type = secret_lover
					}
				}
				set_local_variable = {
					name = secret_to_reveal
					value = flag:lover
				}
			}
			10 = {
				trigger = {
					scope:secret = {
						secret_type = secret_incest
					}
				}
				set_local_variable = {
					name = secret_to_reveal
					value = flag:incest
				}
			}
			10 = {
				trigger = {
					scope:secret = {
						secret_type = secret_cannibal
					}
				}
				set_local_variable = {
					name = secret_to_reveal
					value = flag:cannibal
				}
			}
		}
		if = {
			limit = {
				any_secret = { exists = this }
			}
			random_secret = {
				save_scope_as = my_secret
			}
		}
		if = {
			limit = {
				any_targeting_scheme = { exists = this }
			}
			random_targeting_scheme = {
				save_scope_as = scheme
			}
		}
	}
	# Give them a place to rest
	option = {
		name = agot_filler_nights_watch.0011.a
		hidden_effect = {
			if = {
				limit = { exists = scope:scheme }
				scope:scheme = {
					expose_scheme = yes
				}
				send_interface_message = {
					type = event_generic_good
					title = agot_filler_nights_watch.0011.a.message.t
					right_icon = scope:squatter_1
					custom_tooltip = agot_filler_nights_watch.0011.a.message.tt
				}
			}
		}
		add_prestige = -35
		if = {
			limit = { NOT = { scope:squatter_1.faith = root.faith } }
			add_piety = -50
		}
		reverse_add_opinion = {
			target = scope:councillor
			modifier = disregarded_me_opinion
			opinion = -10
		}
		add_visiting_courtier = scope:squatter_1
	}
	# Punish them
	option = {
		name = {
			text = {
				first_valid = {
					triggered_desc = {
						trigger = {
							OR = {
								has_trait = sadistic
								has_trait = torturer
							}
						}
						desc = agot_filler_nights_watch.0011.b.sadistic
					}
					triggered_desc = {
						trigger = { always = yes }
						desc = agot_filler_nights_watch.0011.b
					}
				}
			}
		}
		if = {
			limit = {
				OR = {
					has_trait = sadistic
					has_trait = torturer
				}
			}
			scope:squatter_1 = {
				death = {
					death_reason = death_execution
					killer = root
				}
			}
			if = {
				limit = {
					NOT = { scope:squatter_1.faith = root.faith }
				}
				add_piety = 75
			}
			add_prestige = 35
			reverse_add_opinion = {
				target = scope:councillor
				modifier = listened_opinion
				opinion = 20
			}
		}
		else = {
			reverse_add_opinion = {
				target = scope:councillor
				modifier = listened_opinion
				opinion = 10
			}
			imprison = {
				target = scope:squatter_1
				type = dungeon
			}
			if = {
				limit = {
					NOT = { scope:squatter_1.faith = root.faith }
				}
				add_piety = 50
			}
			hidden_effect = {
				if = {
					limit = { exists = scope:my_secret }
					scope:my_secret = {
						expose_secret = scope:squatter_1
					}
					send_interface_message = {
						type = event_generic_bad
						title = agot_filler_nights_watch.0011.b.message.t
						right_icon = scope:squatter_1
						custom_tooltip = agot_filler_nights_watch.0011.b.message.tt
					}
				}
			}
		}
	}
	# Have their tongue cut out
	option = {
		name = agot_filler_nights_watch.0011.c
		trigger = {
			exists = scope:my_secret
		}
		add_dread = 10
		hidden_effect = {
			scope:squatter_1 = {
				death = { death_reason = death_vanished }
			}
		}
	}
}

###########################################
# THE WOLF'S SHADOW // pbbm
###########################################
# TODO: finish writing event
# A pack of wolves terrorizes The Gift
agot_filler_nights_watch.0012 = {
	type = character_event
	orphan = yes #AGOT TODO Needs to be fixed
	title = agot_filler_nights_watch.0012.t
	desc = {
		desc = agot_filler_nights_watch.0012.opening
		first_valid = {
			triggered_desc = {
				trigger = { scope:joke = { has_dynasty = no } }
				desc = agot_filler_nights_watch.0012.joke.lowborn
			}
			triggered_desc = {
				trigger = { always = yes }
				desc = agot_filler_nights_watch.0012.joke.fallback
			}
		}
		first_valid = {
			triggered_desc = {
				trigger = { scope:joke = { has_dynasty = no } }
				desc = agot_filler_nights_watch.0012.joke.response.new_speaker
			}
			triggered_desc = {
				trigger = { always = yes }
				desc = agot_filler_nights_watch.0012.joke.response.fallback
			}
		}
		desc = agot_filler_nights_watch.0012.closing
	}
	theme = feast_activity
	left_portrait = root
	right_portrait = {
		character = scope:goon
		animation = disbelief
	}

	trigger = {
		is_available_adult = yes
		has_trait = nightswatch
		location = { geographical_region = world_westeros_the_wall }
		OR = {
			title:c_weatherback_ridge = { holder = root }
			title:c_moles_town = { holder = root }
			title:c_hoarburn = { holder = root }
			AND = {
				title:k_the_wall = { holder = root }
				any_sub_realm_title = {
					OR = {
						# this = title:c_new_gift
						this = title:c_weatherback_ridge
						this = title:c_moles_town
						this = title:c_hoarburn
					}
				}
			}
		}
		any_living_black_brother = {
			NOT = { this = root }
			is_imprisoned = no
			save_temporary_scope_as = been_eaten
		}
		any_living_black_brother = {
			NOT = { this = root }
			NOT = { this = scope:been_eaten }
			OR = {
				has_trait = uncouth
				has_trait = rude
				has_trait = lazy
				has_trait = gluttonous
				has_trait = arrogant
			}
		}
	}

	immediate = {
		root = { save_scope_as = original_root }
		random_living_black_brother = {
			limit = {
				NOT = { this = root }
				is_adult = yes
				is_imprisoned = no
			}
			weight = {
				# More likely if stupid and brash
				ai_value_modifier = {
					who = this
					ai_boldness = 0.02
					ai_rationality = -0.02
				}
				# Less likely if landed
				modifier = {
					add = -2
					is_landed = yes
				}
				# Less likely if older and (perhaps) wsier
				modifier = {
					add = {
						value = 25
						subtract = age
						min = -4
						max = 4
					}
				}
				# Less likely if a hunter
				modifier = {
					add = -4
					has_trait = lifestyle_hunter
				}
			}
			random_list = {
				50 = { increase_wounds_no_death_effect = { REASON = wild_animal } }
				15 = { add_trait = one_eyed }
				15 = { add_trait = one_legged }
				15 = { add_trait = maimed }
			}
			save_scope_as = eaten
		}
		random_living_black_brother = {
			limit = {
				NOT = { this = root }
				NOT = { this = scope:eaten }
				OR = {
					has_trait = uncouth
					has_trait = rude
					has_trait = lazy
					has_trait = gluttonous
					has_trait = arrogant
				}
			}
			weight = {
				ai_value_modifier = {
					who = this
					ai_boldness = -0.01
				}
				modifier = {
					add = 4
					has_trait = rude
				}
				modifier = {
					add = 4
					has_trait = arrogant
				}
				modifier = {
					add = {
						value = age
						multiply = 0.05
						max = 2
					}
				}
				modifier = {
					add = 2
					has_trait = uncouth
				}
				modifier = {
					add = 1
					has_trait = lazy
				}
				modifier = {
					add = 1
					has_trait = gluttonous
				}
			}
			save_scope_as = goon
		}
		random_living_black_brother = {
			limit = {
				NOT = { this = scope:goon }
				NOT = { this = root }
				is_imprisoned = no
			}
			weight = {
				opinion_modifier = {
					who = scope:goon
					opinion_target = this
					multiplier = 0.02
				}
				modifier = {
					add = 5
					has_dynasty = no
				}
				modifier = {
					add = 2
					has_important_relationship_trigger = { CHARACTER = scope:goon }
				}
			}
			save_scope_as = joke
		}
	}

	option = {
		name = {
			text = {
				first_valid = {
					random_valid = {
						triggered_desc = {
							trigger = {
								OR = {
									has_trait = trusting
									has_trait = forgiving
									has_trait = compassionate
								}
							}
							desc = agot_filler_nights_watch.0012.a.trusting
						}
						triggered_desc = {
							trigger = {
								OR = {
									has_trait = arrogant
									has_trait = greedy
									has_trait = vengeful
								}
							}
							desc = agot_filler_nights_watch.0012.a.arrogant
						}
						triggered_desc = {
							trigger = {
								OR = {
									has_trait = arbitrary
									has_trait = just
									has_trait = patient
									has_trait = stubborn
								}
							}
							desc = agot_filler_nights_watch.0012.a.arbitrary
						}
						triggered_desc = {
							trigger = {
								OR = {
									has_trait = cynical
									has_trait = irritable
									has_trait = fickle
								}
							}
							desc = agot_filler_nights_watch.0012.a.cynical
						}
					}
					triggered_desc = {
						trigger = { always = yes }
						desc = agot_filler_nights_watch.0012.a.fallback
					}
				}
			}
		}
		if = {
			limit = {
				OR = {
					has_trait = trusting
					has_trait = forgiving
					has_trait = compassionate
					has_trait = arrogant
					has_trait = greedy
					has_trait = vengeful
					has_trait = arbitrary
					has_trait = just
					has_trait = patient
					has_trait = stubborn
					has_trait = cynical
					has_trait = irritable
					has_trait = fickle
				}
			}
			custom_tooltip = agot_filler_nights_watch.0012.a.tt
		}
		trigger_event = {
			id = agot_filler_nights_watch.0013
			days = { 3 18 }
		}
	}
	option = {
		name = {
			text = {
				first_valid = {
					random_valid = {
						triggered_desc = {
							trigger = {
								OR = {
									has_trait = arrogant
									has_trait = lifestyle_hunter
									has_trait = deceitful
								}
							}
							desc = agot_filler_nights_watch.0012.b.arrogant
						}
						triggered_desc = {
							trigger = {
								OR = {
									has_trait = impatient
									has_trait = fickle
									has_trait = shy
								}
							}
							desc = agot_filler_nights_watch.0012.b.impatient
						}
						triggered_desc = {
							trigger = {
								OR = {
									has_trait = brave
									has_trait = gallant
									has_trait = diligent
									martial >= high_skill_rating
									prowess >= high_skill_rating
								}
							}
							desc = agot_filler_nights_watch.0012.b.brave
						}
						triggered_desc = {
							trigger = {
								OR = {
									has_trait = paranoid
									has_trait = ambitious
								}
							}
							desc = agot_filler_nights_watch.0012.b.paranoid
						}
						triggered_desc = {
							trigger = {
								OR = {
									has_trait = callous
									has_trait = wrathful
									has_trait = honest
								}
							}
							desc = agot_filler_nights_watch.0012.b.callous
						}
					}
					triggered_desc = {
						trigger = { always = yes }
						desc = agot_filler_nights_watch.0012.b.fallback
					}
				}
			}
		}
		add_internal_flag = dangerous
		if = {
			limit = {
				OR = {
					has_trait = arrogant
					has_trait = lifestyle_hunter
					has_trait = deceitful
					has_trait = impatient
					has_trait = fickle
					has_trait = shy
					has_trait = brave
					has_trait = gallant
					has_trait = diligent
					has_trait = paranoid
					has_trait = ambitious
					has_trait = callous
					has_trait = wrathful
					has_trait = honest
					martial >= high_skill_rating
					prowess >= high_skill_rating
				}
			}
			custom_tooltip = agot_filler_nights_watch.0012.b.tt
		}

		trigger_event = {
			id = agot_filler_nights_watch.0014
			days = { 3 18 }
		}
	}
}
# goon leads the next wolf hunt
agot_filler_nights_watch.0013 = {
	hidden = yes

	trigger = {
		has_trait = nightswatch
		scope:goon = {
			is_imprisoned = no
			is_alive = yes
		}
	}

	immediate = {
		random_list = {
			15 = { # The lead wolf is killed, the pack disbanded
				ai_value_modifier = {
					who = scope:goon
					ai_rationality = 0.1
					ai_boldness = 0.1
					ai_vengefulness = 0.1
					ai_greed = -0.1
				}
				modifier = {
					add = scope:goon.prowess
				}
				modifier = {
					add = scope:goon.martial
				}
				modifier = {
					add = 40
					scope:goon = { has_trait = lifestyle_hunter }
				}
				set_local_variable = {
					name = hunt_result
					value = flag:failure
				}
			}
			40 = { # Some wolves are killed, but not the leader
				set_local_variable = {
					name = hunt_result
					value = flag:success
				}
			}
			75 = { # The hunt goes badly
				set_local_variable = {
					name = hunt_result
					value = flag:great_success
				}
				random = {
					chance = {
						value = 60
						subtract = scope:goon.prowess
						add = scope:goon.ai_boldness
						min = 5
						max = 90
					}
					set_local_variable = {
						name = goon_was_wounded
						value = yes
					}
				}
			}
		}
		if = {
			limit = { local_var:hunt_result = flag:great_success }
			# Hunt completely succeeded
			send_interface_message = {
				title = agot_filler_nights_watch.0013.message.great_success.t
				type = event_martial_good
				right_icon = scope:goon
				custom_tooltip = agot_filler_nights_watch.0013.message.great_success.tt
				random_list = {
					10 = {
						title:c_moles_town = {
							add_county_modifier = {
								modifier = successful_wolf_hunt
								days = 730
							}
						}
					}
					10 = {
						title:c_hoarburn = {
							add_county_modifier = {
								modifier = successful_wolf_hunt
								days = 730
							}
						}
					}
					10 = {
						title:c_weatherback_ridge = {
							add_county_modifier = {
								modifier = successful_wolf_hunt
								days = 730
							}
						}
					}
				}
			}
		}
		else_if = {
			limit = { local_var:hunt_result = flag:success }
			# Hunt mostly succeeds
			send_interface_message = {
				title = agot_filler_nights_watch.0013.message.success.t
				type = event_martial_good
				right_icon = scope:goon
				custom_tooltip = agot_filler_nights_watch.0013.message.success.tt
				random_list = {
					10 = {
						title:c_moles_town = {
							add_county_modifier = {
								modifier = successful_wolf_hunt
								days = 365
							}
						}
					}
					10 = {
						title:c_hoarburn = {
							add_county_modifier = {
								modifier = successful_wolf_hunt
								days = 365
							}
						}
					}
					10 = {
						title:c_weatherback_ridge = {
							add_county_modifier = {
								modifier = successful_wolf_hunt
								days = 365
							}
						}
					}
				}
			}
		}
		else = {
			trigger_event = {
				id = agot_filler_nights_watch.0017
			}
		}
	}
}
# TODO: write event
# You hunt the wolf yourself
agot_filler_nights_watch.0014 = {
	type = character_event
	title = agot_filler_nights_watch.0014.t
	desc = {
		random_valid = {
			triggered_desc = {
				trigger = {
					OR = {
						has_trait = forgiving
						has_trait = generous
						has_trait = gregarious
						has_trait = humble
					}
				}
				desc = agot_filler_nights_watch.0014.opening.forgiving
			}
			triggered_desc = {
				trigger = {
					OR = {
						has_trait = arrogant
						has_trait = stubborn
						has_trait = wrathful
						has_trait = diligent
						has_trait = arbitrary
					}
				}
				desc = agot_filler_nights_watch.0014.opening.arrogant
			}
			triggered_desc = {
				trigger = {
					OR = {
						has_trait = brave
						has_trait = honest
						has_trait = patient
					}
				}
				desc = agot_filler_nights_watch.0014.opening.brave
			}
			triggered_desc = {
				trigger = {
					OR = {
						has_trait = sadistic
						has_trait = greedy
						has_trait = content
					}
				}
				desc = agot_filler_nights_watch.0014.opening.sadistic
			}
			triggered_desc = {
				trigger = {
					has_trait = lustful
				}
				desc = agot_filler_nights_watch.0014.opening.lustful
			}
			triggered_desc = {
				trigger = {
					OR = {
						has_trait = gluttonous
						has_trait = lifestyle_reveler
					}
				}
				desc = agot_filler_nights_watch.0014.opening.gluttonous
			}
			triggered_desc = {
				trigger = {
					OR = {
						has_trait = impatient
						has_trait = callous
						has_trait = cynical
						has_trait = shy
					}
				}
				desc = agot_filler_nights_watch.0014.opening.impatient
			}
			triggered_desc = {
				trigger = { always = no }
				trigger = { has_trait = lifestyle_hunter }
				desc = agot_filler_nights_watch.0014.opening.hunter
			}
			triggered_desc = {
				trigger = {
					OR = {
						has_trait = ambitious
						has_trait = deceitful
						has_trait = zealous
						has_trait = vengeful
					}
				}
				desc = agot_filler_nights_watch.0014.opening.ambitious
			}
			triggered_desc = {
				trigger = {
					OR = {
						has_trait = fickle
						has_trait = craven
						has_trait = lazy
						has_trait = calm
						has_trait = temperate
						has_trait = trusting
					}
				}
				desc = agot_filler_nights_watch.0014.opening.fickle
			}
		}
		desc = agot_filler_nights_watch.0014.closing
	}
	theme = hunting
	override_background = wilderness_forest_pine
	left_portrait = root

	immediate = {
		random_list = {
			19 = {
				set_local_variable = {
					name = creature
					value = flag:grey_wolf
				}
			}
			1 = {
				trigger = {
					OR = {
						title:c_weatherback_ridge = { county_has_winter_trigger = yes }
						title:c_moles_town = { county_has_winter_trigger = yes }
						title:c_hoarburn = { county_has_winter_trigger = yes }
					}
				}
				# TODO: I would like to set a modifier here based on the struggle between NW
				# and the wildlings/others, where if the power of winter is growing, then
				# direwolves south of the wall should increase slightly in frequency (~20%)
				set_local_variable = {
					name = creature
					value = flag:dire_wolf
				}
			}
		}
	}

	option = {
		name = agot_filler_nights_watch.0014.a
		custom_tooltip = agot_filler_nights_watch.0014.a.tt
		add_internal_flag = dangerous
		set_local_variable = {
			name = stance
			value = flag:defense
		}
	}
	option = {
		name = agot_filler_nights_watch.0014.b
		custom_tooltip = agot_filler_nights_watch.0014.b.tt
		add_internal_flag = dangerous
		set_local_variable = {
			name = stance
			value = flag:offense
		}
	}
	after = {
		trigger_event = {
			id = agot_filler_nights_watch.0015
		}
	}
}
#TODO: write event
# Result of 0014
agot_filler_nights_watch.0015 = {
	type = character_event
	title = agot_filler_nights_watch.0015.t
	desc = {
		first_valid = {
			triggered_desc = {
				trigger = {
					local_var:creature = flag:dire_wolf
					local_var:stance = flag:offense
				}
				desc = agot_filler_nights_watch.0015.dire_wolf.offense
			}
			triggered_desc = {
				trigger = {
					local_var:creature = flag:dire_wolf
					local_var:stance = flag:defense
				}
				desc = agot_filler_nights_watch.0015.dire_wolf.defense
			}
			triggered_desc = {
				trigger = {
					local_var:creature = flag:bear
					local_var:stance = flag:offense
				}
				desc = agot_filler_nights_watch.0015.bear.offense
			}
			triggered_desc = {
				trigger = {
					local_var:creature = flag:bear
					local_var:stance = flag:defense
				}
				desc = agot_filler_nights_watch.0015.bear.defense
			}
			triggered_desc = {
				trigger = {
					local_var:creature = flag:grey_wolf
					local_var:stance = flag:offense
				}
				desc = agot_filler_nights_watch.0015.grey_wolf.offense
			}
			triggered_desc = {
				trigger = {
					local_var:creature = flag:grey_wolf
					local_var:stance = flag:defense
				}
				desc = agot_filler_nights_watch.0015.grey_wolf.defense
			}
		}
		first_valid = {
			triggered_desc = {
				trigger = { has_local_variable = successful_wolf_hunt }
				desc = agot_filler_nights_watch.0015.success
			}
			triggered_desc = {
				trigger = { always = yes }
				desc = agot_filler_nights_watch.0015.failure
			}
		}
		first_valid = {
			random_valid = {
				triggered_desc = {
					trigger = {
						NOT = { has_local_variable = successful_wolf_hunt }
						OR = {
							has_trait = craven
							has_trait = shy
						}
					}
					desc = agot_filler_nights_watch.0015.failure.craven
				}
				triggered_desc = {
					trigger = {
						NOT = { has_local_variable = successful_wolf_hunt }
						OR = {
							has_trait = brave
							has_trait = diligent
							has_trait = temperate
							has_trait = wrathful
							has_trait = fickle
						}
					}
					desc = agot_filler_nights_watch.0015.failure.brave
				}
				triggered_desc = {
					trigger = {
						NOT = { has_local_variable = successful_wolf_hunt }
						OR = {
							has_trait = patient
							has_trait = vengeful
							has_trait = greedy
							has_trait = deceitful
							has_trait = arrogant
							has_trait = ambitious
							has_trait = stubborn
							has_trait = ambitious
						}
					}
					desc = agot_filler_nights_watch.0015.failure.patient
				}
				triggered_desc = {
					trigger = {
						NOT = { has_local_variable = successful_wolf_hunt }
						OR = {
							has_trait = callous
							has_trait = humble
							has_trait = arbitrary
						}
					}
					desc = agot_filler_nights_watch.0015.failure.callous
				}
				triggered_desc = {
					trigger = {
						NOT = { has_local_variable = successful_wolf_hunt }
						OR = {
							has_trait = calm
							has_trait = lazy
							has_trait = forgiving
							has_trait = content
						}
					}
					desc = agot_filler_nights_watch.0015.failure.calm
				}
				triggered_desc = {
					trigger = {
						NOT = { has_local_variable = successful_wolf_hunt }
						OR = {
							has_trait = trusting
							has_trait = generous
							has_trait = zealous
							has_trait = compassionate
							has_trait = honest
							has_trait = paranoid
							has_trait = cynical
							has_trait = gregarious
						}
					}
					desc = agot_filler_nights_watch.0015.failure.trusting
				}
			}
			triggered_desc = {
				trigger = {
					NOT = { has_local_variable = successful_wolf_hunt }
				}
				desc = agot_filler_nights_watch.0015.failure.fallback
			}
		}
	}
	theme = hunting
	override_background = wilderness_forest_pine
	left_portrait = root #TODO: animations

	immediate = {
		random = {
			chance = 10
			compare_modifier = {
				value = prowess
				offset = -12
				multiplier = 1
				trigger = {
					local_var:creature = flag:grey_wolf
				}
			}
			compare_modifier = {
				value = prowess
				offset = -24
				multiplier = 1
				trigger = {
					local_var:creature = flag:dire_wolf
				}
			}
			ai_value_modifier = {
				trigger = {
					local_var:stance = flag:offense
				}
				ai_boldness = 0.2
			}
			ai_value_modifier = {
				trigger = {
					local_var:stance = flag:defense
				}
				ai_rationality = 0.2
			}
			modifier = {
				add = 25
				has_trait = lifestyle_hunter
			}
			set_local_variable = successful_wolf_hunt
			reverse_add_opinion = {
				target = scope:goon
				modifier = saved_me_opinion
				opinion = 30
			}
			if = {
				limit = { local_var:creature = flag:dire_wolf }
				add_prestige = 300
			}
			else = {
				add_prestige = 75
			}
		}
	}

	# Brave, Diligent
	option = {
		name = {
			text = {
				first_valid = {
					triggered_desc = {
						trigger = {
							local_var:creature = flag:dire_wolf
						}
						desc = agot_filler_nights_watch.0015.brave.dire_wolf
					}
					triggered_desc = {
						trigger = {
							local_var:creature = flag:grey_wolf
						}
						desc = agot_filler_nights_watch.0015.brave.grey_wolf
					}
				}
			}
		}
		trigger = {
			has_local_variable = successful_wolf_hunt
			OR = {
				has_trait = brave
				has_trait = diligent
			}
		}
		if = {
			limit = { NOT = { has_trait = lifestyle_hunter } }
			add_trait = lifestyle_hunter
		}
		else_if = {
			limit = { has_trait = lifestyle_hunter }
			add_trait_xp = {
				trait = lifestyle_hunter
				track = hunter
				value = major_trait_xp
			}
		}
	}
	# Compassionate, Forgiving
	option = {
		name = agot_filler_nights_watch.0015.compassionate
		trigger = {
			has_local_variable = successful_wolf_hunt
			OR = {
				has_trait = compassionate
				has_trait = forgiving
			}
		}
		every_living_black_brother = {
			limit = {
				OR = {
					has_trait = compassionate
					has_trait = forgiving
				}
			}
			add_opinion = {
				target = root
				modifier = showed_compassion_opinion
				opinion = 10
			}
		}
		add_character_modifier = {
			modifier = showed_compassion_modifier
			years = 5
		}
	}
	# Calm, Chaste, Honest, Content
	option = {
		name = agot_filler_nights_watch.0015.calm
		trigger = {
			has_local_variable = successful_wolf_hunt
			OR = {
				has_trait = calm
				has_trait = chaste
				has_trait = honest
				has_trait = content
			}
		}
		add_character_modifier = {
			modifier = contemplative_modifier
			years = 5
		}
		add_learning_lifestyle_xp = 120
	}
	# Deceitful
	option = {
		name = agot_filler_nights_watch.0015.deceitful
		trigger = {
			has_local_variable = successful_wolf_hunt
			has_trait = deceitful
		}
		add_intrigue_lifestyle_xp = 60
		add_character_modifier = {
			modifier = false_bravado_modifier
			years = 5
		}
	}
	# Craven, Lazy, Fickle
	option = {
		name = agot_filler_nights_watch.0015.craven
		trigger = {
			has_local_variable = successful_wolf_hunt
			OR = {
				has_trait = craven
				has_trait = lazy
				has_trait = fickle
			}
		}
		add_character_modifier = {
			modifier = afraid_of_dying_modifier
			years = 5
		}
	}
	# Wrathful, Arrogant, Stubborn
	option = {
		name = agot_filler_nights_watch.0015.wrathful
		trigger = {
			has_local_variable = successful_wolf_hunt
			OR = {
				has_trait = wrathful
				has_trait = arrogant
				has_trait = stubborn
			}
		}
		add_character_modifier = {
			modifier = overconfident_modifier
			years = 5
		}
		hidden_effect = {
			if = {
				limit = {
					any_living_black_brother = {
						NOT = { has_important_relationship_trigger = { CHARACTER = root } }
						NOR = {
							has_trait = patient
							has_trait = compassionate
							has_trait = gregarious
							has_trait = forgiving
						}
						can_start_scheme = {
							type = murder
							target_character = root
						}
					}
				}
				random = {
					chance = 50
					ai_value_modifier = {
						ai_vengefulness = 0.25
						ai_sociability = -0.25
					}
					trigger_event = {
						id = agot_filler_nights_watch.0018 # Comeuppance
						years = 2
					}
				}
			}
		}
	}
	# Greedy, Arbitrary, Callous, Sadistic
	option = {
		name = agot_filler_nights_watch.0015.greedy
		trigger = {
			has_local_variable = successful_wolf_hunt
			OR = {
				has_trait = greedy
				has_trait = arbitrary
				has_trait = callous
				has_trait = sadistic
			}
		}
		add_character_modifier = {
			modifier = hunting_trophy_modifier
			years = 5
		}
	}
	# Cynical, Paranoid
	option = {
		name = agot_filler_nights_watch.0015.cynical
		trigger = {
			has_local_variable = successful_wolf_hunt
			OR = {
				has_trait = cynical
				has_trait = paranoid
			}
		}
		add_intrigue_lifestyle_xp = 120
		stress_impact = {
			base = medium_stress_gain

			trusting = medium_stress_impact_loss
			gregarious = minor_stress_impact_loss
			content = minor_stress_impact_loss
			calm = minor_stress_impact_loss
		}
	}
	# Impatient, Shy
	option = {
		name = agot_filler_nights_watch.0015.impatient
		trigger = {
			has_local_variable = successful_wolf_hunt
			OR = {
				has_trait = impatient
				has_trait = shy
			}
		}
		add_character_modifier = {
			modifier = afraid_of_dying_modifier
			years = 5
		}
		stress_impact = {
			base = minor_stress_gain

			brave = minor_stress_impact_loss
			diligent = minor_stress_impact_loss
			calm = minor_stress_impact_loss
			stubborn = minor_stress_impact_loss
		}
	}
	# Ambitious
	option = {
		name = agot_filler_nights_watch.0015.ambitious
		trigger = {
			has_local_variable = successful_wolf_hunt
			has_trait = ambitious
		}
		dynasty = { add_dynasty_prestige = 300 }
		every_living_black_brother = {
			limit = {
				NOT = { has_trait = ambitious }
				NOT = { this = scope:goon }
			}
			custom = every_dedicated_black_brother_0015
			add_opinion = {
				target = root
				modifier = showed_house_loyalty_opinion
				opinion = -10
			}
		}
	}
	# Just, Patient, Trusting
	option = {
		name = agot_filler_nights_watch.0015.just
		trigger = {
			has_local_variable = successful_wolf_hunt
			OR = {
				has_trait = just
				has_trait = patient
				has_trait = trusting
			}
		}
		add_prestige = 70
		add_dread = 10
	}
	# Vengeful, Humble, Temperate
	option = {
		name = agot_filler_nights_watch.0015.vengeful
		trigger = {
			has_local_variable = successful_wolf_hunt
			OR = {
				has_trait = vengeful
				has_trait = humble
				has_trait = temperate
			}
		}
		add_character_modifier = {
			modifier = doubting_yourself_modifier
			years = 5
		}
		stress_impact = {
			base = minor_stress_gain

			arrogant = minor_stress_impact_gain

			humble = minor_stress_impact_loss
			brave = miniscule_stress_impact_loss
			compassionate = miniscule_stress_impact_loss
			diligent = miniscule_stress_impact_loss
		}
	}
	# Zealous
	option = {
		name = agot_filler_nights_watch.0015.zealous
		trigger = {
			has_local_variable = successful_wolf_hunt
			has_trait = zealous
		}

	}
	# Gregarious, Generous
	option = {
		name = agot_filler_nights_watch.0015.gregarious
		trigger = {
			has_local_variable = successful_wolf_hunt
			OR = {
				has_trait = gregarious
				has_trait = generous
			}
		}
	}
	# Lustful
	option = {
		name = agot_filler_nights_watch.0015.lustful
		trigger = {
			has_local_variable = successful_wolf_hunt
			has_trait = lustful
		}
	}
	# Gluttonous
	option = {
		name = agot_filler_nights_watch.0015.gluttonous
		trigger = {
			has_local_variable = successful_wolf_hunt
			has_trait = gluttonous
		}
	}
	# Draw a dagger and fight for your life
	option = {
		name = agot_filler_nights_watch.0015.failure_1
		add_internal_flag = dangerous
		trigger = { NOT = { has_local_variable = successful_wolf_hunt } }
	}
	# Play dead (exclusive with 'accept your fate')
	option = {
		name = agot_filler_nights_watch.0015.failure_2
		add_internal_flag = dangerous
		trigger = {
			NOT = { has_local_variable = successful_wolf_hunt }
			NOR = {
				has_trait = depressed
				age >= 75
			}
		}
	}
	# Accept your fate (exclusive with 'play dead')
	option = {
		name = agot_filler_nights_watch.0015.failure_3
		trigger = {
			NOT = { has_local_variable = successful_wolf_hunt }
			OR = {
				has_trait = depressed
				age >= 75
			}
		}
		show_as_tooltip = {
			death = {
				death_reason = death_wolf_hunt
			}
		}
	}
}

agot_filler_nights_watch.0016 = {
	type = character_event
	title = agot_filler_nights_watch.0016.t
	desc = agot_filler_nights_watch.0016.desc
	theme = default #TODO: PLACEHOLDER
	orphan = yes #AGOT PLACEHOLDER

	immediate = {

	}

	option = {
		name = agot_filler_nights_watch.0016.a
	}
}

#TODO: write event
# goon (or someone) comes back to you, telling you the hunt was a failure
agot_filler_nights_watch.0017 = {
	type = character_event
	title = agot_filler_nights_watch.0017.t
	desc = agot_filler_nights_watch.0017.desc
	theme = default #TODO: placeholder
	left_portrait = root
	right_portrait = scope:messenger #TODO: animations

	immediate = {
		if = {
			limit = { exists = local_var:goon_was_wounded }
			scope:goon = { increase_wounds_effect = { REASON = wild_animal } }
		}
		if = {
			limit = {
				scope:goon = {
					NOR = {
						is_alive = yes
						is_imprisoned = no
					}
				}
				scope:joke = {
					NOR = {
						is_alive = yes
						is_imprisoned = no
					}
				}
			}
			random_living_black_brother = {
				limit = {
					NOT = { this = root }
					is_alive = yes
					is_imprisoned = no
				}
				weight = {
					modifier = {
						add = 2
						is_landed = yes
					}
				}
				save_scope_as = messenger
			}
		}
		else_if = {
			limit = {
				scope:goon = {
					NOR = {
						is_alive = yes
						is_imprisoned = no
					}
				}
			}
			scope:joke = { save_scope_as = messenger }
		}
		else = {
			scope:goon = { save_scope_as = messenger }
		}
	}

	option = {
		name = agot_filler_nights_watch.0017.a
	}
}
# An overconfident character draws the ire of another character
agot_filler_nights_watch.0018 = {
	hidden = yes

	immediate = {
		random_living_black_brother = {
			limit = {
				NOT = { has_important_relationship_trigger = { CHARACTER = root } }
				can_start_scheme = {
					type = murder
					target_character = root
				}
				NOR = {
					has_trait = patient
					has_trait = compassionate
					has_trait = gregarious
					has_trait = forgiving
				}
			}
			weight = {
				ai_value_modifier = {
					who = this
					ai_vengefulness = 0.05
					ai_boldness = 0.02
					ai_rationality = -0.02
					ai_sociability = -0.02
					ai_zeal = -0.02
					ai_honor = -0.05
				}
				modifier = {
					add = 5
					has_trait = schemer
				}
				modifier = {
					add = 5
					OR = {
						has_relation_rival = root
						has_relation_nemesis = root
					}
				}
			}
			save_scope_as = schemer
		}
		scope:schemer = {
			start_scheme = {
				type = murder
				target_character = root
			}
		}
	}
}