namespace = agot_dragonkeepers


# 0001 - Decision that creates dragonkeepers (fired from decision)
# 0002 - Event that appoints new dragonkeeper (fired from decision)
# 0003-0099 reserved for future maintenance events
# 0100-200 reserved for misc events
# 0300-0400 Flavor/Recurring Events

# Event that removes variables / releases dragons on removal of dragonpit

# Create a Head Dragonkeeper and Give them the Position
agot_dragonkeepers.0001 = {
	type = character_event
	title = agot_dragonkeepers.0001.t
	desc = agot_dragonkeepers.0001.desc

	theme = dragon

	override_background = { reference = agot_dragonpit }

	left_portrait = {
		character = root
		animation = throne_room_writer
	}

	right_portrait = {
		character = scope:head_dragonkeeper
		animation = throne_room_writer
	}

	immediate = {
		play_music_cue = "mx_cue_epic_sacral_moment"
		create_character = { # Create Head Dragonkeeper
			template = agot_head_dragonkeeper_high_funding_template
			employer = root
			culture = root.location.culture
			faith = root.location.faith
			save_scope_as = head_dragonkeeper
		}
	}

	option = {
		name = agot_dragonkeepers.0001.a
		appoint_court_position = {
			recipient = scope:head_dragonkeeper
			court_position = head_dragonkeeper_court_position
		}
	}
}

# Create a new dragonkeeper order head
agot_dragonkeepers.0002 = {
	type = character_event
	title = agot_dragonkeepers.0002.t
	desc = agot_dragonkeepers.0002.desc

	theme = dragon

	override_background = { reference = agot_dragonpit }

	left_portrait = {
		character = root
		animation = throne_room_writer
	}

	right_portrait = {
		character = scope:head_dragonkeeper
		animation = throne_room_writer
	}

	immediate = {
		play_music_cue = "mx_cue_epic_sacral_moment"

		if = {
			limit = {
				any_held_title = {
					agot_title_is_an_active_dragonpit = yes
				}
			}
			random_held_title = {
				limit = {
					agot_title_is_an_active_dragonpit = yes
				}
				save_scope_as = dragonkeeper_title
			}
		}

		agot_generate_head_dragonkeeper = yes
	}

	option = {
		name = agot_dragonkeepers.0001.a
		appoint_court_position = {
			recipient = scope:head_dragonkeeper
			court_position = head_dragonkeeper_court_position
		}
	}
}

###############
# MISC EVENTS #
###############

# Event to create the King's Landing Dragonkeeper Order
agot_dragonkeepers.0100 = {
	type = character_event
	title = agot_dragonkeepers.0002.t
	desc = agot_dragonkeepers.0002.desc

	theme = dragon

	override_background = { reference = agot_dragonpit }

	left_portrait = {
		character = root
		animation = throne_room_writer
	}

	right_portrait = {
		character = scope:head_dragonkeeper
		animation = throne_room_writer
	}

	immediate = {
		create_character = { # Create Head Dragonkeeper
			template = agot_head_dragonkeeper_high_funding_template
			employer = root
			culture = root.location.culture
			faith = root.location.faith
			save_scope_as = head_dragonkeeper
		}
	}

	# Yes, they raise a good point.
	option = {
		name = agot_dragonkeepers.0100.a
		custom_tooltip = agot_dragonkeepers.0100.a.tt
		title:c_kings_landing = {
			set_variable = { name = has_dragonkeeper_order }
			holder = {
				if = {
					limit = {
						agot_has_any_dragonpit_access_law = no
					}
					agot_dragonpit_access_law_close_family_effect = yes 
				}
			}
		}
		appoint_court_position = {
			recipient = scope:head_dragonkeeper
			court_position = head_dragonkeeper_court_position
		}
	}
}
# Event to restore Dragonmont Dragonkeeper Order
agot_dragonkeepers.0101 = {
	type = character_event
	title = agot_dragonkeepers.0101.t
	desc = agot_dragonkeepers.0101.desc

	theme = dragon

	override_background = { reference = agot_dragonpit }

	left_portrait = {
		character = root
		animation = throne_room_writer
	}

	right_portrait = {
		character = scope:head_dragonkeeper
		animation = throne_room_writer
	}

	immediate = {
		create_character = { # Create Head Dragonkeeper
			template = agot_head_dragonkeeper_high_funding_template
			employer = root
			culture = root.location.culture
			faith = root.location.faith
			save_scope_as = head_dragonkeeper
		}
	}

	# Yes, they raise a good point.
	option = {
		name = agot_dragonkeepers.0101.a
		title:c_dragonstone = {
			set_variable = { name = has_dragonkeeper_order }
			holder = { agot_dragonpit_access_law_close_family_effect = yes }
		}
		appoint_court_position = {
			recipient = scope:head_dragonkeeper
			court_position = head_dragonkeeper_court_position
		}
		if = {
			limit = {
				has_ep1_dlc_trigger = yes
			}
			set_amenity_level = {
				type = agot_dragonpit_amenities
				value = 4 # High
			}
		}
	}
}

#################
# FLAVOR EVENTS #
#################

scripted_trigger has_low_dragonpit_funding = {
	amenity_level = { type = agot_dragonpit_amenities value <= 2 }
}

scripted_trigger has_med_dragonpit_funding = {
	amenity_level = { type = agot_dragonpit_amenities value = 3 }
}

scripted_trigger has_high_dragonpit_funding = {
	amenity_level = { type = agot_dragonpit_amenities value >= 4 }
}

# Low Supplies for Training New Recruits
# Your Head Dragonkeeper reports that they are struggling to train new recruits due to the low funding - dragonkeepers were equipped with swords and black armor, which most likely require training to use.
# Low Funding
agot_dragonkeepers.0300 = {
	type = character_event
	title = agot_dragonkeepers.0300.t
	desc = agot_dragonkeepers.0300.desc

	theme = dragon

	override_background = { reference = agot_dragonpit }

	left_portrait = root
	right_portrait = scope:head_dragonkeeper

	trigger = {
		is_available_for_dragonkeeper_flavor_events = yes
		has_low_dragonpit_funding = yes
	}

	immediate = {
		random_court_position_holder = {
			type = head_dragonkeeper_court_position
			save_scope_as = head_dragonkeeper
		}
	}

	# Increase Amenity Funding
	option = {
		name = agot_dragonkeepers.0300.a
		hidden_effect = { add_amenity_level = { type = agot_dragonpit_amenities value = 1 } }
		custom_tooltip = agot_dragonpit_amenities_increase_tt
		ai_chance = {
			base = 25
		}
		stress_impact = {
			base = minor_stress_impact_gain
			greedy = minor_stress_impact_gain
		}
	}

	# Spare Some Resources
	option = {
		name = agot_dragonkeepers.0300.b
		remove_short_term_gold = major_gold_value
		ai_chance = {
			base = 100
		}
		stress_impact = {
			base = minor_stress_impact_gain
			greedy = minor_stress_impact_gain
		}
	}

	# Too bad :(
	option = {
		name = agot_dragonkeepers.0300.c
		add_prestige = minor_prestige_loss
		reverse_add_opinion = {
			target = scope:head_dragonkeeper
			modifier = unhelpful_opinion
			opinion = -25
			years = 1
		}
		ai_chance = {
			base = 0
			modifier = {
				add = 25
				OR = {
					has_trait = callous
					has_trait = greedy
					has_trait = arrogant
				}
			}
		}
		stress_impact = {
			base = minor_stress_impact_gain
			greedy = minor_stress_impact_loss
		}
	}

}

# Dragon food is stretched thin
# Your Head Dragonkeeper reports that the dragonkeepers are struggling to keep up with the food demands of the dragons
# Low Funding
agot_dragonkeepers.0301 = {
	type = character_event
	title = agot_dragonkeepers.0301.t
	desc = agot_dragonkeepers.0301.desc

	theme = dragon

	override_background = { reference = agot_dragonpit }

	left_portrait = root
	right_portrait = scope:head_dragonkeeper

	trigger = {
		is_available_for_dragonkeeper_flavor_events = yes
		has_low_dragonpit_funding = yes
	}

	immediate = {
		random_court_position_holder = {
			type = head_dragonkeeper_court_position
			save_scope_as = head_dragonkeeper
		}
	}

	# Increase Amenity Outright
	option = {
		name = agot_dragonkeepers.0300.a # Reuse Loc Key
		hidden_effect = { add_amenity_level = { type = agot_dragonpit_amenities value = 1 } }
		custom_tooltip = agot_dragonpit_amenities_increase_tt
		ai_chance = {
			base = 25
		}
		stress_impact = {
			base = minor_stress_impact_gain
			greedy = minor_stress_impact_gain
		}
	}

	# Spare some cash to temporary solve the problem
	option = {
		name = agot_dragonkeepers.0301.b
		remove_short_term_gold = major_gold_value
		ai_chance = {
			base = 100
		}
		stress_impact = {
			base = minor_stress_impact_gain
			greedy = major_stress_impact_gain
		}
	}

	# Too Bad
	option = {
		name = agot_dragonkeepers.0300.c # Reuse Loc Key
		add_prestige = minor_prestige_loss
		reverse_add_opinion = {
			target = scope:head_dragonkeeper
			modifier = unhelpful_opinion
			opinion = -25
			years = 1
		}
		if = {
			limit = {
				any_courtier = {
					has_trait = dragon
					has_character_flag = in_dragonpit
					NOT = {
						has_trait = dragon_ill
					}
				}
			}
			random_list = {
				50 = {}
				50 = {
					random_courtier = {
						limit = {
							has_trait = dragon
							has_character_flag = in_dragonpit
							NOT = {
								has_trait = dragon_ill
							}
						}
						add_trait = dragon_ill
						trigger_event = {
							id = agot_dragonkeepers.0313 # Event to remove sickness
							days = 60
						}
					}
				}
			}
		}
		ai_chance = {
			base = 0
			modifier = {
				add = 25
				OR = {
					has_trait = callous
					has_trait = greedy
					has_trait = arrogant
				}
			}
		}
		stress_impact = {
			base = minor_stress_impact_gain
			greedy = minor_stress_impact_loss
		}
	}

}

# Dragonkeeper Initiate killed by dragon
# Your Head Dragonkeeper reports that an initiate was killed by a dragon
# Low Funding
agot_dragonkeepers.0302 = {
	type = character_event
	title = agot_dragonkeepers.0302.t
	desc = agot_dragonkeepers.0302.desc

	theme = dragon

	override_background = { reference = agot_dragonpit }

	trigger = {
		is_available_for_dragonkeeper_flavor_events = yes
		amenity_level = { type = agot_dragonpit_amenities value <= 2 }
		any_held_title = {
			has_variable_list = dragons_in_pit
			variable_list_size = {
				name = dragons_in_pit
				value > 0
			}
		}
	}

	left_portrait = root
	right_portrait = scope:head_dragonkeeper
	lower_right_portrait = scope:dead_dragonkeeper

	immediate = {
		random_court_position_holder = {
			type = head_dragonkeeper_court_position
			save_scope_as = head_dragonkeeper
		}
		random_held_title = {
			limit = {
				has_variable_list = dragons_in_pit
				variable_list_size = {
					name = dragons_in_pit
					value > 0
				}
			}
			save_scope_as = dragonpit_location
		}
		scope:dragonpit_location = {
			random_in_list = {
				variable = dragons_in_pit
				save_scope_as = dragon
			}
		}
		create_character = {
			template = agot_head_dragonkeeper_med_funding_template
			employer = root
			culture = scope:head_dragonkeeper.culture
			faith = scope:head_dragonkeeper.faith
			save_scope_as = dead_dragonkeeper
			after_creation = {
				death = {
					death_reason = death_dragon_fire
					killer = scope:dragon
				}
			}
		}
	}

	# This is embarssing for me and the dragonkeepers
	option = {
		name = agot_dragonkeepers.0302.a
		add_prestige = minor_prestige_loss
		stress_impact = {
			base = minor_stress_impact_gain
			arrogant = major_stress_impact_gain
		}
	}

}

# Dragonkeeper injured by a dragon
# Dragonkeeper is injured because they are unfamiliar with a dragon
# Medium Funding
agot_dragonkeepers.0303 = {
	type = character_event
	title = agot_dragonkeepers.0303.t
	desc = agot_dragonkeepers.0303.desc

	theme = dragon

	override_background = { reference = agot_dragonpit }

	trigger = {
		is_available_for_dragonkeeper_flavor_events = yes
		OR = {
			has_low_dragonpit_funding = yes
			has_med_dragonpit_funding = yes
		}
	}

	left_portrait = root
	right_portrait = scope:head_dragonkeeper
	lower_right_portrait = { character = scope:injured_dragonkeeper hide_info = yes }

	immediate = {
		random_court_position_holder = {
			type = head_dragonkeeper_court_position
			save_scope_as = head_dragonkeeper
		}
		create_character = {
			template = agot_head_dragonkeeper_med_funding_template
			trait = wounded_2
			employer = root
			culture = scope:head_dragonkeeper.culture
			faith = scope:head_dragonkeeper.faith
			save_scope_as = injured_dragonkeeper
		}
	}

	# This is embarassing
	option = {
		name = agot_dragonkeepers.0303.a
		add_prestige = minor_prestige_loss
		hidden_effect = {
			scope:injured_dragonkeeper = {
				death = { death_reason = death_ripped_apart_limb_by_limb }
			}
		}
		stress_impact = {
			base = minor_stress_impact_gain
			arrogant = minor_stress_impact_gain
		}
	}

}

# An event where the dragonkeepers stop an intruder
# HIGH FUNDING
agot_dragonkeepers.0304 = {
	type = character_event
	title = agot_dragonkeepers.0304.t
	desc = agot_dragonkeepers.0304.desc

	theme = dragon

	override_background = { reference = agot_dragonpit }

	cooldown = { years = 5 }
	trigger = {
		is_available_for_dragonkeeper_flavor_events = yes
		OR = {
			has_high_dragonpit_funding = yes
			has_med_dragonpit_funding = yes
		}
		any_held_title = {
			has_variable_list = dragons_in_pit
			variable_list_size = {
				name = dragons_in_pit
				value > 0
			}
		}
	}

	left_portrait = root
	right_portrait = {
		character = scope:thief
		animation = fear
		outfit_tags = { beggar_rags }
	}
	lower_right_portrait = scope:head_dragonkeeper
	lower_left_portrait = scope:dragon

	immediate = {
		random_court_position_holder = {
			type = head_dragonkeeper_court_position
			save_scope_as = head_dragonkeeper
		}
		random_held_title = {
			limit = {
				has_variable_list = dragons_in_pit
				variable_list_size = {
					name = dragons_in_pit
					value > 0
				}
			}
			save_scope_as = dragonpit_location
		}
		scope:dragonpit_location = {
			random_in_list = {
				variable = dragons_in_pit
				limit = {
					is_alive = yes
				}
				save_scope_as = dragon
			}
		}
		create_character = {
			template = agot_head_dragonkeeper_med_funding_template
			trait = wounded_1
			employer = root
			culture = root.capital_province.culture
			faith = root.capital_province.faith
			save_scope_as = thief
		}
	}


	# Excellent work, head_dragonkeeper
	option = {
		name = agot_dragonkeepers.0304.a
		rightfully_imprison_character_effect = {
			TARGET = scope:thief
			IMPRISONER = root
		}
		ai_chance = {
			base = 25
		}
		stress_impact = {
			base = minor_stress_impact_loss
		}
	}

	# Feed the intruder to one of the dragons
	option = {
		name = agot_dragonkeepers.0304.b
		trigger = { NOT = { has_trait = compassionate } }
		add_dread = medium_dread_gain
		scope:thief = {
			death = {
				death_reason = death_dragon_fire
				killer = scope:dragon
			}
		}
		ai_chance = {
			base = 100
		}
		stress_impact = {
			sadistic = major_stress_impact_loss
			compassionate = major_stress_impact_gain
		}
	}
}

# An event where the dragonkeepers nickname a dragon, ala Caraxes and Bloodwyrm
# HIGH FUNDING
agot_dragonkeepers.0305 = {
	type = character_event
	title = agot_dragonkeepers.0305.t
	desc = agot_dragonkeepers.0305.desc

	theme = dragon

	left_portrait = root
	right_portrait = scope:head_dragonkeeper
	lower_left_portrait = scope:dragon

	trigger = {
		is_available_for_dragonkeeper_flavor_events = yes
		has_high_dragonpit_funding = yes
		any_held_title = {
			has_variable_list = dragons_in_pit
			variable_list_size = {
				name = dragons_in_pit
				value > 0
			}
			any_in_list = {
				variable = dragons_in_pit
				has_any_nickname = no
			}
		}
	}

	override_background = { reference = agot_dragonpit }

	immediate = {
		random_court_position_holder = {
			type = head_dragonkeeper_court_position
			save_scope_as = head_dragonkeeper
		}
		random_held_title = {
			limit = {
				has_variable_list = dragons_in_pit
				variable_list_size = {
					name = dragons_in_pit
					value > 0
				}
			}
			save_scope_as = dragonpit_location
		}
		scope:dragonpit_location = {
			random_in_list = {
				variable = dragons_in_pit
				limit = {
					has_any_nickname = no
				}
				save_scope_as = dragon
			}
		}
		hidden_effect = {
			scope:dragon = {
				random_list = {
					5 = {
						modifier = {
							add = 65
							has_trait = dragon_majestic
						}
						give_nickname = nick_dragon_the_radiant
					}
					5 = {
						modifier = {
							add = 65
							has_trait = dragon_swift
						}
						random_list = {
							10 = { give_nickname = nick_dragon_the_skysplitter }
							10 = { give_nickname = nick_dragon_the_streak }
							1 = { give_nickname = nick_dragon_the_sky_high }
						}
					}
					10 = {
						modifier = {
							add = 25
							OR = {
								has_trait = dragon_aggressive
								scope:dragon.dread >= 100
							}
						}
						modifier = {
							add = 25
							has_trait = dragon_impulsive
						}
						give_nickname = nick_dragon_the_terrible
					}
					10 = {
						modifier = {
							add = 25
							OR = {
								has_trait = dragon_physique_bad_1
								has_trait = dragon_physique_bad_2
								has_trait = dragon_physique_bad_3
							}
						}
						modifier = {
							add = 25
							OR = {
								has_trait = dragon_slow
								has_trait = dragon_spindly
								has_trait = dragon_ugly
							}
						}
						random_list = {
							1 = { give_nickname = nick_dragon_the_sorrowful }
							1 = { give_nickname = nick_dragon_the_pitiful }
						}
					}
					10 = {
						modifier = {
							add = 15
							OR = {
								has_trait = dragon_bloodthirsty
								has_trait = dragon_aggressive
							}
						}
						modifier = {
							add = 50
							has_trait = dragon_voracious
						}
						give_nickname = nick_dragon_the_devourer
					}
					10 = {
						modifier = {
							add = 25
							has_trait = dragon_accepting
						}
						give_nickname = nick_dragon_the_song_seeker
					}
					0 = {
						modifier = {
							add = 100
							age > 200
						}
						random_list = {
							9 = { give_nickname = nick_dragon_the_ancient }
							1 = { give_nickname = nick_dragon_the_eternal_dragon }
						}
					}
					0 = {
						modifier = {
							add = 100
							AND = {
								scope:dragon.dread >= 100
								OR = {
									has_trait = dragon_physique_good_2
									has_trait = dragon_physique_good_3
								}
							}
						}
						random_list = {
							10 = { give_nickname = nick_dragon_the_great_and_terrible }
							4 = { give_nickname = nick_dragon_the_bringer_of_the_end }
							1 = { give_nickname = nick_dragon_the_world_eater }
						}
					}
					10 = {
						trigger = {
							var:color ?= flag:black
						}
						modifier = {
							add = 90
							var:color ?= flag:black
						}
						random_list = {
							2 = {
								trigger = {
									character:dragon_balerion = {
										AND = {
											is_alive = no
											days_since_death >= 36500
										}
									}
								}
								give_nickname = nick_dragon_the_black_dread
							}
							2 = { give_nickname = nick_dragon_the_shadow }
							2 = { give_nickname = nick_dragon_the_shade }
							2 = { give_nickname = nick_dragon_the_dark_wyrm }
							2 = { give_nickname = nick_dragon_the_night_terror }
							2 = { give_nickname = nick_dragon_the_nights_flame }
							1 = { give_nickname = nick_dragon_nightfyre }
							2 = { give_nickname = nick_dragon_the_black_flame }
							2 = { give_nickname = nick_dragon_the_eclipse }
							1 = { give_nickname = nick_dragon_the_hope_devourer }
						}
					}
					10 = {
						trigger = {
							var:color ?= flag:grey
						}
						modifier = {
							add = 90
							var:color ?= flag:grey
						}
						random_list = {
							2 = { give_nickname = nick_dragon_the_shadow }
							2 = { give_nickname = nick_dragon_the_shade }
							2 = { give_nickname = nick_dragon_the_phantom }
							2 = { give_nickname = nick_dragon_the_ashen }
							2 = { give_nickname = nick_dragon_the_silver_storm }
							2 = { give_nickname = nick_dragon_the_iron_shadow }
							2 = { give_nickname = nick_dragon_the_iron_menace }
						}
					}
					10 = {
						trigger = {
							var:color ?= flag:white
						}
						modifier = {
							add = 90
							var:color ?= flag:white
						}
						random_list = {
							2 = { give_nickname = nick_dragon_the_white_dread }
							2 = { give_nickname = nick_dragon_the_cloud }
							2 = { give_nickname = nick_dragon_the_cloud_wyrm }
							2 = { give_nickname = nick_dragon_the_milk_wyrm }
							2 = { give_nickname = nick_dragon_the_frost_drake }
							2 = { give_nickname = nick_dragon_the_ghost_flame }
							2 = { give_nickname = nick_dragon_the_ivory_terror }
							1 = { give_nickname = nick_dragon_the_nightmare_in_ivory }
						}
					}
					10 = {
						trigger = {
							var:color ?= flag:red
						}
						modifier = {
							add = 90
							var:color ?= flag:red
						}
						random_list = {
							2 = {
								trigger = {
									character:dragon_caraxes = {
										AND = {
											is_alive = no
											days_since_death >= 36500
										}
									}
								}
								give_nickname = nick_dragon_the_blood_wyrm
							}
							2 = { give_nickname = nick_dragon_the_inferno }
							2 = { give_nickname = nick_dragon_the_blood_reaver }
							2 = { give_nickname = nick_dragon_the_ember }
							2 = { give_nickname = nick_dragon_the_crimson_comet }
							1 = {
								trigger = { is_male = yes }
								give_nickname = nick_dragon_the_cinder_king
							}
						}
					}
					10 = {
						trigger = {
							var:color ?= flag:orange
						}
						modifier = {
							add = 90
							var:color ?= flag:orange
						}
						random_list = {
							2 = {
								trigger = {
									character:dragon_vermithor = {
										AND = {
											is_alive = no
											days_since_death >= 36500
										}
									}
								}
								give_nickname = nick_dragon_the_bronze_fury
							}
							2 = { give_nickname = nick_dragon_the_ember }
							2 = { give_nickname = nick_dragon_the_ember_maw }
							2 = { give_nickname = nick_dragon_the_firestorm }
							2 = { give_nickname = nick_dragon_the_amber_terror }
						}
					}
					10 = {
						trigger = {
							var:color ?= flag:yellow
						}
						modifier = {
							add = 90
							var:color ?= flag:yellow
						}
						random_list = {
							2 = { give_nickname = nick_dragon_the_ember }
							2 = { give_nickname = nick_dragon_the_golden }
							2 = { give_nickname = nick_dragon_the_golden_blaze }
							2 = { give_nickname = nick_dragon_the_suns_wrath }
							2 = {
								trigger = {
									has_trait = dragon_majestic
								}
								give_nickname = nick_dragon_the_dancing_sun
							}
						}
					}
					10 = {
						trigger = {
							var:color ?= flag:green
						}
						modifier = {
							add = 90
							var:color ?= flag:green
						}
						random_list = {
							2 = { give_nickname = nick_dragon_the_jade_menace }
							2 = { give_nickname = nick_dragon_the_mossy_mountain }
							1 = { give_nickname = nick_dragon_the_emerald_nightmare }
						}
					}
					10 = {
						trigger = {
							var:color ?= flag:teal
						}
						modifier = {
							add = 20
							var:color ?= flag:teal
						}
						random_list = {
							2 = { give_nickname = nick_dragon_the_mossy_mountain }
						}
					}
					10 = {
						trigger = {
							var:color ?= flag:blue
						}
						modifier = {
							add = 90
							var:color ?= flag:blue
						}
						random_list = {
							2 = { give_nickname = nick_dragon_the_azure_flame }
							2 = { give_nickname = nick_dragon_the_sky_serpent }
							2 = { give_nickname = nick_dragon_the_sapphire_flame }
							1 = { give_nickname = nick_dragon_the_iron_storm }
						}
					}
					10 = {
						trigger = {
							var:color ?= flag:purple
						}
						modifier = {
							add = 90
							var:color ?= flag:purple
						}
						random_list = {
							2 = { give_nickname = nick_dragon_the_amethyst }
							2 = { give_nickname = nick_dragon_the_violet_flame }
							2 = { give_nickname = nick_dragon_the_violet_violence }
						}
					}
					10 = {
						trigger = {
							var:color ?= flag:pink
						}
						modifier = {
							add = 90
							var:color ?= flag:pink
						}
						random_list = {
							2 = { give_nickname = nick_dragon_the_rose_fury }
							2 = { give_nickname = nick_dragon_the_blossom_blaze }
						}
					}
					10 = {
						trigger = {
							var:color ?= flag:fuschia
						}
						modifier = {
							add = 90
							var:color ?= flag:fuschia
						}
						random_list = {
							2 = { give_nickname = nick_dragon_the_rose_fury }
							2 = { give_nickname = nick_dragon_the_blossom_blaze }
							2 = { give_nickname = nick_dragon_the_sunrise }
						}
					}
					1 = {
						trigger = {
							NOR = {
								has_trait = dragon_physique_bad_1
								has_trait = dragon_physique_bad_2
								has_trait = dragon_physique_bad_3
							}
						}
						random_list = {
							1 = { give_nickname = nick_dragon_the_chiefest_and_greatest_of_calamities }
							1 = { give_nickname = nick_dragon_the_unrelenting_force }
						}
					}
					1 = {
						trigger = {
							OR = {
								has_trait = dragon_majestic
								has_trait = dragon_swift
								has_trait = dragon_fertile
							}
						}
						give_nickname = nick_dragon_the_luck_dragon
					}
					1 = {
						trigger = {
							AND = {
								OR = {
									var:color ?= flag:black
									var:color ?= flag:purple
								}
								scope:dragon.dread >= 100
								is_female = yes
							}
						}
						give_nickname = nick_dragon_the_mistress_of_all_evil
					}
					1 = {
						trigger = {
							var:current_rider ?= character:Dayne_8
						}
						give_nickname = nick_dragon_dorkstar
					}
					5 = {
						trigger = {
							has_variable = color_grading
							NOR = {
								var:color_grading = flag:middle
								var:color_grading = flag:lighter
							}
						}
						give_nickname = nick_dragon_the_color_grading_dread
					}
					5 = {
						trigger = {
							has_variable = color_grading
							NOT = { var:color_grading = flag:lighter }
						}
						give_nickname = nick_dragon_the_color_grading_fury
					}
					5 = {
						trigger = {
							has_variable = color_grading
							NOR = {
								var:color_grading = flag:middle
								var:color_grading = flag:lighter
							}
						}
						give_nickname = nick_dragon_the_color_grading_flame
					}
					10 = {
						trigger = {
							has_variable = color
						}
						give_nickname = nick_dragon_the_color_flame
					}
					10 = {
						trigger = {
							has_variable = color
							NOR = {
								var:color = flag:red
								var:color = flag:orange
								var:color = flag:teal
							}
						}
						give_nickname = nick_dragon_the_color_dread
					}
					10 = {
						trigger = {
							has_variable = color
						}
						give_nickname = nick_dragon_the_color_fury
					}
				}
			}
		}
	}

	# Interesting
	option = {
		name = agot_dragonkeepers.0305.a
		custom_tooltip = agot_dragonkeepers.0305.a.tt
		ai_chance = {
			base = 100
		}
	}

	# I don't like it
	option = {
		name = agot_dragonkeepers.0305.b
		custom_tooltip = agot_dragonkeepers.0305.b.tt
		ai_chance = {
			base = 0
		}
		scope:dragon = {
			remove_nickname = yes
		}
	}
}

# Child visits dragonpit - High Funding Outcome
# Child sneaks off into the dragonpit, is found by the dragonkeepers but the child shows an innate interestin_dragonpit in dragons. Dragonkeepers foster the child's interest. Taming bonus
# High Funding
agot_dragonkeepers.0306 = {
	type = character_event
	title = agot_dragonkeepers.0306.t
	desc = agot_dragonkeepers.0306.desc

	theme = dragon

	left_portrait = root
	right_portrait = scope:head_dragonkeeper
	lower_center_portrait = scope:child
	cooldown = { years = 2 }
	trigger = {
		is_available_for_dragonkeeper_flavor_events = yes
		has_high_dragonpit_funding = yes
		any_child = {
			count >= 1
			AND = { age <= 9 age >= 5 }
			is_ruler = no
		}
	}

	override_background = { reference = agot_dragonpit }

	immediate = {
		random_court_position_holder = {
			type = head_dragonkeeper_court_position
			save_scope_as = head_dragonkeeper
		}
		random_child = {
			limit = {
				age <= 9
				age >= 5
				is_ruler = no
			}
			save_scope_as = child
		}
		random_held_title = {
			limit = {
				has_variable_list = dragons_in_pit
			}
			save_scope_as = dragonpit_location
		}
	}

	option = {
		name = agot_dragonkeepers.0306.a
		scope:child = {
			add_character_modifier = {
				modifier = agot_child_interested_in_dragons
				years = 5
			}
		}
		stress_impact = {
			dragonrider = minor_stress_impact_loss
			shrewd = minor_stress_impact_loss
		}
	}
}

# Child visits dragonpit - Low Funding Outcome
# Child sneaks off into the dragonpit, but due to underfunding ends up nearly dying. Child is terrified.
# Weak Funding
agot_dragonkeepers.0307 = {
	type = character_event
	title = agot_dragonkeepers.0307.t
	desc = agot_dragonkeepers.0307.desc

	theme = dragon

	left_portrait = root
	right_portrait = scope:head_dragonkeeper
	lower_center_portrait = scope:child
	cooldown = { years = 2 }
	trigger = {
		is_available_for_dragonkeeper_flavor_events = yes
		has_low_dragonpit_funding = yes
		any_child = {
			count >= 1
			AND = { age <= 9 age >= 5 }
		}
	}

	override_background = { reference = agot_dragonpit }

	immediate = {
		random_court_position_holder = {
			type = head_dragonkeeper_court_position
			save_scope_as = head_dragonkeeper
		}
		random_child = {
			limit = {
				age <= 9
				age >= 5
			}
			save_scope_as = child
		}
		random_held_title = {
			limit = {
				has_variable_list = dragons_in_pit
			}
			save_scope_as = dragonpit_location
		}
	}

	option = {
		name = agot_dragonkeepers.0307.a
		scope:child = {
			add_character_modifier = {
				modifier = agot_child_terrified_by_dragons
				years = 5
			}
		}
		stress_impact = {
			dragonrider = minor_stress_impact_gain
			family_first = major_stress_impact_gain
			sadistic = minor_stress_impact_loss
		}
	}
}

# A dragon lays an egg in the dragonpit.
# Dragon lays an egg - Dragonkeepers are able to collect it and present it to the owner of the pit.
# High Funding
agot_dragonkeepers.0308 = {
	type = character_event
	title = agot_dragonkeepers.0308.t
	desc = agot_dragonkeepers.0308.desc

	theme = dragon

	left_portrait = root
	right_portrait = scope:head_dragonkeeper

	override_background = { reference = agot_dragonpit }

	trigger = {
		is_available_for_dragonkeeper_flavor_events = yes
		has_high_dragonpit_funding = yes
		any_courtier = {
			has_trait = dragon
			has_character_flag = in_dragonpit
			is_female = yes
			age < 100
			age >= 14
		}
	}

	immediate = {
		random_court_position_holder = {
			type = head_dragonkeeper_court_position
			save_scope_as = head_dragonkeeper
		}
		random_held_title = {
			limit = {
				has_variable_list = dragons_in_pit
			}
			save_scope_as = dragonpit_location
		}
		scope:dragonpit_location = {
			random_in_list = {
				variable = dragons_in_pit
				limit = {
					is_female = yes
					age < 100
					age >= 14
				}
				save_scope_as = dragon_parent
			}
		}
	}

	option = {
		name = agot_dragonkeepers.0308.a
		custom_tooltip = agot_dragonkeepers.0308.a_tt
		set_variable = { name = spawn_eggs value = 1 }
		agot_spawn_laid_egg = {
			AMOUNT_OF_EGGS_TO_SPAWN = 1
			OWNER_SCOPE = root
			DRAGON_PARENT = scope:dragon_parent
		}
		if = {
			limit = {
				scope:dragon_parent = {
					has_variable = dragon_gender_hidden
				}
			}
			scope:dragon_parent = {
				agot_reveal_dragon_gender_effect = yes
			}
		}
		stress_impact = {
			dragonrider = minor_stress_impact_loss
		}
	}
}

# Dragonkeeper reports positive news
# Dragonkeeper reports that new recruits are progressing well
# Medium Funding
agot_dragonkeepers.0309 = {
	type = character_event
	title = agot_dragonkeepers.0309.t
	desc = agot_dragonkeepers.0309.desc

	theme = dragon

	override_background = { reference = agot_dragonpit }

	left_portrait = root
	right_portrait = scope:head_dragonkeeper

	trigger = {
		is_available_for_dragonkeeper_flavor_events = yes
		has_med_dragonpit_funding = yes
	}

	immediate = {
		random_court_position_holder = {
			type = head_dragonkeeper_court_position
			save_scope_as = head_dragonkeeper
		}
		random_held_title = {
			limit = {
				has_variable_list = dragons_in_pit
			}
			save_scope_as = dragonpit_location
		}
	}

	option = {
		name = agot_dragonkeepers.0309.a
		add_prestige = minor_prestige_gain
		stress_impact = {
			base = minor_stress_impact_loss
		}
	}
}

# Dragonkeeper reports positive news
# Dragonkeeper is conducting dragon research
# Medium Funding or Higher
agot_dragonkeepers.0310 = {
	type = character_event
	title = agot_dragonkeepers.0310.t
	desc = agot_dragonkeepers.0310.desc

	theme = dragon

	override_background = { reference = agot_dragonpit }

	left_portrait = root
	right_portrait = scope:head_dragonkeeper

	trigger = {
		is_available_for_dragonkeeper_flavor_events = yes
		has_high_dragonpit_funding = yes
		any_held_title = {
			has_variable_list = dragons_in_pit
			variable_list_size = {
				name = dragons_in_pit
				value > 0
			}
		}
	}

	immediate = {
		random_court_position_holder = {
			type = head_dragonkeeper_court_position
			save_scope_as = head_dragonkeeper
		}
		random_held_title = {
			limit = {
				has_variable_list = dragons_in_pit
				variable_list_size = {
					name = dragons_in_pit
					value > 0
				}
			}
			save_scope_as = dragonpit_location
		}
		scope:dragonpit_location = {
			random_in_list = {
				variable = dragons_in_pit
				limit = {
					is_alive = yes
				}
				save_scope_as = dragon
			}
		}
	}

	option = {
		name = agot_dragonkeepers.0310.a
		add_prestige = minor_prestige_gain
		scope:head_dragonkeeper = {
			add_character_modifier = {
				modifier = agot_conducting_dragon_research
				years = 10
			}
		}
		stress_impact = {
			base = minor_stress_impact_loss
		}
	}

}

# Weak Chains
# Several chains in the dragonpit are weakened, dragonkeepers can't afford it on their own, they appeal to you.
# Low Funding Event
agot_dragonkeepers.0311 = {
	type = character_event
	title = agot_dragonkeepers.0311.t
	desc = agot_dragonkeepers.0311.desc

	theme = dragon

	override_background = { reference = agot_dragonpit }

	left_portrait = root
	right_portrait = scope:head_dragonkeeper

	trigger = {
		is_available_for_dragonkeeper_flavor_events = yes
		has_low_dragonpit_funding = yes
	}

	immediate = {
		random_court_position_holder = {
			type = head_dragonkeeper_court_position
			save_scope_as = head_dragonkeeper
		}
		random_held_title = {
			limit = {
				has_variable_list = dragons_in_pit
			}
			save_scope_as = dragonpit_location
		}
	}

	# Increase Amenity Funding
	option = {
		name = agot_dragonkeepers.0300.a
		hidden_effect = { add_amenity_level = { type = agot_dragonpit_amenities value = 1 } }
		custom_tooltip = agot_dragonpit_amenities_increase_tt
		ai_chance = {
			base = 25
		}
		stress_impact = {
			base = minor_stress_impact_gain
			greedy = minor_stress_impact_gain
		}
	}

	# Spare Some Resources
	option = {
		name = agot_dragonkeepers.0311.b
		remove_short_term_gold = major_gold_value
		ai_chance = {
			base = 50
		}
		stress_impact = {
			base = minor_stress_impact_gain
			greedy = major_stress_impact_gain
		}
	}

	# Too bad :(
	option = {
		name = agot_dragonkeepers.0300.c
		add_prestige = minor_prestige_loss
		reverse_add_opinion = {
			target = scope:head_dragonkeeper
			modifier = unhelpful_opinion
			opinion = -25
			years = 1
		}
		ai_chance = {
			base = 25
			modifier = {
				add = 25
				OR = {
					has_trait = callous
					has_trait = greedy
					has_trait = arrogant
				}
			}
		}
		stress_impact = {
			base = minor_stress_impact_gain
			greedy = minor_stress_impact_loss
		}
	}

}

# Farmers unwilling / unable to support demands of dragonpit
# Medium Funding
agot_dragonkeepers.0312 = {
	type = character_event
	title = agot_dragonkeepers.0312.t
	desc = agot_dragonkeepers.0312.desc

	theme = dragon

	override_background = { reference = agot_dragonpit }

	left_portrait = root
	right_portrait = scope:head_dragonkeeper

	trigger = {
		is_available_for_dragonkeeper_flavor_events = yes
		has_med_dragonpit_funding = yes
	}

	weight_multiplier = {
		base = 1
		modifier = {
			add = 1
			any_held_county = {
				county_control < medium_county_control
				has_variable_list = dragons_in_pit
			}
		}
	}

	immediate = {
		random_court_position_holder = {
			type = head_dragonkeeper_court_position
			save_scope_as = head_dragonkeeper
		}
		random_held_title = {
			limit = {
				has_variable_list = dragons_in_pit
			}
			save_scope_as = dragonpit_location
		}
	}

	# Increase Amenity Funding
	option = {
		name = agot_dragonkeepers.0300.a
		hidden_effect = { add_amenity_level = { type = agot_dragonpit_amenities value = 1 } }
		custom_tooltip = agot_dragonpit_amenities_increase_tt
		ai_chance = {
			base = 25
		}
		stress_impact = {
			base = minor_stress_impact_gain
			greedy = minor_stress_impact_gain
		}
	}

	# Import more food
	option = {
		name = agot_dragonkeepers.0312.b
		remove_short_term_gold = major_gold_value
		ai_chance = {
			base = 50
		}
		stress_impact = {
			base = minor_stress_impact_gain
			greedy = major_stress_impact_gain
		}
	}

	# They will have to make do somehow
	option = {
		name = agot_dragonkeepers.0300.c
		add_prestige = minor_prestige_loss
		reverse_add_opinion = {
			target = scope:head_dragonkeeper
			modifier = unhelpful_opinion
			opinion = -25
			years = 1
		}
		if = {
			limit = {
				any_courtier = {
					has_trait = dragon
					has_character_flag = in_dragonpit
					NOT = {
						has_trait = dragon_ill
					}
				}
			}
			random_list = {
				50 = {}
				50 = {
					random_courtier = {
						limit = {
							has_trait = dragon
							has_character_flag = in_dragonpit
							NOT = {
								has_trait = dragon_ill
							}
						}
						add_trait = dragon_ill
						trigger_event = {
							id = agot_dragonkeepers.0313 # Event to remove sickness
							days = { 30 90 }
						}
					}
				}
			}
		}
		ai_chance = {
			base = 25
			modifier = {
				add = 25
				OR = {
					has_trait = callous
					has_trait = greedy
					has_trait = arrogant
				}
			}
		}
		stress_impact = {
			base = minor_stress_impact_gain
			greedy = minor_stress_impact_loss
		}
	}

	# Trust my Steward to strike a deal
	option = {
		name = agot_dragonkeepers.0312.d
		trigger = { exists = cp:councillor_steward }
		reverse_add_opinion = {
			target = cp:councillor_steward
			modifier = trust_opinion
			opinion = 25
		}
		ai_chance = {
			base = 25
		}
		stress_impact = {
			base = minor_stress_impact_gain
			shrewd = minor_stress_impact_loss
		}
	}
}

# Maintenance Event
agot_dragonkeepers.0313 = {
	hidden = yes

	immediate = {
		remove_trait = dragon_ill
	}
}

# Dragon chance to get sick / ill / lose prowess (?) with low amenities
agot_dragonkeepers.0314 = {
	type = character_event
	title = agot_dragonkeepers.0312.t
	desc = agot_dragonkeepers.0312.desc

	theme = dragon

	override_background = { reference = agot_dragonpit }

	left_portrait = root
	right_portrait = scope:head_dragonkeeper

	trigger = {
		is_available_for_dragonkeeper_flavor_events = yes
		has_low_dragonpit_funding = yes
		any_courtier = {
			has_trait = dragon
			has_character_flag = in_dragonpit
			NOT = {
				has_trait = dragon_ill
			}
		}
	}

	immediate = {
		random_court_position_holder = {
			type = head_dragonkeeper_court_position
			save_scope_as = head_dragonkeeper
		}
		random_courtier = {
			limit = {
				has_trait = dragon
				has_character_flag = in_dragonpit
				NOT = {
					has_trait = dragon_ill
				}
			}
			save_scope_as = dragon
			scope:dragon = {
				add_trait = dragon_ill
				trigger_event = {
					id = agot_dragonkeepers.0313 # Event to remove sickness
					days = { 30 90 }
				}
			}
		}
	}

	# Increase Amenity Funding
	option = {
		name = agot_dragonkeepers.0300.a
		hidden_effect = { add_amenity_level = { type = agot_dragonpit_amenities value = 1 } }
		custom_tooltip = agot_dragonpit_amenities_increase_tt
		ai_chance = {
			base = 25
		}
		stress_impact = {
			base = minor_stress_impact_gain
		}
	}

	# They will have to make do
	option = {
		name = agot_dragonkeepers.0300.c
		add_prestige = minor_prestige_loss
		ai_chance = {
			base = 25
			modifier = {
				add = 25
				OR = {
					has_trait = callous
					has_trait = greedy
					has_trait = arrogant
				}
			}
		}
		stress_impact = {
			base = minor_stress_impact_gain
			greedy = minor_stress_impact_loss
		}
	}
}

scripted_trigger child_eligible_to_sneak_into_dragonpit = {
	OR = {
		has_trait = impatient
		has_trait = ambitious
		has_trait = brave
	}
	NOT = {
		has_trait = craven
	}
}

# Child Complains About Egg Not Hatching
agot_dragonkeepers.0315 = {
	type = character_event
	title = agot_dragonkeepers.0315.t
	desc = agot_dragonkeepers.0315.desc

	theme = dragon

	override_background = { reference = agot_dragonpit }

	cooldown = { years = 3 }

	left_portrait = root
	right_portrait = { character = scope:child_with_egg animation = worry }

	trigger = {
		is_available_for_dragonkeeper_flavor_events = yes
		any_child = {
			dragonkeepers_315_child_eligible_for_egg_not_hatching_selection = yes
		}
	}

	immediate = {
		random_child = {
			limit = {
				dragonkeepers_315_child_eligible_for_egg_not_hatching_selection = yes
			}
			save_scope_as = child_with_egg
			add_character_flag = {
				flag = agot_child_complained_about_cradled_egg
				years = 5
			}
		}
	}

	# If you have a spare egg, swap their egg out
	option = {
		name = agot_dragonkeepers.0315.a
		custom_tooltip = agot_dragonkeepers.0315.a_tt
		trigger = {
			any_character_artifact = {
				has_variable = dragon_egg
				# You can't be actively cradling the egg you want to give away
				NOR = {
					has_variable = cradled_egg
					has_variable  = selected_egg_for_hatching
					has_variable = dud_egg
				}
			}
		}
		# Fire event that gives player choice to pick egg
		if = {
			limit = {
				is_ai = no
			}
			trigger_event = agot_dragonkeepers.0316
		}
		else = {
			scope:child_with_egg = {
				random_character_artifact = {
					limit = {
						has_variable = dragon_egg
						has_variable = dud_egg
					}
					save_scope_as = childs_egg
				}
			}
			random_character_artifact = {
				limit = {
					has_variable = dragon_egg
					# You can't be actively cradling the egg you want to give away
					NOR = {
						has_variable = cradled_egg
						has_variable  = selected_egg_for_hatching
						has_variable = dud_egg
					}
				}
				set_owner = scope:child_with_egg
			}
			scope:childs_egg = {
				set_owner = root
			}
		}
		ai_chance = {
			base = 25
		}
	}

	# If child is under ten years old, tell them to be patient until they are older
	option = {
		name = agot_dragonkeepers.0315.b
		custom_tooltip = agot_dragonkeepers.0315.d_tt
		trigger = {
			scope:child_with_egg.age < 10
		}
		hidden_effect = {
			random_list = {
				55 = {
					# Nothing Happens, if a child is complaining chances are they'll try to do something if their complaints are denied
				}
				45 = {
					trigger = {
						scope:child_with_egg = {
							child_eligible_to_sneak_into_dragonpit = yes
						}
					}
					#They will sneak in and try to tame a dragon anyway, ala Aemond
					trigger_event = { id = agot_dragonkeepers.0317 days = 1 }
				}
			}
		}
		ai_chance = {
			base = 33
		}
	}

	# Take them to the Dragonpit and pick a dragon to BOND with
	option = {
		name = agot_dragonkeepers.0315.c
		custom_tooltip = agot_dragonkeepers.0315.c_tt
		trigger = {
			any_courtier = {
				has_character_flag = in_dragonpit
				has_trait = dragon
				NOR = {
					has_variable = current_rider
					any_relation = {
						type = agot_dragon
					}
				}
			}
		}
		if = {
			limit = {
				is_ai = no
			}
			# Dragon widget selection
			trigger_event = agot_dragonkeepers.0319
		}
		else = {
			scope:child_with_egg = {
				save_scope_as = tamer # Used for dragon_traits_in_common value
				random_character_artifact = {
					limit = {
						has_variable = dragon_egg
						has_variable = dud_egg
					}
					save_scope_as = childs_egg
				}
				court_owner ?= {
					random_courtier = {
						limit = {
							has_trait = dragon
							has_character_flag = in_dragonpit
							NOR = {
								has_variable = current_rider
								any_relation = {
									type = agot_dragon
								}
							}
						}
						weight = {
							base = 1
							modifier = {
								add = {
									save_temporary_scope_as = dragon
									value = dragon_traits_in_common
									multiply = dragon_scheme_base_common_traits_value
								}
							}
						}
						save_scope_as = dragon
						scope:tamer = {
							start_scheme = {
								type = bond_with_dragon_scheme
								target_character = scope:dragon
							}
							scope:childs_egg = {
								set_owner = root
							}
						}
					}
				}
			}

		}
		ai_chance = {
			base = 25
		}
	}

	# Tell them no
	option = {
		name = agot_dragonkeepers.0315.d
		scope:child_with_egg = {
			add_opinion = {
				modifier = hurt_opinion
				opinion = -25
				target = root
			}
		}
		custom_tooltip = agot_dragonkeepers.0315.d_tt
		hidden_effect = {
			random_list = {
				30 = {
					# Nothing Happens, if a child is complaining chances are they'll try to do something if their complaints are denied
				}
				70 = {
					trigger = {
						scope:child_with_egg = {
							child_eligible_to_sneak_into_dragonpit = yes
						}
					}
					# They will sneak in and try to tame a dragon anyway, ala Aemond
					trigger_event = { id = agot_dragonkeepers.0317 days = 1 }
				}
			}
		}
		ai_chance = {
			base = 25
		}
	}
}

# Child Complains About Egg Not Hatching - Player Picks What Egg to Grant
agot_dragonkeepers.0316 = {
	type = character_event
	title = agot_dragonkeepers.0316.t
	desc = agot_dragonkeepers.0316.desc

	theme = dragon

	override_background = { reference = agot_dragonpit }

	left_portrait = root
	right_portrait = {
		character = scope:child_with_egg
		animation = worry
	}
	widget = {
		is_shown = {
			is_ai = no
		}
		gui = "event_window_dragon_egg_selection"
		container = "custom_widgets_container"
	}
	immediate = {
		every_character_artifact = {
			limit = {
				has_variable = dragon_egg
				NOR = {
					has_variable = cradled_egg
					has_variable  = selected_egg_for_hatching
					has_variable = dud_egg
				}
			}
			root = {
				add_to_variable_list = {
					name = possible_dragon_eggs
					target = prev
				}
				if = {
					limit = {
						NOT = { has_variable = selected_artifact }
					}
					set_variable = { name = selected_artifact value = prev }
				}
			}
		}
		scope:child_with_egg = {
			random_character_artifact = {
				limit = {
					has_variable = dragon_egg
					has_variable = dud_egg
				}
				save_scope_as = childs_egg
			}
		}
	}

	# If you have a spare egg, swap their egg out
	option = {
		name = agot_dragonkeepers.0316.a
		var:selected_artifact = {
			set_owner = scope:child_with_egg
		}
		scope:childs_egg = {
			set_owner = root
		}
		clear_variable_list = possible_dragon_eggs
		remove_variable = selected_artifact
	}
	# Never mind!
	option = {
		name = agot_dragonkeepers.0316.b
		clear_variable_list = possible_dragon_eggs
		remove_variable = selected_artifact
		scope:child_with_egg = {
			add_opinion = {
				modifier = hurt_opinion
				opinion = -25
				target = root
			}
		}
	}
}

# Child Complains About Egg Not Hatching - Child Sneaks Into Dragonpit And Tries to Tame with Dragon
agot_dragonkeepers.0317 = {
	hidden = yes
	immediate = {
		scope:child_with_egg = {
			save_scope_as = tamer
			court_owner = {
				random_courtier_or_guest = {
					limit = {
						has_trait = dragon
						NOR = {
							has_variable = current_rider # No rider, no bonder
							any_relation = {
								type = agot_dragon
							}
						}
						save_temporary_scope_as = dragon
						dragon_size >= dragon_taming_minimum_size
						agot_can_tame_or_bond_or_etc_with_pitted_dragons = {
							DRAGON = scope:dragon ACTOR = scope:tamer
						}
					}
					weight = {
						base = 1
						modifier = {
							add = {
								save_temporary_scope_as = dragon
								value = dragon_traits_in_common
								multiply = dragon_scheme_base_common_traits_value
							}
						}
						modifier = {
							add = scope:dragon.taming_chance
						}
					}
					save_scope_as = dragon
				}
			}
			agot_try_tame_dragon_effect = {
				TAMER = scope:tamer
				DRAGON = scope:dragon
			}
		}
		trigger_event = agot_dragonkeepers.0318
	}
}
# Child Complains About Egg Not Hatching - Child Sneaks Into Dragonpit And Tries to Tame Dragon - OUTCOME
agot_dragonkeepers.0318 = {
	type = character_event
	title = agot_dragonkeepers.0318.t
	desc = {
		first_valid = {
			triggered_desc = {
				trigger = {
					scope:child_with_egg = {
						any_relation = {
							type = agot_dragon
						}
					}
				}
				desc = agot_dragonkeepers.0318.desc_child_tamed_dragon
			}
			triggered_desc = {
				trigger = {
					NOT = {
						scope:child_with_egg = {
							any_relation = {
								type = agot_dragon
							}
						}
					}
				}
				desc = agot_dragonkeepers.0318.desc_child_failed_at_taming_dragon
			}
			triggered_desc = {
				trigger = {
					scope:child_with_egg = {
						is_alive = no
					}
				}
				desc = agot_dragonkeepers.0318.desc_child_died_while_taming_dragon
			}
		}
	}

	theme = dragon

	override_background = { reference = agot_dragonpit }

	left_portrait = root
	right_portrait = scope:child_with_egg


	immediate = {
		if = {
			limit = {
				scope:child_with_egg = {
					any_relation = {
						type = agot_dragon
					}
				}
			}
			scope:child_with_egg = {
				random_relation = {
					type = agot_dragon
					limit = {
						has_trait = dragon
					}
					save_scope_as = childs_dragon
				}
			}
		}
	}

	# What's done is done...
	option = {
		name = agot_dragonkeepers.0318.a
	}

}
# Child Complains About Egg Not Hatching - Child & Parent Visit Dragonpit
agot_dragonkeepers.0319 = {
	type = character_event
	title = agot_dragonkeepers.0319.t
	desc = agot_dragonkeepers.0319.desc

	theme = dragon

	override_background = { reference = agot_dragonpit }

	left_portrait = root
	right_portrait = {
		character = scope:child_with_egg
		animation = worry
	}
	widget = {
		is_shown = {
			is_ai = no
		}
		gui = "event_window_character_selection_short"
		container = "custom_widgets_container"
	}
	immediate = {
		scope:child_with_egg = {
			random_character_artifact = {
				limit = {
					has_variable = dragon_egg
					has_variable = dud_egg
				}
				save_scope_as = childs_egg
			}
		}
		every_courtier = {
			limit = {
				has_character_flag = in_dragonpit
				has_trait = dragon
				NOR = {
					has_variable = current_rider
					any_relation = {
						type = agot_dragon
					}
				}
			}
			root = {
				add_to_variable_list = {
					name = possible_characters
					target = prev
				}
				set_variable = { name = si_selected_character value = prev }
			}
		}
	}

	option = {
		name = agot_dragonkeepers.0319.a
		var:si_selected_character = {
			save_scope_as = dragonpit_dragon
		}
		scope:child_with_egg = {
			start_scheme = {
				type = bond_with_dragon_scheme
				target_character = scope:dragonpit_dragon
			}
		}
		scope:childs_egg = {
			set_owner = root
		}
		remove_variable = si_selected_character
		clear_variable_list = possible_characters
	}
	# Never mind!
	option = {
		name = agot_dragonkeepers.0319.b
		scope:child_with_egg = {
			add_opinion = {
				modifier = hurt_opinion
				opinion = -25
				target = root
			}
		}
	}
}