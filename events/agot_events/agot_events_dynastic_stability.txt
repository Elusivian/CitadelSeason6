namespace = agot_dynastic_stability

agot_dynastic_stability.0001 = { #Maintenance
	type = character_event
	hidden = yes
	immediate = {
		if = {
			limit = {
				NOT = { has_trait = bastard }
				scope:title = { tier > tier_barony }
				has_game_rule = agot_dynastic_stability_enabled
			}
			trigger_event = agot_dynastic_stability.0002
		}

		if = {
			limit = {
				has_trait = refusing_marriage
				exists = dynasty
				dynasty = {
					any_dynasty_member = {
						count <= 2
					}
				}
			}
			remove_trait = refusing_marriage
		}
	}
}

agot_dynastic_stability.0002 = {
	type = character_event
	theme = diplomacy
	title = agot_dynastic_stability.0002.t
	desc = agot_dynastic_stability.0002.desc
	right_portrait = root

	trigger = {
		has_primary_title = scope:title
		NOT = { dynasty = scope:previous_holder.dynasty }
		NOT = {
			any_heir_title = {
				holder = { dynasty = root.dynasty }
				tier >= scope:title.tier
			}
		}
		NOT = {
			any_pretender_title = {
				holder = { dynasty = root.dynasty }
				tier >= scope:title.tier
			}
		}
		scope:title = {
			any_past_holder = {
				NOT = { dynasty = root.dynasty }
				OR = {
					is_parent_of = root
					is_grandparent_of = root
					any_child = { is_grandparent_of = root }
				}
				#AGOT TODO - Add a check for if root is part of a cadet branch and make sure they aren't
				#AGOT TODO - Add a check for bittersteel, blackfyre and Targ and make sure they never convert to each other
			}
			NOT = {
				any_past_holder = {
					dynasty = root.dynasty
					OR = {
						is_sibling_of = root
						is_child_of = root
						is_parent_of = root
						is_grandparent_of = root
						is_grandchild_of = root
						any_child = { is_grandparent_of = root}
						root = {
							is_nibling_of = prev
						}
					}
				}
			}
		}
	}

	immediate = {
		#fallback to their current dynasty
		save_scope_as = line_of_descent
		if = {
			limit = {
				scope:title = {
					any_past_holder = {
						NOT = { dynasty = root.dynasty }
						is_parent_of = root
					}
				}
			}
			scope:title = {
				random_past_holder = {
					limit = {
						NOT = { dynasty = root.dynasty }
						is_parent_of = root
					}
					save_scope_as = line_of_descent
				}
			}
		}
		else_if = {
			limit = {
				scope:title = {
					any_past_holder = {
						NOT = { dynasty = root.dynasty }
						is_grandparent_of = root
					}
				}
			}
			scope:title = {
				random_past_holder = {
					limit = {
						NOT = { dynasty = root.dynasty }
						is_grandparent_of = root
					}
					save_scope_as = line_of_descent
				}
			}
		}
		else_if = {
			limit = {
				scope:title = {
					any_past_holder = {
						NOT = { dynasty = root.dynasty }
						any_child = { is_grandparent_of = root }
					}
				}
			}
			scope:title = {
				random_past_holder = {
					limit = {
						NOT = { dynasty = root.dynasty }
						any_child = { is_grandparent_of = root }
					}
					save_scope_as = line_of_descent
				}
			}
		}
	}

	option = {
		name = agot_dynastic_stability.0002.a
		hidden_effect = {
			every_child = {
				limit = { dynasty = root.dynasty }
				set_house = scope:line_of_descent.house
				every_child = {
					limit = {
						save_temporary_scope_as = child
						dynasty = root.dynasty
						NOT = {
							any_heir_title = {
								holder = { dynasty = scope:child.dynasty }
								tier >= scope:title.tier
							}
						}
						NOT = {
							any_pretender_title = {
								holder = { dynasty = scope:child.dynasty }
								tier >= scope:title.tier
							}
						}
					}
					set_house = scope:line_of_descent.house
					every_child = {
						limit = {
							save_temporary_scope_as = grandchild
							dynasty = root.dynasty
							NOT = {
								any_heir_title = {
									holder = { dynasty = scope:grandchild.dynasty }
									tier >= scope:title.tier
								}
							}
							NOT = {
								any_pretender_title = {
									holder = { dynasty = scope:grandchild.dynasty }
									tier >= scope:title.tier
								}
							}
						}
						set_house = scope:line_of_descent.house
					}
				}
			}
		}
		set_house = scope:line_of_descent.house
		every_held_title = {
			limit = {
				NOT =  {
					tier = tier_barony
					title_province ?= { has_holding_type = ruin_holding }
				}
			}
			set_coa = root.house
		}
		ai_chance = {
			base = 2
		}
	}
	option = {
		name = agot_dynastic_stability.0002.b
		ai_chance = {
			base = 0
		}
	}
}

agot_dynastic_stability.1000 = {
	hidden = yes

	trigger = {
		OR = {
			exists = mother.dynasty
			exists = father.dynasty
		}
		#Character was not house head
		trigger_if = {
			limit = {
				should_mother_give_house_to_bastard_trigger = yes
			}
			mother.house  = { exists = house_head }
		}
		trigger_else_if = {
			limit = {
				exists = father
				exists = father.house
				NOT = { father = { has_trait = bastard } }
			}
			father.house  = { exists = house_head }
		}
		trigger_else = { always = no }
	}

	immediate = {
		house = { save_scope_as = generated_house }

		if = {
			limit = { has_game_rule = agot_bastard_cadets_landed_only }

			if = {
				limit = { is_ruler = yes }

				trigger_event = agot_dynastic_stability.1001
				trigger_event = agot_dynastic_stability.1002
			}
			else_if = {
				limit = { is_ruler = no }

				trigger_event = agot_dynastic_stability.1003
			}
		}
		else_if = {
			limit = { has_game_rule = agot_bastard_cadets_everyone }

			trigger_event = agot_dynastic_stability.1001
			trigger_event = agot_dynastic_stability.1002
		}
	}
}

# Puting this in here since it has to do with dynasty switching as well
# This event relates to bastards forming cadets
agot_dynastic_stability.1001 = {
	hidden = yes

	immediate = {
		#set_house = scope:former_house= # Rejoin your house
		agot_set_parent_house_effect = yes # Rejoin your house
		if = {
			limit = {
				is_lowborn = no
				exists = house
			}
			house = { save_scope_as = former_house }
		}
		create_cadet_branch = yes # Create the Cadet subhouse
		if = {
			limit = {
				scope:former_house = { has_house_modifier = dragonrider_house_modifier }
			}
			house = { add_house_modifier = dragonrider_house_modifier }
		}
		# If any child is part of the generated dynasty, we will scope to them and use them to rename our cadet and change our coa!
		debug_log = "dynasty_stab_3"
		debug_log_scopes = yes
		if = {
			limit = {
				any_child = {
					house = scope:generated_house
				}
			}
			random_child = {
				limit = {
					house = scope:generated_house
				}
				save_scope_as = child
			}
			# Generate COA and House Name
			root.house = {
				#set_coa = scope:child.house
				# Take the COA from Personal COA and House Name from your kids
				if = {
					limit = { prev = { has_character_flag = has_personal_coa } }
					set_coa = prev.var:my_personal_coa.house
					set_house_name_from_house = scope:child.house
				}
				# Take the COA and House Name from your kids
				else = {
					generate_coa = bastards
					set_house_name_from_house = scope:child.house
				}
			}
		}
		# Add your kids back to your new house
		if = {
			limit = {
				any_child = {
					house = scope:generated_house
				}
			}
			every_child = {
				limit = {
					house = scope:generated_house
				}
				add_to_list = not_dynastic_kiddos
			}
			every_in_list = {
				list = not_dynastic_kiddos
				set_house = root.house
			}
		}
		trigger_event = agot_coa_events.0001
	}
}

agot_dynastic_stability.1002 = { #PINEAPPLE  - Badger's Custom Cadet Name Generator
	hidden = yes

	immediate = {
		set_global_variable = {
			name = cadet_new_name
			value = root
		}

		house = {
			set_house_name = cadet_name
		}
		remove_global_variable = cadet_new_name
	}
}

# This event shifts bastards back to their house if the "Cadet Bastards Landed Only" game rtule is active
agot_dynastic_stability.1003 = {
	hidden = yes

	immediate = {
		agot_set_parent_house_effect = yes # Rejoin your house
		remove_trait = bastard_founder
		add_trait = bastard
		if = {
			limit = {
				any_child = {
					house = scope:generated_house
				}
			}
			every_child = {
				limit = {
					house = scope:generated_house
				}
				add_to_list = not_dynastic_kiddos
			}
			every_in_list = {
				list = not_dynastic_kiddos
				agot_set_parent_house_effect = yes
			}
		}
	}
}