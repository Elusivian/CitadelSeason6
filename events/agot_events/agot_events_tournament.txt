# agot Tournament decision by Ronko

namespace = agot_tourney

agot_tourney.99 = {  # start event for Dukes
	type = character_event
	title = agot_tourney.99.t
	desc = agot_tourney.99.desc

	theme = feast_activity

	left_portrait = {
		character = root
		animation = happiness
	}

	immediate = {
		save_scope_as = host

		capital_province = {
			save_scope_as = host_location
		}
	}

	option = {
		name = agot_tourney.99.a
		custom_tooltip = agot_tourney.99.a.tt
		trigger_event = {
			id = agot_tourney.1
		}

		ai_chance = {
			base = 100
			ai_value_modifier = {
				ai_greed = 0.5
			}
		}
	}

	option = {
		name = agot_tourney.99.b

		trigger = {
			gold >= 150
		}

		add_character_flag = king_tier_tournament
		add_prestige = 250
		remove_short_term_gold = 150

		trigger_event = {
			id = agot_tourney.1
		}

		ai_chance = {
			base = 100
			ai_value_modifier = {
				ai_sociability = 0.5
			}
		}
	}
}

agot_tourney.1 = {  # start event
	type = character_event
	title = agot_tourney.1.t
	desc = agot_tourney.1.desc

	theme = feast_activity

	left_portrait = {
		character = root
		animation = happiness
	}

	immediate = {
		save_scope_as = host

		capital_province = {
			save_scope_as = host_location
		}

		if = {
			limit = {
				any_courtier_or_guest = {
					is_available_healthy_adult = yes
					NOT = { has_character_flag = attending_tournament }
					NOT = { has_character_flag = holding_epic_tournament }
					OR = {
						is_agot_knight_trigger = yes
						AND = {
							is_landed = yes
							has_dynasty = yes
						}
						AND = {
							prowess > 8
							has_dynasty = yes
							is_landed = no
						}
						prowess > 15
					}

					NOT = { has_government = theocracy_government }
					NOT = { has_trait = kingsguard }
					NOT = { has_trait = dwarf }
					NOT = { this = scope:host }

					faith = {
						has_doctrine = tenet_knighthood
					}
					is_male = yes

					scope:host = {
						NOT = {
							is_target_in_variable_list = {
								name = potential_tourney_participants
								target = prev
							}
						}
					}
				}
			}

			every_courtier_or_guest = {
				limit = {
					is_available_healthy_adult = yes
					NOT = { has_character_flag = attending_tournament }
					NOT = { has_character_flag = holding_epic_tournament }
					OR = {
						is_agot_knight_trigger = yes
						AND = {
							is_landed = yes
							has_dynasty = yes
						}
						AND = {
							prowess > 8
							has_dynasty = yes
							is_landed = no
						}
						prowess > 15
					}

					NOT = { has_government = theocracy_government }
					NOT = { has_trait = kingsguard }
					NOT = { has_trait = dwarf }
					NOT = { this = scope:host }

					faith = {
						has_doctrine = tenet_knighthood
					}

					is_male = yes

					scope:host = {
						NOT = {
							is_target_in_variable_list = {
								name = potential_tourney_participants
								target = prev
							}
						}
					}
				}
				scope:host = {
					add_to_variable_list = {
						name = potential_tourney_participants
						target = prev
					}
				}
			}
		}

		if = {
			limit = {
				AND = {
					highest_held_title_tier = tier_duchy
					liege = { highest_held_title_tier = tier_kingdom }
					has_character_flag = king_tier_tournament
					liege = {
						any_vassal_or_below = {
							is_available_healthy_adult = yes
							NOT = { has_character_flag = attending_tournament }
							NOT = { has_character_flag = holding_epic_tournament }
							OR = {
								is_agot_knight_trigger = yes
								AND = {
									is_landed = yes
									has_dynasty = yes
								}
								AND = {
									prowess > 8
									has_dynasty = yes
									is_landed = no
								}
								prowess > 15
							}

							NOT = { has_government = theocracy_government }
							NOT = { has_trait = kingsguard }
							NOT = { has_trait = dwarf }

							faith = {
								has_doctrine = tenet_knighthood
							}

							is_male = yes

							scope:host = {
								NOT = {
									is_target_in_variable_list = {
										name = potential_tourney_participants
										target = prev
									}
								}
							}
						}
					}
				}
			}
			liege = {
				every_vassal_or_below = {
					limit = {
						is_available_healthy_adult = yes
						NOT = { has_character_flag = attending_tournament }
						NOT = { has_character_flag = holding_epic_tournament }
						OR = {
							is_agot_knight_trigger = yes
							AND = {
								is_landed = yes
								has_dynasty = yes
							}
							AND = {
								prowess > 8
								has_dynasty = yes
								is_landed = no
							}
							prowess > 15
						}

						NOT = { has_government = theocracy_government }
						NOT = { has_trait = kingsguard }
						NOT = { has_trait = dwarf }

						faith = {
							has_doctrine = tenet_knighthood
						}

						is_male = yes

						scope:host = {
							NOT = {
								is_target_in_variable_list = {
									name = potential_tourney_participants
									target = prev
								}
							}
						}
					}
					scope:host = {
						add_to_variable_list = {
							name = potential_tourney_participants
							target = prev
						}
					}
				}
			}
		}

		if = {	 # regional tourney of a Duke, only inviting people from neighbouring duchies/counties
			limit = {
				AND = {
					highest_held_title_tier = tier_duchy
					NOT = { has_character_flag = king_tier_tournament }
					#liege = { highest_held_title_tier = tier_kingdom }

					primary_title = {
						any_in_de_jure_hierarchy = {
							OR = {
								any_title_to_title_neighboring_and_across_water_duchy = {
									AND = {
										exists = holder
										holder = {
											AND = {
												any_liege_or_above = { root.liege = this }
												any_vassal_or_below = {
													NOT = { has_character_flag = attending_tournament }
													NOT = { has_character_flag = holding_epic_tournament }
													is_available_healthy_adult = yes
													OR = {
														is_agot_knight_trigger = yes
														AND = {
															is_landed = yes
															has_dynasty = yes
														}
														AND = {
															prowess > 8
															has_dynasty = yes
															is_landed = no
														}
														prowess > 15
													}

													NOT = { has_government = theocracy_government }
													NOT = { has_trait = kingsguard }
													NOT = { has_trait = dwarf }

													faith = {
														has_doctrine = tenet_knighthood
													}

													is_male = yes

													scope:host = {
														NOT = {
															is_target_in_variable_list = {
																name = potential_tourney_participants
																target = prev
															}
														}
													}
												}
											}
										}
									}
								}
								any_title_to_title_neighboring_and_across_water_county = {
									AND = {
										exists = holder
										holder = {
											AND = {
												any_liege_or_above = { root.liege = this }
												any_vassal_or_below = {
													NOT = { has_character_flag = attending_tournament }
													NOT = { has_character_flag = holding_epic_tournament }
													is_available_healthy_adult = yes
													OR = {
														is_agot_knight_trigger = yes
														AND = {
															is_landed = yes
															has_dynasty = yes
														}
														AND = {
															prowess > 8
															has_dynasty = yes
															is_landed = no
														}
														prowess > 15
													}

													NOT = { has_government = theocracy_government }
													NOT = { has_trait = kingsguard }
													NOT = { has_trait = dwarf }

													faith = {
														has_doctrine = tenet_knighthood
													}

													is_male = yes

													scope:host = {
														NOT = {
															is_target_in_variable_list = {
																name = potential_tourney_participants
																target = prev
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
			primary_title = {
				every_in_de_jure_hierarchy = {
					every_title_to_title_neighboring_and_across_water_duchy = {
						if = {
							limit = { exists = holder }
							holder = {
								if = {
									limit = {
										any_liege_or_above = { root.liege = this }
										highest_held_title_tier = tier_duchy
										NOT = { has_character_flag = attending_tournament }
										NOT = { has_character_flag = holding_epic_tournament }
										is_available_healthy_adult = yes
										OR = {
											is_agot_knight_trigger = yes
											AND = {
												is_landed = yes
												has_dynasty = yes
											}
											AND = {
												prowess > 8
												has_dynasty = yes
												is_landed = no
											}
											prowess > 15
										}

										NOT = { has_government = theocracy_government }
										NOT = { has_trait = kingsguard }
										NOT = { has_trait = dwarf }

										faith = {
											has_doctrine = tenet_knighthood
										}

										is_male = yes

										scope:host = {
											NOT = {
												is_target_in_variable_list = {
													name = potential_tourney_participants
													target = prev
												}
											}
										}
									}
									scope:host = {
										add_to_variable_list = {
											name = potential_tourney_participants
											target = prev
										}
									}
								}
								if = {
									limit = {
										highest_held_title_tier = tier_duchy
									}
									every_vassal_or_below = {
										limit = {
											any_liege_or_above = { root.liege = this }
											NOT = { has_character_flag = attending_tournament }
											NOT = { has_character_flag = holding_epic_tournament }
											is_available_healthy_adult = yes
											OR = {
												is_agot_knight_trigger = yes
												AND = {
													is_landed = yes
													has_dynasty = yes
												}
												AND = {
													prowess > 8
													has_dynasty = yes
													is_landed = no
												}
												prowess > 15
											}

											NOT = { has_government = theocracy_government }
											NOT = { has_trait = kingsguard }
											NOT = { has_trait = dwarf }

											faith = {
												has_doctrine = tenet_knighthood
											}

											is_male = yes

											scope:host = {
												NOT = {
													is_target_in_variable_list = {
														name = potential_tourney_participants
														target = prev
													}
												}
											}
										}
										scope:host = {
											add_to_variable_list = {
												name = potential_tourney_participants
												target = prev
											}
										}
									}
								}
							}
						}
					}
					every_title_to_title_neighboring_and_across_water_county = {
						holder = {
							if = {
								limit = {
									any_liege_or_above = { root.liege = this }
									NOT = { has_character_flag = attending_tournament }
									NOT = { has_character_flag = holding_epic_tournament }
									is_available_healthy_adult = yes
									OR = {
										is_agot_knight_trigger = yes
										AND = {
											is_landed = yes
											has_dynasty = yes
										}
										AND = {
											prowess > 8
											has_dynasty = yes
											is_landed = no
										}
										prowess > 15
									}

									NOT = { has_government = theocracy_government }
									NOT = { has_trait = kingsguard }
									NOT = { has_trait = dwarf }

									faith = {
										has_doctrine = tenet_knighthood
									}

									is_male = yes

									scope:host = {
										NOT = {
											is_target_in_variable_list = {
												name = potential_tourney_participants
												target = prev
											}
										}
									}
								}
								scope:host = {
									add_to_variable_list = {
										name = potential_tourney_participants
										target = prev
									}
								}
							}
							if = {
								limit = {
									highest_held_title_tier = tier_county
									any_liege_or_above = { root.liege = this }
								}
								every_vassal_or_below = {
									limit = {
										NOT = { has_character_flag = attending_tournament }
										NOT = { has_character_flag = holding_epic_tournament }
										is_available_healthy_adult = yes
										OR = {
											is_agot_knight_trigger = yes
											AND = {
												is_landed = yes
												has_dynasty = yes
											}
											AND = {
												prowess > 8
												has_dynasty = yes
												is_landed = no
											}
											prowess > 15
										}

										NOT = { has_government = theocracy_government }
										NOT = { has_trait = kingsguard }
										NOT = { has_trait = dwarf }

										faith = {
											has_doctrine = tenet_knighthood
										}

										is_male = yes

										scope:host = {
											NOT = {
												is_target_in_variable_list = {
													name = potential_tourney_participants
													target = prev
												}
											}
										}
									}
									scope:host = {
										add_to_variable_list = {
											name = potential_tourney_participants
											target = prev
										}
									}
								}
							}
						}
					}
				}
			}
		}

		if = {
			limit = {
				AND = {
					highest_held_title_tier > tier_duchy
					any_vassal_or_below = {
						is_available_healthy_adult = yes
						NOT = { has_character_flag = attending_tournament }
						NOT = { has_character_flag = holding_epic_tournament }
						OR = {
							is_agot_knight_trigger = yes
							AND = {
								is_landed = yes
								has_dynasty = yes
							}
							AND = {
								prowess > 8
								has_dynasty = yes
								is_landed = no
							}
							prowess > 15
						}

						NOT = { has_government = theocracy_government }
						NOT = { has_trait = kingsguard }
						NOT = { has_trait = dwarf }

						faith = {
							has_doctrine = tenet_knighthood
						}

						is_male = yes

						scope:host = {
							NOT = {
								is_target_in_variable_list = {
									name = potential_tourney_participants
									target = prev
								}
							}
						}
					}
				}
			}
			every_vassal_or_below = {
				limit = {
					is_available_healthy_adult = yes
					NOT = { has_character_flag = attending_tournament }
					NOT = { has_character_flag = holding_epic_tournament }
					OR = {
						is_agot_knight_trigger = yes
						AND = {
							is_landed = yes
							has_dynasty = yes
						}
						AND = {
							prowess > 8
							has_dynasty = yes
							is_landed = no
						}
						prowess > 15
					}

					NOT = { has_government = theocracy_government }
					NOT = { has_trait = kingsguard }
					NOT = { has_trait = dwarf }

					faith = {
						has_doctrine = tenet_knighthood
					}

					is_male = yes

					scope:host = {
						NOT = {
							is_target_in_variable_list = {
								name = potential_tourney_participants
								target = prev
							}
						}
					}
				}
				scope:host = {
					add_to_variable_list = {
						name = potential_tourney_participants
						target = prev
					}
				}
			}
		}

		if = {
			limit = {
				AND = {
					highest_held_title_tier = tier_duchy
					liege = {
						is_available_healthy_adult = yes
						NOT = { has_character_flag = attending_tournament }
						NOT = { has_character_flag = holding_epic_tournament }
						OR = {
							is_agot_knight_trigger = yes
							AND = {
								is_landed = yes
								has_dynasty = yes
							}
							AND = {
								prowess > 8
								has_dynasty = yes
								is_landed = no
							}
							prowess > 15
						}

						NOT = { has_government = theocracy_government }
						NOT = { has_trait = kingsguard }
						NOT = { has_trait = dwarf }

						faith = {
							has_doctrine = tenet_knighthood
						}

						is_male = yes

						scope:host = {
							NOT = {
								is_target_in_variable_list = {
									name = potential_tourney_participants
									target = prev
								}
							}
						}
					}
				}
			}
			liege = {
				scope:host = {
					add_to_variable_list = {
						name = potential_tourney_participants
						target = prev
					}
				}
			}
		}

		if = {
			limit = {
				AND = {
					highest_held_title_tier = tier_kingdom
					liege = { highest_held_title_tier = tier_empire }
					liege = {
						any_vassal_or_below = {
							is_available_healthy_adult = yes
							NOT = { has_character_flag = attending_tournament }
							NOT = { has_character_flag = holding_epic_tournament }
							OR = {
								is_agot_knight_trigger = yes
								AND = {
									is_landed = yes
									has_dynasty = yes
								}
								AND = {
									prowess > 8
									has_dynasty = yes
									is_landed = no
								}
								prowess > 15
							}

							NOT = { has_government = theocracy_government }
							NOT = { has_trait = kingsguard }
							NOT = { has_trait = dwarf }

							faith = {
								has_doctrine = tenet_knighthood
							}

							is_male = yes

							scope:host = {
								NOT = {
									is_target_in_variable_list = {
										name = potential_tourney_participants
										target = prev
									}
								}
							}
						}
					}
				}
			}

			liege = {
				every_vassal_or_below = {
					limit = {
						is_available_healthy_adult = yes
						NOT = { has_character_flag = attending_tournament }
						NOT = { has_character_flag = holding_epic_tournament }
						OR = {
							is_agot_knight_trigger = yes
							AND = {
								is_landed = yes
								has_dynasty = yes
							}
							AND = {
								prowess > 8
								has_dynasty = yes
								is_landed = no
							}
							prowess > 15
						}

						NOT = { has_government = theocracy_government }
						NOT = { has_trait = kingsguard }
						NOT = { has_trait = dwarf }

						faith = {
							has_doctrine = tenet_knighthood
						}

						is_male = yes

						scope:host = {
							NOT = {
								is_target_in_variable_list = {
									name = potential_tourney_participants
									target = prev
								}
							}
						}
					}
					scope:host = {
						add_to_variable_list = {
							name = potential_tourney_participants
							target = prev
						}
					}
				}
			}
		}
	}
	option = {
		name = agot_tourney.1.a

		scope:host = {
			every_in_list = {
				variable = potential_tourney_participants
				limit = {
					is_alive = yes
					NOT = { this = scope:host }
					is_at_war = no
					AND = {
						exists = liege
						liege = { is_at_war = no }
					}
					NOT = { has_character_flag = no_tourneys }
				}
				trigger_event = {
					id = agot_tourney.2   #invite possible participants
					days = 1
				}
			}
		}

		ai_chance = {
			base = 100
		}
	}

	option = {
		name = agot_tourney.1.b
		custom_tooltip = agot_tourney.1.b.tt
		scope:host = {
			every_in_list = {
				variable = potential_tourney_participants
				limit = {
					is_alive = yes
					NOT = { this = scope:host }
					is_at_war = no
					AND = {
						exists = liege
						liege = { is_at_war = no }
					}
					NOT = { has_character_flag = no_tourneys }
				}
				trigger_event = {
					id = agot_tourney.2   #invite possible participants
					days = 1
				}
			}
			add_character_flag = Only_finale
		}

		ai_chance = {
			base = 0
		}
	}

	after = {
		scope:host = {
			trigger_event = {
				id = agot_tourney.3   #Start the tournament
				days = 15
			}
		}
	}
}

agot_tourney.2 = {    #invite possible participants
	type = letter_event
	opening = agot_tourney.2.t
	desc = agot_tourney.2.desc
	sender = scope:host

	#theme = default
	#override_background = {
	#	reference = courtyard
	#}
	#left_portrait = {
	#	character = root
	#	animation = happiness
	#}

	trigger = {
		scope:host = {
			is_at_war = no
			liege = { is_at_war = no }
		}
	}

	option = {   #yes
		name = agot_tourney.2.a


		scope:host = {
			add_to_variable_list = {
				name = tourney_participants
				target = prev
			}
		}
		add_character_flag = attending_tournament

		if = {
			limit = {
				scope:host = {
					has_character_flag = king_tier_tournament
				}
			}
			add_prestige = 100
		}

		else = {
			add_prestige = 50
		}

		ai_chance = {
			base = 100

			ai_value_modifier = {
				ai_energy = 0.5
				ai_sociability = 0.5
			}

			modifier = {
				add = 25
				OR = {
						#has_trait = knight
						#has_trait = education_martial_prowess_1
						#has_trait = education_martial_prowess_2
						has_trait = education_martial_prowess_3
						has_trait = education_martial_prowess_4
						has_trait = education_martial_prowess_5
				}
			}

			modifier = {
				add = 50
				prowess > 10
			}

			modifier = {
				add = 100
				prowess > 15
			}

			modifier = {
				scope:host = {
					highest_held_title_tier > tier_duchy
				}
				factor = 0.5
			}

			modifier = {
				age > 60
				factor = 0.5
			}

			modifier = {
				age > 70
				factor = 0.5
			}

			modifier = {
				highest_held_title_tier > tier_duchy
				scope:host = {
					highest_held_title_tier = tier_duchy
				}
				factor = 0.25
			}
		}
	}

	option = {   #no
		name = agot_tourney.2.b

		ai_chance = {
			base = 100

			ai_value_modifier = {
				ai_energy = -0.5
				ai_sociability = -0.5
			}

			modifier = {
				add = 100
				has_trait_rank = {
					trait = wounded
					rank > 0
				}
			}

			modifier = {
				add = 50
				NOT = {
					OR = {
						is_agot_knight_trigger = yes
						has_trait = education_martial_prowess_1
						has_trait = education_martial_prowess_2
						has_trait = education_martial_prowess_3
						has_trait = education_martial_prowess_4
						has_trait = education_martial_prowess_5
					}
				}
			}

			modifier = {
				add = 100
				prowess < 10
			}

			modifier = {
				add = 200
				prowess <= 8
			}

			modifier = {
				factor = 2.5
				prowess < 18
				scope:host = {
					AND = {
						has_character_flag = king_tier_tournament
						highest_held_title_tier = tier_duchy
					}
				}
			}

			modifier = {
				factor = 3
				prowess < 15
				scope:host = {
					AND = {
						has_character_flag = king_tier_tournament
						highest_held_title_tier = tier_duchy
					}
				}
			}

			modifier = {
				factor = 3
				prowess <= 10
				scope:host = {
					AND = {
						has_character_flag = king_tier_tournament
						highest_held_title_tier = tier_duchy
					}
				}
			}

			modifier = {
				factor = 2
				highest_held_title_tier > tier_duchy
				scope:host = {
					highest_held_title_tier = tier_duchy
				}
			}

			modifier = {
				factor = 2.5
				prowess < 18
				scope:host = {
					highest_held_title_tier > tier_duchy
				}
			}

			modifier = {
				factor = 3
				prowess < 15
				scope:host = {
					highest_held_title_tier > tier_duchy
				}
			}

			modifier = {
				factor = 3
				prowess <= 10
				scope:host = {
					highest_held_title_tier > tier_duchy
				}
			}

			modifier = {
				factor = 3
				is_landed = no
				scope:host = {
					highest_held_title_tier > tier_duchy
				}
			}

			modifier = {
				scope:host = {
					highest_held_title_tier > tier_duchy
				}
				factor = 10
			}

		}
	}

	option = {   #no tourneys for me
		name = agot_tourney.2.c
		custom_tooltip = agot_tourney.2.c.tt

		add_character_flag = no_tourneys

		ai_chance = {
			base = 0
		}
	}
}

agot_tourney.3 = {   #Start the tournament
	type = character_event
	title = agot_tourney.3.t
	desc = agot_tourney.3.desc

	theme = default
	override_background = {
		reference = courtyard
	}
	left_portrait = {
		character = root
		animation = happiness
	}

	trigger = {
		is_at_war = no
		liege = { is_at_war = no }
	}

	option = {   # no war, all good, start
		name = agot_tourney.3.a

		scope:host = {
			every_in_list = {
				variable = tourney_participants
				limit = {
					is_alive = yes
					NOT = { this = scope:host }
				}
				trigger_event = {
					id = agot_tourney.31   #welcome all participants
				}
			}
		}

		trigger_event = {
			id = agot_tourney.4   #check the count of willing participants
			days = 1
		}
		ai_chance = {
			base = 100
		}
	}
}

agot_tourney.31 = {   #welcome all participants
	type = character_event
	title = agot_tourney.31.t
	desc = agot_tourney.31.desc

	theme = default
	override_background = {
		reference = army_camp
	}
	left_portrait = {
		character = root
		animation = happiness
	}

	option = {
		name = agot_tourney.31.a

		ai_chance = {
			base = 100
		}
	}
}

agot_tourney.4 = {     #check the count of willing participants
	type = character_event
	hidden = yes

	immediate = {
		if = {
			limit = {
				scope:host = {
					has_variable_list = tourney_participants
					any_in_list = {
						variable = tourney_participants
						is_alive = yes
						NOT = { has_character_flag = removed }
						count < 4
					}
				}
			}
			scope:host = {
				every_in_list = {
					variable = tourney_participants
					trigger_event = {
						id = agot_tourney.5		 #cancel the tourney due to lack of participants, Message send to all but the host
					}
				}
			}
			trigger_event = {
				id = agot_tourney.52  #cancel the tourney due to lack of participants, Message send to the host
				days = 1
			}
		}

		else_if = {
			limit = {
				scope:host = {
					has_variable_list = tourney_participants
					OR = {
						AND = {
							has_character_flag = king_tier_tournament
							any_in_list = {
								variable = tourney_participants
								is_alive = yes
								NOT = { has_character_flag = removed }
								count > 16    # may be changed later
							}
						}
						AND = {
							NOT = {has_character_flag = king_tier_tournament}
							any_in_list = {
								variable = tourney_participants
								is_alive = yes
								NOT = { has_character_flag = removed }
								count > 16
							}
						}
					}
				}
			}

			scope:host = {
				random_in_list = {
					variable = tourney_participants
					limit = {
						is_alive = yes
						NOT = { has_character_flag = removed }
					}
					weight = {
						base = 100
						modifier = {
							factor = { # Prowess directly reduces chance of beeing removed
								value = 40
								subtract = prowess
								divide = 40
								min = 0.1
							}
						}
					}
					trigger_event = {
						id = agot_tourney.8	  #randomly remove one participant
					}
				}
			}

			trigger_event = {
				id = agot_tourney.4    #reiteration
				days = 1
			}

		}

		else_if = {
			limit = {
				scope:host = {
					has_variable_list = tourney_participants
					OR = {
						AND = {
							has_character_flag = king_tier_tournament
							any_in_list = {
								variable = tourney_participants
								is_alive = yes
								NOT = { has_character_flag = removed }
								count <= 16   # may be changed later
							}
						}
						AND = {
							NOT = {has_character_flag = king_tier_tournament}
							any_in_list = {
								variable = tourney_participants
								is_alive = yes
								NOT = { has_character_flag = removed }
								count <= 16
							}
						}
					}
				}
			}

			trigger_event = {
				id = agot_tourney.9	   #proceed the tourney
				days = 1
			}
		}
	}
}


agot_tourney.5 = {    #cancel the tourney due to lack of participants, Message send to all but the host
	type = character_event
	title = agot_tourney.5.t
	desc = agot_tourney.5.desc

	theme = default
	override_background = {
		reference = courtyard
	}
	left_portrait = {
		character = root
		animation = worry
	}

	option = {
		name = agot_tourney.5.a
		ai_chance = {
			base = 100
		}
	}
	after = {
		remove_character_flag = attending_tournament
		remove_character_flag = OnlyMyJousts
		remove_character_flag = removed
		remove_character_flag = lost_tournament
		remove_character_flag = jouster1
		remove_character_flag = jouster2
		remove_character_flag = winner
		remove_character_flag = placed_bet_jouster1
		remove_character_flag = placed_bet_jouster2
		remove_character_flag = Only_finale
		remove_character_flag = leaving
	}
}

agot_tourney.52 = {    #cancel the tourney due to lack of participants, Message send to the host
	type = character_event
	title = agot_tourney.52.t
	desc = agot_tourney.52.desc

	theme = default
	override_background = {
		reference = courtyard
	}
	left_portrait = {
		character = root
		animation = worry
	}

	trigger = {
		is_at_war = no
		liege = { is_at_war = no }
	}

	option = {
		name = agot_tourney.52.a

		if = {
			limit = {
				has_character_flag = king_tier_tournament
			}
			add_gold = 150
			add_prestige = -500
		}

		else = {
			add_gold = 75
			add_prestige = -250
		}

		ai_chance = {
			base = 100
		}
	}

	after = {
		scope:host = {
			remove_character_flag = holding_epic_tournament
			remove_character_flag = Only_finale
			remove_character_flag = king_tier_tournament
			remove_character_flag = placed_bet_jouster1
			remove_character_flag = placed_bet_jouster2
			clear_variable_list = tourney_participants
			clear_variable_list = potential_tourney_participants
		}
	}
}

agot_tourney.53 = {    #cancel the tourney due to death of host
	type = character_event
	title = agot_tourney.53.t
	desc = agot_tourney.53.desc

	theme = default
	override_background = {
		reference = courtyard
	}
	left_portrait = {
		character = root
		animation = worry
	}

	option = {
		name = agot_tourney.53.a
		ai_chance = {
			base = 100
		}
	}
	after = {
		remove_character_flag = attending_tournament
		remove_character_flag = OnlyMyJousts
		remove_character_flag = removed
		remove_character_flag = lost_tournament
		remove_character_flag = jouster1
		remove_character_flag = jouster2
		remove_character_flag = winner
		remove_character_flag = placed_bet_jouster1
		remove_character_flag = placed_bet_jouster2
		remove_character_flag = Only_finale
		remove_character_flag = leaving
	}
}

agot_tourney.54 = {    #cancel the tourney due to started war - host
	type = character_event
	title = agot_tourney.54.t
	desc = agot_tourney.54.desc

	theme = default
	override_background = {
		reference = courtyard
	}
	left_portrait = {
		character = root
		animation = worry
	}

	immediate = {
		remove_character_flag = holding_epic_tournament
	}

	option = {
		name = agot_tourney.54.a

		if = {
			limit = {
				has_character_flag = king_tier_tournament
			}
			add_gold = 150
			add_prestige = -500
		}

		else = {
			add_gold = 75
			add_prestige = -250
		}

		ai_chance = {
			base = 100
		}
	}
	after = {
		remove_character_flag = Only_finale
		remove_character_flag = king_tier_tournament
		remove_character_flag = placed_bet_jouster1
		remove_character_flag = placed_bet_jouster2
		clear_variable_list = tourney_participants
		clear_variable_list = potential_tourney_participants
	}
}

agot_tourney.55 = {    #cancel the tourney due to started war - participants
	type = character_event
	title = agot_tourney.55.t
	desc = agot_tourney.55.desc

	theme = default
	override_background = {
		reference = courtyard
	}
	left_portrait = {
		character = root
		animation = worry
	}

	option = {
		name = agot_tourney.55.a
		ai_chance = {
			base = 100
		}
	}
	after = {
		remove_character_flag = attending_tournament
		remove_character_flag = OnlyMyJousts
		remove_character_flag = removed
		remove_character_flag = lost_tournament
		remove_character_flag = jouster1
		remove_character_flag = jouster2
		remove_character_flag = winner
		remove_character_flag = placed_bet_jouster1
		remove_character_flag = placed_bet_jouster2
		remove_character_flag = Only_finale
		remove_character_flag = leaving
	}
}

agot_tourney.8 = {    #randomly remove one participant
	type = character_event
	title = agot_tourney.8.t
	desc = agot_tourney.8.desc

	theme = default
	override_background = {
		reference = army_camp
	}
	left_portrait = {
		character = root
		animation = worry
	}

	option = {
		name = agot_tourney.8.a
		add_character_flag = removed

		if = {
			limit = {
				scope:host = {
					has_character_flag = king_tier_tournament
				}
			}
			add_prestige = -100
		}

		else = {
			add_prestige = -50
		}

		ai_chance = {
			base = 0
		}
	}
	option = {
		name = agot_tourney.8.b
		custom_tooltip = agot_tourney.8.b.tt

		add_character_flag = removed
		add_character_flag = OnlyMyJousts

		if = {
			limit = {
				scope:host = {
					has_character_flag = king_tier_tournament
				}
			}
			add_prestige = -100
		}

		else = {
			add_prestige = -50
		}

		ai_chance = {
			base = 100
		}
	}
}

agot_tourney.9 = {     #proceed the tourney
	type = character_event
	title = agot_tourney.9.t
	desc = agot_tourney.9.desc

	theme = default
	override_background = {
		reference = army_camp
	}
	left_portrait = {
		character = root
		animation = happiness
	}

	trigger = {
		is_at_war = no
		liege = { is_at_war = no }
	}

	immediate = {
		scope:host = {
			every_in_list = {
				variable = tourney_participants
				limit = {
					is_alive = yes
					NOT = { has_character_flag = removed }
				}
				trigger_event = {
					id = agot_tourney.6   #welcome all remaining participants
				}
			}
		}
	}
	option = {
		name = agot_tourney.9.a
		ai_chance = {
			base = 100
		}
	}
	after = {
		trigger_event = {
			id = agot_tourney.7    #generate the next matchup
			days = 1
		}
	}
}

agot_tourney.7 = {	  #generate the next matchup
	type = character_event
	hidden = yes

	trigger = {
		is_at_war = no
		liege = { is_at_war = no }
	}

	immediate = {

		if = {
			limit = {
				scope:host = {
					has_variable_list = tourney_participants
					any_in_list = {
						variable = tourney_participants
						is_alive = yes
						NOT = { has_character_flag = removed }
						NOT = { has_character_flag = lost_tournament }
						NOT = { this = scope:host }
						count > 1
					}
				}
			}
			scope:host = {
				random_in_list = {
					variable = tourney_participants
					limit = {
						is_alive = yes
						NOT = { has_character_flag = removed }
						NOT = { has_character_flag = lost_tournament }
						NOT = { this = scope:host }
					}

					weight = {   #results in bracket elimination, independent from the number of participants
						base = 1
						modifier = {
							factor = 0
							has_character_flag = next_round
							scope:host = {
								any_in_list = {
									variable = tourney_participants
									is_alive = yes
									NOT = { has_character_flag = next_round }
									NOT = { has_character_flag = removed }
									NOT = { has_character_flag = lost_tournament }
									NOT = { this = scope:host }
									count > 0
								}
							}
						}
					}

					add_character_flag = jouster1
					save_scope_as = jouster1
				}
			}
			scope:host = {
				random_in_list = {
					variable = tourney_participants
					limit = {
						is_alive = yes
						NOT = { has_character_flag = removed }
						NOT = { has_character_flag = lost_tournament }
						NOT = { has_character_flag = jouster1 }
						NOT = { this = scope:host }
					}

					weight = {   #results in bracket elimination, independent from the number of participants
						base = 1
						modifier = {
							factor = 0
							has_character_flag = next_round
							scope:host = {
								any_in_list = {
									variable = tourney_participants
									is_alive = yes
									NOT = { has_character_flag = next_round }
									NOT = { has_character_flag = removed }
									NOT = { has_character_flag = lost_tournament }
									NOT = { this = scope:host }
									count > 0
								}
							}
						}
					}

					add_character_flag = jouster2
					save_scope_as = jouster2
				}
			}

			scope:host = {
				every_in_list = {
					variable = tourney_participants
					limit = {
						is_alive = yes
						OR = {
							NOT = { has_character_flag = OnlyMyJousts }
							scope:jouster1 = this
							scope:jouster2 = this
						}
					}
					trigger_event = {
						id = agot_tourney.10   #inform all participants about the next matchup
					}
				}
			}

			if = {
				limit = {
					has_character_flag = Only_finale
					scope:host = {
						has_variable_list = tourney_participants
						any_in_list = {
							variable = tourney_participants
							is_alive = yes
							NOT = { has_character_flag = removed }
							NOT = { has_character_flag = lost_tournament }
							NOT = { this = scope:host }
							count > 4
						}
					}
				}
				trigger_event = {
					id = agot_tourney.1111   #don't inform the host about the next matchup and perform the joust.
					days = 1
				}
			}
			else = {
				trigger_event = {
					id = agot_tourney.11   #inform the host about the next matchup and perform the joust.
					days = 1
				}
			}
		}

		else_if = {
			limit = {
				scope:host = {
					has_variable_list = tourney_participants
					any_in_list = {
						variable = tourney_participants
						is_alive = yes
						NOT = { has_character_flag = removed }
						NOT = { has_character_flag = lost_tournament }
						NOT = { this = scope:host }
						count = 1
					}
				}
			}

			scope:host = {
				every_in_list = {
					variable = tourney_participants
					limit = {
						NOT = { has_character_flag = removed }
						NOT = { has_character_flag = lost_tournament }
						NOT = { this = scope:host }
						is_alive = yes
					}
					add_character_flag = winner
					save_scope_as = winner
				}
			}

			scope:loser = {
				trigger_event = {
					id = agot_tourney.151   #inform the second place and handout prize money + prestige
				}
			}

			scope:host = {
				every_in_list = {
					variable = tourney_participants
					limit = {
						is_alive = yes
						NOT = { has_character_flag = winner }
					}
					trigger_event = {
						id = agot_tourney.14   #inform all participants but the winner about the winner of the tournament
					}
				}
			}

			scope:winner = {
				trigger_event = {
					id = agot_tourney.15   #inform the winner and handout prize money + prestige
				}
			}

			trigger_event = {
				id = agot_tourney.16   #inform the host about the winner of the tournament and finish
				days = 1
			}
		}
	}
}

agot_tourney.6 = {     #welcome all remaining participants
	type = character_event
	title = agot_tourney.6.t
	desc = agot_tourney.6.desc

	theme = default
	override_background = {
		reference = army_camp
	}
	left_portrait = {
		character = root
		animation = happiness
	}

	immediate = {
		remove_character_flag = next_round
	}

	option = {
		name = agot_tourney.6.a
		ai_chance = {
			base = 0
		}
	}
	option = {
		name = agot_tourney.6.b
		custom_tooltip = agot_tourney.6.b.tt

		add_character_flag = OnlyMyJousts
		ai_chance = {
			base = 100
		}
	}
}

agot_tourney.10 = {   #inform all participants about the next matchup
	type = character_event
	title = agot_tourney.10.t
	desc = agot_tourney.10.desc

	theme = physical_health
	override_background = {
		reference = army_camp
	}

	left_portrait = {
		character = scope:jouster1
		animation = war_attacker #happiness
	}
	right_portrait = {
		character = scope:jouster2
		animation = war_attacker #happiness
	}

	immediate = {
		set_variable = {
			name = bet
			value = 0
		}
	}

	option = {
		name = agot_tourney.10.a
		ai_chance = {
			base = 100
		}
	}
	option = {
		name = agot_tourney.10.b
		custom_tooltip = agot_tourney.10.b.tt

		trigger = {
			gold >= minor_gold_value
		}

		trigger_event = {      #place a bet
			id = agot_tourney.101
		}
		ai_chance = {
			base = 0
		}
	}
	option = {
		name = agot_tourney.10.c

		trigger = {
			OR = {
				this = scope:jouster1
				this = scope:jouster2
			}
		}

		add_character_flag = leaving
		add_character_flag = OnlyMyJousts

		ai_chance = {
			base = 0
		}
	}
}

agot_tourney.14 = {    #inform all participants but the winner about the winner of the tournament
	type = character_event
	title = agot_tourney.14.t
	desc = agot_tourney.14.desc

	theme = feast_activity
	#override_background = {
	#	reference = army_camp
	#}

	left_portrait = {
		character = scope:winner
		animation = happiness
	}

	immediate = {
		remove_character_flag = next_round
	}

	option = {
		name = agot_tourney.14.a

		add_opinion = {
			target = scope:host
			modifier = hosted_a_tourney
		}

		remove_character_flag = attending_tournament
		remove_character_flag = OnlyMyJousts
		remove_character_flag = removed
		remove_character_flag = lost_tournament
		remove_character_flag = placed_bet_jouster1
		remove_character_flag = placed_bet_jouster2
		remove_character_flag = Only_finale
		remove_character_flag = leaving

		ai_chance = {
			base = 100
		}
	}
}

agot_tourney.15 = {     #inform the winner and handout prize money + prestige
	type = character_event
	title = agot_tourney.15.t
	desc = agot_tourney.15.desc

	theme = feast_activity
	#override_background = {
	#	reference = army_camp
	#}

	left_portrait = {
		character = scope:winner
		animation = happiness
	}

	immediate = {
		remove_character_flag = next_round
	}

	option = {
		name = agot_tourney.15.a

		create_character_memory = {
			type = agot_tournament_winner
			participants = {
				TourneyHost = scope:host
			}
		}

		if = {
			limit = {
				scope:host = {
					has_character_flag = king_tier_tournament
				}
			}
			add_gold = 100
			add_prestige = 500
		}

		else = {
			add_gold = 50
			add_prestige = 250
		}

		add_character_modifier = {
			modifier = Tourney_Winner
			years = 5
		}

		add_opinion = {
			target = scope:host
			modifier = hosted_a_tourney
		}

		###Added by DYLAN for the purposes of knighting

		# Grant Knighthood to Winners - Matches T&T Winner Effect
		if = {
			limit = {
				agot_has_traits_preventing_knighthood_trigger = no # You do not have any traits preventing this
				scope:host = {
					is_agot_knight_trigger = yes
				}
			}
			custom_tooltip = contest_winner_ceremony_knighthood_tt
			hidden_effect = { agot_tournament_reward_knighthood_prize = { HOST = scope:host WINNER = scope:winner } }
		}

		remove_character_flag = attending_tournament
		remove_character_flag = OnlyMyJousts
		remove_character_flag = removed
		remove_character_flag = lost_tournament
		remove_character_flag = jouster1
		remove_character_flag = jouster2
		remove_character_flag = placed_bet_jouster1
		remove_character_flag = placed_bet_jouster2
		remove_character_flag = Only_finale
		remove_character_flag = leaving

		ai_chance = {
			base = 100
		}
	}

	after = {
		remove_character_flag = attending_tournament
		remove_character_flag = OnlyMyJousts
		remove_character_flag = removed
		remove_character_flag = lost_tournament
		remove_character_flag = jouster1
		remove_character_flag = jouster2
		remove_character_flag = placed_bet_jouster1
		remove_character_flag = placed_bet_jouster2
		remove_character_flag = Only_finale
		remove_character_flag = leaving
	}
}

agot_tourney.151 = {     #inform the second place and handout prize money + prestige
	type = character_event
	title = agot_tourney.151.t
	desc = agot_tourney.151.desc

	theme = feast_activity
	#override_background = {
	#	reference = army_camp
	#}

	left_portrait = {
		character = scope:loser
		animation = happiness
	}

	immediate = {
		remove_character_flag = next_round
	}

	option = {
		name = agot_tourney.151.a

		create_character_memory = {
			type = agot_tournament_second_place
			participants = {
				TourneyHost = scope:host
			}
		}

		if = {
			limit = {
				scope:host = {
					has_character_flag = king_tier_tournament
				}
			}
			add_gold = 50
			add_prestige = 150
		}

		else = {
			add_gold = 25
			add_prestige = 75
		}

		add_character_modifier = {
			modifier = Tourney_Second_Place
			years = 5
		}

		ai_chance = {
			base = 100
		}
	}
}

agot_tourney.16 = {    #inform the host about the winner of the tournament and finish
	type = character_event
	title = agot_tourney.16.t
	desc = agot_tourney.16.desc

	theme = feast_activity
	#override_background = {
	#	reference = army_camp
	#}

	left_portrait = {
		character = scope:winner
		animation = happiness
	}

	trigger = {
		is_at_war = no
		liege = { is_at_war = no }
	}

	option = {
		name = agot_tourney.16.a
		scope:winner = {
			remove_character_flag = winner
		}
		ai_chance = {
			base = 100
		}
	}

	after = {
		scope:host = {
			remove_character_flag = holding_epic_tournament
			remove_character_flag = Only_finale
			remove_character_flag = king_tier_tournament
			remove_character_flag = placed_bet_jouster1
			remove_character_flag = placed_bet_jouster2
			clear_variable_list = tourney_participants
			clear_variable_list = potential_tourney_participants
		}
	}
}

agot_tourney.11 = {    #inform the host about the next matchup and perform the joust.
	type = character_event
	title = agot_tourney.11.t
	desc = agot_tourney.11.desc

	theme = physical_health
	override_background = {
		reference = army_camp
	}

	left_portrait = {
		character = scope:jouster1
		animation = war_attacker #happiness
	}
	right_portrait = {
		character = scope:jouster2
		animation = war_attacker #happiness
	}

	trigger = {
		is_at_war = no
		liege = { is_at_war = no }
	}

	immediate = {
		set_variable = {
			name = bet
			value = 0
		}
	}

	option = {
		name = agot_tourney.11.a

		hidden_effect = {
			trigger_event = {     # recursive master event
				id = agot_tourney.121   # begin joust calculation
			}
		}
		ai_chance = {
			base = 100
		}
	}
	option = {
		name = agot_tourney.11.b
		custom_tooltip = agot_tourney.11.b.tt

		trigger = {
			gold >= minor_gold_value
		}

		trigger_event = {      #place a bet, host
			id = agot_tourney.102
		}
		ai_chance = {
			base = 0
		}
	}
}

agot_tourney.1111 = {    #don't inform the host about the next matchup and perform the joust.
	type = character_event
	hidden = yes

	trigger = {
		is_at_war = no
		liege = { is_at_war = no }
	}

	immediate = {
		scope:host = {
			trigger_event = {     # recursive master event
				id = agot_tourney.121   # begin joust calculation
			}
		}
	}
}

agot_tourney.101 = {    #place a bet, participant
	type = character_event
	title = agot_tourney.101.t
	desc = agot_tourney.101.desc

	theme = stewardship_wealth_focus
	override_background = {
		reference = army_camp
	}

	left_portrait = {
		character = scope:jouster1
		animation = war_attacker #happiness
	}
	right_portrait = {
		character = scope:jouster2
		animation = war_attacker #happiness
	}

	immediate = {
		set_variable = {
			name = bet
			value = minor_gold_value
		}
	}

	option = {     # place bet jouster1
		name = agot_tourney.101.a

		add_character_flag = placed_bet_jouster1

		remove_short_term_gold = minor_gold_value

		change_variable = {
			name = bet
			multiply = scope:jouster2.prowess
		}
		change_variable = {
			name = bet
			divide = scope:jouster1.prowess
		}

		if = {
			limit = {
				scope:jouster2 = {
					any_relation = {
						type = agot_squire
					}
				}
			}
			scope:jouster2 = {
				random_relation = {
					type = agot_squire
					save_temporary_scope_as = squire2
				}
			}

			change_variable = {
				name = bet
				multiply = {
					value = 95
					add = scope:squire2.prowess
					divide = 100
				}
			}
		}

		if = {
			limit = {
				scope:jouster1 = {
					any_relation = {
						type = agot_squire
					}
				}
			}
			scope:jouster1 = {
				random_relation = {
					type = agot_squire
					save_temporary_scope_as = squire1
				}
			}

			change_variable = {
				name = bet
				divide = {
					value = 95
					add = scope:squire1.prowess
					divide = 100
				}
			}
		}

		change_variable = {
			name = bet
			add = minor_gold_value
		}

		ai_chance = {
			base = 0
		}
	}

	option = {     # place bet jouster2
		name = agot_tourney.101.b

		add_character_flag = placed_bet_jouster2

		remove_short_term_gold = minor_gold_value

		change_variable = {
			name = bet
			multiply = scope:jouster1.prowess
		}
		change_variable = {
			name = bet
			divide = scope:jouster2.prowess
		}

		if = {
			limit = {
				scope:jouster1 = {
					any_relation = {
						type = agot_squire
					}
				}
			}
			scope:jouster1 = {
				random_relation = {
					type = agot_squire
					save_temporary_scope_as = squire1
				}
			}

			change_variable = {
				name = bet
				multiply = {
					value = 95
					add = scope:squire1.prowess
					divide = 100
				}
			}
		}

		if = {
			limit = {
				scope:jouster2 = {
					any_relation = {
						type = agot_squire
					}
				}
			}
			scope:jouster2 = {
				random_relation = {
					type = agot_squire
					save_temporary_scope_as = squire2
				}
			}

			change_variable = {
				name = bet
				divide = {
					value = 95
					add = scope:squire2.prowess
					divide = 100
				}
			}
		}

		change_variable = {
			name = bet
			add = minor_gold_value
		}

		ai_chance = {
			base = 0
		}
	}
}

agot_tourney.102 = {    #place a bet, host
	type = character_event
	title = agot_tourney.102.t
	desc = agot_tourney.102.desc

	theme = stewardship_wealth_focus
	override_background = {
		reference = army_camp
	}

	left_portrait = {
		character = scope:jouster1
		animation = war_attacker #happiness
	}
	right_portrait = {
		character = scope:jouster2
		animation = war_attacker #happiness
	}

	immediate = {
		set_variable = {
			name = bet
			value = minor_gold_value
		}
	}

	option = {     # place bet jouster1
		name = agot_tourney.102.a

		add_character_flag = placed_bet_jouster1

		remove_short_term_gold = minor_gold_value

		change_variable = {
			name = bet
			multiply = scope:jouster2.prowess
		}
		change_variable = {
			name = bet
			divide = scope:jouster1.prowess
		}

		if = {
			limit = {
				scope:jouster2 = {
					any_relation = {
						type = agot_squire
					}
				}
			}
			scope:jouster2 = {
				random_relation = {
					type = agot_squire
					save_temporary_scope_as = squire2
				}
			}

			change_variable = {
				name = bet
				multiply = {
					value = 95
					add = scope:squire2.prowess
					divide = 100
				}
			}
		}

		if = {
			limit = {
				scope:jouster1 = {
					any_relation = {
						type = agot_squire
					}
				}
			}
			scope:jouster1 = {
				random_relation = {
					type = agot_squire
					save_temporary_scope_as = squire1
				}
			}

			change_variable = {
				name = bet
				divide = {
					value = 95
					add = scope:squire1.prowess
					divide = 100
				}
			}
		}

		change_variable = {
			name = bet
			add = minor_gold_value
		}

		hidden_effect = {
			trigger_event = {     # recursive master event
				id = agot_tourney.121   # begin joust calculation
			}
		}
		ai_chance = {
			base = 0
		}
	}
	option = {     # place bet jouster2
		name = agot_tourney.102.b

		add_character_flag = placed_bet_jouster2

		remove_short_term_gold = minor_gold_value

		change_variable = {
			name = bet
			multiply = scope:jouster1.prowess
		}
		change_variable = {
			name = bet
			divide = scope:jouster2.prowess
		}

		if = {
			limit = {
				scope:jouster1 = {
					any_relation = {
						type = agot_squire
					}
				}
			}
			scope:jouster1 = {
				random_relation = {
					type = agot_squire
					save_temporary_scope_as = squire1
				}
			}

			change_variable = {
				name = bet
				multiply = {
					value = 95
					add = scope:squire1.prowess
					divide = 100
				}
			}
		}

		if = {
			limit = {
				scope:jouster2 = {
					any_relation = {
						type = agot_squire
					}
				}
			}
			scope:jouster2 = {
				random_relation = {
					type = agot_squire
					save_temporary_scope_as = squire2
				}
			}

			change_variable = {
				name = bet
				divide = {
					value = 95
					add = scope:squire2.prowess
					divide = 100
				}
			}
		}

		change_variable = {
			name = bet
			add = minor_gold_value
		}

		hidden_effect = {
			trigger_event = {     # recursive master event
				id = agot_tourney.121   # begin joust calculation
			}
		}
		ai_chance = {
			base = 0
		}
	}
}

agot_tourney.111 = {    #you were wounded
	type = character_event
	title = agot_tourney.111.t
	desc = agot_tourney.111.desc

	theme = default
	override_background = {
		reference = army_camp
	}

	left_portrait = {
		character = root
		animation = pain #worry
	}

	option = {
		name = agot_tourney.111.a
		increase_wounds_effect = { REASON = tourney_joust }

		ai_chance = {
			base = 100
		}
	}
}

agot_tourney.112 = {    #you were killed
	type = character_event
	title = agot_tourney.112.t
	desc = agot_tourney.112.desc

	theme = default
	override_background = {
		reference = army_camp
	}

	left_portrait = {
		character = root
		animation = worry
	}

	option = {
		name = agot_tourney.112.a

		death = { death_reason = death_tourney_joust }

		ai_chance = {
			base = 100
		}
	}
}

agot_tourney.12 = {    #inform participants about the match result
	type = character_event
	title = agot_tourney.12.t

	desc = {
		desc = agot_tourney.12.desc
		triggered_desc = {
			trigger = {
				OR = {
					AND = {
						has_character_flag = placed_bet_jouster1
						scope:jouster1 = scope:victor
					}
					AND = {
						has_character_flag = placed_bet_jouster2
						scope:jouster2 = scope:victor
					}
				}
			}
			desc = agot_tourney.12.betwon.desc
		}
		triggered_desc = {
			trigger = {
				OR = {
					AND = {
						has_character_flag = placed_bet_jouster1
						scope:jouster1 = scope:loser
					}
					AND = {
						has_character_flag = placed_bet_jouster2
						scope:jouster2 = scope:loser
					}
				}
			}
			desc = agot_tourney.12.betlost.desc
		}
	}

	theme = recovery
	override_background = {
		reference = army_camp
	}

	left_portrait = {
		character = scope:victor
		animation = war_over_win #happiness
	}
	right_portrait = {
		character = scope:loser
		animation = war_over_loss #pain
	}

	trigger = {
		scope:host = {
			is_at_war = no
			OR = {
				NOT = { exists = liege }
				liege = { is_at_war = no }
			}
		}
	}

	option = {
		name = agot_tourney.12.a
		if = {
			limit = {
				this = scope:victor
			}
			if = {
				limit = {
					scope:host = {
						has_character_flag = king_tier_tournament
					}
				}
				add_prestige = 100
			}

			else = {
				add_prestige = 50
			}
		}
		if = {
			limit = {
				this = scope:loser
			}
			if = {
				limit = {
					scope:host = {
						has_character_flag = king_tier_tournament
					}
					is_alive = yes
				}
				add_prestige = -100
			}

			else_if = {
				limit = {
					is_alive = yes
				}
				add_prestige = -50
			}
		}

		if = {   #bet was won, payout
			limit = {
				AND = {
					has_character_flag = placed_bet_jouster1
					scope:jouster1 = scope:victor
				}
			}
			add_gold = var:bet
		}

		if = {   #bet was won, payout
			limit = {
				AND = {
					has_character_flag = placed_bet_jouster2
					scope:jouster2 = scope:victor
				}
			}
			add_gold = var:bet
		}

		ai_chance = {
			base = 100
		}
	}

	after = {
		remove_character_flag = placed_bet_jouster1
		remove_character_flag = placed_bet_jouster2
	}

}

agot_tourney.13 = {    #inform host about the match result
	type = character_event
	title = agot_tourney.13.t

	desc = {
		desc = agot_tourney.13.desc
		triggered_desc = {
			trigger = {
				OR = {
					AND = {
						has_character_flag = placed_bet_jouster1
						scope:jouster1 = scope:victor
					}
					AND = {
						has_character_flag = placed_bet_jouster2
						scope:jouster2 = scope:victor
					}
				}
			}
			desc = agot_tourney.13.betwon.desc
		}
		triggered_desc = {
			trigger = {
				OR = {
					AND = {
						has_character_flag = placed_bet_jouster1
						scope:jouster1 = scope:loser
					}
					AND = {
						has_character_flag = placed_bet_jouster2
						scope:jouster2 = scope:loser
					}
				}
			}
			desc = agot_tourney.13.betlost.desc
		}
	}

	theme = recovery
	override_background = {
		reference = army_camp
	}

	left_portrait = {
		character = scope:victor
		animation = war_over_win #happiness
	}
	right_portrait = {
		character = scope:loser
		animation = war_over_loss #pain
	}

	trigger = {
		is_at_war = no
		liege = { is_at_war = no }
	}

	option = {
		name = agot_tourney.13.a

		if = {   #bet was won, payout
			limit = {
				AND = {
					has_character_flag = placed_bet_jouster1
					scope:jouster1 = scope:victor
				}
			}
			add_gold = var:bet
		}

		if = {   #bet was won, payout
			limit = {
				AND = {
					has_character_flag = placed_bet_jouster2
					scope:jouster2 = scope:victor
				}
			}
			add_gold = var:bet
		}

		ai_chance = {
			base = 100
		}
	}

	after = {
		if = {
			limit = {
				any_in_list = {
					variable = tourney_participants
					is_alive = yes
					NOT = { has_character_flag = removed }
					NOT = { has_character_flag = lost_tournament }
					NOT = { this = scope:host }
					NOT = { has_character_flag = next_round }
					count = 0
				}
			}
			every_in_list = {
				variable = tourney_participants
				limit = {
					has_character_flag = next_round
				}
				remove_character_flag = next_round
			}
		}
		trigger_event = {
			id = agot_tourney.7    #reiterate matchups
			days = 1
		}
		remove_character_flag = placed_bet_jouster1
		remove_character_flag = placed_bet_jouster2
	}
}

agot_tourney.1313 = {    #don't inform host about the match result
	type = character_event
	hidden = yes

	trigger = {
		is_at_war = no
		liege = { is_at_war = no }
	}

	immediate = {
		if = {
			limit = {
				any_in_list = {
					variable = tourney_participants
					is_alive = yes
					NOT = { has_character_flag = removed }
					NOT = { has_character_flag = lost_tournament }
					NOT = { this = scope:host }
					NOT = { has_character_flag = next_round }
					count = 0
				}
			}
			every_in_list = {
				variable = tourney_participants
				limit = {
					has_character_flag = next_round
				}
				remove_character_flag = next_round
			}
		}
		trigger_event = {
			id = agot_tourney.7    #reiterate matchups
			days = 1
		}
	}
}

agot_tourney.121 = {     # recursive joust master event
	type = character_event
	hidden = yes

	immediate = {
		if = {
			limit = {
				scope:jouster1 = {
					any_relation = {
						type = agot_squire
					}
				}
			}
			scope:jouster1 = {
				random_relation = {
					type = agot_squire
					save_temporary_scope_as = squire1
				}
			}
		}

		if = {
			limit = {
				scope:jouster2 = {
					any_relation = {
						type = agot_squire
					}
				}
			}
			scope:jouster2 = {
				random_relation = {
					type = agot_squire
					save_temporary_scope_as = squire2
				}
			}
		}

		random_list = {
			1 = {  # jouster1 hits
				modifier = {
					scope:jouster1 = {
						has_character_flag = leaving
					}
					factor = 0
				}
				modifier = {
					scope:jouster2 = {
						has_character_flag = leaving
					}
					factor = 0
				}

				modifier = {
					factor = {
						value = 1
						add = scope:jouster1.prowess
					}
				}

				modifier = {
					scope:jouster1 = {
						any_relation = {
							type = agot_squire
						}
					}
					factor = {
						value = 95   # 0-5 prowess reduces performance, anything on top increases it
						add = scope:squire1.prowess
						divide = 100
					}
				}

				scope:jouster1 = {
					save_scope_as = opponent
					trigger_event = {
						id = agot_tourney.122    # jouster1 hit!
					}
				}

				scope:jouster2 = {
					trigger_event = {
						id = agot_tourney.123    # jouster2 was hit
					}
				}
			}
			1 = {  # jouster2 hits
				modifier = {
					scope:jouster1 = {
						has_character_flag = leaving
					}
					factor = 0
				}
				modifier = {
					scope:jouster2 = {
						has_character_flag = leaving
					}
					factor = 0
				}

				modifier = {
					factor = {
						value = 1
						add = scope:jouster2.prowess
					}
				}

				modifier = {
					scope:jouster2 = {
						any_relation = {
							type = agot_squire
						}
					}
					factor = {
						value = 95   # 0-5 prowess reduces performance, anything on top increases it
						add = scope:squire2.prowess
						divide = 100
					}
				}

				scope:jouster2 = {
					save_scope_as = opponent
					trigger_event = {
						id = agot_tourney.122    # jouster2 hit!
					}
				}

				scope:jouster1 = {
					trigger_event = {
						id = agot_tourney.123    # jouster1 was hit
					}
				}
			}

			0 = {  # jouster1 gave up
				modifier = {
					scope:jouster1 = {
						has_character_flag = leaving
					}
					add = 100
				}

				scope:jouster1 = {
					add_character_flag = lost_tournament
					save_scope_as = loser
				}

				scope:jouster2 = {
					save_scope_as = victor
					add_character_flag = next_round
				}

				scope:jouster1 = {
					if = {
						limit = {
							is_alive = yes
						}
						remove_character_flag = jouster1
					}
				}

				scope:jouster2 = {
					if = {
						limit = {
							is_alive = yes
						}
						remove_character_flag = jouster2
					}
				}

				scope:host = {
					every_in_list = {
						variable = tourney_participants
						limit = {
							is_alive = yes
							NOT = { this = scope:host }
							OR = {
								NOT = { has_character_flag = OnlyMyJousts }
								scope:jouster1 = this
								scope:jouster2 = this
							}
						}
						trigger_event = {
							id = agot_tourney.12   #inform participants about the match result
							days = 1
						}
					}
				}

				if = {
					limit = {
						AND = {
							scope:host = { has_character_flag = Only_finale }
							scope:host = {
								has_variable_list = tourney_participants
								any_in_list = {
									variable = tourney_participants
									is_alive = yes
									NOT = { has_character_flag = removed }
									NOT = { has_character_flag = lost_tournament }
									NOT = { this = scope:host }
									count > 3
								}
							}
						}
					}
					scope:host = {
						trigger_event = {
							id = agot_tourney.1313   #don't inform host about the match result
							days = 1
						}
					}
				}
				else = {
					scope:host = {
						trigger_event = {
							id = agot_tourney.13   #inform host about the match result
							days = 1
						}
					}
				}

			}

			0 = {  # jouster2 gave up
				modifier = {
					scope:jouster2 = {
						has_character_flag = leaving
					}
					add = 100
				}

				scope:jouster2 = {
					add_character_flag = lost_tournament
					save_scope_as = loser
				}

				scope:jouster1 = {
					save_scope_as = victor
					add_character_flag = next_round
				}

				scope:jouster1 = {
					if = {
						limit = {
							is_alive = yes
						}
						remove_character_flag = jouster1
					}
				}

				scope:jouster2 = {
					if = {
						limit = {
							is_alive = yes
						}
						remove_character_flag = jouster2
					}
				}

				scope:host = {
					every_in_list = {
						variable = tourney_participants
						limit = {
							is_alive = yes
							NOT = { this = scope:host }
							OR = {
								NOT = { has_character_flag = OnlyMyJousts }
								scope:jouster1 = this
								scope:jouster2 = this
							}
						}
						trigger_event = {
							id = agot_tourney.12   #inform participants about the match result
							days = 1
						}
					}
				}

				if = {
					limit = {
						AND = {
							scope:host = { has_character_flag = Only_finale }
							scope:host = {
								has_variable_list = tourney_participants
								any_in_list = {
									variable = tourney_participants
									is_alive = yes
									NOT = { has_character_flag = removed }
									NOT = { has_character_flag = lost_tournament }
									NOT = { this = scope:host }
									count > 3
								}
							}
						}
					}
					scope:host = {
						trigger_event = {
							id = agot_tourney.1313   #don't inform host about the match result
							days = 1
						}
					}
				}
				else = {
					scope:host = {
						trigger_event = {
							id = agot_tourney.13   #inform host about the match result
							days = 1
						}
					}
				}
			}
		}
	}
}

agot_tourney.122 = {    # You hit!
	type = character_event
	title = agot_tourney.122.t
	desc = agot_tourney.122.desc

	theme = default
	override_background = {
		reference = army_camp
	}

	left_portrait = {
		character = root
		animation =  war_attacker  #happiness
	}

	option = {
		name = agot_tourney.122.a
		ai_chance = {
			base = 100
		}
	}
}

agot_tourney.123 = {    # You were hit
	type = character_event
	title = agot_tourney.123.t
	desc = agot_tourney.123.desc

	theme = default
	override_background = {
		reference = army_camp
	}

	left_portrait = {
		character = root
		animation = fear #worry
	}

	option = {
		name = agot_tourney.123.a
		trigger_event = {
			id = agot_tourney.124    # Can you stay mounted?
		}
		ai_chance = {
			base = 100
		}
	}
}

agot_tourney.124 = {    # Can you stay mounted?
	type = character_event
	hidden = yes

	immediate = {
		random_list = {
			100 = {  # you kept balance
				modifier = {
					factor = { # Prowess directly helps to stay mounted when hit
						value = 0
						add = this.prowess
						multiply = 1.5
						divide = 100
						max = 0.6
					}
				}

				scope:opponent = {
					trigger_event = {
						id = agot_tourney.127    # inform opponent
					}
				}

				trigger_event = {
					id = agot_tourney.125     # reiteration
				}
			}
			100 = {  # you lost
				modifier = {
					factor = { # Prowess directly helps to stay mounted when hit
						value = 0
						add = this.prowess
						multiply = 1.5
						subtract = 100
						multiply = -1
						divide = 100
						min = 0.4
					}
				}

				scope:opponent = {
					trigger_event = {
						id = agot_tourney.128    # inform opponent
					}
				}

				trigger_event = {
					id = agot_tourney.126    # You lost
				}
			}
		}
	}
}

agot_tourney.125 = {     # reiteration
	type = character_event
	title = agot_tourney.125.t
	desc = agot_tourney.125.desc

	theme = default
	override_background = {
		reference = army_camp
	}

	left_portrait = {
		character = root
		animation = happiness
	}

	option = {
		name = agot_tourney.125.a
		scope:host = {
			trigger_event = {
				id = agot_tourney.121    # reiteration
				days = 1
			}
		}
		ai_chance = {
			base = 100
		}
	}
}

agot_tourney.126 = {
	type = character_event
	title = agot_tourney.126.t
	desc = agot_tourney.126.desc

	theme = default
	override_background = {
		reference = army_camp
	}

	left_portrait = {
		character = root
		animation = war_over_loss  #pain
	}

	option = {
		name = agot_tourney.126.a
		hidden_effect = {
			add_character_flag = lost_tournament
			save_scope_as = loser

			random_list = {
				8 = {  # nothing bad happened
					modifier = {
						add = this.prowess
					}
				}
				4 = {  # wounded: 30.8% chance with prowess 0, 17.4% chance with prowess 10, 12.1% chance with prowess 20
					trigger_event = {
						id = agot_tourney.111   #wounded
					}
					#increase_wounds_effect = { REASON = tourney_joust }
				}
				1 = {  # killed: 7.7% chance with prowess 0, 4.3% chance with prowess 10, 3.0% chance with prowess 20
					trigger_event = {
						id = agot_tourney.112   #dead
					}
					#death = { death_reason = death_tourney_joust }
				}
			}


			scope:opponent = {
				save_scope_as = victor
				add_character_flag = next_round
			}

			scope:jouster1 = {
				if = {
					limit = {
						is_alive = yes
					}
					remove_character_flag = jouster1
				}
			}

			scope:jouster2 = {
				if = {
					limit = {
						is_alive = yes
					}
					remove_character_flag = jouster2
				}
			}

			scope:host = {
				every_in_list = {
					variable = tourney_participants
					limit = {
						is_alive = yes
						NOT = { this = scope:host }
						OR = {
							NOT = { has_character_flag = OnlyMyJousts }
							scope:jouster1 = this
							scope:jouster2 = this
						}
					}
					trigger_event = {
						id = agot_tourney.12   #inform participants about the match result
						days = 1
					}
				}
			}

			if = {
				limit = {
					AND = {
						scope:host = { has_character_flag = Only_finale }
						scope:host = {
							has_variable_list = tourney_participants
							any_in_list = {
								variable = tourney_participants
								is_alive = yes
								NOT = { has_character_flag = removed }
								NOT = { has_character_flag = lost_tournament }
								NOT = { this = scope:host }
								count > 3
							}
						}
					}
				}
				scope:host = {
					trigger_event = {
						id = agot_tourney.1313   #don't inform host about the match result
						days = 1
					}
				}
			}
			else = {
				scope:host = {
					trigger_event = {
						id = agot_tourney.13   #inform host about the match result
						days = 1
					}
				}
			}
		}
		ai_chance = {
			base = 100
		}
	}
}

agot_tourney.127 = {     # inform opponent: Survived
	type = character_event
	title = agot_tourney.127.t
	desc = agot_tourney.127.desc

	theme = default
	override_background = {
		reference = army_camp
	}

	left_portrait = {
		character = root
		animation = war_over_tie   # worry
	}

	option = {
		name = agot_tourney.127.a

		ai_chance = {
			base = 100
		}
	}
}

agot_tourney.128 = {     # inform opponent: Beaten
	type = character_event
	title = agot_tourney.128.t
	desc = agot_tourney.128.desc

	theme = default
	override_background = {
		reference = army_camp
	}

	left_portrait = {
		character = root
		animation = happiness
	}

	option = {
		name = agot_tourney.128.a

		ai_chance = {
			base = 100
		}
	}
}
