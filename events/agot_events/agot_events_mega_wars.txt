namespace = agot_mega_wars

# Initialisation; Setup important variables, story cycles, etc.
#agot_mega_wars.0001 = { } # moved to on_war_started effect

# The Realm is at war
agot_mega_wars.0002 = {
	type = character_event
	title = agot_mega_wars.0002.t
	desc = agot_mega_wars.0002.desc

	theme = war
	left_portrait = {
		character = ROOT
		#animation =
	}
	right_portrait = {
		character = scope:right_portrait
		#animation =
	}

	immediate = {
	}

	option = { # Call the banners
		name = agot_mega_wars.0002.a

		custom_tooltip = agot_mega_wars.0002.a.tt
	}

	option = { # Show me how mega wars work | No tutorial so far AGOT TODO
		name = agot_mega_wars.0002.b

		trigger = { always = no }
	}

	after = { # This sends the call the banners notifiation to all level 2 vassals of the crown
		if = {
			limit = { NOT = { has_variable = mw_consecutive_mw } }

			scope:mw_crown_story = {
				every_in_list = {
					variable = mw_participants
					limit = {
						has_variable = mw_level_1
						agot_mw_rebel_leader_trigger = no
					}

					remove_variable = mw_level_1
					agot_mw_send_event_to_ruler_or_diarch_effect = yes
				}
				scope:mw_rebel_leader = {
					every_vassal = {
						limit = {
							has_variable = mw_level_2
							agot_mw_rebel_leader_trigger = no
							NOT = { any_held_title = { this = title:k_the_most_devout } }
							NOT = { any_held_title = { this = title:d_kingsguard } }
						}

						remove_variable = mw_level_2
						agot_mw_send_event_to_ruler_or_diarch_effect = yes
					}
				}
			}
		}
	}
}

# Choose sides, stay neutral or declare independence
agot_mega_wars.0003 = {
	type = character_event
	title = agot_mega_wars.0002.t
	desc = {
		first_valid = {
			# Internal war
			triggered_desc = { # you are part of the rebelling faction
				trigger = {
					scope:mw_rebel_story.var:mw_mode = flag:mw_internal
					agot_mw_root_is_in_mw_faction_trigger = { TARGET = scope:this_scope }
				}
				desc = agot_mega_wars.0003.desc.a.10
			}
			triggered_desc = { # you are a diarch of a participating ruler
				trigger = {
					scope:mw_rebel_story.var:mw_mode = flag:mw_internal
					exists = scope:mw_diarch_target
					is_diarch_of_target = scope:mw_diarch_target
					scope:mw_crown_story = { is_target_in_variable_list = { name = mw_participants target = root } }
				}
				desc = agot_mega_wars.0003.desc.a.11
			}
			triggered_desc = { # you are a diarch of a participating ruler
				trigger = {
					scope:mw_rebel_story.var:mw_mode = flag:mw_internal
					exists = scope:mw_diarch_target
					is_diarch_of_target = scope:mw_diarch_target
				}
				desc = agot_mega_wars.0003.desc.a.12
			}
			triggered_desc = { # you are a child Targaryen ruler of Dragonstone
				trigger = {
					has_character_flag = dragonstone_is_loyal
				}
				desc = agot_mega_wars.0003.desc.a.13
			}
			triggered_desc = { # Standard desc
				trigger = {
					scope:mw_rebel_story.var:mw_mode = flag:mw_internal
				}
				desc = agot_mega_wars.0003.desc.a.14
			}

			# External war
			triggered_desc = { # you are a diarch of a participating ruler
				trigger = {
					scope:mw_rebel_story.var:mw_mode = flag:mw_external
					exists = scope:mw_diarch_target
					is_diarch_of_target = scope:mw_diarch_target
				}
				desc = agot_mega_wars.0003.desc.a.20
			}
			triggered_desc = { # Standard desc
				trigger = {
					scope:mw_rebel_story.var:mw_mode = flag:mw_external
				}
				desc = agot_mega_wars.0003.desc.a.21
			}
		}

		triggered_desc = {
			trigger = { has_variable = mw_is_loyal_to }
			desc = agot_mega_wars.0003.desc.b
		}
		triggered_desc = { # liege is loyalist
			trigger = {
				NOT = { liege = scope:mw_crown }
				agot_mw_in_LIST_of_trigger = { STORY_OWNER = scope:mw_crown TYPE = crown LIST_NAME = mw_loyalist_list TARGET = root.liege }
			}
			desc = agot_mega_wars.0003.desc.c
		}
		triggered_desc = { # liege is neutral
			trigger = {
				NOR = {
					liege = scope:mw_crown
					liege = scope:mw_rebel_leader
				}
				agot_mw_in_LIST_of_trigger = { STORY_OWNER = scope:mw_crown TYPE = crown LIST_NAME = mw_neutral_list TARGET = root.liege }
			}
			desc = agot_mega_wars.0003.desc.d
		}
		triggered_desc = { # liege is rebel leader
			trigger = {
				NOT = { liege = scope:mw_rebel_leader }
				agot_mw_in_LIST_of_trigger = { STORY_OWNER = scope:mw_rebel_leader TYPE = rebel LIST_NAME = mw_rebel_supporter_list TARGET = root.liege }
			}
			desc = agot_mega_wars.0003.desc.e
		}
		triggered_desc = { # liege is independence leader
			trigger = {
				NOR = {
					liege = scope:mw_crown
					liege = scope:mw_rebel_leader
				}
				agot_mw_in_LIST_of_trigger = { STORY_OWNER = scope:mw_crown TYPE = crown LIST_NAME = mw_independence_rebel_leader_list TARGET = root.liege }
			}
			desc = agot_mega_wars.0003.desc.f
		}
	}

	theme = war
	left_portrait = {
		character = scope:mw_rebel_leader
		#animation =
	}
	right_portrait = {
		character = scope:mw_crown
		#animation =
	}

	trigger = {
		OR = {
			highest_held_title_tier > tier_barony
			AND = {
				exists = scope:mw_diarch_target
				is_diarch_of_target = scope:mw_diarch_target
			}
		}
		trigger_if = {
			limit = { NOT = { has_variable = mw_is_loyal_to } }
			NOR = {
				#agot_mw_in_LIST_of_trigger = { STORY_OWNER = scope:mw_crown TYPE = crown LIST_NAME = mw_loyalist_list TARGET = root }
				#agot_mw_in_LIST_of_trigger = { STORY_OWNER = scope:mw_crown TYPE = crown LIST_NAME = mw_neutral_list TARGET = root }
				agot_mw_in_LIST_of_trigger = { STORY_OWNER = scope:mw_rebel_leader TYPE = rebel LIST_NAME = mw_rebel_supporter_list TARGET = root }
			}
		}
		trigger_else = {
			agot_mw_rebel_leader_trigger = no
		}
		NOT = { scope:mw_crown_story = { is_target_in_variable_list = { name = mw_independence_rebel_leader_list target = root } } }
	}

	immediate = {
		add_character_flag = { flag = mw_had_event_0003 days = 1 }
		### AI WEIGHTING VALUES SETUP ###
		# Set in the event and not in script_values cause you would need to restart the game each time you make a change
		# Balancing is easier this way
		agot_mw_ai_weighting_values_setup = yes
		######################################

		if = {
			limit = { has_variable = mw_is_loyal_to }

			var:mw_is_loyal_to = { save_scope_as = mw_is_loyal_to }

			scope:mw_crown_story = {
				remove_list_variable = { name = mw_loyalist_list target = prev }
				remove_list_variable = { name = mw_neutral_list target = prev }
			}
			scope:mw_rebel_story = {
				remove_list_variable = { name = mw_rebel_supporter_list target = prev }
			}
		}

		# Determine the ruler that has the title to be tested by agot_mw_choose_stance_modifier
		if = {
			limit = {
				exists = scope:mw_diarch_target
				is_diarch_of_target = scope:mw_diarch_target
			}
			scope:mw_diarch_target = { save_scope_as = title_holder }
		}
		else = {
			save_scope_as = title_holder
		}
	}

	option = { # Stay loyal
		name = {
			trigger = { NOT = { has_character_flag = dragonstone_is_loyal } }
			text = agot_mega_wars.0003.a
		}
		name = {
			trigger = {
				has_character_flag = dragonstone_is_loyal
				has_character_flag = dragonstone_positive_opinion
			}
			text = agot_mega_wars.0003.a.dragonstone_positive
		}
		name = {
			trigger = {
				has_character_flag = dragonstone_is_loyal
				NOT = { has_character_flag = dragonstone_positive_opinion }
			}
			text = agot_mega_wars.0003.a.dragonstone_negative
		}

		trigger = {
			trigger_if = {
				limit = {
					agot_mw_debug_trigger = yes
					agot_mw_debug_has_mw_stance_trigger = yes
				}

				has_variable = debug_mw_loyalist
			}
			NOR = {
				has_variable = mw_claimant_had_0020
				agot_mw_root_is_in_mw_faction_trigger = { TARGET = scope:this_scope }
			}
		}

		####################################################################################################

		agot_mw_betray_loyality_var_effect = { TARGET = scope:mw_crown }

		if = { # in case a diarch is getting this event: this sets the stance for the diarch's target
			limit = {
				exists = scope:mw_diarch_target
				is_diarch_of_target = scope:mw_diarch_target
				scope:mw_crown_story = { is_target_in_variable_list = { name = mw_participants target = scope:mw_diarch_target } }
			}

			agot_mw_join_loyalists_effect = { RULER = scope:mw_diarch_target CROWN = scope:mw_crown }
		}
		if = { # this sets the stance for the diarch or for the non-diarch ruler if he is not in an active diarchy
			limit = {
				OR = {
					AND = { # in case a diarch is getting this event
						exists = scope:mw_diarch_target
						is_diarch_of_target = scope:mw_diarch_target
					}
					NOT = { scope:mw_diarch_target ?= root } # in case the proper ruler gets the event
				}
			}

			agot_mw_join_loyalists_effect = { RULER = root CROWN = scope:mw_crown }
		}

		if = {
			limit = {
				exists = var:mw_is_faction_member_of
				var:mw_is_faction_member_of = scope:mw_rebel_leader
			}
			custom_tooltip = agot_mega_wars.0003.a.tt
		}

		####################################################################################################

		ai_chance = {
			base = 0

			agot_mw_choose_stance_modifier = { TARGET = scope:mw_crown.primary_title }
		}
	}

	option = { # Stay neutral
		name = {
			trigger = {
				NOT = { has_variable = mw_claimant_had_0020 }
			}
			text = agot_mega_wars.0003.ba
		}
		name = {
			trigger = {
				has_variable = mw_claimant_had_0020
			}
			text = agot_mega_wars.0003.bb
		}

		trigger = {
			trigger_if = {
				limit = {
					agot_mw_debug_trigger = yes
					agot_mw_debug_has_mw_stance_trigger = yes
				}

				has_variable = debug_mw_neutral
			}
			NOT = { agot_mw_root_is_in_mw_faction_trigger = { TARGET = scope:this_scope } }
			NOT = { has_character_flag = dragonstone_is_loyal }
		}

		####################################################################################################

		if = { # in case a diarch is getting this event: this sets the stance for the diarch's target
			limit = {
				exists = scope:mw_diarch_target
				is_diarch_of_target = scope:mw_diarch_target
				scope:mw_crown_story = { is_target_in_variable_list = { name = mw_participants target = scope:mw_diarch_target } }
			}

			agot_mw_stay_neutral_effect = { RULER = scope:mw_diarch_target CROWN = scope:mw_crown }
		}
		if = { # this sets the stance for the diarch or for the non-diarch ruler if he is not in an active diarchy
			limit = {
				OR = {
					AND = { # in case a diarch is getting this event
						exists = scope:mw_diarch_target
						is_diarch_of_target = scope:mw_diarch_target
					}
					NOT = { scope:mw_diarch_target ?= root } # in case the proper ruler gets the event
				}
			}

			agot_mw_stay_neutral_effect = { RULER = root CROWN = scope:mw_crown }
		}

		####################################################################################################

		ai_chance = {
			base = 0

			agot_mw_choose_stance_modifier = { TARGET = scope:title_holder.primary_title }
		}
	}

	option = { # Join enemies
		name = agot_mega_wars.0003.c

		trigger = {
			trigger_if = {
				limit = {
					agot_mw_debug_trigger = yes
					agot_mw_debug_has_mw_stance_trigger = yes
				}

				has_variable = debug_mw_rebel
			}
			NOT = { has_variable = mw_claimant_had_0020 }
			NOT = { has_character_flag = dragonstone_is_loyal }
		}

		####################################################################################################

		agot_mw_betray_loyality_var_effect = { TARGET = scope:mw_rebel_leader }

		if = { # in case a diarch is getting this event: this sets the stance for the diarch's target
			limit = {
				exists = scope:mw_diarch_target
				is_diarch_of_target = scope:mw_diarch_target
				scope:mw_crown_story = { is_target_in_variable_list = { name = mw_participants target = scope:mw_diarch_target } }
			}

			agot_mw_join_rebels_effect = { RULER = scope:mw_diarch_target REBEL_LEADER = scope:mw_rebel_leader }
		}
		if = { # this sets the stance for the diarch or for the non-diarch ruler if he is not in an active diarchy
			limit = {
				OR = {
					AND = { # in case a diarch is getting this event
						exists = scope:mw_diarch_target
						is_diarch_of_target = scope:mw_diarch_target
					}
					NOT = { scope:mw_diarch_target ?= root } # in case the proper ruler gets the event
				}
			}

			agot_mw_join_rebels_effect = { RULER = root REBEL_LEADER = scope:mw_rebel_leader }
		}

		if = {
			limit = {
				scope:war = { using_cb = agot_independence_war }
				highest_held_title_tier = tier_kingdom
			}

			custom_tooltip = agot_mega_wars.0003.c.tt.independence
		}

		####################################################################################################

		ai_chance = {
			base = 0

			agot_mw_choose_stance_modifier = { TARGET = scope:mw_rebel_leader.primary_title }
		}
	}

	option = { # Declare independence | This option may only show up if the started war is not a independence war!
		name = agot_mega_wars.0003.d

		trigger = {
			trigger_if = {
				limit = {
					agot_mw_debug_trigger = yes
					agot_mw_debug_has_mw_stance_trigger = yes
				}

				always = no
			}
			agot_mw_show_declare_independence_option_trigger = yes
			NOT = { agot_mw_root_is_in_mw_faction_trigger = { TARGET = scope:this_scope } }
			NOT = { has_character_flag = dragonstone_is_loyal }
		}

		####################################################################################################

		if = {
			limit = { highest_held_title_tier = tier_kingdom }

			scope:mw_crown_story = {
				add_to_variable_list = { name = mw_independence_rebel_leader_list target = root }
			}
		}
		else = {
			random_liege_or_above = {
				limit = {
					save_temporary_scope_as = temp_liege_or_above
					agot_mw_in_LIST_of_trigger = { STORY_OWNER = scope:mw_crown TYPE = crown LIST_NAME = mw_independence_rebel_leader_list TARGET = scope:temp_liege_or_above }
				}

				add_to_variable_list = { name = mw_independence_rebels_list target = root }
				#agot_mw_join_rebels_effect = { RULER = root REBEL_LEADER = scope:mw_rebel_leader }
			}
		}

		####################################################################################################

		ai_chance = {
			base = 0

			agot_mw_choose_stance_modifier = { TARGET = root.capital_barony }
		}
	}

	after = { #
		custom_tooltip = agot_mega_wars.0003.tt
		if = {
			limit = {
				exists = scope:mw_diarch_target
				is_diarch_of_target = scope:mw_diarch_target
			}

			scope:mw_diarch_target = { trigger_event = agot_mega_wars.0005 }
		}
		if = { # Debug stance chance
			limit = { has_game_rule = agot_debug_on }

			random_list = {
				0 = { # loyalist
					custom_tooltip = MW_DEBUG_JOIN_LOYALISTS
					agot_mw_choose_stance_modifier = { TARGET = scope:mw_crown.primary_title }
				}
				0 = { # neutral
					custom_tooltip = MW_DEBUG_STAY_NEUTRAL
					agot_mw_choose_stance_modifier = { TARGET = scope:title_holder.primary_title }
				}
				0 = { # rebel
					trigger = { NOT = { scope:war = { using_cb = agot_independence_war } } }
					custom_tooltip = MW_DEBUG_JOIN_REBELS
					agot_mw_choose_stance_modifier = { TARGET = scope:mw_rebel_leader.primary_title }
				}
				0 = { # declare independence
					trigger = { agot_mw_show_declare_independence_option_trigger = yes }
					custom_tooltip = MW_DEBUG_DECLARES_INDEPENDENCE
					agot_mw_choose_stance_modifier = { TARGET = root.capital_barony }
				}
			}
		}

		if = {
			limit = {
				exists = scope:mw_diarch_target
				is_diarch_of_target = scope:mw_diarch_target
				scope:mw_crown_story = { is_target_in_variable_list = { name = mw_participants target = scope:mw_diarch_target } }
			}

			scope:mw_crown_story = {
				remove_list_variable = { name = mw_participants target = scope:mw_diarch_target }
				remove_list_variable = { name = mw_participants target = root }
			}
			agot_mw_send_event_3_to_vassals_effect = { RULER = scope:mw_diarch_target }
			agot_mw_send_event_3_to_vassals_effect = { RULER = root }
		}
		else = {
			agot_mw_send_event_3_to_vassals_effect = { RULER = root }
			scope:mw_crown_story = {
				remove_list_variable = { name = mw_participants target = root }
			}
		}


		remove_variable = mw_is_faction_member_of

		scope:mw_crown_story = {
			if = {
				limit = { NOT = { has_variable_list = mw_participants } }

				if = { # deal with rulers who declared independence
					limit = { has_variable_list = mw_independence_rebel_leader_list }

					story_owner = { trigger_event = agot_mega_wars.0011 }
				}

				every_player = {
					limit = {
						NOT = { scope:war = { is_participant = prev } }
						OR = {
							agot_mw_in_LIST_of_trigger = { STORY_OWNER = scope:mw_crown TYPE = crown LIST_NAME = mw_loyalist_list TARGET = scope:this_scope }
							agot_mw_in_LIST_of_trigger = { STORY_OWNER = scope:mw_rebel_leader TYPE = rebel LIST_NAME = mw_rebel_supporter_list TARGET = scope:this_scope }
						}
					}

					trigger_event = agot_mega_wars.0004
				}
			}
		}
	}
}

# Flavour event for players to actively join the war
agot_mega_wars.0004 = {
	type = character_event
	title = agot_mega_wars.0002.t
	desc = agot_mega_wars.0004.desc

	theme = war
	left_portrait = {
		character = ROOT
		#animation =
	}
	right_portrait = {
		character = scope:mw_target_scope
		#animation =
	}

	immediate = {
		if = {
			limit = { agot_mw_is_in_loyalist_list_trigger = { TARGET = root } }

			random_ruler = {
				limit = { agot_mw_in_LIST_of_trigger = { STORY_OWNER = scope:this_scope TYPE = crown LIST_NAME = mw_loyalist_list TARGET = root } }

				save_scope_as = mw_target_scope

				random_owned_story = {
					limit = { story_type = story_agot_mw_crown }

					save_scope_as = mw_story_scope
				}
			}
		}
		else_if = {
			limit = { agot_mw_is_in_rebel_list_trigger = { TARGET = root } }

			random_ruler = {
				limit = { agot_mw_in_LIST_of_trigger = { STORY_OWNER = scope:this_scope TYPE = rebel LIST_NAME = mw_rebel_supporter_list TARGET = root } }

				save_scope_as = mw_target_scope

				random_owned_story = {
					limit = { story_type = story_agot_mw_rebel }

					save_scope_as = mw_story_scope
				}
			}
		}
	}

	option = { # Join the war
		name = agot_mega_wars.0004.a

		scope:mw_story_scope = {
			every_in_list = {
				variable = mw_wars

				if = {
					limit = { is_attacker = scope:mw_target_scope }

					add_attacker = root
				}
				if = {
					limit = { is_defender = scope:mw_target_scope }

					add_defender = root
				}
			}
		}

	}

	option = { # Don't join the war
		name = agot_mega_wars.0004.b

	}
}

# Flavour event for players to actively join the war
agot_mega_wars.0005 = {
	type = character_event
	title = agot_mega_wars.0002.t
	desc = {
		triggered_desc = {
			desc = agot_mega_wars.0005.desc.a
			trigger = { agot_mw_is_in_loyalist_list_trigger = { TARGET = root } }
		}
		triggered_desc = {
			desc = agot_mega_wars.0005.desc.b
			trigger = { agot_mw_is_in_neutral_list_trigger = { TARGET = root } }
		}
		triggered_desc = {
			desc = agot_mega_wars.0005.desc.c
			trigger = { agot_mw_is_in_rebel_list_trigger = { TARGET = root } }
		}
		desc = agot_mega_wars.0005.desc
	}

	theme = war
	left_portrait = {
		character = ROOT
		#animation =
	}
	right_portrait = {
		character = diarch
		#animation =
	}
	lower_left_portrait = {
		character = scope:attacker
		#animation =
	}
	lower_right_portrait = {
		character = scope:defender
		#animation =
	}

	immediate = {

	}

	option = { # It is what it is...
		name = agot_mega_wars.0005.a

	}
}

# Ruler declares independence
agot_mega_wars.0010 = {
	type = character_event
	title = agot_mega_wars.0010.t
	desc = agot_mega_wars.0010.desc

	theme = war
	left_portrait = {
		character = root
		#animation =
	}
	right_portrait = {
		character = scope:mw_new_rebel_leader
		#animation =
	}

	trigger = {
	}

	immediate = {
		save_scope_as = mw_independence_rebel_leader
		if = {
			limit = { exists = root.var:pre_war_liege }
			liege = {
				root.var:pre_war_liege = { save_scope_as = mw_crown }
			}
		}
		else_if = {
			limit = { NOT = { liege = root } }
			liege = { save_scope_as = mw_crown }
		}
		scope:mw_crown = {
			random_owned_story = {
				limit = { story_type = story_agot_mw_crown }
				save_scope_as = mw_crown_story

				add_to_variable_list = { name = mw_independence_rebel_leader_list target = root }
			}
		}
	}

	option = { #
		name = agot_mega_wars.0010.a

		scope:mw_crown = { trigger_event = agot_mega_wars.0011 } # Send notification to liege
	}
}

# Event for Crown | Vassal proclaims his independence
agot_mega_wars.0011 = {
	type = character_event
	title = agot_mega_wars.0011.t
	desc = {
		triggered_desc = {
			trigger = { scope:mw_crown_story = { variable_list_size = { name = mw_independence_rebel_leader_list value = 1 } } }
			desc = agot_mega_wars.0011.desc.a
		}
		triggered_desc = {
			trigger = { scope:mw_crown_story = { variable_list_size = { name = mw_independence_rebel_leader_list value = 2 } } }
			desc = agot_mega_wars.0011.desc.b
		}
		triggered_desc = {
			trigger = { scope:mw_crown_story = { variable_list_size = { name = mw_independence_rebel_leader_list value > 2 } } }
			desc = agot_mega_wars.0011.desc.c
		}
	}

	theme = war
	left_portrait = {
		character = root
		#animation =
	}
	right_portrait = {
		character = scope:mw_independence_rebel_leader
		#animation =
	}

	trigger = {
		#scope:mw_crown_story = { has_variable_list = mw_independence_rebel_leader_list }
	}

	immediate = {
		scope:mw_crown_story = {
			random_in_list = {
				variable = mw_independence_rebel_leader_list
				weight = {
					base = 1
					modifier = {
						add = 1000
						highest_held_title_tier = tier_kingdom
					}
					modifier = {
						add = 350
						highest_held_title_tier = tier_duchy
					}
				}
				save_scope_as = mw_independence_rebel_leader
			}
			if = {
				limit = { variable_list_size = { name = mw_independence_rebel_leader_list value > 1 } }

				random_in_list = {
					variable = mw_independence_rebel_leader_list

					limit = { NOT = { this = scope:mw_independence_rebel_leader } }

					save_scope_as = mw_independence_rebel_loc_scope
				}
			}
		}
		if = {
			limit = { NOT = { exists = scope:mw_crown } }

			save_scope_as = mw_crown
		}
	}

	option = { # Make them pay
		name = agot_mega_wars.0011.a

		save_scope_value_as = { name = crown_dec_independence value = flag:decline }

		if = {
			limit = {
				exists = scope:mw_start_up
				scope:mw_start_up = flag:yes
			}

			set_variable = { name = mw_consecutive_mw days = 1 }
		}

		scope:mw_crown_story = {
			every_in_list = {
				variable = mw_independence_rebel_leader_list

				save_temporary_scope_as = temp_loc_scope

				custom_tooltip = agot_mega_wars.0011.a.tt
			}
		}

		ai_chance = {
			base = 60

			modifier = {
				has_trait = just
				add = 20
			}
			modifier = {
				has_trait = arrogant
				add = 10
			}
			modifier = {
				has_trait = stubborn
				add = 10
			}
			modifier = {
				has_trait = vengeful
				add = 10
			}
			modifier = {
				has_trait = wrathful
				add = 10
			}
			modifier = {
				has_trait = sadistic
				add = 10
			}
			modifier = {
				has_trait = paranoid
				add = 10
			}

			modifier = {
				has_trait = craven # AHHHHHH Please dont hurty hurty!!!
				add = -40
			}
			modifier = {
				has_trait = trusting
				add = -10
			}
		}
	}

	option = { # Let them go...
		name = agot_mega_wars.0011.b

		save_scope_value_as = { name = crown_dec_independence value = flag:accept }

		scope:mw_crown_story = {
			every_in_list = {
				variable = mw_independence_rebel_leader_list

				save_temporary_scope_as = temp_loc_scope

				custom_tooltip = agot_mega_wars.0011.b.tt
			}
		}

		add_character_modifier = { modifier = agot_mw_let_traitors_go_modifier years = 5 }

		add_dread = -50
		add_prestige = -1000

		ai_chance = {
			base = 40
		}
	}

	after = {
		scope:mw_crown_story = {
			every_in_list = {
				variable = mw_independence_rebel_leader_list

				trigger_event = agot_mega_wars.0012
			}
		}
	}
}

# Crown's response to your independence proclamation
agot_mega_wars.0012 = {
	type = letter_event
	opening = {
		desc = agot_mega_wars.0012.opening
	}
	desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:crown_dec_independence = flag:decline }
				desc = agot_mega_wars.0012.desc.a
			}
			triggered_desc = {
				trigger = { scope:crown_dec_independence = flag:accept }
				desc = agot_mega_wars.0012.desc.b
			}
		}
	}

	sender = {
		character = scope:mw_crown
		#animation =
	}

	trigger = {
	}

	immediate = {
	}

	option = { # Make them pay
		name = agot_mega_wars.0012.a

		trigger = { scope:crown_dec_independence = flag:decline }

		if = {
			limit = { this = scope:mw_independence_rebel_leader }

			scope:mw_crown_story = {
				if = {
					limit = { has_variable_list = mw_independence_rebel_leader_list }

					every_in_list = {
						variable = mw_independence_rebel_leader_list
						limit = { NOT = { this = scope:mw_independence_rebel_leader } }

						set_variable = { name = mw_is_loyal_to value = scope:mw_independence_rebel_leader }
					}
				}

				root = { # declare the war
					start_war = {
						casus_belli = agot_independence_war
						target = scope:mw_crown
						target_title = scope:mw_crown.primary_title
					}
				}

				if = {
					limit = { has_variable_list = mw_independence_rebel_leader_list }

					every_in_list = {
						variable = mw_independence_rebel_leader_list

						save_scope_as = temp_ind_rebel_scope

						root = {
							random_character_war = {
								limit = { using_cb = agot_independence_war }

								add_attacker = scope:temp_ind_rebel_scope
							}
						}
					}
				}
			}
		}
	}

	option = { # A wise choice
		name = agot_mega_wars.0012.b

		trigger = { scope:crown_dec_independence = flag:accept }

		remove_list_variable = { name = mw_loyalist_list target = prev }
		remove_list_variable = { name = mw_neutral_list target = prev }

		#scope:mw_crown_story = { # AGOT TODO Commented out for now since it is not used at all; might be useful later though
		#	every_in_list = {
		#		variable = mw_loyalist_list

		#		limit = {
		#			OR = {
		#				AND = {
		#					exists = var:pre_war_liege
		#					var:pre_war_liege = root
		#				}
		#				AND = {
		#					exists = var:pre_war_liege.liege
		#					var:pre_war_liege.liege = root
		#				}
		#			}
		#		}

		#		scope:mw_crown_story = {
		#			every_in_list = {
		#				variable = mw_wars

		#				remove_participant = scope:loyalist_scope
		#			}
		#		}
		#	}
		#}

		agot_mw_become_independent = yes

		hidden_effect = {
			agot_mw_rebuild_realm_effect = { REBUILD_MODE = only_roots TARGET = root }

			# Remove vassals from stance lists
			every_ruler = { # remove vassals from rebel supporter list
				limit = {
					any_owned_story = {
						story_type = story_agot_mw_rebel
						any_in_list = {
							variable = mw_rebel_supporter_list

							highest_held_title_tier > tier_barony
							exists = var:pre_war_liege
							OR = {
								var:pre_war_liege = root
								any_liege_or_above = { var:pre_war_liege = root }
								AND = {
									exists = var:pre_war_liege.var:pre_war_liege
									var:pre_war_liege.var:pre_war_liege = root
								}
							}
						}
					}
				}
				random_owned_story = {
					limit = { story_type = story_agot_mw_rebel }

					every_in_list = {
						variable = mw_rebel_supporter_list

						limit = {
							highest_held_title_tier > tier_barony
							exists = var:pre_war_liege
							OR = {
								var:pre_war_liege = root
								any_liege_or_above = { var:pre_war_liege = root }
								AND = {
									exists = var:pre_war_liege.var:pre_war_liege
									var:pre_war_liege.var:pre_war_liege = root
								}
							}
						}

						scope:mw_rebel_story = { remove_list_variable = { name = mw_rebel_supporter_list target = prev } }
					}
				}
			}
			every_vassal_or_below = { # remove vassals from loyalist and neutral list
				limit = { highest_held_title_tier > tier_barony }

				scope:mw_crown_story = { remove_list_variable = { name = mw_loyalist_list target = prev } }
				scope:mw_crown_story = { remove_list_variable = { name = mw_neutral_list target = prev } }
			}
		}

		agot_mw_clear_data_effect = yes
		every_vassal_or_below = {
			limit = { highest_held_title_tier > tier_barony }

			agot_mw_clear_data_effect = yes
		}

		clear_variable_list = mw_independence_rebels_list
		scope:mw_crown_story = { remove_list_variable = { name = mw_independence_rebel_leader_list target = root } }
	}
}

# Faction claimant war | claimant may choose to lead the rebellion or stay neutral
agot_mega_wars.0020 = {
	type = letter_event
	opening = {
		desc = agot_mega_wars.0020.opening
	}
	desc = agot_mega_wars.0020.desc

	sender = {
		character = scope:faction_leader
		#animation =
	}

	# Последнее время мне стало жить тяжело. Я вижу, я стал понимать слишком много.

	immediate = {
	}

	option = { # Become leader of war
		name = agot_mega_wars.0020.a

		save_scope_value_as = {
			name = mw_0020_option
			value = flag:opt_a
		}

		scope:faction_leader = { # transfer data from olf leader to new leader
			if = {
				limit = { has_variable_list = mw_faction_members_list }

				every_in_list = {
					variable = mw_faction_members_list

					if = {
						limit = { NOT = { this = root } }
						set_variable = { name = mw_is_faction_member_of value = root }
					}
					root = {
						add_to_variable_list = {
							name = mw_faction_members_list
							target = prev
						}
						add_to_variable_list = {
							name = mw_make_independent_list
							target = prev
						}
					}
				}
				clear_variable_list = mw_faction_members_list
				clear_variable_list = mw_make_independent_list
			}
		}

		save_scope_as = mw_faction_leader
		agot_mw_faction_war_claimant_effect = yes

	}

	option = { # Let the faction do the job, you do not join
		name = agot_mega_wars.0020.b

		save_scope_value_as = {
			name = mw_0020_option
			value = flag:opt_b
		}

		set_variable = { name = mw_claimant_had_0020 days = 20 } # mark claimant to have received this event to block him from choosing any side --> neutral.

		scope:faction_leader = {
			save_scope_as = mw_faction_leader
		}

	}

	after = { #
		scope:faction_leader = { trigger_event = agot_mega_wars.0021 }
	}
}

# Demand presser receives answer from claimant
agot_mega_wars.0021 = {
	type = letter_event
	opening = {
		desc = agot_mega_wars.0021.opening
	}
	desc = {
		triggered_desc = {
			trigger = { scope:mw_0020_option = flag:opt_a }
			desc = agot_mega_wars.0021.desc.a
		}
		triggered_desc = {
			trigger = { scope:mw_0020_option = flag:opt_b }
			desc = agot_mega_wars.0021.desc.b
		}
	}

	sender = {
		character = scope:faction_claimant
		#animation =
	}

	immediate = {
	}

	option = { #
		name = agot_mega_wars.0021.a

		agot_mw_faction_war_claimant_effect = yes
	}

	after = { #
	}
}

### Maintenance ###

# remove dead ruler from story cycle list and add the new ruler
# change pre_war_liege variable
# triggered by on_death
agot_mega_wars.0100 = {
	hidden = yes

	trigger = {
		OR = {
			has_variable = pre_war_liege
			any_liege_or_above = {
				OR = {
					agot_mw_crown_trigger = yes
					has_variable = pre_war_liege
					agot_mw_rebel_leader_trigger = yes
				}
			}
		}
	}

	immediate = {
		### Fetch Scopes ###
		agot_mw_fetch_crown_scope = yes
		agot_mw_fetch_rebel_scope = yes
		### Fetching Scope End ###

		if = {
			limit = {
				NOT = { exists = scope:mw_crown_story }
			}
			debug_log = "ERROR MW_0100: Failed to fetch scope 'mw_crown_story'"
			debug_log_date = yes
		}
		if = {
			limit = {
				NOT = { exists = scope:mw_rebel_story }
			}
			debug_log = "ERROR MW_0100: Failed to fetch scope 'mw_rebel_story'"
			debug_log_date = yes
		}

		# Update mega war lists if necessary
		if = {
			limit = {
				exists = scope:mw_crown_story
				scope:mw_crown_story = {
					OR = {
						is_target_in_variable_list = { name = mw_loyalist_list target = root }
						is_target_in_variable_list = { name = mw_neutral_list target = root }
						is_target_in_variable_list = { name = mw_rebel_leader_list target = root }
					}
				}
			}
			scope:mw_crown_story = {
				if = {
					limit = { is_target_in_variable_list = { name = mw_loyalist_list target = root } }

					remove_list_variable = { name = mw_loyalist_list target = root } # remove dead ruler

					if = {
						limit = { exists = root.primary_heir }

						add_to_variable_list = { name = mw_loyalist_list target = root.primary_heir } # add new ruler
					}
				}
				if = {
					limit = { is_target_in_variable_list = { name = mw_neutral_list target = root } }

					remove_list_variable = { name = mw_neutral_list target = root } # remove dead ruler

					if = {
						limit = { exists = root.primary_heir }

						add_to_variable_list = { name = mw_neutral_list target = root.primary_heir } # add new ruler
					}
				}
			}
		}
		else_if = {
			limit = {
				exists = scope:mw_rebel_story
				scope:mw_rebel_story = {
					is_target_in_variable_list = { name = mw_rebel_supporter_list target = root }
				}
			}
			scope:mw_rebel_story = {
				remove_list_variable = { name = mw_rebel_supporter_list target = root } # remove dead ruler
				add_to_variable_list = { name = mw_rebel_supporter_list target = root.primary_heir } # add new ruler
			}
		}

		# Update pre_war_liege if necessary
		if = {
			limit = {
				any_ruler = {
					exists = var:pre_war_liege
					var:pre_war_liege = root
				}
			}

			every_ruler = { # every ruler that has the variable with root as value
				limit = {
					exists = var:pre_war_liege
					var:pre_war_liege = root
				}
				set_variable = { name = pre_war_liege value = root.primary_heir }
			}
		}
		if = {
			limit = {
				has_variable = pre_war_liege
			}

			every_heir = {
				if = {
					limit = {
						any_heir_title = { tier = root.primary_title.tier }
					}
					set_variable = { name = pre_war_liege value = root.var:pre_war_liege }
				}
			}
		}
	}

	option = { }
}

scripted_trigger mw_0101_check_01_trigger = {
	any_owned_story = {
		story_type = story_agot_mw_crown
		var:mw_title = scope:title
	}
}

scripted_trigger mw_0101_check_02_trigger = {
	agot_mw_rebel_leader_trigger = yes
	is_landed = no
}

scripted_trigger mw_0101_check_03_trigger = {
	any_ruler = {
		any_owned_story = {
			story_type = story_agot_mw_crown
			is_target_in_variable_list = { name = mw_loyalist_list target = scope:previous_holder }
			NOR = {
				is_target_in_variable_list = { name = mw_loyalist_list target = root }
				story_owner = root
			}
		}
		NOT = { # Don't add to loyalist list if previous_holder just won a mw and has both mw story cycles
			any_owned_story = {
				story_type = story_agot_mw_rebel
				var:mw_outcome = flag:rebels_won
			}
		}
	}
}

scripted_trigger mw_0101_check_04_trigger = {
	any_ruler = {
		any_owned_story = {
			story_type = story_agot_mw_crown
			is_target_in_variable_list = { name = mw_neutral_list target = scope:previous_holder }
			NOT = { is_target_in_variable_list = { name = mw_neutral_list target = root } }
		}
	}
}

scripted_trigger mw_0101_check_05_trigger = {
	any_ruler = {
		any_owned_story = {
			story_type = story_agot_mw_rebel
			is_target_in_variable_list = { name = mw_rebel_supporter_list target = scope:previous_holder }
			NOT = { is_target_in_variable_list = { name = mw_rebel_supporter_list target = root } }
		}
	}
}

scripted_trigger mw_0101_check_06_trigger = {
	any_ruler = {
		any_owned_story = {
			story_type = story_agot_mw_crown
			is_target_in_variable_list = { name = mw_rebel_leader_list target = scope:previous_holder }
			NOT = { is_target_in_variable_list = { name = mw_rebel_leader_list target = root } }
		}
	}
}

scripted_trigger mw_0101_check_07_trigger = {
	OR = {
		exists = scope:previous_holder.var:pre_war_liege
		any_ruler = {
			exists = var:pre_war_liege
			var:pre_war_liege = scope:previous_holder
			primary_title.tier < scope:title.tier
			#scope:previous_holder = { is_landed = no } # AGOT TODO I don't remember why I added this line; anyway, it causes issues and breaking mws!
		}
	}
}

# Upon title change story cycle should by given to new holder; also changes pre_war_liege value
agot_mega_wars.0101 = {
	hidden = yes

	trigger = {
		exists = scope:previous_holder
		exists = scope:title
		scope:previous_holder = {
			OR = {
				mw_0101_check_01_trigger = yes # Check 1: previous_holder has story_agot_mw_rebel
				mw_0101_check_02_trigger = yes # Check 2: previous_holder has story_agot_mw_crown
				mw_0101_check_03_trigger = yes # Check 3: previous_holder is loyalist
				mw_0101_check_04_trigger = yes # Check 4: previous_holder is neutral
				mw_0101_check_05_trigger = yes # Check 5: previous_holder is rebel supporter
				mw_0101_check_06_trigger = yes # Check 6: previous_holder is rebel leader
				mw_0101_check_07_trigger = yes # Check 7: pre_war_liege values
			}
		}
	}

	immediate = {
		scope:previous_holder = {
			if = { # Check 1: has crown story cycle
				limit = { mw_0101_check_01_trigger = yes }

				random_owned_story = {
					limit = { story_type = story_agot_mw_crown }

					set_variable = { name = mw_former_story_owner value = scope:previous_holder }

					make_story_owner = root

					every_in_list = {
						variable = mw_rebel_leader_list

						random_owned_story = {
							limit = { story_type = story_agot_mw_rebel }

							set_variable = { name = mw_target value = root }
						}
					}
				}
			}
			if = { # Check 2: has rebel story cycle
				limit = { mw_0101_check_02_trigger = yes }

				every_owned_story = {
					limit = { story_type = story_agot_mw_rebel }

					if = {
						limit = { # if root is not in mw_loyalist_list and previous_holder is not in mw_rebel_leader_list; make root mw_new_rebel_leader
							var:mw_target = {
								any_owned_story = {
									story_type = story_agot_mw_crown
									NOT = {
										is_target_in_variable_list = { name = mw_loyalist_list target = root }
									}
									is_target_in_variable_list = { name = mw_rebel_leader_list target = scope:previous_holder }
								}
							}
						}
						root = { save_scope_as = mw_new_rebel_leader }
					}
					else = { # else take one from the rebel supporter list
						random_in_list = {
							variable = mw_rebel_supporter_list

							weight = {
								base = 1

								modifier = {
									add = 3000
									primary_title = { tier = tier_kingdom }
								}
								modifier = {
									add = 2000
									primary_title = { tier = tier_duchy }
								}
								modifier = {
									add = 1000
									primary_title = { tier = tier_county }
								}
							}

							save_scope_as = mw_new_rebel_leader
						}
					}

					var:mw_target = {
						random_owned_story = {
							limit = { story_type = story_agot_mw_crown }

							add_to_variable_list = { name = mw_rebel_leader_list target = scope:mw_new_rebel_leader }
							remove_list_variable = { name = mw_rebel_leader_list target = scope:previous_holder }
						}
					}

					make_story_owner = scope:mw_new_rebel_leader
				}
			}
			if = { # Check 3: if root is in loyalist list, add root
				limit = { mw_0101_check_03_trigger = yes }

				every_ruler = {
					limit = {
						any_owned_story = {
							story_type = story_agot_mw_crown
							is_target_in_variable_list = { name = mw_loyalist_list target = scope:previous_holder }
							NOR = {
								is_target_in_variable_list = { name = mw_loyalist_list target = root }
								story_owner = root
							}
						}
						NOT = { # Don't add to loyalist list if previous_holder just won a mw and has both mw story cycles
							any_owned_story = {
								story_type = story_agot_mw_rebel
								var:mw_outcome = flag:rebels_won
							}
						}
					}
					random_owned_story = {
						limit = {
							story_type = story_agot_mw_crown
							is_target_in_variable_list = { name = mw_loyalist_list target = scope:previous_holder }
							NOT = { is_target_in_variable_list = { name = mw_loyalist_list target = root } }
						}
						add_to_variable_list = { name = mw_loyalist_list target = root }
						if = {
							limit = {
								scope:previous_holder = {
									OR = {
										is_landed = no
										highest_held_title_tier = tier_barony
									}
								}
							}
							remove_list_variable = { name = mw_loyalist_list target = scope:previous_holder }
						}
					}
				}
			}
			if = { # Check 4: if root is in neutral list, add root
				limit = { mw_0101_check_04_trigger = yes }

				every_ruler = {
					limit = {
						any_owned_story = {
							story_type = story_agot_mw_crown
							is_target_in_variable_list = { name = mw_neutral_list target = scope:previous_holder }
							NOT = { is_target_in_variable_list = { name = mw_neutral_list target = root } }
						}
					}
					random_owned_story = {
						limit = {
							story_type = story_agot_mw_crown
							is_target_in_variable_list = { name = mw_neutral_list target = scope:previous_holder }
							NOT = { is_target_in_variable_list = { name = mw_neutral_list target = root } }
						}
						add_to_variable_list = { name = mw_neutral_list target = root }
						if = {
							limit = {
								scope:previous_holder = {
									OR = {
										is_landed = no
										highest_held_title_tier = tier_barony
									}
								}
							}
							remove_list_variable = { name = mw_neutral_list target = scope:previous_holder }
						}
					}
				}
			}
			if = { # Check 5: if root is in rebel supporter list, add root
				limit = { mw_0101_check_05_trigger = yes }

				every_ruler = {
					limit = {
						any_owned_story = {
							story_type = story_agot_mw_rebel
							is_target_in_variable_list = { name = mw_rebel_supporter_list target = scope:previous_holder }
							NOT = { is_target_in_variable_list = { name = mw_rebel_supporter_list target = root } }
						}
					}
					random_owned_story = {
						limit = {
							story_type = story_agot_mw_rebel
							is_target_in_variable_list = { name = mw_rebel_supporter_list target = scope:previous_holder }
							NOT = { is_target_in_variable_list = { name = mw_rebel_supporter_list target = root } }
						}
						add_to_variable_list = { name = mw_rebel_supporter_list target = root }
						if = {
							limit = {
								scope:previous_holder = {
									OR = {
										is_landed = no
										highest_held_title_tier = tier_barony
									}
								}
							}
							remove_list_variable = { name = mw_rebel_supporter_list target = scope:previous_holder }
						}
					}
				}
			}
			if = { # Check 6: if previous holder is rebel leader, add root to neutral list
				limit = { mw_0101_check_06_trigger = yes }

				every_ruler = {
					limit = {
						any_owned_story = {
							story_type = story_agot_mw_crown
							is_target_in_variable_list = { name = mw_rebel_leader_list target = scope:previous_holder }
							NOT = { is_target_in_variable_list = { name = mw_rebel_leader_list target = root } }
						}
					}
					random_owned_story = {
						limit = {
							story_type = story_agot_mw_crown
							is_target_in_variable_list = { name = mw_rebel_leader_list target = scope:previous_holder }
							NOT = { is_target_in_variable_list = { name = mw_rebel_leader_list target = root } }
						}
						add_to_variable_list = { name = mw_neutral_list target = root }
						if = {
							limit = {
								scope:previous_holder = {
									OR = {
										is_landed = no
										highest_held_title_tier = tier_barony
									}
								}
							}
							remove_list_variable = { name = mw_rebel_leader_list target = scope:previous_holder }
						}
					}
				}
			}
			if = { # Check 7: handle new pre_war_liege values
				limit = { mw_0101_check_07_trigger = yes }

				if = {
					limit = {
						exists = scope:previous_holder.var:pre_war_liege
						NOT = { root = scope:previous_holder.var:pre_war_liege }
						root = {
							NOR = {
								liege = scope:previous_holder
								has_character_flag = mw_changed_pre_war_liege
							}
						}
					}
					root = {
						set_variable = { name = pre_war_liege value = scope:previous_holder.var:pre_war_liege }
						add_character_flag = { flag = mw_changed_pre_war_liege days = 1 }
					}
				}
				every_ruler = {
					limit = {
						exists = var:pre_war_liege
						var:pre_war_liege = scope:previous_holder
						primary_title.tier < scope:title.tier
						trigger_if = {
							limit = {
								exists = scope:previous_holder.primary_title.tier
								scope:previous_holder = { is_alive = yes }
							}
							scope:previous_holder.primary_title.tier < scope:title.tier
						}
						#scope:previous_holder = { is_landed = no } # AGOT TODO I don't remember why I added this line; anyway, it causes issues and breaking mws!
					}
					if = {
						limit = {
							NOT = { this = root }
						}
						set_variable = { name = pre_war_liege value = root }
					}
					else = {
						remove_variable = pre_war_liege
					}
				}
				if = { # To prevent crown from becoming independent if mw ends
					limit = {
						is_landed = yes
						primary_title.tier < scope:title.tier
					}
					agot_mw_change_vassalage = { LIEGE = root }
				}
			}
		}

		root = { # Check 7: empire tier and has; TRIGGER NO ADDED ABOVE!
			if = {
				limit = {
					#always = no # might currently lead to conflicts if you are in an independence war and proclaimed yourself king
					has_title = title:e_the_iron_throne
					highest_held_title_tier = tier_empire
					has_variable = pre_war_liege
				}
				remove_variable = pre_war_liege
			}
		}
	}

	option = { }
}

# Upon joining a war as an attacker ally, assign to the rebel group
agot_mega_wars.0102 = {
	hidden = yes

	trigger = {
		#scope:war = {
		#	OR = {
		#		has_variable = pre_war_liege
		#		any_liege_or_above = {
		#			OR = {
		#				agot_mw_crown_trigger = yes
		#				has_variable = pre_war_liege
		#				agot_mw_rebel_leader_trigger = yes
		#			}
		#		}
		#	}
		# }
	}

	immediate = {
		scope:war = {
			if = {
				limit = {
					is_attacker = root
					exists = scope:war.primary_attacker.var:pre_war_liege
					scope:war.primary_attacker = { # If they're an attacker in a MW, they're always a rebel
						any_owned_story = {
							story_type = story_agot_mw_rebel
							NOT = { is_target_in_variable_list = { name = mw_rebel_supporter_list target = root } } # don't execute if root already is in list
						}
					}
				}
				scope:war.primary_attacker = { # If they're an attacker in a MW, they're always a rebel
					random_owned_story = {
						limit = { story_type = story_agot_mw_rebel }
						save_temporary_scope_as = mw_rebel_story_temp
					}
				}
				scope:war.primary_attacker.var:pre_war_liege ?= {
					save_temporary_scope_as = temp_pre_war_liege
				}
				if = {
					limit = {
						trigger_if = {
							limit = { exists = scope:temp_pre_war_liege }
							scope:temp_pre_war_liege.highest_held_title_tier >= tier_kingdom
							root = {
								highest_held_title_tier < tier_kingdom
							}
						}
					}
					root.liege = {
						save_temporary_scope_as = temp_pre_war_liege
					}
				}
				agot_mw_add_character_to_mw_list = {
					CHARACTER_SCOPE = root
					STORY_SCOPE = scope:mw_rebel_story_temp
					LIST = mw_rebel_supporter_list
					PRE_WAR_LIEGE_SCOPE = scope:temp_pre_war_liege
				}
			}
			if = {
				limit = {
					is_attacker = root
					exists = scope:war.primary_attacker.var:pre_war_liege
					scope:war.primary_attacker= { # If they're an attacker in a MW, they're always a rebel
						is_target_in_variable_list = { name = mw_rebel_supporter_list target = scope:war.primary_attacker.var:pre_war_liege }
					}
				}
				scope:war.primary_attacker= {
					random_owned_story = {
						limit = { story_type = story_agot_mw_rebel }
						save_temporary_scope_as = mw_rebel_story_temp
					}
				}
				scope:war.primary_attacker.var:pre_war_liege = {
					save_temporary_scope_as = temp_pre_war_liege
				}
				if = {
					limit = {
						scope:temp_pre_war_liege.highest_held_title_tier >= tier_kingdom
						root = {
							highest_held_title_tier < tier_kingdom
						}
					}
					root.liege = {
						save_temporary_scope_as = temp_pre_war_liege
					}
				}
				agot_mw_add_character_to_mw_list = {
					CHARACTER_SCOPE = root
					STORY_SCOPE = scope:mw_rebel_story_temp
					LIST = mw_rebel_supporter_list
					PRE_WAR_LIEGE_SCOPE = scope:temp_pre_war_liege
				}
			}
		}
	}
}

# on_title_destroyed
agot_mega_wars.0103 = {
	hidden = yes

	trigger = {
		agot_mw_crown_trigger = yes
		NOT = {
			any_held_title = {
				NOT = { this = scope:landed_title }
				tier = scope:landed_title.tier
			}
		}
	}

	immediate = {
		random_owned_story = {
			limit = { story_type = story_agot_mw_crown }

			save_scope_as = mw_crown_story
		}
		every_held_title = {
			limit = {
				NOT = { this = scope:landed_title }
				tier < scope:landed_title.tier
			}
			save_scope_as = root_titles_scope
		}

		scope:mw_crown_story = {
			every_in_list = {
				variable = mw_rebel_leader_list

				primary_title = { save_scope_as = rebel_leader_list_title_scope }

				if = {
					limit = {
						always = yes
						primary_title.tier >= scope:root_titles_scope.tier
					}

					add_to_list = remove_pre_war_liege
					add_to_list = stories_to_end_list
				}

				every_in_list = {
					variable = mw_rebel_supporter_list

					if = {
						limit = { primary_title.tier >= scope:root_titles_scope.tier }

						add_to_list = remove_pre_war_liege
					}
				}
			}
		}

		every_in_list = {
			list = remove_pre_war_liege

			remove_variable = pre_war_liege
		}

		every_in_list = {
			list = stories_to_end_list

			random_owned_story = {
				limit = { story_type = story_agot_mw_rebel }

				set_variable = {
					name = mw_outcome
					value = flag:invalidated
				}
				set_variable = {
					name = mw_status
					value = flag:ending
				}
			}
		}
	}

	option = { }
}


### Mega Wars Aftermath ###

# To be King or not to be King...
agot_mega_wars.0500 = {
	type = character_event
	title = agot_mega_wars.0500.t
	desc = {
		triggered_desc = {
			trigger = {
				NOT = { has_character_flag = response_event }
			}
			desc = agot_mega_wars.0500.desc.a
		}
		triggered_desc = {
			trigger = {
				exists = scope:claim_ancestor
				NOT = { has_character_flag = response_event }
			}
			desc = agot_mega_wars.0500.desc.ba
		}
		triggered_desc = {
			trigger = {
				has_character_flag = num_1
				NOT = { has_character_flag = response_event }
			}
			desc = agot_mega_wars.0500.desc.bb
		}
		triggered_desc = {
			trigger = {
				scope:mw_num_lp = 2
				NOT = { has_character_flag = response_event }
			}
			desc = agot_mega_wars.0500.desc.bc
		}
		triggered_desc = {
			trigger = {
				scope:mw_num_lp = 3
				NOT = { has_character_flag = response_event }
			}
			desc = agot_mega_wars.0500.desc.bd
		}
		triggered_desc = {
			trigger = {
				NOT = { has_character_flag = response_event }
			}
			desc = agot_mega_wars.0500.desc.c
		}
		triggered_desc = {
			trigger = {
				has_character_flag = response_event
			}
			desc = agot_mega_wars.0500.desc.d
		}
	}

	theme = war
	left_portrait = {
		character = scope:choosing_ruler
		#animation =
	}
	right_portrait = {
		character = scope:war_loser
		#animation =
	}

	immediate = {
		scope:attacker = { save_scope_as = choosing_ruler }
		scope:defender = { save_scope_as = war_loser }

		agot_mw_fetch_crown_scope = yes
		agot_mw_fetch_rebel_scope = yes

		scope:mw_rebel_story.var:defender_house = { save_scope_as = defender_house_scope }

		# Clearing flag in case of rejection by offered LP
		remove_character_flag = mw_gave_up_crown_after_megawar
		# Localization start #
		ordered_in_list = { # Fetch highest tier title
			list = target_titles
			order_by = tier
			max = 1
			save_scope_as = primary_target_title
		}
		if = { # Get LP option
			limit = {
				any_in_list = {
					list = attackers
					highest_held_title_tier = tier_kingdom
					NOT = { this = scope:choosing_ruler }
					count = 1
				}
			}
			every_in_list = {
				list = attackers
				limit = {
					highest_held_title_tier = tier_kingdom
					NOT = { this = scope:choosing_ruler }
				}

				save_scope_as = chosen_LP
			}
			add_character_flag = { flag = num_1 days = 4 }
		}
		else_if = { # Fetch two LPs for loc
			limit = {
				OR = {
					any_in_list = {
						list = attackers
						highest_held_title_tier = tier_kingdom
						NOT = { this = scope:choosing_ruler }
						count = 2
					}
					any_in_list = {
						list = attackers
						highest_held_title_tier = tier_kingdom
						NOT = { this = scope:choosing_ruler }
						count > 2
					}
				}
			}
			if = {
				limit = {
					any_in_list = {
						list = attackers
						highest_held_title_tier = tier_kingdom
						NOT = { this = scope:choosing_ruler }
						count = 2
					}
				}

				save_scope_value_as = { name = mw_num_lp value = 2 }
			}
			if = {
				limit = {
					any_in_list = {
						list = attackers
						highest_held_title_tier = tier_kingdom
						NOT = { this = scope:choosing_ruler }
						count > 2
					}
				}
				save_scope_value_as = { name = mw_num_lp value = 3 }
			}
			every_in_list = {
				list = attackers
				limit = {
					highest_held_title_tier = tier_kingdom
					NOT = { this = scope:choosing_ruler }
					NOR = {
						AND = {
							exists = scope:option_LP_1
							this = scope:option_LP_1
						}
						AND = {
							exists = scope:option_LP_2
							this = scope:option_LP_2
						}
					}
				}

				if = {
					limit = {
						NOR = {
							exists = scope:option_LP_2
							exists = scope:option_LP_1
						}
					}
					save_scope_as = option_LP_1
				}
				if = {
					limit = {
						exists = scope:option_LP_1
						NOR = {
							exists = scope:option_LP_2
							this = scope:option_LP_1
						}
					}
					save_scope_as = option_LP_2
				}
			}
		}
		if = { # has possible claim through blood? Fetch the ancestor
			limit = {
				OR = {
					father.father.house = scope:war_loser.house
					father.mother.house = scope:war_loser.house
					mother.father.house = scope:war_loser.house
					mother.mother.house = scope:war_loser.house
				}
			}

			if = {
				limit = {
					father.house = scope:war_loser.house
				}
				father = { save_scope_as = claim_ancestor }
			}
			if = {
				limit = {
					mother.house = scope:war_loser.house
				}
				if = {
					limit = { NOT = { exists = scope:claim_ancestor } }
					mother = { save_scope_as = claim_ancestor }
				}
			}
			if = {
				limit = {
					father.father.house = scope:war_loser.house
				}

				if = {
					limit = { NOT = { exists = scope:claim_ancestor } }
					father.father = { save_scope_as = claim_ancestor }
				}
			}
			if = {
				limit = {
					father.mother.house = scope:war_loser.house
				}

				if = {
					limit = { NOT = { exists = scope:claim_ancestor } }
					father.mother = { save_scope_as = claim_ancestor }
				}
			}
			if = {
				limit = {
					mother.father.house = scope:war_loser.house
				}

				if = {
					limit = { NOT = { exists = scope:claim_ancestor } }
					mother.father = { save_scope_as = claim_ancestor }
				}
			}
			if = {
				limit = {
					mother.mother.house = scope:war_loser.house
				}

				if = {
					limit = { NOT = { exists = scope:claim_ancestor } }
					mother.mother = { save_scope_as = claim_ancestor }
				}
			}
		}
		# Localization end #

		# Setup for aftermath events
		#if = {
			#limit = { any_held_title = { tier = tier_kingdom } }
		#}
		# Setup for aftermath events end

		# Setup AI weighting
		if = {
			limit = { exists = scope:war_loser.primary_heir }

			save_opinion_value_as = { name = opinion_of_heir target = scope:war_loser.primary_heir }
		}
	}

	option = { # Depose
		name = agot_mega_wars.0500.a

		trigger = {
			NOT = { has_title = scope:primary_target_title }
		}

		save_scope_value_as = {
			name = depose_king
			value = yes
		}

		scope:war_loser = { depose = yes }

		ai_chance = {
			base = 0

			# modifier = {
			#	add = scope:opinion_of_heir
			#	exists = scope:war_loser.primary_heir
			# }

			# modifier = {
			#	add = 10
			#	has_trait = compassionate
			# }
		}
	}

	option = { # Take the crown for yourself
		name = agot_mega_wars.0500.b

		if = {
			limit = {
				OR = {
					root = character:Baratheon_2
					root = character:Baratheon_3
					root = character:Baratheon_4
				}
			}
			set_global_variable = baratheons_won_throne
			set_variable = rr_summerhall_no_more
		}

		save_scope_as = chosen_crown_ruler
		agot_mw_cb_new_ruler_effect = yes

		ai_chance = {
			base = 50

			modifier = {
				father.house = scope:war_loser.house
				add = 20
			}
			modifier = {
				mother.house = scope:war_loser.house
				add = 20
			}
			modifier = {
				father.father.house = scope:war_loser.house
				add = 15
			}
			modifier = {
				father.mother.house = scope:war_loser.house
				add = 15
			}
			modifier = {
				mother.father.house = scope:war_loser.house
				add = 15
			}
			modifier = {
				mother.mother.house = scope:war_loser.house
				add = 15
			}

			modifier = {
				has_trait = ambitious
				add = 10
			}
			modifier = {
				has_trait = arrogant
				add = 7
			}
			modifier = {
				has_trait = diligent
				add = 5
			}
			modifier = {
				has_trait = brave
				add = 5
			}

			modifier = {
				has_trait = lazy
				add = -15
			}
			modifier = {
				has_trait = craven
				add = -10
			}

			modifier = {
				any_in_list = {
					list = target_titles

					root = { has_claim_on = prev }
				}
				add = 60
			}
		}
	}

	option = { # Give it to one of your LP supporters
		name = {
			trigger = {
				any_in_list = {
					list = attackers
					highest_held_title_tier = tier_kingdom
					NOT = { this = scope:choosing_ruler }
					count = 1
				}
			}
			text = agot_mega_wars.0500.ca
		}
		name = {
			trigger = {
				any_in_list = {
					list = attackers
					highest_held_title_tier = tier_kingdom
					NOT = { this = scope:choosing_ruler }
					count > 1
				}
			}
			text = agot_mega_wars.0500.cb
		}

		trigger = {
			any_in_list = {
				list = attackers
				highest_held_title_tier = tier_kingdom
				NOT = { this = scope:choosing_ruler }
				count > 0
			}
		}

		add_character_flag = mw_gave_up_crown_after_megawar

		if = { # Choose LP if multiple available
			limit = {
				any_in_list = {
					list = attackers
					highest_held_title_tier = tier_kingdom
					NOT = { this = scope:choosing_ruler }
					count > 1
				}
			}
			if = {
				limit = { is_ai = no }
				trigger_event = agot_mega_wars.0501
				custom_tooltip = MEGA_WARS_0500_cb_TOOLTIP
			}
			else = {
				agot_mw_aftermath_ai_choose_character_from_list_effect = { LIST_TYPE = list LIST = attackers MAX = 7 }
				scope:ai_selected_char = { trigger_event = agot_mega_wars.0502 }
			}
		}
		else = {
			scope:chosen_LP = {
				save_scope_as = chosen_crown_ruler
				trigger_event = agot_mega_wars.0502
			}
			custom_tooltip = MEGA_WARS_0500_ca_TOOLTIP
		}

		ai_chance = {
			base = 10

			modifier = {
				has_trait = lazy
				add = 20
			}
			modifier = {
				has_trait = craven
				add = 15
			}
			modifier = {
				root = character:Baratheon_2
				has_game_rule = agot_story_historical_events_historical_outcomes
				factor = 0
			}

			modifier = {
				root = character:Baratheon_2
				has_game_rule = agot_story_historical_events_weighted_outcomes
				factor = 0.5
			}
		}
	}

	#option = { # Call for a great council to determine the fate of the realm
	#	name = agot_mega_wars.0500.d

	#	trigger = { always = no } # TODO implement Great Council mechanic

	#	add_character_flag = { flag = hold_council days = 4 }
	#}

	after = {
		remove_variable = si_selected_character

		if = { # triggers event for remaining royal family to flee into exile
			limit = {
				NOT = { scope:primary_target_title.holder = scope:defender }
			}
			#scope:defender.house = {
			#	every_house_member = {
			#		trigger_event =
			#	}
			#}
		}
	}
}

# Choose a new ruler
agot_mega_wars.0501 = {
	type = character_event
	title = agot_mega_wars.0501.t
	desc = agot_mega_wars.0501.desc

	theme = war
	left_portrait = {
		character = root
		#animation =
	}
	right_portrait = {
		character = scope:mw_new_rebel_leader
		#animation =
	}

	widget = {
		is_shown = {
			any_in_list = {
				list = attackers
				count > 0
			}
		}
		gui = "event_window_character_selection_tall"
		container = "custom_widgets_container"
	}

	immediate = {
		every_in_list = {
			list = attackers

			limit = {
				highest_held_title_tier = tier_kingdom
				NOT = { this = scope:choosing_ruler }
			}

			root = {
				add_to_variable_list = {
					name = possible_characters
					target = prev
				}
			}
		}

		ordered_in_list = {
			variable = possible_characters
			set_variable = {
				name = si_selecting_character
				value = root
			}
			root = {
				set_variable = {
					name = si_selected_character
					value = prev
				}
			}
		}
	}

	option = {
		name = agot_mega_wars.0501.a

		custom_tooltip = MEGA_WARS_0501_a_TOOLTIP
		var:si_selected_character = {
			save_scope_as = chosen_crown_ruler
			remove_variable = si_selecting_character
			trigger_event = agot_mega_wars.0502
		}
		clear_variable_list = possible_characters
	}
}

# Chosen LP responds
agot_mega_wars.0502 = {
	type = character_event
	title = agot_mega_wars.0502.t
	desc = agot_mega_wars.0502.desc

	theme = war
	left_portrait = {
		character = root
		#animation =
	}
	right_portrait = {
		character = scope:mw_new_rebel_leader
		#animation =
	}

	immediate = {
	}

	option = { # Yes
		name = agot_mega_wars.0502.a

		agot_mw_cb_new_ruler_effect = yes

		ai_chance = {
			base = 80
		}
	}

	option = { # No
		name = agot_mega_wars.0502.b

		remove_from_list = attackers
		scope:choosing_ruler = {
			add_character_flag = { flag = response_event days = 4 }
			trigger_event = agot_mega_wars.0500
		}

		ai_chance = {
			base = 20
		}
	}
}

# Who shall rule old_demesne_main_title in your stead?
agot_mega_wars.0503 = {
	type = character_event
	title = agot_mega_wars.0503.t
	desc = {
		triggered_desc = { #
			trigger = { always = yes }
			desc = agot_mega_wars.0503.desc.a
		}
		first_valid = {
			triggered_desc = { # both brothers living;
				trigger = {
					this = character:Baratheon_2
					AND = {
						character:Baratheon_3 = { is_alive = yes }
						character:Baratheon_4 = { is_alive = yes }
					}
				}
				desc = agot_mega_wars.0503.desc.ba
			}
			triggered_desc = { # only one brother is alive;
				trigger = {
					this = character:Baratheon_2
					OR = {
						AND = {
							character:Baratheon_3 = { is_alive = yes }
							character:Baratheon_4 = { is_alive = no }
						}
						AND = {
							character:Baratheon_3 = { is_alive = no }
							character:Baratheon_4 = { is_alive = yes }
						}
					}
				}
				desc = agot_mega_wars.0503.desc.bb
			}
			triggered_desc = { # both brothers are dead, fetch other landed dynasty members;
				trigger = {
					this = character:Baratheon_2
					AND = {
						character:Baratheon_3 = { is_alive = no }
						character:Baratheon_4 = { is_alive = no }
					}
				}
				desc = agot_mega_wars.0503.desc.bc
			}
		}
		triggered_desc = { # possible Estermonts
			trigger = {
				this = character:Baratheon_2
				OR = {
					character:Estermont_1 = { is_alive = yes }
					character:Estermont_3 = { is_alive = yes }
					character:Estermont_4 = { is_alive = yes }
				}
			}
			desc = agot_mega_wars.0503.desc.c
		}
	}

	theme = crown
	override_background = { reference = throne_room_west }

	left_portrait = {
		character = root
	}

	trigger = {
		OR = { # Selection should only show up if there are valid characters
			any_close_or_extended_family_member = { exists = this }
			dynasty = { any_dynasty_member = { exists = this } }
			any_held_title = {
				tier > tier_barony
				NOT = { is_in_list = target_titles }
				any_in_de_jure_hierarchy = {
					trigger_if = {
						limit = { prev.tier = tier_kingdom }
						tier = tier_duchy
					}
					trigger_else = {
						tier = tier_county
					}
					NOR = {
						holder = root
						scope:mw_crown_story = { is_target_in_variable_list = { name = mw_loyalist_list target = prev.holder } }
					}
				}
			}
		}
		any_held_county = {
			count > 1
		}
	}

	immediate = {
		# Cleaning
		remove_character_flag = choose_from_family
		remove_character_flag = choose_from_dynasty
		remove_character_flag = choose_from_vassals
		###

		#loc scope
		if = {
			limit = {
				this = character:Baratheon_2
				OR = {
					AND = {
						character:Baratheon_3 = { is_alive = yes }
						character:Baratheon_4 = { is_alive = no }
					}
					AND = {
						character:Baratheon_3 = { is_alive = no }
						character:Baratheon_4 = { is_alive = yes }
					}
				}
			}
			if = {
				limit = {
					character:Baratheon_3 = { is_alive = yes }
				}
				character:Baratheon_3 = { save_scope_as = living_brother }
			}
			else_if = {
				limit = {
					character:Baratheon_4 = { is_alive = yes }
				}
				character:Baratheon_4 = { save_scope_as = living_brother }
			}
		}

		ordered_held_title = {
			limit = {
				tier > tier_barony
				NOT = { is_in_list = target_titles }
			}
			order_by = tier
			add_to_list = old_demesne_main_titles_list
			save_scope_as = old_demesne_main_title
		}

		# For localization
		every_close_or_extended_family_member = {
			limit = {
				NOT = { this = root }
				is_lowborn = no
				NOT = {
					has_trait = kingsguard
					has_trait = maester
					has_trait = nightswatch
				}
			}
			save_scope_value_as = { name = allow_family value = yes }
			add_to_list = close_and_extended_family_members
		}
		dynasty = {
			every_dynasty_member = {
				limit = {
					NOR = {
						this = root
						is_in_list = close_and_extended_family_members
					}
					NOT = {
						has_trait = kingsguard
						has_trait = maester
						has_trait = nightswatch
					}
				}
				save_scope_value_as = { name = allow_dynasty value = yes }
				add_to_list = dynasty_members
			}
		}
		every_in_list = {
			list = old_demesne_main_titles_list

			every_in_de_jure_hierarchy = {
				limit = {
					trigger_if = {
						limit = { prev.tier = tier_kingdom }
						tier = tier_duchy
					}
					trigger_else = {
						tier = tier_county
					}
					NOR = {
						holder = root
						scope:mw_crown_story = { is_target_in_variable_list = { name = mw_loyalist_list target = prev.holder } }
					}
				}
				save_scope_value_as = { name = allow_vassals value = yes }
				holder = { add_to_list = title_vassals }
			}
		}
	}

	option = { # Choose someone from my family
		name = agot_mega_wars.0503.a

		trigger = { exists = scope:allow_family }

		if = {
			limit = { is_ai = no }

			add_character_flag = { flag = choose_from_family days = 1 }
		}
		else = {
			agot_mw_aftermath_ai_choose_character_from_list_effect = { LIST_TYPE = list LIST = close_and_extended_family_members MAX = 1 }
		}

		ai_chance = {
			base = 80
		}
	}

	option = { # Choose a dynasty member
		name = agot_mega_wars.0503.b

		trigger = { exists = scope:allow_dynasty }

		if = {
			limit = { is_ai = no }

			add_character_flag = { flag = choose_from_dynasty days = 1 }
		}
		else = {
			agot_mw_aftermath_ai_choose_character_from_list_effect = { LIST_TYPE = list LIST = dynasty_members MAX = 1 }
		}

		ai_chance = {
			base = 10
		}
	}

	option = { # Choose one of my vassals
		name = agot_mega_wars.0503.c

		trigger = { exists = scope:allow_vassals }

		if = {
			limit = { is_ai = no }

			add_character_flag = { flag = choose_from_vassals days = 1 }
		}
		else = {
			agot_mw_aftermath_ai_choose_character_from_list_effect = { LIST_TYPE = list LIST = title_vassals MAX = 1 }
		}

		ai_chance = {
			base = 10
		}
	}

	after = {
		if = {
			limit = { is_ai = no }

			trigger_event = agot_mega_wars.0504
		}
		else = {
			agot_mw_grant_old_demesne_main_title_to_char_effect = { NEW_HOLDER = scope:ai_selected_char }
			if = {
				limit = {
					any_in_list = {
						list = target_titles
						this = title:c_dragonstone
					}
				}
				trigger_event = { id = agot_mega_wars.0505 days = 4 }
			}
		}
		every_vassal_or_below = {
			limit = { highest_held_title_tier > tier_barony }
			trigger_event = agot_mega_wars.0510
		}
	}
}

# Choose a new ruler for old_demesne_main_titles_list
agot_mega_wars.0504 = {
	type = character_event
	title = agot_mega_wars.0504.t
	desc = agot_mega_wars.0504.desc

	theme = war
	left_portrait = {
		character = root
		animation = personality_callous
	}
	right_portrait = {
		character = scope:mw_new_rebel_leader
		#animation =
	}

	widget = {
		is_shown = {
			is_ai = no
		}
		gui = "event_window_character_selection_tall"
		container = "custom_widgets_container"
	}

	immediate = {
		if = {
			limit = { has_character_flag = choose_from_family }
			every_in_list = {
				list = close_and_extended_family_members

				root = {
					add_to_variable_list = {
						name = possible_characters
						target = prev
					}
				}
			}
		}
		if = {
			limit = { has_character_flag = choose_from_dynasty }
			every_in_list = {
				list = dynasty_members

				root = {
					add_to_variable_list = {
						name = possible_characters
						target = prev
					}
				}
			}
		}
		if = {
			limit = { has_character_flag = choose_from_vassals }
			every_in_list = {
				list = title_vassals

				root = {
					add_to_variable_list = {
						name = possible_characters
						target = prev
					}
				}
			}
		}

		agot_mw_aftermath_ai_choose_character_from_list_effect = { LIST_TYPE = variable LIST = possible_characters MAX = 1 }

		if = {
			limit = { exists = scope:ai_selected_char }

			scope:ai_selected_char = {
				root = { set_variable = { name = si_selected_character value = prev } }
				set_variable = si_selecting_character
			}
		}
	}

	option = {
		name = agot_mega_wars.0504.a

		#trigger = { has_variable = si_selected_character }

		#custom_tooltip = MEGA_WARS_0501_a_TOOLTIP
		#var:si_selected_character = {
		#	trigger_event = agot_mega_wars.0502
		#}

		if = {
			limit = { exists = var:si_selected_character }

			agot_mw_grant_old_demesne_main_title_to_char_effect = { NEW_HOLDER = root.var:si_selected_character }
			scope:mw_rebel_story = {
				add_to_variable_list = { name = mw_rebel_supporter_list target = root.var:si_selected_character }
			}
		}

		if = {
			limit = {
				NOR = {
					any_held_title = { this = title:c_dragonstone }
					any_in_list = {
						list = old_demesne_main_titles_list
						this = title:c_dragonstone
					}
				}
				any_in_list = {
					list = target_titles
					this = title:c_dragonstone
				}
			}

			trigger_event = { id = agot_mega_wars.0505 days = 4 }
		}
		else_if = {
			limit = {
				any_held_title = { this = title:c_dragonstone }
				any_in_list = {
					list = old_demesne_main_titles_list
					this = title:c_dragonstone
				}
			}

			trigger_event = agot_mega_wars.0505
		}
		#else = { # AGOT TODO disabed for now
		#	trigger_event = agot_mega_wars.0506
		#}

		# Cleaning
		remove_character_flag = choose_from_family
		remove_character_flag = choose_from_dynasty
		remove_character_flag = choose_from_vassals
		###
	}

	option = {
		name = agot_mega_wars.0504.b

		trigger_event = agot_mega_wars.0503
	}

	after = {
		clear_variable_list = possible_characters
		var:si_selected_character = { remove_variable = si_selecting_character }
		remove_variable = si_selected_character
	}
}

# Decide what to do with Dragonstone # AGOT TODO revisit event once Dragonstone heir thing is added
agot_mega_wars.0505 = {
	type = character_event
	title = agot_mega_wars.0505.t
	desc = agot_mega_wars.0505.desc

	theme = crown
	override_background = { reference = throne_room_west }
	left_portrait = {
		character = scope:choosing_ruler
	}


	trigger = {
		any_sibling = {
			is_alive = yes
			is_ruler = no
		}
		has_title = title:c_dragonstone
	}

	immediate = {
		every_sibling = {
			limit = {
				is_alive = yes
				is_ruler = no
			}

			root = {
				add_to_variable_list = {
					name = possible_characters
					target = prev
				}
			}
		}
		if = {
			limit = {
				any_sibling = {
					is_alive = yes
					is_ruler = no
					count = 1
				}
			}
			random_sibling = {
				limit = {
					is_alive = yes
					is_ruler = no
				}
				save_scope_as = chosen_sibling
			}
		}
	}

	widget = {
		is_shown = {
			any_sibling = {
				is_alive = yes
				is_ruler = no
				count > 1
			}
		}
		gui = "event_window_character_selection_tall"
		container = "custom_widgets_container"
	}

	option = { #
		name = agot_mega_wars.0505.a
		trigger = {
			exists = scope:chosen_sibling
		}

		scope:chosen_sibling = {
			get_title = title:c_dragonstone
			get_title = title:d_dragonstone
			get_title = title:k_dragonstone
		}

		create_title_and_vassal_change = {
			type = granted
			save_scope_as = dragonstone
			add_claim_on_loss = no
		}

		every_vassal = {
			limit = {
				NOT = { this = scope:chosen_sibling }
				primary_title.tier > tier_barony
				capital_province.county ?= { target_is_de_jure_liege_or_above = title:k_dragonstone }
				liege = root
			}
			change_liege = {
				liege = scope:chosen_sibling
				change = scope:dragonstone
			}
		}
		resolve_title_and_vassal_change = scope:dragonstone
	}

	option = { #
		name = agot_mega_wars.0505.b
		trigger = {
			exists = var:si_selected_character
		}

		var:si_selected_character = { get_title = title:c_dragonstone }
		var:si_selected_character = { get_title = title:d_dragonstone }
		var:si_selected_character = { get_title = title:k_dragonstone }

		create_title_and_vassal_change = {
			type = granted
			save_scope_as = dragonstone
			add_claim_on_loss = no
		}

		every_vassal = {
			limit = {
				NOT = { this = var:si_selected_character }
				primary_title.tier > tier_barony
				capital_province.county ?= { target_is_de_jure_liege_or_above = title:k_dragonstone }
				liege = root
			}
			change_liege = {
				liege = var:si_selected_character
				change = scope:dragonstone
			}
		}
		resolve_title_and_vassal_change = scope:dragonstone
	}

	option = { # Keep it for youself
		name = agot_mega_wars.0505.c
	}

	after = {
		clear_variable_list = possible_characters
		remove_variable = si_selected_character

		#trigger_event = agot_mega_wars.0506 # AGOT TODO disabled for now
	}
}

# Decide what to do with the enemy house/dynasty # AGOT TODO disabed for now
agot_mega_wars.0506 = {
	type = character_event
	title = agot_mega_wars.0506.t
	desc = agot_mega_wars.0506.desc
	orphan = yes # AGOT TODO disabed for now

	theme = war
	left_portrait = {
		character = root
		#animation =
	}
	right_portrait = {
		character = scope:war_loser
		#animation =
	}

	immediate = {
	}

	option = { # Leave them be
		name = agot_mega_wars.0506.a


	}

	option = { # Exile close family
		name = agot_mega_wars.0506.b


	}

	option = { # Exile entire dynasty
		name = agot_mega_wars.0506.b


	}

	option = { # Kill close family
		name = agot_mega_wars.0506.b


	}

	option = { # Kill entire dynasty
		name = agot_mega_wars.0506.b

		#every_in_list = { AGOT TODO : Create List of dynasty members to be killed
		#	list = defender_house_members

		#	death = { death_reason = death_execution killer = root }
		#}
	}
}

# Notification for realm
agot_mega_wars.0510 = {
	type = letter_event
	title = agot_mega_wars.0510.t
	opening = {
		desc = agot_mega_wars.0510.desc.a
	}
	desc = {
		desc = agot_mega_wars.0510.desc.b
		triggered_desc = { #
			trigger = {
				scope:ruler = yes
				scope:choosing_ruler = scope:primary_target_title.holder
			}
			desc = agot_mega_wars.0510.desc.c
		}
		triggered_desc = { #
			trigger = {
				scope:ruler = yes
				NOT = { scope:choosing_ruler = scope:primary_target_title.holder }
			}
			desc = agot_mega_wars.0510.desc.d
		}
		triggered_desc = { #
			trigger = { scope:depose_king = yes }
			desc = agot_mega_wars.0510.desc.e
		}
		triggered_desc = { #
			trigger = { scope:choosing_ruler = { NOT = { has_title = scope:old_demesne_main_title } } }
			desc = agot_mega_wars.0510.desc.f
		}
	}
	sender = scope:choosing_ruler

	immediate = {
	}

	option = { #
		name = agot_mega_wars.0510.a

	}

	option = { #lets player switch to newly crowned king
		name = agot_mega_wars.0510.b

		trigger = { is_ai = no }

		set_player_character = scope:chosen_crown_ruler
	}
}

# TODO add notification event for new ruler


### Deal with traitors ###

# Punishment initial event
agot_mega_wars.0600 = {
	type = character_event
	title = agot_mega_wars.0600.t
	desc = {
		first_valid = {
			triggered_desc = {
				trigger = { has_character_flag = victorious_mw_rebel }
				desc = agot_mega_wars.0600.nonrebel.desc
			}
			desc = agot_mega_wars.0600.desc
		}
	}

	theme = war
	left_portrait = {
		character = root
		#animation =
	}
	right_portrait = {
		character = scope:war_loser
		#animation =
	}

	immediate = {
	}

	option = { #
		name = agot_mega_wars.0600.a

		if = {
			limit = { has_character_flag = victorious_mw_rebel }
			remove_character_flag = victorious_mw_rebel
		}

		if = { # Give AI punishers event to PUNISH!!!!
			limit = {
				is_ai = no
				has_royal_court = yes # make sure only royal court characters get a court event
			}

			open_view_data = {
				view = royal_court
				player = root
			}
			trigger_event = agot_mega_wars.0601
		}
		else = {
			trigger_event = agot_mega_wars.0605
		}
	}
}

# Punishment court event
agot_mega_wars.0601 = {
	type = court_event
	title = agot_mega_wars.0601.t
	desc = agot_mega_wars.0601.desc

	theme = war

	court_scene = {
		button_position_character = scope:selected_traitor
		court_event_force_open = yes
		show_timeout_info = no
		should_pause_time = yes
		roles = {
			scope:selected_traitor = {
				group = petitioners_group
				animation = throne_room_kneel_2
			}
		}
	}

	widget = {
		is_shown = {
			always = yes
		}
		gui = "event_window_mw_punishment_summary"
		container = "custom_widgets_container"
	}

	trigger = {
		any_in_list = {
			variable = mw_traitors_list
			is_alive = yes
		}
	}

	immediate = {
		#set_variable = { name = crown_target value = root } # AGOT TODO; I think this one serves no purpose here
		remove_variable = selected_traitor
		if = {
			limit = { NOT = { has_variable = selected_traitor } }
			agot_mw_fetch_traitor_variable = yes
		}
		if = {
			limit = { exists = var:selected_traitor }

			var:selected_traitor = { save_scope_as = selected_traitor }
			agot_mw_traitor_gui_generate_traitor_data_lists_effect = { CROWN_TARGET = root TRAITOR_TARGET = scope:selected_traitor }
		}
		agot_mw_traitor_gui_update_indicator_and_flags_effect = yes
	}

	option = { # Let LP deal with this traitor
		name = agot_mega_wars.0601.a

		trigger = {
			highest_held_title_tier = tier_empire
			NOT = { scope:selected_traitor.liege = root }
			exists = scope:selected_traitor.liege
		}

		scope:selected_traitor = {
			random_liege_or_above = {
				limit = { highest_held_title_tier = tier_kingdom }

				add_to_variable_list = {
					name = mw_traitors_list
					target = scope:selected_traitor
				}
				if = {
					limit = { is_ai = yes }
					trigger_event = agot_mega_wars.0605
				}
			}
		}
		agot_mw_gui_next_traitor_effect = yes
	}

	option = { # Let LP deal with all his vassal traitor
		name = agot_mega_wars.0601.b

		trigger = {
			highest_held_title_tier = tier_empire
			NOT = { scope:selected_traitor.liege = root }
			any_in_list = {
				variable = mw_traitors_list

				count > 1

				any_liege_or_above = {
					highest_held_title_tier = tier_kingdom
					scope:selected_traitor = {
						any_liege_or_above = {
							highest_held_title_tier = tier_kingdom
							save_temporary_scope_as = temp_lieges_scope
						}
					}
					this = scope:temp_lieges_scope
				}
			}
		}

		# Move all vassals from mw_selected_traitor's liege to liege's traitor list
		every_in_list = {
			variable = mw_traitors_list

			limit = {
				any_liege_or_above = {
					highest_held_title_tier = tier_kingdom
					save_temporary_scope_as = temp_liege_scope
					scope:selected_traitor = {
						any_liege_or_above = {
							highest_held_title_tier = tier_kingdom
							this = scope:temp_liege_scope
						}
					}
				}
			}

			random_liege_or_above = {
				limit = {
					highest_held_title_tier = tier_kingdom
					save_temporary_scope_as = temp_liege_scope
					scope:selected_traitor = {
						any_liege_or_above = {
							highest_held_title_tier = tier_kingdom
							this = scope:temp_liege_scope
						}
					}
				}

				add_to_variable_list = {
					name = mw_traitors_list
					target = prev
				}
			}

			save_temporary_scope_as = temp_traitors_scope

			custom_tooltip = agot_mega_wars.0601.b.tt
			root = { remove_list_variable = { name = mw_traitors_list target = prev } }
		}

		scope:selected_traitor = {
			random_liege_or_above = {
				limit = { highest_held_title_tier = tier_kingdom }

				add_to_variable_list = {
					name = mw_traitors_list
					target = scope:selected_traitor
				}
				if = {
					limit = { is_ai = yes }
					trigger_event = agot_mega_wars.0605
				}
			}
		}
		agot_mw_gui_next_traitor_effect = yes
	}

	option = { # Keep in dungeons for now --> remove from list
		name = agot_mega_wars.0601.c

		agot_mw_gui_next_traitor_effect = yes
	}

	option = { # Pass your sentence (Punishment)
		name = agot_mega_wars.0601.d

		agot_mw_gui_transfer_punishment_vars_to_traitor = yes

		agot_mw_apply_opinion_modifiers = { CROWN_TARGET = root TRAITOR_TARGET = scope:selected_traitor }

		if = {
			limit = { exists = scope:selected_traitor }
			show_as_tooltip = { agot_mw_gui_punish_traitor_effect = { CROWN_TARGET = root TRAITOR_TARGET = scope:selected_traitor } }
		}
		scope:selected_traitor = {
			set_variable = { name = crown_target value = root }
			trigger_event = { id = agot_mega_wars.0603 }
		}
		agot_mw_gui_next_traitor_effect = yes
	}

	option = { # DEBUG; This just skips everything
		name = agot_mega_wars.0601.e

		trigger = { has_game_rule = agot_debug_on }

		clear_variable_list = mw_traitors_list
	}

	#option = { # Select a traitor | currently unused cause too clunky in event chain
	#	name = agot_mega_wars.0601.c
	#}

	after = {
		if = { # if there are still traitors on the list, repeat event
			limit = { has_variable_list = mw_traitors_list }

			trigger_event = agot_mega_wars.0601
		}
		else = { # else resolve punishment
			every_vassal_or_below = { # Let LPs punish
				limit = { has_variable_list = mw_traitors_list }

				trigger_event = agot_mega_wars.0600
			}
			trigger_event = agot_mega_wars.0604 # Check for post war rebels
			agot_mw_clear_traitor_setup_data_effect = yes
			remove_variable = mw_punishment_window
		}
		#else = { # AGOT TODO
		#	trigger_event = agot_mega_wars.0602
		#}
	}
}

# Give taken land to loyalists | Currently unused
agot_mega_wars.0602 = {
	type = court_event
	title = agot_mega_wars.0602.t
	desc = agot_mega_wars.0602.desc
	orphan = yes

	theme = war

	court_scene = {
		button_position_character = scope:selected_traitor
		court_event_force_open = yes
		show_timeout_info = no
		should_pause_time = yes
		roles = {
			scope:selected_traitor = {
				group = petitioners_group
				animation = throne_room_kneel_2
			}
		}
	}

	immediate = {
		scope:mw_rebel_story = {
			every_in_list = {
				variable = mw_rebel_supporter_list

				every_held_title = {
					limit = {
						tier = tier_county
						any_claimant = { exists = this }
					}

					add_to_list = rebel_list_counties_list
				}
			}
		}
		scope:mw_crown_story = {
			every_in_list = {
				variable = mw_loyalist_list

				limit = { is_claimant = yes }

				add_to_list = loyalist_list
			}
		}
	}

	option = { #
		name = agot_mega_wars.0602.a

		every_in_list = {
			list = rebel_list_counties_list

			save_scope_as = rebel_list_counties_scope

			every_in_list = {
				list = loyalist_list

				limit = { has_strong_claim_on = prev }

				get_title = prev
			}
		}
		#trigger_event = agot_mega_wars.0601
	}
}

# Traitor gets notification about his punishment
agot_mega_wars.0603 = {
	type = character_event
	title = agot_mega_wars.0603.t
	desc = {
		desc = agot_mega_wars.0603.desc.a # Standard introduction desc
		triggered_desc = { #
			trigger = { has_variable = take_hostage }
			desc = agot_mega_wars.0603.desc.b
		}
		triggered_desc = { #
			trigger = { has_variable = take_specific_title }
			desc = agot_mega_wars.0603.desc.c
		}
		triggered_desc = { #
			trigger = { has_variable = take_main_titles }
			desc = agot_mega_wars.0603.desc.d
		}
		triggered_desc = { #
			trigger = { has_variable = take_secondary_titles }
			desc = agot_mega_wars.0603.desc.e
		}
		triggered_desc = { #
			trigger = { has_variable = take_entire_demesne }
			desc = agot_mega_wars.0603.desc.f
		}
		triggered_desc = { #
			trigger = { has_variable = take_entire_demesne_except_capital }
			desc = agot_mega_wars.0603.desc.g
		}
		triggered_desc = { #
			trigger = { has_variable = take_half_demesne }
			desc = agot_mega_wars.0603.desc.h
		}
		triggered_desc = { #
			trigger = { has_variable = take_artifact }
			desc = agot_mega_wars.0603.desc.i
		}
		triggered_desc = { #
			trigger = { has_variable = execution_traitor }
			desc = agot_mega_wars.0603.desc.j
		}
		triggered_desc = { #
			trigger = { has_variable = execution_family }
			desc = agot_mega_wars.0603.desc.k
		}
		triggered_desc = { #
			trigger = { has_variable = execution_house }
			desc = agot_mega_wars.0603.desc.l
		}
		triggered_desc = { #
			trigger = { has_variable = sent_to_wall }
			desc = agot_mega_wars.0603.desc.m
		}
		triggered_desc = { #
			trigger = { has_variable = expel_traitor }
			desc = agot_mega_wars.0603.desc.n
		}
		triggered_desc = { #
			trigger = { has_variable = expel_family }
			desc = agot_mega_wars.0603.desc.o
		}
		triggered_desc = { #
			trigger = { has_variable = expel_house }
			desc = agot_mega_wars.0603.desc.p
		}
	}

	theme = war
	left_portrait = {
		character = root
		#animation =
	}
	right_portrait = {
		character = root.var:crown_target
		#animation =
	}

	trigger = {
		has_variable = crown_target
	}

	immediate = {
		save_scope_as = selected_traitor
		var:crown_target = { save_scope_as = crown_target }
		set_variable = { name = selected_traitor value = root }
		agot_mw_traitor_gui_generate_traitor_data_lists_effect = { CROWN_TARGET = scope:crown_target TRAITOR_TARGET = scope:selected_traitor }

		set_variable = { name = acceptance_indicator value = agot_mw_acceptance_base }
		change_variable = { name = acceptance_indicator add = agot_mw_acceptance_indicator_script_value }

		if = {
			limit = {
				has_variable = take_hostage
				NOT = { has_variable = selected_hostage }
			}

			random_in_list = {
				variable = mw_traitors_hostage_list

				root = { set_variable = { name = selected_hostage value = prev } }
			}
		}
	}

	option = { # I accept my punishment
		name = {
			text = {
				first_valid = {
					triggered_desc = {
						trigger = {
							#NOR = { # AGOT TODO
							#	scope:crown_target = {
							#		any_in_list = {
							#			variable = mw_loyalist

							#			root = { is_imprisoned_by = prev }
							#		}
							#	}
							#	is_imprisoned_by = scope:crown_target
							#}
							is_imprisoned = no
						}
						desc = agot_mega_wars.0603.a.1a
					}
					triggered_desc = {
						trigger = {
							#OR = { # AGOT TODO
							#	scope:crown_target = {
							#		any_in_list = {
							#			variable = mw_loyalist

							#			root = { is_imprisoned_by = prev }
							#		}
							#	}
							#	is_imprisoned_by = scope:crown_target
							#}
							is_imprisoned = yes
						}
						desc = agot_mega_wars.0603.a.1b
					}
				}
			}
		}

		if = {
			limit = {
				#OR = { # AGOT TODO
				#	scope:crown_target = {
				#		any_in_list = {
				#			variable = mw_loyalist

				#			root = { is_imprisoned_by = prev }
				#		}
				#	}
				#	is_imprisoned_by = scope:crown_target
				#}
				is_imprisoned = yes
			}
			custom_tooltip = MEGA_WARS_0300_a1_IMPRISONED
		}

		#trigger = { agot_mw_has_any_punishment_variable_trigger = yes }

		agot_mw_gui_punish_traitor_effect = {
			CROWN_TARGET = scope:crown_target
			TRAITOR_TARGET = root
		}

		if = {
			limit = { is_alive = yes }

			agot_mw_clear_traitor_setup_data_effect = yes

			set_variable = { name = mw_is_loyal_to value = scope:crown_target.top_liege days = 3 } # Ensures that you join the crown in a possible post war rebellion
		}

		ai_chance = {
			base = 0

			modifier = {
				always = yes
				exists = scope:selected_traitor
				add = agot_mw_acceptance_indicator_script_value
			}
		}
	}

	option = { # De fack do i care? Do not accept punishment
		name = agot_mega_wars.0603.b

		trigger = { # You can't rebel if you are imprisoned
			agot_mw_has_any_punishment_variable_trigger = yes
			#NOR = { # AGOT TODO
			#	scope:crown_target = {
			#		any_in_list = {
			#			variable = mw_loyalist

			#			root = { is_imprisoned_by = prev }
			#		}
			#	}
			#	is_imprisoned_by = scope:crown_target
			#	is_imprisoned_by = scope:crown_target.liege
			#}
			is_imprisoned = no
		}

		# TODO Add him to the list of guys who don't accept punishment. Crown gets option to fight them once more or to give in (heavy prestige loss and heavy dread gain penality).
		var:crown_target = {
			add_to_variable_list = {
				name = mw_post_war_rebels
				target = prev
			}
		}
		custom_tooltip = MEGA_WARS_0300_b

		ai_chance = {
			base = 20
		}
	}

	after = {
		if = {
			limit = { is_alive = yes }
			remove_variable = crown_target
			remove_variable = selected_traitor
		}
	}
}

# Crown gets notification about lords who don't accept punishment
agot_mega_wars.0604 = {
	type = character_event
	title = agot_mega_wars.0604.t
	desc = {
		triggered_desc = {
			trigger = { any_in_list = { variable = mw_post_war_rebels count = 1 } }
			desc = agot_mega_wars.0604.desc.a
		}
		triggered_desc = {
			trigger = { any_in_list = { variable = mw_post_war_rebels count > 1 } }
			desc = agot_mega_wars.0604.desc.b
		}
	}

	theme = war
	left_portrait = {
		character = root
		#animation =
	}
	right_portrait = {
		character = scope:mw_new_rebel_leader
		#animation =
	}

	trigger = {
		has_variable_list = mw_post_war_rebels
	}

	immediate = {
		random_in_list = {
			variable = mw_post_war_rebels
			weight = {
				base = 1
				modifier = {
					add = 1000
					highest_held_title_tier = tier_kingdom
				}
				modifier = {
					add = 350
					highest_held_title_tier = tier_duchy
				}
				modifier = { # please no children as leaders if possible
					add = 10000
					is_adult = yes
				}
			}
			save_scope_as = mw_new_rebel_leader
			root = { set_variable = { name = mw_new_rebel_leader value = prev } }
		}
	}

	option = { # Make them pay
		name = {
			text = {
				first_valid = {
					triggered_desc = {
						trigger = { any_in_list = { variable = mw_post_war_rebels count = 1 } }
						desc = agot_mega_wars.0604.a.1
					}
					triggered_desc = {
						trigger = { any_in_list = { variable = mw_post_war_rebels count > 1 } }
						desc = agot_mega_wars.0604.a.2
					}
				}
			}
		}

		remove_list_variable = { name = mw_post_war_rebels target = scope:mw_new_rebel_leader }

		if = { # if there already is a depose war, make the post war rebels join that war
			limit = {
				any_character_war = {
					is_defender = root
					using_cb = agot_revolt_war
				}
			}
			random_character_war = {
				limit = {
					is_defender = root
					using_cb = agot_revolt_war
				}
				save_scope_as = agot_revolt_war
			}
			every_in_list = {
				variable = mw_post_war_rebels

				scope:agot_revolt_war = { add_attacker = prev }
			}
		}
		else = {
			if = {
				limit = { scope:mw_new_rebel_leader.primary_title.tier = tier_kingdom }

				every_in_list = { # in case another mega war starts off, these rulers are marked to stay on the same side
					variable = mw_post_war_rebels

					set_variable = { name = mw_is_loyal_to value = scope:mw_new_rebel_leader }
				}
			}
			scope:mw_new_rebel_leader = {
				start_war = {
					casus_belli = agot_revolt_war
					target = root
				}
			}
			random_character_war = {
				limit = { using_cb = agot_revolt_war }
				save_scope_as = agot_revolt_war
			}
			every_in_list = {
				variable = mw_post_war_rebels

				limit = { NOT = { this = scope:mw_new_rebel_leader } }

				save_scope_as = post_rebel_scope

				custom_tooltip = POST_REBEL_JOINS_TOOLTIP # Tooltip (or any other effect) needed for start_war tooltip showing up correctly, this is a vanilla bug
			}
			if = {
				limit = { scope:mw_new_rebel_leader.primary_title.tier < tier_kingdom }

				every_in_list = {
					variable = mw_post_war_rebels

					scope:agot_revolt_war = { add_attacker = prev }
				}
			}
		}

		ai_chance = {
			base = 60

			modifier = {
				has_trait = just
				add = 20
			}
			modifier = {
				has_trait = arrogant
				add = 10
			}
			modifier = {
				has_trait = stubborn
				add = 10
			}
			modifier = {
				has_trait = vengeful
				add = 10
			}
			modifier = {
				has_trait = wrathful
				add = 10
			}
			modifier = {
				has_trait = sadistic
				add = 10
			}
			modifier = {
				has_trait = paranoid
				add = 10
			}

			modifier = {
				has_trait = craven # AHHHHHH Please dont hurty hurty!!!
				add = -40
			}
			modifier = {
				has_trait = trusting
				add = -10
			}
		}
	}

	option = { # Let them go...
		name = {
			text = {
				first_valid = {
					triggered_desc = {
						trigger = { any_in_list = { variable = mw_post_war_rebels count = 1 } }
						desc = agot_mega_wars.0604.b.1
					}
					triggered_desc = {
						trigger = { any_in_list = { variable = mw_post_war_rebels count > 1 } }
						desc = agot_mega_wars.0604.b.2
					}
				}
			}
		}

		add_character_modifier = { modifier = agot_mw_let_traitors_go_modifier years = 5 }

		add_dread = -50
		add_prestige = -1000

		agot_mw_clear_traitor_setup_data_effect = yes

		ai_chance = {
			base = 40
		}
	}

	after = {
		clear_variable_list = mw_post_war_rebels
		remove_variable = mw_new_rebel_leader
	}
}

# AI chooses penality harshness for traitor | AI only
agot_mega_wars.0605 = {
	type = character_event
	title = agot_mega_wars.0605.t
	desc = agot_mega_wars.0605.desc

	theme = war
	left_portrait = {
		character = root
		#animation =
	}

	immediate = {
		agot_mw_aftermath_ai_punishes_effect = { TRAITOR_TARGET = root.var:selected_traitor }
	}

	option = { # PLACEHOLDER
		name = agot_mega_wars.0605.a
	}
}

agot_mega_wars.0606 = {
	hidden = yes

	immediate = {
		agot_mw_clear_traitor_data_effect = yes
	}
}




#
agot_mega_wars.9999 = {
	type = character_event
	title = agot_mega_wars.9999.t
	desc = agot_mega_wars.9999.desc
	orphan = yes
	#override_background = {
	#	event_background =
	#}
	override_icon = {
		reference = "gfx/interface/icons/event_types/type_war.dds"
	}
	theme = war
	left_portrait = {
		character = root
		#animation =
	}
	right_portrait = {
		character = scope:mw_new_rebel_leader
		#animation =
	}

	immediate = {
	}

	option = {
		name = agot_mega_wars.9999.a
	}

	option = {
		name = agot_mega_wars.9999.b

	}

	option = {
		name = agot_mega_wars.9999.c

	}

	after = {
	}
}