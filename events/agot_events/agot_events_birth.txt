namespace = agot_birth_events

agot_birth_events.0001 = {
	hidden = yes
	scope = none

	trigger = {
		exists = scope:mother
		exists = scope:father
		NAND = {
			scope:mother = {
				has_trait = incestuous
			}
			scope:father = {
				has_trait = incestuous
			}
		}
		OR = {
			scope:mother = {
				relation_with_character_is_incestuous_in_faith_trigger = { CHARACTER = scope:father FAITH = scope:mother.faith }
				agot_adelphogamous_incest_allowed = no
			}
			scope:father = {
				relation_with_character_is_incestuous_in_faith_trigger = { CHARACTER = scope:mother FAITH = scope:father.faith }
				agot_adelphogamous_incest_allowed = no
			}
		}
	}

	immediate = {
		#mother = { save_scope_as = mother }
		#father = { save_scope_as = father }
	}

	option = {
		scope:mother = {
			if = {
				limit = {
					relation_with_character_is_incestuous_in_faith_trigger = { CHARACTER = scope:father FAITH = scope:mother.faith }
					agot_adelphogamous_incest_allowed = no
				}
				add_trait = incestuous
			}
		}
		scope:father = {
			if = {
				limit = {
					relation_with_character_is_incestuous_in_faith_trigger = { CHARACTER = scope:mother FAITH = scope:father.faith }
					agot_adelphogamous_incest_allowed = no
				}
				add_trait = incestuous
			}
		}
	}
}

#Scaly Birth Management - equivalent of birth.0001
agot_birth_events.0002 = {
	hidden = yes

	trigger= {
		has_character_flag = birth_will_be_scaly
	}

	immediate = {
		if = { #MAELYS THE MONSTROUS CREATOR
			limit = {
				scope:child = {
					has_trait = twin
				}
			}
			trigger_event = agot_birth_events.0005
		}
		else = { #Malformed stillbirth
			trigger_event = agot_birth_events.0003
		}

		add_character_flag = {
			flag = sent_relevant_death_event
			days = 5
		}

		pregnancy_cleanup_effect = yes
	}
}

#Scaly Stillborn Event for Valyrian Houses
agot_birth_events.0003 = {
	type = character_event
	title = agot_birth_events.0003.t
	desc = agot_birth_events.0003.desc
	theme = death
	override_background = { reference = bedchamber }
	left_portrait = scope:child
	right_portrait = scope:child_2

	trigger = {
		has_character_flag = birth_will_be_scaly
	}

	immediate = {
		play_music_cue = mx_cue_death
		pregnancy_maintainance_effect = yes

		hidden_effect = {
			scope:child = {
				add_trait = scaly
				add_trait = inbred

				random_list = {
					1 = { add_trait = dwarf }
					1 = { add_trait = hunchbacked }
					1 = { add_trait = clubfooted }
					1 = { add_trait = infertile }
					1 = { add_trait = blind }
				}
			}
		}
	}

	#NO NAMING WIDGET

	option = {
		name = agot_birth_events.0003.a

		if = {
			limit = {
				exists = scope:father
				scope:father = {
					is_alive = yes
				}
			}
			scope:father = {
				add_character_flag = {
					flag = sent_relevant_death_event
					days = 5
				}
				trigger_event = agot_birth_events.0004
			}
		}
		hidden_effect = {
			remove_trait = pregnant
		}
		scope:child = {
			death = {
				death_reason = death_inbred
			}
		}
	}
	after = {
		remove_character_flag = birth_will_be_scaly

		hidden_effect = {
			#Chance for Barren but only if they have some kids to not MEGA punish players
			if = {
				limit = {
					any_child = {
						is_alive = yes
						count > 2
					}
					NOT = {
						has_trait = fecund
						has_trait = infertile
					}
				}
				random_list = {
					70 = {
						add_trait = infertile
					}
					30 = {
					}
				}
			}
		}
	}
}

#BIRTH: Father: Scaly Stillborn Notification
agot_birth_events.0004 = {
	type = character_event
	title = agot_birth_events.0004.t
	desc = agot_birth_events.0004.desc
	theme = death
	override_background = { reference = bedchamber }
	left_portrait = {
		character = scope:mother
		animation = sick
	}
	right_portrait = scope:child

	#NO NAMING WIDGET

	immediate = {
		play_music_cue = mx_cue_death
		show_as_tooltip = {
			scope:child = {
				death = {
					death_reason = death_inbred
				}
			}
		}
	}

	option = {
		name = agot_birth_events.0004.a

		add_stress = minor_stress_gain
	}
}

#MAELYS CREATOR
agot_birth_events.0005 = {
	title = agot_birth_events.0005.t
	desc = agot_birth_events.0005.desc
	theme = pregnancy
	override_background = { reference = bedchamber }
	left_portrait = {
		character = root
		animation = newborn
	}
	right_portrait = {
		trigger = { exists = scope:second_adult }
		character = scope:second_adult
		animation = fear
	}
	lower_left_portrait = {
		character = scope:child
	}
	lower_right_portrait = {
		trigger = { exists = scope:father }
		character = scope:father
	}

	trigger = {
		root = scope:mother
		has_character_flag = birth_will_be_scaly
	}

	immediate = {
		play_music_cue_once = { TRACK = mx_cue_birth }

		add_character_flag = bp1_yearly_2020_suppress_death_events #No need to inform about devoured child twice

		scope:child = { #Monstrous stuff
			hidden_effect = {
				if = { #Sexy Maelys is illegal
					limit = {
						has_trait = beauty_good_1
					}
					remove_trait = beauty_good_1
				}
				if = {
					limit = {
						has_trait = beauty_good_2
					}
					remove_trait = beauty_good_2
				}
				if = {
					limit = {
						has_trait = beauty_good_3
					}
					remove_trait = beauty_good_3
				}
				if = {
					limit = {
						is_female = yes
					}
					add_character_flag = tomboy
				}
				random_list = {
					1 = { add_trait = scaly }
					1 = { add_trait = beauty_bad_3 }
				}
				random_list = {
					1 = { add_trait = cannibal }
					1 = { add_trait = lunatic_1 }
					1 = { add_trait = possessed_1 }
				}
				random_list = {
					1 = { add_trait = physique_good_1 }
					1 = { add_trait = physique_good_2 }
					1 = { add_trait = physique_good_3 }
				}
				add_trait = giant
				add_trait = strong
				add_trait = infertile
			}
		}

		if = {
			limit = {
				exists = var:dead_spouse
			}
			var:dead_spouse = {
				save_scope_as = father
			}
		}
		else = {
			scope:child.father = {
				save_scope_as = father
			}
		}
		scope:child = {
			hidden_effect = { set_father = scope:father }
			if = {
				limit = { has_trait = twin }
				random_sibling = {
					limit = {
						is_twin_of = scope:child
					}
					save_scope_as = child_2
				}
			}
		}
		if = { #To save the child that the father suspects of illegitimacy
			limit = {
				has_character_flag = father_suspects_this_pregnancy
				scope:father = { is_alive = yes }
			}
			remove_character_flag = father_suspects_this_pregnancy
			scope:father = {
				set_variable = {
					name = suspect_this_child_of_illegitimacy
					value = scope:child
				}
			}
		}
		#Look for another adult to hold the twin/be terrified
		if = {
			limit = { exists = scope:child_2 }
			#Let's save the court physician if you have one
			if = {
				limit = {
					court_physician_available_trigger = yes
					any_court_position_holder = {
						type = court_physician_court_position
						has_court_event_flag = no
						is_ai = yes
					}
				}
				save_court_physician_as_effect = { SCOPE_NAME = second_adult }
			}
			else_if = {
				limit = {
					court_physician_available_trigger = yes
					any_court_position_holder = {
						type = maester_court_position
						has_court_event_flag = no
						is_ai = yes
					}
				}
				save_court_physician_as_effect = { SCOPE_NAME = second_adult }
			}
			#Otherwise look for a relative of the mother
			else_if = {
				limit = {
					scope:mother = {
						any_close_or_extended_family_member = {
							is_in_the_same_court_as = root
							is_adult = yes
							NOR = {
								has_any_bad_relationship_with_character_trigger = { CHARACTER = scope:father }
								has_any_bad_relationship_with_character_trigger = { CHARACTER = scope:mother }
								this = scope:father
								this = scope:mother
							}
						}
					}
				}
				scope:mother = {
					random_close_or_extended_family_member = {
						limit = {
							is_in_the_same_court_as = root
							is_adult = yes
							has_any_good_relationship_with_character_trigger = { CHARACTER = scope:mother }
							NOR = {
								has_any_bad_relationship_with_character_trigger = { CHARACTER = scope:father }
								this = scope:father
								this = scope:mother
							}
						}
						alternative_limit = {
							is_in_the_same_court_as = root
							is_adult = yes
							NOR = {
								has_any_bad_relationship_with_character_trigger = { CHARACTER = scope:father }
								has_any_bad_relationship_with_character_trigger = { CHARACTER = scope:mother }
								this = scope:father
								this = scope:mother
							}
						}
						save_scope_as = second_adult
					}
				}
			}
			#Then a relative of the father
			else_if = {
				limit = {
					scope:father = {
						any_close_or_extended_family_member = {
							is_in_the_same_court_as = root
							is_adult = yes
							is_female = yes
							NOR = {
								has_any_bad_relationship_with_character_trigger = { CHARACTER = scope:father }
								has_any_bad_relationship_with_character_trigger = { CHARACTER = scope:mother }
								this = scope:father
								this = scope:mother
							}
						}
					}
				}
				scope:father = {
					random_close_or_extended_family_member = {
						limit = {
							is_in_the_same_court_as = root
							is_adult = yes
							is_female = yes
							has_any_good_relationship_with_character_trigger = { CHARACTER = scope:mother }
							NOR = {
								has_any_bad_relationship_with_character_trigger = { CHARACTER = scope:father }
								this = scope:father
								this = scope:mother
							}
						}
						alternative_limit = {
							is_in_the_same_court_as = root
							is_adult = yes
							is_female = yes
							opinion = {
								target = scope:mother
								value >= 10
							}
							NOR = {
								has_any_bad_relationship_with_character_trigger = { CHARACTER = scope:father }
								has_any_bad_relationship_with_character_trigger = { CHARACTER = scope:mother }
								this = scope:father
								this = scope:mother
							}
						}
						save_scope_as = second_adult
					}
				}
			}
			#In lack of that look for a courtier with good relations
			else_if = {
				limit = {
					any_courtier= {
						is_adult = yes
						is_female = yes
						is_human = yes
						NOR = {
							has_any_bad_relationship_with_character_trigger = { CHARACTER = scope:father }
							has_any_bad_relationship_with_character_trigger = { CHARACTER = scope:mother }
							this = scope:father
							this = scope:mother
						}
					}
				}
				random_courtier = {
					limit = {
						is_adult = yes
						is_female = yes
						is_human = yes
						has_any_good_relationship_with_character_trigger = { CHARACTER = scope:mother }
						NOR = {
							has_any_bad_relationship_with_character_trigger = { CHARACTER = scope:father }
							this = scope:father
							this = scope:mother
						}
					}
					alternative_limit = {
						is_adult = yes
						is_female = yes
						is_human = yes
						opinion = {
							target = scope:mother
							value >= 10
						}
						NOR = {
							has_any_bad_relationship_with_character_trigger = { CHARACTER = scope:father }
							has_any_bad_relationship_with_character_trigger = { CHARACTER = scope:mother }
							this = scope:father
							this = scope:mother
						}
					}
					save_scope_as = second_adult
				}
			}
		}
	}


	#NAMING WIDGET
	widgets = {
		widget = {
			is_shown = {
				allow_naming_on_birth_of_child_trigger = { CHILD = scope:child }
			}
			gui = "event_window_widget_name_child"
			container = "dynamic_birth_name"
			controller = name_character
			setup_scope = { scope:child = { save_scope_as = name_character_target } }
		}
	}

	option = {
		name = agot_birth_events.0005.a
		add_prestige = minor_prestige_gain
		scope:father = {
			trigger_event = agot_birth_events.0006
			add_character_flag = {
				flag = sent_relevant_death_event
				days = 5
			}
		}
	}

	after = {
		scope:child_2 = {
			death = {
				death_reason = death_devoured_in_womb
				killer = scope:child
			}
		}
		remove_character_flag = birth_will_be_scaly
	}
}


#Notify Father of MAELYS
agot_birth_events.0006 = {
	title = agot_birth_events.0006.t
	desc = agot_birth_events.0006.desc
	theme = pregnancy
	override_background = { reference = bedchamber }
	left_portrait = {
		character = scope:mother
		animation = newborn
	}
	right_portrait = {
		trigger = { exists = scope:second_adult }
		character = scope:second_adult
		animation = fear
	}
	lower_left_portrait = {
		character = scope:child
	}

	trigger = {
	}

	immediate = {
		play_music_cue_once = { TRACK = mx_cue_birth }
		if = {
			limit = {
				exists = var:dead_spouse
			}
			var:dead_spouse = {
				save_scope_as = father
			}
		}
		else = {
			scope:child.father = {
				save_scope_as = father
			}
		}
		scope:child = {
			hidden_effect = { set_father = scope:father }
			if = {
				limit = { has_trait = twin }
				random_sibling = {
					limit = {
						is_twin_of = scope:child
					}
					save_scope_as = child_2
				}
			}
		}
		if = { #To save the child that the father suspects of illegitimacy
			limit = {
				has_character_flag = father_suspects_this_pregnancy
				scope:father = { is_alive = yes }
			}
			remove_character_flag = father_suspects_this_pregnancy
			scope:father = {
				set_variable = {
					name = suspect_this_child_of_illegitimacy
					value = scope:child
				}
			}
		}
		#Look for another adult to hold the twin
		if = {
			limit = { exists = scope:child_2 }
			#Let's save the court physician if you have one
			if = {
				limit = {
					court_physician_available_trigger = yes
					any_court_position_holder = {
						type = court_physician_court_position
						has_court_event_flag = no
						is_ai = yes
					}
				}
				save_court_physician_as_effect = { SCOPE_NAME = second_adult }
			}
			#Otherwise look for a relative of the mother
			else_if = {
				limit = {
					scope:mother = {
						any_close_or_extended_family_member = {
							is_in_the_same_court_as = root
							is_adult = yes
							NOR = {
								has_any_bad_relationship_with_character_trigger = { CHARACTER = scope:father }
								has_any_bad_relationship_with_character_trigger = { CHARACTER = scope:mother }
								this = scope:father
								this = scope:mother
							}
						}
					}
				}
				scope:mother = {
					random_close_or_extended_family_member = {
						limit = {
							is_in_the_same_court_as = root
							is_adult = yes
							has_any_good_relationship_with_character_trigger = { CHARACTER = scope:mother }
							NOR = {
								has_any_bad_relationship_with_character_trigger = { CHARACTER = scope:father }
								this = scope:father
								this = scope:mother
							}
						}
						alternative_limit = {
							is_in_the_same_court_as = root
							is_adult = yes
							NOR = {
								has_any_bad_relationship_with_character_trigger = { CHARACTER = scope:father }
								has_any_bad_relationship_with_character_trigger = { CHARACTER = scope:mother }
								this = scope:father
								this = scope:mother
							}
						}
						save_scope_as = second_adult
					}
				}
			}
			#Then a relative of the father
			else_if = {
				limit = {
					scope:father = {
						any_close_or_extended_family_member = {
							is_in_the_same_court_as = root
							is_adult = yes
							is_female = yes
							NOR = {
								has_any_bad_relationship_with_character_trigger = { CHARACTER = scope:father }
								has_any_bad_relationship_with_character_trigger = { CHARACTER = scope:mother }
								this = scope:father
								this = scope:mother
							}
						}
					}
				}
				scope:father = {
					random_close_or_extended_family_member = {
						limit = {
							is_in_the_same_court_as = root
							is_adult = yes
							is_female = yes
							has_any_good_relationship_with_character_trigger = { CHARACTER = scope:mother }
							NOR = {
								has_any_bad_relationship_with_character_trigger = { CHARACTER = scope:father }
								this = scope:father
								this = scope:mother
							}
						}
						alternative_limit = {
							is_in_the_same_court_as = root
							is_adult = yes
							is_female = yes
							opinion = {
								target = scope:mother
								value >= 10
							}
							NOR = {
								has_any_bad_relationship_with_character_trigger = { CHARACTER = scope:father }
								has_any_bad_relationship_with_character_trigger = { CHARACTER = scope:mother }
								this = scope:father
								this = scope:mother
							}
						}
						save_scope_as = second_adult
					}
				}
			}
			#In lack of that look for a courtier with good relations
			else_if = {
				limit = {
					any_courtier= {
						is_adult = yes
						is_female = yes
						is_human = yes
						NOR = {
							has_any_bad_relationship_with_character_trigger = { CHARACTER = scope:father }
							has_any_bad_relationship_with_character_trigger = { CHARACTER = scope:mother }
							this = scope:father
							this = scope:mother
						}
					}
				}
				random_courtier = {
					limit = {
						is_adult = yes
						is_female = yes
						is_human = yes
						has_any_good_relationship_with_character_trigger = { CHARACTER = scope:mother }
						NOR = {
							has_any_bad_relationship_with_character_trigger = { CHARACTER = scope:father }
							this = scope:father
							this = scope:mother
						}
					}
					alternative_limit = {
						is_adult = yes
						is_female = yes
						is_human = yes
						opinion = {
							target = scope:mother
							value >= 10
						}
						NOR = {
							has_any_bad_relationship_with_character_trigger = { CHARACTER = scope:father }
							has_any_bad_relationship_with_character_trigger = { CHARACTER = scope:mother }
							this = scope:father
							this = scope:mother
						}
					}
					save_scope_as = second_adult
				}
			}
		}
	}


	#NAMING WIDGET
	widgets = {
		widget = {
			is_shown = {
				allow_naming_on_birth_of_child_trigger = { CHILD = scope:child }
			}
			gui = "event_window_widget_name_child"
			container = "dynamic_birth_name"
			controller = name_character
			setup_scope = { scope:child = { save_scope_as = name_character_target } }
		}
	}

	option = {
		name = agot_birth_events.0005.a
		add_prestige = minor_prestige_gain
	}
}

# House for Bittersteel
agot_birth_events.0100 = {
	title = agot_birth_events.0100.t
	desc = agot_birth_events.0100.desc
	theme = pregnancy
	override_background = { reference = bedchamber }
	left_portrait = {
		character = scope:mother
		animation = newborn
	}
	right_portrait = {
		character = root
		animation = newborn
	}
	lower_left_portrait = {
		character = scope:child
	}
	immediate = {
		add_character_flag = had_bittersteel_house_decision
		character:Targaryen_94 = { save_scope_as = daemon }
	}
	option = {
		name = agot_birth_events.0100.a
		custom_tooltip = agot_birth_events.0100.a_tt
		hidden_effect = {
			if = {
				limit = {
					matrilinear_marriage = yes
					primary_spouse ?= {
						dynasty = root.dynasty
					}
				}
				primary_spouse ?= {
					save_scope_as = spouse
				}
				hidden_effect = {
					divorce = scope:spouse
					marry = scope:spouse
				}
			}
			create_cadet_branch = yes
			house = {
				save_scope_as = new_house 
				set_coa = Bittersteel_personal_coa 
				set_house_name = dynn_Bittersteel
				add_house_modifier = dragonrider_house_modifier
			}
			save_scope_as = new_head
			hidden_effect = {
				remove_character_flag = has_personal_coa
				var:my_personal_coa = {
					remove_variable = my_coa_belongs_to
					death = {
						death_reason = death_vanished
					}
				}
				remove_variable = my_personal_coa
			}
			add_character_flag = bittersteel_house
			every_child = {
				set_house = scope:new_house
			}
		}
		ai_chance = {
			base = 100
		}
	}
	option = {
		name = agot_birth_events.0100.b
		ai_chance = {
			base = 0
		}
	}
}