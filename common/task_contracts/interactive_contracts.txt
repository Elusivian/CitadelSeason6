laamp_join_faction_contract = {
	group = laamp_contracts_war_group
	icon = "gfx/interface/icons/character_interactions/faction.dds"
	travel = no
	use_diplomatic_range = no

	# Validity Triggers
	valid_to_create = {
		# Standard triggers.
		valid_laamp_basic_trigger = {
			EMPLOYER = scope:employer
			LAAMP = root
		}
		employer_has_treasury_to_offer_job_trigger = yes
		# Specific flavour triggers.
		scope:employer = {
			is_a_faction_member = yes
			joined_faction = {
				save_temporary_scope_as = temp_faction
				# miv
				NOT = { faction_is_type = crown_loyalist_faction }
				NOT = { faction_is_type = agot_loyalist_faction }
			}
		}
		is_a_faction_member = no
		#don't spawn contracts for the same factions or faction targets
		NOT = {
			any_character_task_contract = {
				has_task_contract_type = laamp_join_faction_contract
				OR = {
					var:task_contract_faction ?= scope:temp_faction
					task_contract_employer = scope:temp_faction.faction_target
				}
			}
		}
		is_adult = yes
		is_imprisoned = no
		NOR = {
			is_allied_to = scope:temp_faction.faction_target
			scope:temp_faction.faction_target = { has_strong_hook = root }
			has_trait = incapable
			has_character_flag = joining_faction_block
			has_relation_friend = scope:temp_faction.faction_target
			has_relation_lover = scope:temp_faction.faction_target
			has_secret_relation_lover = scope:temp_faction.faction_target
			scope:temp_faction.faction_target = { is_contact_of = root }
		}
	}
	valid_to_keep = {
		exists = root.var:task_contract_faction
		# Standard triggers.
		valid_laamp_basic_trigger = {
			EMPLOYER = root.task_contract_employer
			LAAMP = root.task_contract_taker
		}
	}
	valid_to_accept = {
		# Standard triggers.
		valid_laamp_basic_accept_only_trigger = yes
		valid_laamp_basic_trigger = {
			EMPLOYER = scope:employer
			LAAMP = root
		}
		custom_tooltip = {
			text = NOT_FACTION_JOIN_CREATE_CONDITION_NOT_FACTION_MEMBER
			is_a_faction_member = no
		}
		#passes_faction_hard_block from 00_rules.txt
		scope:employer ?= {
			joined_faction ?= {
				faction_target ?= {
					save_temporary_scope_as = target
				}
			}
		}
		custom_description = {
			text = "FACTION_CANT_JOIN_CREATE_ADULT"
			is_adult = yes
		}
		custom_description = {
			text = "FACTION_CANT_JOIN_CREATE_ALLIED"
			trigger_if = {
				limit = { exists = scope:target }
				NOT = { is_allied_to = scope:target }
			}
		}
		custom_description = {
			text = "FACTION_CANT_JOIN_CREATE_HOOK"
			trigger_if = {
				limit = { exists = scope:target }
				scope:target = {
					NOT = { has_strong_hook = root }
				}
			}
		}
		custom_description = {
			text = "FACTION_CANT_JOIN_CREATE_IMPRISONED"
			trigger_if = {
				limit = {
					exists = joined_faction
					joined_faction = {
						faction_is_at_war = yes
					}
				}
			}
			trigger_else = {
				is_imprisoned = no
			}
		}
		custom_description = {
			text = "FACTION_CANT_JOIN_CREATE_INCAPABLE"
			NOT = { has_trait = incapable }
		}
		custom_description = {
			text = "character_blocked_from_joining"
			NOT = { has_character_flag = joining_faction_block }
		}
		custom_description = {
			text = "faction_relation_blocks_joining_friend"
			trigger_if = {
				limit = { exists = scope:target }
				NOT = {
					root = { has_relation_friend = scope:target }
				}
			}
		}
		custom_description = {
			text = "faction_relation_blocks_joining_lover"
			trigger_if = {
				limit = { exists = scope:target }
				NOR = {
					root = { has_relation_lover = scope:target }
					root = { has_secret_relation_lover = scope:target }
				}
			}
		}
	}
	valid_to_continue = {
		exists = root.var:task_contract_faction
		var:task_contract_faction = {
			any_faction_member = {
				this = root.task_contract_taker
			}
		}
		# Standard triggers.
		valid_laamp_basic_trigger = {
			EMPLOYER = root.task_contract_employer
			LAAMP = root.task_contract_taker
		}
	}

	weight = {
		# Standard weights.
		value = task_contract_weight_interesting_almost_rare_value
		add = laamp_contracts_weight_up_mercenary_value
		add = laamp_contracts_weight_up_martial_slight_value
		add = task_contract_weight_employer_contact_list_value
		scope:employer = { multiply = task_contract_weight_by_tier_value }
	}

	on_create = {
		scope:contract = {
			save_scope_as = task_contract
			task_contract_employer = {
				joined_faction = {
					save_scope_as = task_contract_faction
				}
				save_scope_as = task_contract_employer
			}
			set_variable = {
				name = task_contract_faction
				value = scope:task_contract_faction
			}
			set_variable = {
				name = task_contract_employer
				value = scope:task_contract_employer
			}
			scope:task_contract_faction = {
				faction_target = {
					save_scope_as = task_contract_target
				}
			}
			set_task_contract_target = scope:task_contract_target
			set_variable = {
				name = task_contract_target
				value = scope:task_contract_target
			}
		}
	}

	# On_Actions
	on_accepted = {
		task_contract_taker = { play_sound_effect = "event:/DLC/EP3/SFX/UI/Contracts/ep3_ui_contracts_accept_contract" }
		save_scope_as = task_contract
		task_contract_taker = {
			trigger_event = ep3_contract_event.0070
		}
	}

	on_invalidated = {
		if = {
			limit = {
				root.task_contract_taker = {
					any_character_active_contract = {
						this = root
					}
				}
			}
			task_contract_employer = {
				save_scope_as = task_contract_employer
			}
			save_scope_value_as = {
				name = task_contract_tier
				value = root.task_contract_tier
			}
			var:task_contract_target = {
				save_scope_as = task_contract_target
			}
			task_contract_taker = {
				set_variable = {
					name = invalidated_task_contract_type
					value = flag:laamp_join_faction_contract
				}
			}

			if = {
				limit = {
					task_contract_employer = {
						is_alive = no
					}
				}
				task_contract_employer.primary_title.holder ?= {
					save_scope_as = employer_heir
				}
				task_contract_taker = {
					save_scope_value_as = {
						name = task_contract_invalidation_reason
						value = flag:employer_dead
					}
					trigger_event = ep3_contract_event.0012
				
				}
			}
			else_if = {
				limit = {
					scope:task_contract_target = {
						is_alive = no
					}
				}
				task_contract_taker = {
					save_scope_value_as = {
						name = task_contract_invalidation_reason
						value = flag:target_dead
					}
					trigger_event = ep3_contract_event.0012
				}
			}
			else_if = {
				limit = {
					NOT = {	exists = scope:task_contract_faction }
					NOT = { exists = var:suppress_invalidation_event }
				}
				task_contract_taker = {
					save_scope_value_as = {
						name = task_contract_invalidation_reason
						value = flag:faction_disbanded
					}
					trigger_event = ep3_contract_event.0012
				}
			}
		}
		task_contract_taker = {
			remove_variable = task_contract_faction
		}
	}

	task_contract_reward = {
		success_standard = {
			effect = {
				task_contract_taker = { play_sound_effect = "event:/DLC/EP3/SFX/UI/Contracts/ep3_ui_contracts_success_on_contract" }
				save_scope_as = task_contract
				var:task_contract_faction = {
					save_scope_as = faction
				}
				task_contract_employer = {
					save_scope_as = task_contract_employer
					save_scope_as = attacker
				}
				task_contract_taker = {
					save_scope_as = task_contract_taker
					save_scope_as = defender
					custom_tooltip = laamp_join_war_contract.contribution_based_reward_gold
					if = {
						limit = {
							faith != scope:task_contract.var:task_contract_target.faith
						}
						custom_tooltip = laamp_join_war_contract.contribution_based_reward_piety
					}
					save_scope_value_as = {
						name = task_contract_reward
						value = flag:success_standard
					}
					save_scope_value_as = {
						name = task_contract_tier
						value = scope:task_contract.task_contract_tier
					}
					war_contracts_completed_tracker_effect = yes
					send_interface_toast = {
						title = laamp_transport_contract.success
						left_icon = scope:task_contract.task_contract_taker
						right_icon = scope:task_contract.task_contract_employer
						# Huck 'em into our contact list.
						add_contact = scope:task_contract.task_contract_employer
						# Give hook as well as contact
						add_hook_if_possible_default_length_effect = {
							TARGET = scope:task_contract.task_contract_employer 
							TYPE = contact_list_weak_hook
						}
						if = {
							limit = {
								exists = scope:task_contract.var:task_contract_title
							}
							scope:attacker = {
								save_scope_as = actor
							}
							save_scope_as = recipient
							scope:task_contract.var:task_contract_title = {
								add_to_list = offered_titles
							}
							negotiate_settlement_interaction_effect = yes
						}
					}
				}
			}
		}
		failure_standard = {
			positive = no
			effect = {
				task_contract_taker = { play_sound_effect = "event:/DLC/EP3/SFX/UI/Contracts/ep3_ui_contracts_failure_on_contract" }
				save_scope_as = task_contract
				var:task_contract_faction = {
					save_scope_as = faction
				}
				task_contract_employer = {
					save_scope_as = task_contract_employer
				}
				task_contract_taker = {
					save_scope_value_as = {
						name = task_contract_reward
						value = flag:failure_standard
					}
					save_scope_value_as = {
						name = task_contract_tier
						value = scope:task_contract.task_contract_tier
					}
					send_interface_toast = {
						title = laamp_transport_contract.transport_failed
						left_icon = scope:task_contract.task_contract_taker
						right_icon = scope:task_contract.task_contract_employer
						add_prestige = task_contract_failure_prestige_loss_full_value
					}
				}
			}
		}
	}
}
