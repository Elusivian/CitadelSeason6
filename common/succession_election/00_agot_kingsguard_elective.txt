# The entry should be named in the same way that the elective succession law is named to define it's voter's logic.
# Root scope - Elector, the character voting in the election.
# scope:candidate scope - Candidate, Character considered for the title.
# scope:title scope - Title, The title the nomination is for.
# scope:holder scope - Ruler, The ruler currently holding the title.
# scope:holder_candidate scope - Favored Candidate, The title owner's candidate.
# The voter will vote for the top score candidate calculated from this script.

kingsguard_elective = {
	candidates = {
		add = holder
	}
	electors = {
		add = holder
		add = title_dejure_vassals
	}
	elector_vote_strength = {
		base = 10
	}
	candidate_score = {
		base = 1
		# ######################	Elector self-voting pattern	##########################
		# elector_self_voting_pattern_feudal_elective_modifier = yes

		# ##########################	Holder voting pattern	##########################
		# holder_voting_pattern_feudal_elective_modifier = yes

		# ##########################	Elector voting patterns (circumstances)	##########################
		# elector_voting_pattern_circumstances_feudal_elective_modifier = yes

		# ##########################	Elector voting patterns (prestige/piety)	##########################
		# elector_voting_pattern_prestige_piety_feudal_elective_modifier = yes

		# ##########################	Elector voting patterns (traits)	##########################
		# elector_voting_pattern_traits_feudal_elective_modifier = yes

		# ##########################	Elector voting patterns (opinion)	##########################
		# elector_voting_pattern_opinion_feudal_elective_modifier = yes
		# # AGOT Modifiers
		# agot_kingsguard_elective_negative_modifier = yes
		# agot_kingsguard_elective_positive_modifier = yes
	}
}
