#root = character about to die
on_death = {
	on_actions = {
		#asoiaf_destroy_realm_on_death
		asoiaf_wear_crowns_on_death
		asoiaf_canon_children_pregnancy_negation_removal_death
		asoiaf_rhaegar_death_viserys_declared_heir
		asoiaf_add_spousal_claim_player_only
		asoiaf_add_spousal_claim_universal
		asoiaf_aegon_the_unworthy_bastard_legitimation
		asoiaf_alicent_refusing_marriage
		asoiaf_cersei_refusing_marriage
	}
}

#asoiaf_destroy_realm_on_death = {
#	trigger = {
#		agot_is_independent_ruler = yes
#		NOT = {
#			any_living_character = {
#				is_heir_of = root
#			}
#		}
#	}
#	effect = {
#		every_living_character = {
#			add_gold = 10000
#		}
#	}
#}

asoiaf_wear_crowns_on_death = {
	trigger = {
		root = {
			asoiaf_crown_death_trigger = yes
		}
	}
	effect = {
		root = {
			asoiaf_crown_death_trait_assignment_effect = yes
		}
	}
}

asoiaf_canon_children_pregnancy_negation_removal_death = {
	trigger = {
		root = {
			any_spouse = {
				has_character_modifier = asoiaf_canon_children_pregnancy_negation_modifier
			}
		}
	}
	effect = {
		root = {
			every_spouse = {
				limit = { has_character_modifier = asoiaf_canon_children_pregnancy_negation_modifier }
				remove_character_modifier = asoiaf_canon_children_pregnancy_negation_modifier
			}
		}
	}
}

asoiaf_rhaegar_death_viserys_declared_heir = {
	trigger = {
		root = character:Targaryen_3 #Rhaegar Targaryen (son of Aerys II)
		scope:killer = character:Baratheon_2 #Robert killed Rhaegar
		character:Targaryen_1 ?= {
			is_alive = yes
			primary_title = title:e_the_iron_throne
		}
		character:Targaryen_8 ?= { is_alive = yes }
		character:Targaryen_11 ?= { is_alive = yes }
	}
	effect = {
		character:Targaryen_1 = { #Aerys II Targaryen
			if = {
				limit = { is_ai = yes } #bypass the event if AI
				set_designated_heir = character:Targaryen_8 #Viserys Targaryen (son of Aerys II)
				reverse_add_opinion = {
					target = character:Targaryen_8
					modifier = grateful_opinion
					opinion = 50
				}
				reverse_add_opinion = {
					target = character:Targaryen_11
					modifier = passed_me_over_for_heir_opinion
					opinion = -50
				}
				reverse_add_opinion = {
					target = character:Martell_7
					modifier = passed_over_my_child_for_heir_opinion
					opinion = -50
				}
			}
			if = {
				limit = { is_ai = no }
				trigger_event = { id = asoiaf_maintenance_events.0005 days = 2 } #trigger event for players so they can choose; one day before the event to send Viserys/Rhaella to Dragonstone
			}
		}
	}
}

asoiaf_add_spousal_claim_player_only = {
	trigger = {
		has_game_rule = asoiaf_spousal_claims_player_only
		root = {
			is_landed = yes
			highest_held_title_tier >= tier_county
			is_married = yes
			primary_spouse ?= {
				is_ai = no #the spouse is a player!
				OR = {
					AND = { #female spouses get claim if their faith is equal or favours women
						is_female = yes
						faith = {
							OR = {
								has_doctrine = doctrine_gender_equal
								has_doctrine = doctrine_gender_female_dominated
							}
						}
					}
					AND = { #male spouses get claim if their faith is equal or favours men
						is_male = yes
						faith = {
							OR = {
								has_doctrine = doctrine_gender_equal
								has_doctrine = doctrine_gender_male_dominated
							}
						}
					}
					#spouse's culture is either Dornish or of Rhoynish heritage
					culture = culture:stone_dornish
					culture = culture:sand_dornish
					culture = culture:salt_dornish
					culture = {
						has_cultural_pillar = heritage_rhoynish
					}
				}
			}
		}
	}
	effect = {
		root = {
			if = {
				limit = {
					highest_held_title_tier = tier_county
				}
				every_held_title = {
					limit = { tier = tier_county }
					save_scope_as = asoiaf_old_titles
					prev.primary_spouse ?= { add_unpressed_claim = scope:asoiaf_old_titles }
				}
			}
			if = {
				limit = {
					highest_held_title_tier = tier_duchy
				}
				every_held_title = {
					limit = { tier = tier_duchy }
					save_scope_as = asoiaf_old_titles
					prev.primary_spouse ?= { add_unpressed_claim = scope:asoiaf_old_titles }
				}
			}
			if = {
				limit = {
					highest_held_title_tier = tier_kingdom
				}
				every_held_title = {
					limit = { tier = tier_kingdom }
					save_scope_as = asoiaf_old_titles
					prev.primary_spouse ?= { add_unpressed_claim = scope:asoiaf_old_titles }
				}
			}
			if = {
				limit = {
					highest_held_title_tier = tier_empire
				}
				every_held_title = {
					limit = { tier = tier_empire }
					save_scope_as = asoiaf_old_titles
					prev.primary_spouse ?= { add_unpressed_claim = scope:asoiaf_old_titles }
				}
			}
        }
	}
}

asoiaf_add_spousal_claim_universal = {
	trigger = {
		has_game_rule = asoiaf_spousal_claims_universal
		root = {
			is_landed = yes
			highest_held_title_tier >= tier_county
			is_married = yes
			primary_spouse ?= {
				OR = {
					AND = { #female spouses get claim if their faith is equal or favours women
						is_female = yes
						faith = {
							OR = {
								has_doctrine = doctrine_gender_equal
								has_doctrine = doctrine_gender_female_dominated
							}
						}
					}
					AND = { #male spouses get claim if their faith is equal or favours men
						is_male = yes
						faith = {
							OR = {
								has_doctrine = doctrine_gender_equal
								has_doctrine = doctrine_gender_male_dominated
							}
						}
					}
					#spouse's culture is either Dornish or of Rhoynish heritage
					culture = culture:stone_dornish
					culture = culture:sand_dornish
					culture = culture:salt_dornish
					culture = {
						has_cultural_pillar = heritage_rhoynish
					}
				}
			}
		}
	}
	effect = {
		root = {
			if = {
				limit = {
					highest_held_title_tier = tier_county
				}
				every_held_title = {
					limit = { tier = tier_county }
					save_scope_as = asoiaf_old_titles
					prev.primary_spouse ?= { add_unpressed_claim = scope:asoiaf_old_titles }
				}
			}
			if = {
				limit = {
					highest_held_title_tier = tier_duchy
				}
				every_held_title = {
					limit = { tier = tier_duchy }
					save_scope_as = asoiaf_old_titles
					prev.primary_spouse ?= { add_unpressed_claim = scope:asoiaf_old_titles }
				}
			}
			if = {
				limit = {
					highest_held_title_tier = tier_kingdom
				}
				every_held_title = {
					limit = { tier = tier_kingdom }
					save_scope_as = asoiaf_old_titles
					prev.primary_spouse ?= { add_unpressed_claim = scope:asoiaf_old_titles }
				}
			}
			if = {
				limit = {
					highest_held_title_tier = tier_empire
				}
				every_held_title = {
					limit = { tier = tier_empire }
					save_scope_as = asoiaf_old_titles
					prev.primary_spouse ?= { add_unpressed_claim = scope:asoiaf_old_titles }
				}
			}
        }
	}
}

asoiaf_aegon_the_unworthy_bastard_legitimation = {
	trigger = {
		root = {
			has_inactive_trait = asoiaf_Targaryen_88_trait #Aegon IV Targaryen
			any_child = { #any of his children are bastards/bastard founders (no need to trigger if he dies too early for this to be relevant)
				OR = {
					has_trait = bastard
					has_trait = bastard_founder
				}
			}
		}
	}
	effect = {
		root = {
			every_child = {
				if = {
					limit = { has_trait = bastard }
					remove_trait = bastard
					add_trait = legitimized_bastard
					agot_remove_bastard_nickname_effect = yes
					trigger_event = bastard_interaction.0009
				}
				if = {
					limit = { has_trait = bastard_founder }
					remove_trait = bastard_founder
					add_trait = legitimized_bastard
					agot_remove_bastard_nickname_effect = yes
					trigger_event = bastard_interaction.0009
				}
			}
		}
	}
}

asoiaf_alicent_refusing_marriage = {
	trigger = {
		root = {
			has_inactive_trait = asoiaf_Targaryen_60_trait #Viserys I Targaryen
			any_spouse ?= {
				AND = {
					has_inactive_trait = asoiaf_Hightower_97_trait #Alicent Hightower (daughter of Otto)
					is_ai = yes
					OR = {
						age >= 40 #she's quite old, or
						any_child ?= { #she has living children
							count > 0
							is_alive = yes
						}
					}
				}
			}
		}
	}
	effect = {
		root = {
			every_spouse = {
				limit = { has_inactive_trait = asoiaf_Hightower_97_trait }
				save_scope_as = asoiaf_alicent_refusing_marriage
			}
		}
		dynasty:dynn_Cole = {
			every_dynasty_member = {
				limit = {
					has_inactive_trait = asoiaf_Cole_11_trait #Criston Cole (the Kingmaker)
					num_of_relation_lover = 0
					has_trait = kingsguard
				}
				save_scope_as = asoiaf_criston_cole
			}
		}
		scope:asoiaf_alicent_refusing_marriage = { add_trait = refusing_marriage }
		if = {
			limit = {
				scope:asoiaf_alicent_refusing_marriage = {
					OR = {
						num_of_relation_lover = 0 #if Alicent has no other lovers she's devoted to...
						has_relation_lover = root #or her lover was Viserys I
					}
					has_relation_friend = scope:asoiaf_criston_cole #and she already has an attachment to Criston...
				}
				dynasty:dynn_Cole = {
					any_dynasty_member = {
						has_inactive_trait = asoiaf_Cole_11_trait
						num_of_relation_lover = 0 #and Cole has no other lovers he's devoted to...
						has_trait = kingsguard #and he's present near to Alicent
					}
				}
			}
			scope:asoiaf_alicent_refusing_marriage = {
				set_relation_lover = { reason = asoiaf_alicent_criston_lover_desc target = scope:asoiaf_criston_cole } #Alicent takes Criston as a lover now that Viserys is dead
			}
		}
	}
}

asoiaf_cersei_refusing_marriage = {
	trigger = {
		root = {
			has_inactive_trait = asoiaf_Baratheon_2_trait #Robert I Baratheon
			any_spouse ?= {
				AND = {
					has_inactive_trait = asoiaf_Lannister_6_trait #Cersei Lannister (daughter of Tywin)
					is_ai = yes
					OR = {
						age >= 40 #she's quite old, or
						any_child ?= { #she has living children
							count > 0
							is_alive = yes
						}
					}
				}
			}
		}
	}
	effect = {
		root = {
			every_spouse = {
				limit = { has_inactive_trait = asoiaf_Lannister_6_trait }
				add_trait = refusing_marriage
			}
		}
	}
}