on_join_court_nights_watch = {
	effect = {
		if = {
			limit = {
				exists = scope:old_employer
				has_trait = nightswatch
				scope:old_employer = {
					has_trait = nightswatch
					is_landed = yes
				}
				NOT = {
					scope:new_employer = { has_trait = nightswatch }
				}
			}
			scope:old_employer = {
				add_courtier ?= prev
			}
		}
		else_if = {
			limit = {
				has_trait = nightswatch
				is_ruler = no
				NOT = {
					scope:new_employer = { has_trait = nightswatch }
				}
				title:k_the_wall.holder = { has_trait = nightswatch }
			}
			title:k_the_wall.holder = {
				add_courtier ?= prev
			}
		}
	}
}

on_leave_court_nights_watch = {
	effect = {
		if = {
			limit = {
				exists = scope:old_employer
				has_trait = nightswatch
				scope:old_employer = {
					has_trait = nightswatch
				}
			}
			scope:old_employer = {
				add_courtier ?= prev
			}
		}
		else_if = {
			limit = {
				has_trait = nightswatch
			}
			title:k_the_wall.holder = {
				add_courtier ?= prev
			}
		}
	}
}

on_join_court_silent_sisterhood = {
	effect = {
		if = {
			limit = {
				exists = scope:old_employer
				has_trait = silent_sister
				scope:old_employer = {
					has_trait = silent_sister
					is_ruler = yes
				}
				NOT = {
					scope:new_employer = { has_trait = silent_sister }
				}
			}
			scope:old_employer = {
				add_courtier ?= root
			}
		}
		else_if = {
			limit = {
				has_trait = silent_sister
				NOT = {
					scope:new_employer = { has_trait = silent_sister }
				}
			}
			title:d_the_silent_sisterhood.holder = {
				add_courtier ?= root
			}
		}
		# Bloating count - technically will never remove itself but unless the player TRIES to kill sisters it's really not going to matter since it resets on silent mother death anyway
		if = {
			limit = {
				exists = title:d_the_silent_sisterhood.holder # To prevent errors on game start
				title:d_the_silent_sisterhood.holder = {
					any_courtier = {
						count > 80
					}
				}
			}
			if = {
				limit = {
					title:d_the_silent_sisterhood.holder = {
						any_courtier = {
							count > 120
						}
					}
				}
				title:d_the_silent_sisterhood.holder = {
					add_character_flag = silent_sisterhood_full
				}
			}
			else = {
				title:d_the_silent_sisterhood.holder = {
					add_character_flag = silent_sisterhood_bloated
				}
			}
		}
		else_if = { # If <20 silent sisters, each new sister makes two to prevent elimination of sisterhood without serious effort
			limit = {
				exists = title:d_the_silent_sisterhood.holder # To prevent errors on game start
				title:d_the_silent_sisterhood.holder = {
					NOT = { has_character_flag = just_inherited_sisterhood } # Prevents sisters from being created on inheritance court transfer
					any_courtier = {
						count < 20
					}
				}
			}
			title:d_the_silent_sisterhood.holder = {
				create_character = {
					template = silent_sister_character
					employer = title:d_the_silent_sisterhood.holder
					after_creation = {
						agot_send_to_silent_sisters_effect = {
							ACTOR = title:d_the_silent_sisterhood.holder
							SILENT_SISTER_CANDIDATE = this
						}
					}
				}
			}
		}
	}
}

on_leave_court_silent_sisterhood = {
	effect = {
		if = {
			limit = {
				exists = scope:old_employer
				has_trait = silent_sister
				scope:old_employer = {
					has_trait = silent_sister
				}
			}
			scope:old_employer = {
				add_courtier ?= root
			}
		}
		else_if = {
			limit = {
				has_trait = silent_sister
			}
			title:d_the_silent_sisterhood.holder = {
				add_courtier ?= root
			}
		}
	}
}

on_join_court_wildlings = {
	effect = {
		#Wildlings coming to the north become secret wildlings
		if = {
			limit = {
				exists = scope:old_employer
				culture = { agot_is_wildling_culture = yes }
				is_lowborn = yes
				any_traveling_family_member = { count = 1 }
				scope:new_employer = {
					OR = {
						AND = {
							exists = capital_province
							capital_province = { geographical_region = world_westeros_the_north }
						}
						AND = {
							 NOT = { exists = capital_province }
							 location = { geographical_region = world_westeros_the_north }
						}
					}
				}
				NOT = { has_trait = nightswatch }
			}

			if = {
				limit = { is_female = yes }
				change_first_name = Alarra
			}
			else = {
				change_first_name = Alaric
			}
			set_variable = {
				name = orig_culture
				value = culture
			}
			set_variable = {
				name = orig_faith
				value = faith
			}
			culture:northman = {
				random_culture_county = {
					limit = { holder.culture = culture:northman }
					holder = {
						random_courtier = {
							limit = {
								culture = culture:northman
								OR = {
									AND = {
										is_male = yes
										root = { is_male = yes }
									}
									AND = {
										is_female = yes
										root = { is_female = yes }
									}
								}
							}
							save_scope_as = identity_theft_target
						}
					}
				}
			}
			if = {
				limit = { exists = scope:identity_theft_target }
				change_first_name = { template_character = scope:identity_theft_target }
			}
			set_culture = culture:northman
			set_character_faith = faith:old_gods_south
			add_secret = { type = secret_agot_wildling }
		}
		else_if = {
			limit = {
				exists = scope:old_employer
				culture = { agot_is_wildling_culture = yes }
				scope:new_employer = {
					culture = { agot_is_wildling_culture = no }
				}
				scope:old_employer = {
					culture = { agot_is_wildling_culture = yes }
				}
				# Allow banished characters, recruited prisoners, and nightswatch to stay
				NOR = {
					has_variable = agot_banisher
					is_imprisoned_by = scope:new_employer
					has_trait = nightswatch
				}
			}
			every_traveling_family_member = {
				scope:old_employer = {
					add_courtier ?= prev
				}
			}
		}
		#westeros stay in westeros
		if = {
			limit = {
				exists = scope:old_employer
				culture = { agot_is_wildling_culture = no }
				scope:new_employer = {
					culture = { agot_is_wildling_culture = yes }
				}
				scope:old_employer = {
					culture = { agot_is_wildling_culture = no }
				}
				NOT = {
					any_traveling_family_member = {
						culture = { agot_is_wildling_culture = yes }
					}
				}
				# Allow banished characters, maesters, recruited prisoners, and nightswatch to stay
				NOR = {
					has_variable = agot_banisher
					is_imprisoned_by = scope:new_employer
					has_trait = nightswatch
					has_character_flag = recruited_maester
				}
				NAND = {
					scope:new_employer ?= title:e_the_iron_throne.holder
					OR = {
						has_trait = kingsguard
						has_inactive_trait = grandmaester
					}
				}
			}
			every_traveling_family_member = {
				scope:old_employer = {
					add_courtier ?= prev
				}
			}
		}
	}
}

on_join_court_valyrian_lowborns = {
	effect = {
		every_traveling_family_member = {
			limit = {
				AND = {
					is_lowborn = yes
					has_culture = culture:high_valyrian
				}
			}
			set_culture = culture:westerosi_valyrian
		}
	}
}

on_join_court_ruin = {
	effect = {
		if = {
			limit = {
				exists = scope:new_employer
				scope:new_employer = {
					OR = {
						has_title = title:b_ruins
						has_title = title:b_more_ruin
						has_title = title:b_the_most_ruin
					}

				}
			}
			agot_redirect_to_appropiate_court_effect = yes
		}
	}
}

on_join_court_dragonriders = { # Dragons should follow their riders
	effect = {
		if = {
			limit = {
				has_local_variable = current_dragon
				exists = scope:new_employer
			}
			var:current_dragon = {
				set_employer = scope:new_employer
			}
		}
	}
}