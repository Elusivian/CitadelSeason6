### REFER TO ON_ACTIONS.INFO


############################################################
###                      FORMAT                          ###
############################################################
### WEIGHT (NUM) = EVENT_ID #EVENT NAME #AUTHOR OF EVENT ###
############################################################

on_birthday_coin_flip = {
	effect = {
		if = {
			limit = {
				exists = real_father.dynasty
				exists = mother.dynasty
				has_game_rule = agot_coin_flip_enabled
			}
			if = {
				limit = {
					real_father.dynasty = {
						has_variable = agot_allow_adelphogamous_incest
						this = dynasty:dynn_Targaryen
					}
					mother.dynasty = {
						has_variable = agot_allow_adelphogamous_incest
						this = dynasty:dynn_Targaryen
					}
				}
				trigger_event = {
					id = agot_childhood_events.0001
					days = { 1 3649 }
				}
			}
		}
	}
}

on_6th_birthday_strong_seed = {
	effect = {
		if = {
			limit = {
				exists = father
				father = { is_alive = yes }
				exists = mother
			}
			random_list = {
				100 = {
					modifier = {
						factor = 0
						has_character_flag = suspicious_strong_seed
					}
				}
				0 = {
					modifier = {
						add = 10
						has_character_flag = suspicious_strong_seed
					}
					modifier = {
						add = 5
						father = { has_trait = paranoid }
					}
					modifier = {
						add = 5
						father = { has_trait = lunatic }
					}
					modifier = {
						add = 10
						father = {
							 opinion = {
								target = root.mother
								value < -60
							}
						}
					}
					modifier = {
						add = 20
						AND = {
							father = {
								 opinion = {
									target = root
									value < -60
								}
							}
							father = {
								 opinion = {
									target = root.mother
									value < 0
								}
							}
						}
					}
					modifier = {
						factor = 0.1
						NOT = { has_character_flag = suspicious_strong_seed }
						father = { is_ai = yes }
						mother = { is_ai = yes }
					}

					save_scope_as = child
					father = {
						trigger_event = {
							id = agot_childhood_events.0004
							days = { 1 2920 }
						}
					}
				}
			}
		}
	}
}

on_1st_birthday_sibling_betrothal = {
	effect = {
		if = {
			limit = {
				OR = {
					has_game_rule = agot_ema_targ
					has_game_rule = agot_ema_lps_targs
					has_game_rule = agot_ema_enabled
				}
				exists = dynasty
				dynasty = dynasty:dynn_Targaryen
				NOT = { has_trait = bastard }
				NOT = { has_trait = disinherited }
				NOT = { is_betrothed = yes }
				is_ai = yes
				trigger_if = {
					limit = { exists = court_owner }
					court_owner = { is_ai = yes }
				}
				any_sibling = {
					can_marry_character_trigger = { CHARACTER = root }
					NOT = { has_trait = bastard }
					NOT = { has_trait = disinherited }
					age > 1
					age < 8
					exists = dynasty
					dynasty = dynasty:dynn_Targaryen
					is_ai = yes
					trigger_if = {
						limit = { exists = court_owner }
						court_owner = { is_ai = yes }
					}
					NOT = {
						any_child = {
							is_alive = yes
						}
					}
				}
			}
			every_sibling = {
				limit = {
					can_marry_character_trigger = { CHARACTER = root }
					NOT = { has_trait = bastard }
					NOT = { has_trait = disinherited }
					age > 1
					age < 8
					exists = dynasty
					dynasty = dynasty:dynn_Targaryen
					is_ai = yes
					trigger_if = {
						limit = { exists = court_owner }
						court_owner = { is_ai = yes }
					}
					NOT = {
						any_child = {
							is_alive = yes
						}
					}
				}
				add_to_list = sibling_marriage_list
			}
			ordered_in_list = {
				list = sibling_marriage_list
				order_by = age
				save_scope_as = betrothed
			}
			if = {
				limit = { is_male = yes}
				root = {
					create_betrothal = scope:betrothed
				}
			}
			else = {
				scope:betrothed = {
					create_betrothal = root
				}
			}
		}
	}
}

on_6th_birthday_sibling_betrothal = {
	effect = {
		if = {
			limit = {
				OR = {
					has_game_rule = agot_ema_targ
					has_game_rule = agot_ema_lps_targs
					has_game_rule = agot_ema_enabled
				}
				exists = dynasty
				dynasty = dynasty:dynn_Targaryen
				NOT = { has_trait = bastard }
				NOT = { has_trait = disinherited }
				NOT = { is_betrothed = yes }
				is_ai = yes
				trigger_if = {
					limit = { exists = court_owner }
					court_owner = { is_ai = yes }
				}
				any_sibling = {
					can_marry_character_trigger = { CHARACTER = root }
					NOT = { has_trait = bastard }
					NOT = { has_trait = disinherited }
					age > 1
					age < 14
					exists = dynasty
					dynasty = dynasty:dynn_Targaryen
					is_ai = yes
					trigger_if = {
						limit = { exists = court_owner }
						court_owner = { is_ai = yes }
					}
					NOT = {
						any_child = {
							is_alive = yes
						}
					}
				}
			}
			every_sibling = {
				limit = {
					can_marry_character_trigger = { CHARACTER = root }
					NOT = { has_trait = bastard }
					NOT = { has_trait = disinherited }
					age < 14
					exists = dynasty
					dynasty = dynasty:dynn_Targaryen
					is_ai = yes
					trigger_if = {
						limit = { exists = court_owner }
						court_owner = { is_ai = yes }
					}
					NOT = {
						any_child = {
							is_alive = yes
						}
					}
				}
				add_to_list = sibling_marriage_list
			}
			ordered_in_list = {
				list = sibling_marriage_list
				order_by = age
				save_scope_as = betrothed
			}
			if = {
				limit = { is_male = yes}
				root = {
					create_betrothal = scope:betrothed
				}
			}
			else = {
				scope:betrothed = {
					create_betrothal = root
				}
			}
		}
	}
}

on_10th_birthday_sibling_betrothal = {
	effect = {
		if = {
			limit = {
				OR = {
					has_game_rule = agot_ema_targ
					has_game_rule = agot_ema_lps_targs
					has_game_rule = agot_ema_enabled
				}
				exists = dynasty
				dynasty = dynasty:dynn_Targaryen
				NOT = { has_trait = bastard }
				NOT = { has_trait = disinherited }
				NOT = { is_betrothed = yes }
				is_ai = yes
				trigger_if = {
					limit = { exists = court_owner }
					court_owner = { is_ai = yes }
				}
				any_sibling = {
					can_marry_character_trigger = { CHARACTER = root }
					NOT = { has_trait = bastard }
					NOT = { has_trait = disinherited }
					age > 1
					age < 18
					exists = dynasty
					dynasty = dynasty:dynn_Targaryen
					is_ai = yes
					trigger_if = {
						limit = { exists = court_owner }
						court_owner = { is_ai = yes }
					}
					NOT = {
						any_child = {
							is_alive = yes
						}
					}
				}
			}
			every_sibling = {
				limit = {
					can_marry_character_trigger = { CHARACTER = root }
					NOT = { has_trait = bastard }
					NOT = { has_trait = disinherited }
					age < 18
					exists = dynasty
					dynasty = dynasty:dynn_Targaryen
					is_ai = yes
					trigger_if = {
						limit = { exists = court_owner }
						court_owner = { is_ai = yes }
					}
					NOT = {
						any_child = {
							is_alive = yes
						}
					}
				}
				add_to_list = sibling_marriage_list
			}
			ordered_in_list = {
				list = sibling_marriage_list
				order_by = age
				save_scope_as = betrothed
			}
			if = {
				limit = { is_male = yes}
				root = {
					create_betrothal = scope:betrothed
				}
			}
			else = {
				scope:betrothed = {
					create_betrothal = root
				}
			}
		}
	}
}

on_10th_birthday_heir_betrothal = {
	effect = {
		if = {
			limit = {
				OR = {
					has_game_rule = agot_ema_lps
					has_game_rule = agot_ema_lps_targs
					has_game_rule = agot_ema_lps_dukes
					has_game_rule = agot_ema_enabled
				}
				is_ai = yes
				trigger_if = {
					limit = { exists = court_owner }
					court_owner = { is_ai = yes }
				}
				NOT = { dynasty = dynasty:dynn_Targaryen }
				OR = {
					AND = {
						exists = primary_title
						primary_title.tier = tier_kingdom
					}
					any_heir_title = {
						tier = tier_kingdom
					}
					any_pretender_title = {
						place_in_line_of_succession = {
							target = root
							value <= 3
						}
						tier = tier_kingdom
					}
				}
				NOT = { is_betrothed = yes }
			}
			random_pretender_title = {
				limit = {
					place_in_line_of_succession = {
						target = root
						value <= 3
					}
					tier = tier_kingdom
					exists = holder
				}
				holder = { save_scope_as = ruler }
			}
			random_heir_title = {
				limit = {
					tier = tier_kingdom
					exists = holder
				}
				holder = { save_scope_as = ruler }
			}
			if = {
				limit = {
					exists = primary_title
					primary_title.tier = tier_kingdom
				}
				save_scope_as = ruler
			}
			scope:ruler = {
				every_vassal = {
					limit = {
						primary_title.tier = tier_duchy
						exists = house
					}
					house = { save_scope_as = vassal_house }
					every_close_or_extended_family_member = {
						limit = {
							NOT = { has_trait = bastard }
							exists = house
							house = scope:vassal_house
							age < 16
							age > 4
							is_ai = yes
							trigger_if = {
								limit = { exists = court_owner }
								court_owner = { is_ai = yes }
							}
							can_marry_character_trigger = { CHARACTER = root }
							NOT = {
								any_heir_title = {}
								any_pretender_title = {
									place_in_line_of_succession = {
										target = prev
										value <= 2
									}
								}
							}
						}
						add_to_list = potential_marriage_list
					}
				}
				random_in_list = {
					list = potential_marriage_list
					weight = {
						base = 40
						modifier = {
							add = -39
							num_of_bad_genetic_traits > 0
						}
						modifier = {
							add = 20
							num_of_good_genetic_traits > 0
						}
						modifier = {
							has_dynasty = yes
							dynasty = { dynasty_prestige_level >= 2 }
							add = {
								value = 10
								if = {
									limit = {
										dynasty = { dynasty_prestige_level >= 3 }
									}
									add = 10
								}
								if = {
									limit = {
										dynasty = { dynasty_prestige_level >= 4 }
									}
									add = 10
								}
								if = {
									limit = {
										dynasty = { dynasty_prestige_level >= 5 }
									}
									add = 10
								}
								if = {
									limit = {
										dynasty = { dynasty_prestige_level >= 6 }
									}
									add = 10
								}
								if = {
									limit = {
										dynasty = { dynasty_prestige_level >= 7 }
									}
									add = 10
								}
								if = {
									limit = {
										dynasty = { dynasty_prestige_level >= 8 }
									}
									add = 10
								}
								if = {
									limit = {
										dynasty = { dynasty_prestige_level >= 9 }
									}
									add = 10
								}
								if = {
									limit = {
										dynasty = { dynasty_prestige_level >= 10 }
									}
									add = 10
								}
							}
						}
					}
					save_scope_as = betrothed
				}
			}
			if = {
				limit = {
					is_male = yes
					exists = scope:betrothed
				}
				root = {
					create_betrothal = scope:betrothed
				}
			}
			else_if = {
				limit = {
					is_female = yes
					exists = scope:betrothed
				}
				scope:betrothed = {
					create_betrothal_matrilineal = root
				}
			}
		}
		else_if = {
			limit = {
				OR = {
					has_game_rule = agot_ema_lps_dukes
					has_game_rule = agot_ema_enabled
				}
				is_ai = yes
				trigger_if = {
					limit = { exists = court_owner }
					court_owner = { is_ai = yes }
				}
				NOT = { dynasty = dynasty:dynn_Targaryen }
				OR = {
					AND = {
						exists = primary_title
						primary_title.tier = tier_duchy
						exists = liege
						liege.primary_title.tier = tier_kingdom
					}
					any_heir_title = {
						tier = tier_duchy
						exists = holder.liege
						holder.liege.primary_title.tier = tier_kingdom
					}
					any_pretender_title = {
						place_in_line_of_succession = {
							target = root
							value <= 2
						}
						tier = tier_duchy
						exists = holder.liege
						holder.liege.primary_title.tier = tier_kingdom
					}
				}
			}
			random_pretender_title = {
				limit = {
					place_in_line_of_succession = {
						target = root
						value <= 2
					}
					tier = tier_duchy
					exists = holder
				}
				holder.liege = { save_scope_as = ruler }
			}
			random_heir_title = {
				limit = {
					tier = tier_duchy
					exists = holder
				}
				holder.liege = { save_scope_as = ruler }
			}
			if = {
				limit = {
					exists = primary_title
					primary_title.tier = tier_duchy
				}
				liege = { save_scope_as = ruler }
			}
			scope:ruler = {
				every_vassal_or_below = {
					limit = {
						NOT = { primary_title.tier = tier_barony }
						exists = house
					}
					house = { save_scope_as = vassal_house }
					every_close_or_extended_family_member = {
						limit = {
							NOT = { has_trait = bastard }
							exists = house
							house = scope:vassal_house
							age < 16
							age > 4
							is_ai = yes
							trigger_if = {
								limit = { exists = court_owner }
								court_owner = { is_ai = yes }
							}
							can_marry_character_trigger = { CHARACTER = root }
							NOT = {
								any_heir_title = {}
								any_pretender_title = {
									place_in_line_of_succession = {
										target = prev
										value <= 2
									}
								}
							}
						}
						add_to_list = potential_marriage_list
					}
				}
				random_in_list = {
					list = potential_marriage_list
					weight = {
						base = 40
						modifier = {
							factor = 0.01
							num_of_bad_genetic_traits > 0
						}
						modifier = {
							add = 20
							num_of_good_genetic_traits > 0
						}
						modifier = {
							add = 40
							culture = root.culture
						}
						modifier = {
							has_dynasty = yes
							dynasty = { dynasty_prestige_level >= 2 }
							add = {
								value = 40
								if = {
									limit = {
										dynasty = { dynasty_prestige_level >= 3 }
									}
									add = 20
								}
								if = {
									limit = {
										dynasty = { dynasty_prestige_level >= 4 }
									}
									add = 20
								}
								if = {
									limit = {
										dynasty = { dynasty_prestige_level >= 5 }
									}
									add = 20
								}
								if = {
									limit = {
										dynasty = { dynasty_prestige_level >= 6 }
									}
									add = 20
								}
								if = {
									limit = {
										dynasty = { dynasty_prestige_level >= 7 }
									}
									add = 20
								}
								if = {
									limit = {
										dynasty = { dynasty_prestige_level >= 8 }
									}
									add = 20
								}
								if = {
									limit = {
										dynasty = { dynasty_prestige_level >= 9 }
									}
									add = 20
								}
								if = {
									limit = {
										dynasty = { dynasty_prestige_level >= 10 }
									}
									add = 20
								}
							}
						}
					}
					save_scope_as = betrothed
				}
			}
			if = {
				limit = {
					is_male = yes
					exists = scope:betrothed
				}
				root = {
					create_betrothal = scope:betrothed
				}
			}
			else_if = {
				limit = {
					is_female = yes
					exists = scope:betrothed
				}
				scope:betrothed = {
					create_betrothal_matrilineal = root
				}
			}
		}
		else_if = {
			limit = {
				OR = {
					has_game_rule = agot_ema_lps_dukes
					has_game_rule = agot_ema_enabled
				}
				is_ai = yes
				trigger_if = {
					limit = { exists = court_owner }
					court_owner = { is_ai = yes }
				}
				NOT = { dynasty = dynasty:dynn_Targaryen }
				OR = {
					AND = {
						exists = capital_province
						capital_province = { geographical_region = world_westeros_the_crownlands }
						primary_title.tier = tier_duchy
					}
					any_heir_title = {
						title_capital_county.title_province = { geographical_region = world_westeros_the_crownlands }
						tier = tier_duchy
					}
					any_pretender_title = {
						title_capital_county.title_province = { geographical_region = world_westeros_the_crownlands }
						tier = tier_duchy
						place_in_line_of_succession = {
							target = root
							value <= 2
						}
					}
				}
			}
			random_pretender_title = {
				limit = {
					title_capital_county.title_province = { geographical_region = world_westeros_the_crownlands }
					place_in_line_of_succession = {
						target = root
						value <= 2
					}
					tier = tier_duchy
					exists = holder
				}
				holder.top_liege = { save_scope_as = ruler }
			}
			random_heir_title = {
				limit = {
					title_capital_county.title_province = { geographical_region = world_westeros_the_crownlands }
					tier = tier_duchy
					exists = holder
				}
				holder.liege = { save_scope_as = ruler }
			}
			if = {
				limit = {
					exists = primary_title
					primary_title.tier = tier_duchy
					exists = capital_province
					capital_province = { geographical_region = world_westeros_the_crownlands }
				}
				liege = { save_scope_as = ruler }
			}
			scope:ruler = {
				every_vassal_or_below = {
					limit = {
						exists = capital_province
						capital_province = { geographical_region = world_westeros_the_crownlands }
						NOT = { primary_title.tier = tier_barony }
						exists = house
					}
					house = { save_scope_as = vassal_house }
					every_close_or_extended_family_member = {
						limit = {
							NOT = { has_trait = bastard }
							exists = house
							house = scope:vassal_house
							age < 16
							age > 4
							is_ai = yes
							trigger_if = {
								limit = { exists = court_owner }
								court_owner = { is_ai = yes }
							}
							can_marry_character_trigger = { CHARACTER = root }
							NOT = {
								any_heir_title = {}
								any_pretender_title = {
									place_in_line_of_succession = {
										target = prev
										value <= 2
									}
								}
							}
						}
						add_to_list = potential_marriage_list
					}
				}
				random_in_list = {
					list = potential_marriage_list
					weight = {
						base = 40
						modifier = {
							factor = 0.01
							num_of_bad_genetic_traits > 0
						}
						modifier = {
							add = 20
							num_of_good_genetic_traits > 0
						}
						modifier = {
							add = 80
							culture = root.culture
						}
						modifier = {
							has_dynasty = yes
							dynasty = { dynasty_prestige_level >= 2 }
							add = {
								value = 40
								if = {
									limit = {
										dynasty = { dynasty_prestige_level >= 3 }
									}
									add = 20
								}
								if = {
									limit = {
										dynasty = { dynasty_prestige_level >= 4 }
									}
									add = 20
								}
								if = {
									limit = {
										dynasty = { dynasty_prestige_level >= 5 }
									}
									add = 20
								}
								if = {
									limit = {
										dynasty = { dynasty_prestige_level >= 6 }
									}
									add = 20
								}
								if = {
									limit = {
										dynasty = { dynasty_prestige_level >= 7 }
									}
									add = 20
								}
								if = {
									limit = {
										dynasty = { dynasty_prestige_level >= 8 }
									}
									add = 20
								}
								if = {
									limit = {
										dynasty = { dynasty_prestige_level >= 9 }
									}
									add = 20
								}
								if = {
									limit = {
										dynasty = { dynasty_prestige_level >= 10 }
									}
									add = 20
								}
							}
						}
					}
					save_scope_as = betrothed
				}
			}
			if = {
				limit = {
					is_male = yes
					exists = scope:betrothed
				}
				root = {
					create_betrothal = scope:betrothed
				}
			}
			else_if = {
				limit = {
					is_female = yes
					exists = scope:betrothed
				}
				scope:betrothed = {
					create_betrothal_matrilineal = root
				}
			}
		}
	}
}

on_birthday_sibling_or_dynasty_betrothal = {
	effect = {
		if = {
			limit = {
				OR = {
					has_game_rule = agot_ema_targ
					has_game_rule = agot_ema_lps_targs
					has_game_rule = agot_ema_enabled
				}
				exists = dynasty
				dynasty = dynasty:dynn_Targaryen
				NOT = { is_betrothed = yes }
				NOT = { has_trait = bastard }
				NOT = { has_trait = disinherited }
				is_ai = yes
				trigger_if = {
					limit = { exists = court_owner }
					court_owner = { is_ai = yes }
				}
				OR = {
					any_sibling = {
						can_marry_character_trigger = { CHARACTER = root }
						NOT = { has_trait = bastard }
						NOT = { has_trait = disinherited }
						age > 1
						age < 25
						exists = dynasty
						dynasty = dynasty:dynn_Targaryen
						is_ai = yes
						trigger_if = {
							limit = { exists = court_owner }
							court_owner = { is_ai = yes }
						}
						NOT = {
							any_child = {
								is_alive = yes
							}
						}
					}
					any_close_or_extended_family_member = {
						can_marry_character_trigger = { CHARACTER = root }
						NOT = { has_trait = bastard }
						NOT = { has_trait = disinherited }
						age < 25
						age > 6
						exists = dynasty
						dynasty = dynasty:dynn_Targaryen
						is_ai = yes
						trigger_if = {
							limit = { exists = court_owner }
							court_owner = { is_ai = yes }
						}
						NOT = {
							any_child = {
								is_alive = yes
							}
						}
					}
				}
			}
			every_sibling = {
				limit = {
					can_marry_character_trigger = { CHARACTER = root }
					NOT = { has_trait = bastard }
					NOT = { has_trait = disinherited }
					age < 25
					exists = dynasty
					dynasty = dynasty:dynn_Targaryen
					is_ai = yes
					trigger_if = {
						limit = { exists = court_owner }
						court_owner = { is_ai = yes }
					}
					NOT = {
						any_child = {
							is_alive = yes
						}
					}
				}
				add_to_list = sibling_marriage_list
			}
			ordered_in_list = {
				list = sibling_marriage_list
				order_by = age
				save_scope_as = betrothed
			}
			if = {
				limit = {
					NOT = { exists = scope:betrothed }
				}
				every_close_or_extended_family_member = {
					limit = {
						can_marry_character_trigger = { CHARACTER = root }
						NOT = { has_trait = bastard }
						NOT = { has_trait = disinherited }
						age < 25
						age > 6
						exists = dynasty
						dynasty = dynasty:dynn_Targaryen
						is_ai = yes
						trigger_if = {
							limit = { exists = court_owner }
							court_owner = { is_ai = yes }
						}
						NOT = {
							any_child = {
								is_alive = yes
							}
						}
					}
					add_to_list = relative_marriage_list
				}
				ordered_in_list = {
					list = relative_marriage_list
					order_by = age
					save_scope_as = betrothed
				}
			}
			if = {
				limit = { is_male = yes}
				root = {
					create_betrothal = scope:betrothed
				}
			}
			else = {
				scope:betrothed = {
					create_betrothal = root
				}
			}
		}
		#males or female heirs
		else_if = {
			limit = {
				OR = {
					has_game_rule = agot_ema_targ
					has_game_rule = agot_ema_lps_targs
					has_game_rule = agot_ema_enabled
				}
				exists = dynasty
				dynasty = dynasty:dynn_Targaryen
				NOT = { is_betrothed = yes }
				NOT = { has_trait = bastard }
				NOT = { has_trait = disinherited }
				is_ai = yes
				trigger_if = {
					limit = { exists = court_owner }
					court_owner = { is_ai = yes }
				}
				exists = title:e_the_iron_throne.holder
				OR = {
					has_title = title:e_the_iron_throne
					is_child_of = title:e_the_iron_throne.holder
					is_sibling_of = title:e_the_iron_throne.holder
					is_child_of = title:e_the_iron_throne.holder.primary_heir
				}
				OR = {
					is_male = yes
					any_heir_title = { this.tier > tier_barony }
					any_pretender_title = {
						place_in_line_of_succession = {
							target = root
							value <= 2
						}
						this.tier > tier_barony
					}
				}
			}
			title:e_the_iron_throne.holder = {
				every_vassal_or_below = {
					limit = {
						exists = house
						primary_title.tier > tier_barony
						OR = {
							primary_title.tier = tier_kingdom
							grrms_fave_houses_trigger = yes
						}
						trigger_if = {
							limit = {
								title:e_the_iron_throne.holder = { religion = religion:faith_of_the_seven_religion }
							}
							OR = {
								religion = religion:faith_of_the_seven_religion
								faith = faith:old_gods_south
							}
						}
						trigger_else = {
							religion = title:e_the_iron_throne.holder.religion
						}
					}
					house = { save_scope_as = vassal_house }
					every_close_or_extended_family_member = {
						limit = {
							NOT = { this = root }
							NOT = { has_trait = bastard }
							exists = house
							house = scope:vassal_house
							age < 16
							age > 7
							is_ai = yes
							trigger_if = {
								limit = { exists = court_owner }
								court_owner = { is_ai = yes }
							}
							can_marry_character_trigger = { CHARACTER = root }
							NOT = {
								any_heir_title = {}
								any_pretender_title = {
									place_in_line_of_succession = {
										target = prev
										value <= 2
									}
								}
							}
						}
						add_to_list = potential_marriage_list
					}
				}
				random_in_list = {
					list = potential_marriage_list
					weight = {
						base = 40
						modifier = {
							add = -39
							num_of_bad_genetic_traits > 0
						}
						modifier = {
							factor = 1000
							culture = culture:high_valyrian
						}
						modifier = {
							factor = 100
							culture = culture:westerosi_valyrian
						}
						modifier = {
							add = 20
							num_of_good_genetic_traits > 0
						}
						modifier = {
							has_dynasty = yes
							dynasty = { dynasty_prestige_level >= 2 }
							add = {
								value = 10
								if = {
									limit = {
										dynasty = { dynasty_prestige_level >= 3 }
									}
									add = 10
								}
								if = {
									limit = {
										dynasty = { dynasty_prestige_level >= 4 }
									}
									add = 10
								}
								if = {
									limit = {
										dynasty = { dynasty_prestige_level >= 5 }
									}
									add = 10
								}
								if = {
									limit = {
										dynasty = { dynasty_prestige_level >= 6 }
									}
									add = 10
								}
								if = {
									limit = {
										dynasty = { dynasty_prestige_level >= 7 }
									}
									add = 10
								}
								if = {
									limit = {
										dynasty = { dynasty_prestige_level >= 8 }
									}
									add = 10
								}
								if = {
									limit = {
										dynasty = { dynasty_prestige_level >= 9 }
									}
									add = 10
								}
								if = {
									limit = {
										dynasty = { dynasty_prestige_level >= 10 }
									}
									add = 10
								}
							}
						}
					}
					save_scope_as = betrothed
				}
			}
			if = {
				limit = {
					is_male = yes
					exists = scope:betrothed
				}
				root = {
					create_betrothal = scope:betrothed
				}
			}
			else_if = {
				limit = {
					is_female = yes
					exists = scope:betrothed
				}
				scope:betrothed = {
					create_betrothal_matrilineal = root
				}
			}
		}
		#women that can be married patri
		else_if = {
			limit = {
				OR = {
					has_game_rule = agot_ema_targ
					has_game_rule = agot_ema_lps_targs
					has_game_rule = agot_ema_enabled
				}
				exists = dynasty
				dynasty = dynasty:dynn_Targaryen
				NOT = { is_betrothed = yes }
				NOT = { has_trait = bastard }
				NOT = { has_trait = disinherited }
				is_ai = yes
				trigger_if = {
					limit = { exists = court_owner }
					court_owner = { is_ai = yes }
				}
				exists = title:e_the_iron_throne.holder
				OR = {
					has_title = title:e_the_iron_throne
					is_child_of = title:e_the_iron_throne.holder
					is_sibling_of = title:e_the_iron_throne.holder
					is_child_of = title:e_the_iron_throne.holder.primary_heir
				}
			}
			title:e_the_iron_throne.holder = {
				every_vassal_or_below = {
					limit = {
						exists = house
						primary_title.tier > tier_barony
						OR = {
							primary_title.tier = tier_kingdom
							grrms_fave_houses_trigger = yes
						}
					}
					house = { save_scope_as = vassal_house }
					every_close_or_extended_family_member = {
						limit = {
							NOT = { this = root }
							NOT = { has_trait = bastard }
							exists = house
							house = scope:vassal_house
							age < 16
							age > 7
							is_ai = yes
							trigger_if = {
								limit = { exists = court_owner }
								court_owner = { is_ai = yes }
							}
							can_marry_character_trigger = { CHARACTER = root }
						}
						add_to_list = potential_marriage_list
					}
				}
				random_in_list = {
					list = potential_marriage_list
					weight = {
						base = 40
						modifier = {
							add = -39
							num_of_bad_genetic_traits > 0
						}
						modifier = {
							factor = 1000
							culture = culture:high_valyrian
						}
						modifier = {
							factor = 100
							culture = culture:westerosi_valyrian
						}
						modifier = {
							add = 20
							num_of_good_genetic_traits > 0
						}
						modifier = {
							has_dynasty = yes
							dynasty = { dynasty_prestige_level >= 2 }
							add = {
								value = 10
								if = {
									limit = {
										dynasty = { dynasty_prestige_level >= 3 }
									}
									add = 10
								}
								if = {
									limit = {
										dynasty = { dynasty_prestige_level >= 4 }
									}
									add = 10
								}
								if = {
									limit = {
										dynasty = { dynasty_prestige_level >= 5 }
									}
									add = 10
								}
								if = {
									limit = {
										dynasty = { dynasty_prestige_level >= 6 }
									}
									add = 10
								}
								if = {
									limit = {
										dynasty = { dynasty_prestige_level >= 7 }
									}
									add = 10
								}
								if = {
									limit = {
										dynasty = { dynasty_prestige_level >= 8 }
									}
									add = 10
								}
								if = {
									limit = {
										dynasty = { dynasty_prestige_level >= 9 }
									}
									add = 10
								}
								if = {
									limit = {
										dynasty = { dynasty_prestige_level >= 10 }
									}
									add = 10
								}
							}
						}
					}
					save_scope_as = betrothed
				}
			}
			if = {
				limit = {
					exists = scope:betrothed
				}
				root = {
					create_betrothal = scope:betrothed
				}
			}
		}
	}
}

on_birthday_tomboy = {
	effect = {
		if = {
			limit = {
				is_female = yes
				OR = { #Personality appropriate
					childhood_loud_child_trigger = yes
					childhood_mean_child_trigger = yes
				}
			}
			random_list = {
				10 = {
					modifier = {
						trigger = { has_trait = brave }
						add = 20
					}
					modifier = {
						trigger = { has_trait = bossy }
						add = 20
					}
					modifier = {
						trigger = { has_trait = rowdy }
						add = 20
					}
					modifier = {
						trigger = { culture = culture:riverlander }
						add = 20
					}
					modifier = {
						trigger = { has_trait = strong }
						factor = 2
					}
					modifier = {
						trigger = { has_trait = physique_good }
						factor = 2
					}
					modifier = {
						trigger = { has_focus = education_martial }
						factor = 10 #might be too high? revisit
					}
					modifier = {
						trigger = { has_focus = education_learning }
						factor = 0.5
					}
					save_scope_as = child
					if = {
						limit = { is_ruler = yes }
						trigger_event = {
							id = agot_childhood_events.0005
							days = { 730 1460 }
						}
					}
					else_if = {
						limit = {
							any_close_family_member = { is_ai = no }
						}
						random_close_family_member = {
							limit ={ is_ai = no }
							trigger_event = {
								id = agot_childhood_events.0006
								days = { 730 1460 }
							}
						}
					}
					else = {
						trigger_event = {
							id = agot_childhood_events.0005
							days = { 730 1460 }
						}
					}

				}
				995 = { }
			}
		}
	}
}

on_16th_birthday = {
	on_actions = {
		agot_on_16th_birthday
	}
}

agot_on_16th_birthday = {
	events = {
		agot_dragonstone.0001 #Prince of Dragonstone Maintenance
		delay = { days = 1 }
		agot_kingsguard.1014 #Maintenance for crap swordsmen realising their dream is over
		coronation.0008 #Removes uncrowned child modifier and adds regular one.
	}
}

on_10th_birthday_tame_canon_dragon = {
	trigger = {
		has_game_rule = agot_canon_dragons_enabled
		is_ai = yes
		agot_is_canon_rider = yes
		any_relation = {
			type = agot_dragon
			count = 0
		}
		NOT = {
			any_scheme = {
				scheme_type = bond_with_dragon_scheme
			}
		}
	}
	events = {
		delay = { days = { 2 729 } }
		dragon_taming_events.9000
	}
}

# Randomly picks personality events for player-controlled canon children
# Every trait has its own on_action to ensure an event w/ the canon trait is triggered
# Traits
agot_canon_children_craven_personality_gain = {
	trigger = {
		is_adult = no
		number_of_personality_traits < personality_trait_limit
	}
	random_events = {
		100 = child_personality.0001 # craven, lazy or arbitrary
		100 = child_personality.7020 # shy, paranoid, craven
		100 = child_personality.0037 ##Gain craven
	}
}

agot_canon_children_lazy_personality_gain = {
	trigger = {
		is_adult = no
		number_of_personality_traits < personality_trait_limit
	}
	random_events = {
		100 = child_personality.0001 # craven, lazy or arbitrary
		100 = child_personality.7030 # lazy, gluttonous, compassionate
		100 = child_personality.0027 ##Gain lazy
	}
}

agot_canon_children_arbitrary_personality_gain = {
	trigger = {
		is_adult = no
		number_of_personality_traits < personality_trait_limit
	}
	random_events = {
		100 = child_personality.0001 # craven, lazy or arbitrary
		100 = child_personality.7100 # honest, arbitrary, impatient
		100 = child_personality.0043 ##Gain arbitrary
	}
}

agot_canon_children_arrogant_personality_gain = {
	trigger = {
		is_adult = no
		number_of_personality_traits < personality_trait_limit
	}
	random_events = {
		100 = child_personality.0002 # arrogant, compassionate or callous
		100 = child_personality.7080 # generous, fickle, arrogant
		100 = child_personality.0033 ##Gain arrogant
	}
}

agot_canon_children_compassionate_personality_gain = {
	trigger = {
		is_adult = no
		number_of_personality_traits < personality_trait_limit
	}
	random_events = {
		100 = child_personality.0002 # arrogant, compassionate or callous
		100 = child_personality.7030 # lazy, gluttonous, compassionate
		10 = child_personality.7300 # eccentric, compassionate, callous
		50 = child_personality.0049 ##Gain compassionate
	}
}

agot_canon_children_callous_personality_gain = {
	trigger = {
		is_adult = no
		number_of_personality_traits < personality_trait_limit
	}
	random_events = {
		100 = child_personality.0002 # arrogant, compassionate or callous
		100 = child_personality.7050 # just, greedy, callous
		10 = child_personality.7300 # eccentric, compassionate, callous
		100 = child_personality.0050 ##Gain callous
	}
}

agot_canon_children_deceitful_personality_gain = {
	trigger = {
		is_adult = no
		number_of_personality_traits < personality_trait_limit
	}
	random_events = {
		100 = child_personality.0003 # deceitful, honest or humble
		100 = child_personality.7070 # vengeful, deceitful, calm
		100 = child_personality.0035 ##Gain deceitful
	}
}

agot_canon_children_honest_personality_gain = {
	trigger = {
		is_adult = no
		number_of_personality_traits < personality_trait_limit
	}
	random_events = {
		100 = child_personality.0003 # deceitful, honest or humble
		100 = child_personality.7100 # honest, arbitrary, impatient
		50 = child_personality.0036 ##Gain honest
	}
}

agot_canon_children_humble_personality_gain = {
	trigger = {
		is_adult = no
		number_of_personality_traits < personality_trait_limit
	}
	random_events = {
		100 = child_personality.0003 # deceitful, honest or humble
		100 = child_personality.7060 # humble, cynical, content
		100 = child_personality.0034 ##Gain humble
	}
}

agot_canon_children_generous_personality_gain = {
	trigger = {
		is_adult = no
		number_of_personality_traits < personality_trait_limit
	}
	random_events = {
		100 = child_personality.0004 # generous, diligent or patient
		100 = child_personality.7080 # generous, fickle, arrogant
		50 = child_personality.0026 ##Gain generous
	}
}

agot_canon_children_diligent_personality_gain = {
	trigger = {
		is_adult = no
		number_of_personality_traits < personality_trait_limit
	}
	random_events = {
		100 = child_personality.0004 # generous, diligent or patient
		100 = child_personality.7000 # diligent, gregarious, temperate
		100 = child_personality.0028 ##Gain diligent
	}
}

agot_canon_children_patient_personality_gain = {
	trigger = {
		is_adult = no
		number_of_personality_traits < personality_trait_limit
	}
	random_events = {
		100 = child_personality.0004 # generous, diligent or patient
		100 = child_personality.7090 # forgiving, trusting, patient
		100 = child_personality.0031 ##Gain patient
	}
}

agot_canon_children_wrathful_personality_gain = {
	trigger = {
		is_adult = no
		number_of_personality_traits < personality_trait_limit
	}
	random_events = {
		100 = child_personality.0005 # wrathful, forgiving or fickle
		100 = child_personality.7200 # brave, stubborn, wrathful
		100 = child_personality.0029 ##Gain wrathful
	}
}

agot_canon_children_forgiving_personality_gain = {
	trigger = {
		is_adult = no
		number_of_personality_traits < personality_trait_limit
	}
	random_events = {
		100 = child_personality.0005 # wrathful, forgiving or fickle
		100 = child_personality.7090 # forgiving, trusting, patient
		50 = child_personality.0055 ##Gain forgiving
	}
}

agot_canon_children_fickle_personality_gain = {
	trigger = {
		is_adult = no
		number_of_personality_traits < personality_trait_limit
	}
	random_events = {
		100 = child_personality.0005 # wrathful, forgiving or fickle
		100 = child_personality.0011 # content, fickle or trusting
		100 = child_personality.7080 # generous, fickle, arrogant
		10 = child_personality.7400 # eccentric, fickle, stubborn
		100 = child_personality.0053 ##Gain fickle
	}
}

agot_canon_children_vengeful_personality_gain = {
	trigger = {
		is_adult = no
		number_of_personality_traits < personality_trait_limit
	}
	random_events = {
		300 = child_personality.0006 # vengeful, chaste or stubborn - Weighted x3 because it can only be triggered as the 3rd and final personality event
		100 = child_personality.7070 # vengeful, deceitful, calm
		100 = child_personality.0054 ##Gain vengeful
	}
}

agot_canon_children_chaste_personality_gain = {
	trigger = {
		is_adult = no
		number_of_personality_traits < personality_trait_limit
	}
	random_events = {
		300 = child_personality.0006 # vengeful, chaste or stubborn - Weighted x3 because it can only be triggered as the 3rd and final personality event
		600 = child_personality.7040 # lustful, chaste - Weighted x6 because it can only be triggered as the 3rd and final personality event
		100 = child_personality.0022 ##Gain chaste
	}
}

agot_canon_children_stubborn_personality_gain = {
	trigger = {
		is_adult = no
		number_of_personality_traits < personality_trait_limit
	}
	random_events = {
		300 = child_personality.0006 # vengeful, chaste or stubborn - Weighted x3 because it can only be triggered as the 3rd and final personality event
		100 = child_personality.7200 # brave, stubborn, wrathful
		10 = child_personality.7400 # eccentric, fickle, stubborn
		100 = child_personality.0052 ##Gain stubborn
	}
}

agot_canon_children_just_personality_gain = {
	trigger = {
		is_adult = no
		number_of_personality_traits < personality_trait_limit
	}
	random_events = {
		100 = child_personality.0007 # just, cynical or temperate
		100 = child_personality.7050 # just, greedy, callous
		100 = child_personality.0044 ##Gain just
	}
}

agot_canon_children_cynical_personality_gain = {
	trigger = {
		is_adult = no
		number_of_personality_traits < personality_trait_limit
	}
	random_events = {
		100 = child_personality.0007 # just, cynical or temperate
		100 = child_personality.7060 # humble, cynical, content
		100 = child_personality.0045 ##Gain cynical
	}
}

agot_canon_children_temperate_personality_gain = {
	trigger = {
		is_adult = no
		number_of_personality_traits < personality_trait_limit
	}
	random_events = {
		100 = child_personality.0007 # just, cynical or temperate
		100 = child_personality.7000 # diligent, gregarious, temperate
		100 = child_personality.0024 ##Gain temperate
	}
}

agot_canon_children_greedy_personality_gain = {
	trigger = {
		is_adult = no
		number_of_personality_traits < personality_trait_limit
	}
	random_events = {
		300 = child_personality.0008 # greedy, gregarious or lustful - Weighted x3 because it can only be triggered as the 3rd and final personality event
		100 = child_personality.7050 # just, greedy, callous
		100 = child_personality.0025 ##Gain greedy
	}
}

agot_canon_children_gregarious_personality_gain = {
	trigger = {
		is_adult = no
		number_of_personality_traits < personality_trait_limit
	}
	random_events = {
		300 = child_personality.0008 # greedy, gregarious or lustful - Weighted x3 because it can only be triggered as the 3rd and final personality event
		100 = child_personality.7000 # diligent, gregarious, temperate
		100 = child_personality.0040 ##Gain gregarious
	}
}

agot_canon_children_lustful_personality_gain = {
	trigger = {
		is_adult = no
		number_of_personality_traits < personality_trait_limit
	}
	random_events = {
		300 = child_personality.0008 # greedy, gregarious or lustful - Weighted x3 because it can only be triggered as the 3rd and final personality event
		600 = child_personality.7040 # lustful, chaste - Weighted x6 because it can only be triggered as the 3rd and final personality event
		100 = child_personality.0021 ##Gain lustful
	}
}

agot_canon_children_brave_personality_gain = {
	trigger = {
		is_adult = no
		number_of_personality_traits < personality_trait_limit
	}
	random_events = {
		100 = child_personality.0009 # brave, calm or zealous
		100 = child_personality.7200 # brave, stubborn, wrathful
		100 = child_personality.0038 ##Gain brave
	}
}

agot_canon_children_calm_personality_gain = {
	trigger = {
		is_adult = no
		number_of_personality_traits < personality_trait_limit
	}
	random_events = {
		100 = child_personality.0009 # brave, calm or zealous
		100 = child_personality.7070 # vengeful, deceitful, calm
		100 = child_personality.0030 ##Gain calm
	}
}

agot_canon_children_zealous_personality_gain = {
	trigger = {
		is_adult = no
		number_of_personality_traits < personality_trait_limit
	}
	random_events = {
		100 = child_personality.0009 # brave, calm or zealous
		100 = child_personality.7010 # zealous, ambitious, sadistic
		100 = child_personality.0046 ##Gain zealous
	}
}

agot_canon_children_ambitious_personality_gain = {
	trigger = {
		is_adult = no
		number_of_personality_traits < personality_trait_limit
	}
	random_events = {
		100 = child_personality.0010 # ambitious, sadistic or paranoid
		100 = child_personality.7010 # zealous, ambitious, sadistic
		100 = child_personality.0041 ##Gain ambitious
	}
}

agot_canon_children_sadistic_personality_gain = {
	trigger = {
		is_adult = no
		number_of_personality_traits < personality_trait_limit
	}
	random_events = {
		100 = child_personality.0010 # ambitious, sadistic or paranoid
		100 = child_personality.7010 # zealous, ambitious, sadistic
		100 = child_personality.0051 ##Gain sadistic
	}
}

agot_canon_children_paranoid_personality_gain = {
	trigger = {
		is_adult = no
		number_of_personality_traits < personality_trait_limit
	}
	random_events = {
		100 = child_personality.0010 # ambitious, sadistic or paranoid
		100 = child_personality.7020 # shy, paranoid, craven
		100 = child_personality.0047 ##Gain paranoid
	}
}

agot_canon_children_content_personality_gain = {
	trigger = {
		is_adult = no
		number_of_personality_traits < personality_trait_limit
	}
	random_events = {
		100 = child_personality.0011 # content, fickle or trusting
		100 = child_personality.7060 # humble, cynical, content
		100 = child_personality.0042 ##Gain content
	}
}

agot_canon_children_trusting_personality_gain = {
	trigger = {
		is_adult = no
		number_of_personality_traits < personality_trait_limit
	}
	random_events = {
		100 = child_personality.0011 # content, fickle or trusting
		100 = child_personality.7090 # forgiving, trusting, patient
		50 = child_personality.0048 ##Gain trusting
	}
}

agot_canon_children_impatient_personality_gain = {
	trigger = {
		is_adult = no
		number_of_personality_traits < personality_trait_limit
	}
	random_events = {
		100 = child_personality.0012 # impatient, shy or gluttonous
		100 = child_personality.7100 # honest, arbitrary, impatient
		100 = child_personality.0032 ##Gain impatient
	}
}

agot_canon_children_shy_personality_gain = {
	trigger = {
		is_adult = no
		number_of_personality_traits < personality_trait_limit
	}
	random_events = {
		100 = child_personality.0012 # impatient, shy or gluttonous
		100 = child_personality.7020 # shy, paranoid, craven
		100 = child_personality.0039 ##Gain shy
	}
}

agot_canon_children_gluttonous_personality_gain = {
	trigger = {
		is_adult = no
		number_of_personality_traits < personality_trait_limit
	}
	random_events = {
		100 = child_personality.0012 # impatient, shy or gluttonous
		100 = child_personality.7030 # lazy, gluttonous, compassionate
		100 = child_personality.0023 ##Gain gluttonous
	}
}

agot_canon_children_eccentric_personality_gain = {
	trigger = {
		is_adult = no
		number_of_personality_traits < personality_trait_limit
	}
	random_events = {
		10 = child_personality.7300 # eccentric, compassionate, callous
		10 = child_personality.7400 # eccentric, fickle, stubborn
	}
}


# Childhood personalities
# Additionally triggers any other events that should be triggered at 3 years old
agot_canon_children_curious_personality_gain = {
	trigger = { is_adult = no }
	events = { child_personality.3001 birth.3033 } # curious
}

agot_canon_children_rowdy_personality_gain = {
	trigger = { is_adult = no }
	events = { child_personality.3003 birth.3033 } # rowdy
}

agot_canon_children_bossy_personality_gain = {
	trigger = { is_adult = no }
	events = { child_personality.3005 birth.3033 } # bossy
}

agot_canon_children_charming_personality_gain = {
	trigger = { is_adult = no }
	events = { child_personality.3007 birth.3033 } # charming
}

agot_canon_children_pensive_personality_gain = {
	trigger = { is_adult = no }
	events = { child_personality.3009 birth.3033 } # pensive
}


# Canon guardian
agot_canon_children_assign_canon_guardian = {
	first_valid = {
		agot_childhood_events.0009 # for player
		agot_childhood_events.0010 # for AI
	}
}