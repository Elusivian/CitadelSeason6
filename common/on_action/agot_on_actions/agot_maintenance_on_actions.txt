
# Called from code once a year for "playable" (count+) characters.
# Root is the character
yearly_playable_pulse = {
	on_actions = {
		agot_maintenance_pulse
		agot_ai_character_pulse
	}
}

quarterly_playable_pulse = {
	random_on_action = {
		800 = 0
		520 = agot_unlanded_ai_try_to_bond_dragon_quarterly
		500 = agot_unlanded_ai_try_to_deepen_bond_dragon_quarterly
		300 = agot_unlanded_ai_tame_dragon_quarterly
	}
}

agot_unlanded_ai_tame_dragon_quarterly = {
	trigger = {
		agot_unlanded_ai_tame_dragon_trigger = yes
	}
	events = {
		agot_dragon_maintenance.0100
	}
}
agot_unlanded_ai_try_to_bond_dragon_quarterly = {
	trigger = {
		agot_unlanded_ai_bond_dragon_trigger = yes
	}
	events = {
		agot_dragon_maintenance.0101
	}
}
agot_unlanded_ai_try_to_deepen_bond_dragon_quarterly = {
	trigger = {
		agot_unlanded_ai_deepen_bond_dragon_trigger = yes
	}
	events = {
		agot_dragon_maintenance.0102
	}
}
agot_maintenance_pulse = {
	events = {
		agot_kingsguard.9007 #Reassign lost KG
	}
}

agot_ai_character_pulse = {
	trigger = {
		is_ai = yes
	}
	events = {
		agot_kingsguard.9000 #Kingsguard fallback assingment for AI
	}
}

five_year_everyone_pulse = {
	on_actions = {
		agot_dragonrider_xp_pulse
	}
}

agot_dragonrider_xp_pulse = {
	effect = {
		if = {
			limit = {
				has_trait = dragonrider
				any_relation = { type = agot_dragon is_alive = yes }
				is_landed = no
				is_landless_adventurer = no
			}
			agot_dragonrider_xp_effect = yes
		}
	}
}