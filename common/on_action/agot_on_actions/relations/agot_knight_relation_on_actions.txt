#On actions relating to relationships between characters

####################################
# NOTE
####################################
# All relations have these autogenerated, even if they're not explicitly written out here.
# The full list is:
# [relation]_quarterly_pulse
# on_set_relation_[relation]
# on_remove_relation_[relation]
# on_death_relation_[relation]
#
# The following two on_actions are scripted, rather than being called by code, so if you want one for them then it must be created and fired from the quarterly pulse.
# [relation]_status_changes
# [relation]_relation_changes
####################################

#According to PDX doc, ROOT is the DYING character (Knight), scope:target is the squire
on_death_relation_agot_squire = { #Despite the name, this is for when YOUR KNIGHT dies as a squire. Perhaps it's beacuse the scripted relations are set as corresponding. It just works, I guess.
	effect = {
		save_scope_as = dead_knight

		if = {
			limit = {
				scope:target = {
					has_trait_xp = {
						trait = squire
						track = knight
						value >= 51
					}
					age >= 14
				}
			}
			scope:target = {
				trigger_event = agot_knighthood_maintenance.0012 #Your knight grants you knighthood on his deathbed
			}
		}
		else = {
			scope:target = {
				trigger_event = agot_knighthood_maintenance.0010 # I need to mourn or I need to find a new knight :]
			}
		}

		# If the story has the my_knight var (it should), then we need to remove the variable since the knight is dead ;)
		if = {
			limit = {
				scope:target = {
					any_owned_story = {
						story_type = story_agot_squire_ongoing
						exists = var:my_knight
						var:my_knight = scope:dead_knight
					}
				}
			}

			scope:target = {
				random_owned_story = {
					limit = {
						story_type = story_agot_squire_ongoing
					}
					remove_variable = my_knight
				}
			}
		}
	}
}

# #squirehood ongoing - Moved to a story cycle, left commented while we check everything is stable =D
# agot_squire_quarterly_pulse = {
# 	random_events = {
# 		chance_to_happen = 75
# 		400 = 0
# 		200 = agot_squirehood_ongoing.0200
# 		200 = agot_squirehood_ongoing.0201
# 		200 = agot_squirehood_ongoing.0202
# 		200 = agot_squirehood_ongoing.0203
# 		200 = agot_squirehood_ongoing.0204
# 		200 = agot_squirehood_ongoing.0205
# 		200 = agot_squirehood_ongoing.0206
# 		200 = agot_squirehood_ongoing.0207
# 		200 = agot_squirehood_ongoing.0208
# 		200 = agot_squirehood_ongoing.0209
# 		200 = agot_squirehood_ongoing.0210
# 		200 = agot_squirehood_ongoing.0211
# 		200 = agot_squirehood_ongoing.0212
# 		200 = agot_squirehood_ongoing.0213
# 		200 = agot_squirehood_ongoing.0214
# 		200 = agot_squirehood_ongoing.0215
# 		200 = agot_squirehood_ongoing.0216
# 		200 = agot_squirehood_ongoing.0217
# 	}
# 	events = {
# 		agot_knighthood_maintenance.0001 #Checks if you have become ineligible for squirehood
# 		agot_squirehood_ongoing.0232
# 	}
# }

on_set_relation_agot_squire = {
	effect = {
		add_character_modifier = agot_has_squire_modifier
	}
}

on_remove_relation_agot_squire = {
	effect = {
		remove_character_modifier = agot_has_squire_modifier
	}
}


