# Called from code once a year for all characters, at a random point that year (individually for each character)
# Root is the character
random_yearly_everyone_pulse = {
	on_actions = {
		asoiaf_daenerys_maintenance
		asoiaf_canon_children_cersei_jaime_lover_maintenance
		asoiaf_canon_children_rhaenyra_harwin_lover_maintenance
		asoiaf_canon_children_laenor_joffrey_soulmate_maintenance
		asoiaf_canon_children_aegon_daena_lover_maintenance
		asoiaf_canon_children_dragon_bonding_maintenance
		#asoiaf_red_priest_maintenance
		#asoiaf_canon_children_betrothals
	}
}

asoiaf_daenerys_maintenance = { #only works if Daenerys is alive
	trigger = {
		asoiaf_canon_children_Targaryen_9_trigger_yearly = yes
	}
	effect = {
		root = {
			asoiaf_canon_children_Targaryen_9_birth_effect_yearly = yes
		}
	}
}

asoiaf_canon_children_cersei_jaime_lover_maintenance = { #set the pre-generated Cersei/Jaime as lovers once Jaime is 16 years old
	trigger = {
		OR = {
			has_game_rule = agot_story_historical_events_historical_outcomes
			has_game_rule = agot_story_historical_events_weighted_outcomes
		}
		dynasty:dynn_Lannister = {
			any_dynasty_member = {
				AND = {
					has_inactive_trait = asoiaf_Lannister_7_trait #Jaime Lannister (son of Tywin)
					AND = { #only trigger this in Jaime's early years so it's not happening in later bookmarks
						age >= 16
						age <= 18
					}
				}
			}
		}
		NOT = { exists = global_var:asoiaf_canon_children_cersei_jaime_lovers } #once they've been made lovers, never trigger this on_action again
	}
	effect = {
		dynasty:dynn_Lannister = {
			every_dynasty_member = {
				limit = {
					has_inactive_trait = asoiaf_Lannister_7_trait #Jaime Lannister (son of Tywin)
				}
				save_scope_as = asoiaf_jaime
			}
		}
		dynasty:dynn_Lannister = {
			every_dynasty_member = {
				limit = {
					has_inactive_trait = asoiaf_Lannister_6_trait #Cersei Lannister (daughter of Tywin)
				}
				set_relation_lover = { reason = asoiaf_cersei_jaime_lover_desc target = scope:asoiaf_jaime }
			}
		}
		set_global_variable = asoiaf_canon_children_cersei_jaime_lovers #so this on_action never triggers again
	}
}

asoiaf_canon_children_rhaenyra_harwin_lover_maintenance = { #set the pre-generated Rhaenyra/Harwin as lovers once they are 16 years old
	trigger = {
		OR = {
			has_game_rule = agot_story_historical_events_historical_outcomes
			has_game_rule = agot_story_historical_events_weighted_outcomes
		}
		dynasty:dynn_Targaryen = {
			any_dynasty_member = {
				AND = {
					has_inactive_trait = asoiaf_Targaryen_63_trait #Rhaenyra Targaryen (daughter of Viserys I)
					age >= 16
				}
			}
		}
		dynasty:dynn_Strong = {
			any_dynasty_member = {
				AND = {
					has_inactive_trait = asoiaf_Strong_30_trait #Harwin Strong (son of Lyonel)
					age >= 16
				}
			}
		}
		NOT = { exists = global_var:asoiaf_canon_children_rhaenyra_harwin_lovers } #once they've been made lovers, never trigger this on_action again
	}
	effect = {
		dynasty:dynn_Targaryen = {
			every_dynasty_member = {
				limit = {
					has_inactive_trait = asoiaf_Targaryen_63_trait #Rhaenyra Targaryen (daughter of Viserys I)
				}
				save_scope_as = asoiaf_rhaenyra
			}
		}
		dynasty:dynn_Strong = {
			every_dynasty_member = {
				limit = {
					has_inactive_trait = asoiaf_Strong_30_trait #Harwin Strong (son of Lyonel)
				}
				set_relation_lover = { reason = asoiaf_rhaenyra_harwin_lover_desc target = scope:asoiaf_rhaenyra }
			}
		}
		set_global_variable = asoiaf_canon_children_rhaenyra_harwin_lovers #so this on_action never triggers again
	}
}

asoiaf_canon_children_laenor_joffrey_soulmate_maintenance = {
	trigger = {
		OR = {
			has_game_rule = agot_story_historical_events_historical_outcomes
			has_game_rule = agot_story_historical_events_weighted_outcomes
		}
		dynasty:dynn_Velaryon = {
			any_dynasty_member = {
				AND = {
					has_inactive_trait = asoiaf_Velaryon_35_trait #Laenor Velaryon (son of Corlys)
					age >= 16
				}
			}
		}
		character:Lonmouth_16 ?= {
			age >= 16
		}
		NOT = { exists = global_var:asoiaf_canon_children_laenor_joffrey_soulmates } #once they've been made lovers, never trigger this on_action again
	}
	effect = {
		dynasty:dynn_Velaryon = {
			every_dynasty_member = {
				limit = {
					has_inactive_trait = asoiaf_Velaryon_35_trait #Laenor Velaryon (son of Corlys)
				}
				save_scope_as = asoiaf_laenor
			}
		}
		character:Lonmouth_16 ?= {
			set_relation_soulmate = { reason = asoiaf_lanor_joffrey_soulmate_desc target = scope:asoiaf_laenor }
		}
		set_global_variable = asoiaf_canon_children_laenor_joffrey_soulmates #so this on_action never triggers again
	}
}

asoiaf_canon_children_aegon_daena_lover_maintenance = { #set the pre-generated Aegon IV/Daena as lovers once they are 16 years old
	trigger = {
		OR = {
			has_game_rule = agot_story_historical_events_historical_outcomes
			has_game_rule = agot_story_historical_events_weighted_outcomes
		}
		dynasty:dynn_Targaryen = {
			AND = {
				any_dynasty_member = {
					AND = {
						has_inactive_trait = asoiaf_Targaryen_88_trait #Aegon IV Targaryen
						AND = {
							age >= 16
						}
					}
				}
				any_dynasty_member = {
					AND = {
						has_inactive_trait = asoiaf_Targaryen_83_trait #Daena Targaryen (daughter of Aegon III)
						age >= 16
					}
				}
			}
		}
		NOT = { exists = global_var:asoiaf_canon_children_aegon_daena_lovers } #once they've been made lovers, never trigger this on_action again
	}
	effect = {
		dynasty:dynn_Targaryen = {
			every_dynasty_member = {
				limit = {
					has_inactive_trait = asoiaf_Targaryen_88_trait #Aegon IV Targaryen
				}
				save_scope_as = asoiaf_aegon_IV
			}
		}
		dynasty:dynn_Targaryen = {
			every_dynasty_member = {
				limit = {
					has_inactive_trait = asoiaf_Targaryen_83_trait #Daena Targaryen (daughter of Aegon III)
				}
				set_relation_lover = { reason = asoiaf_aegon_daena_lover_desc target = scope:asoiaf_aegon_IV }
			}
		}
		set_global_variable = asoiaf_canon_children_aegon_daena_lovers #so this on_action never triggers again
	}
}

asoiaf_canon_children_dragon_bonding_maintenance = {
	trigger = {
		asoiaf_canon_children_enabled_trigger = yes
		has_game_rule = asoiaf_canon_children_dragon_bonding_rule_on
		root = {
			OR = { #when someone is added to the system, include them here
				has_inactive_trait = asoiaf_Targaryen_30_trait #Aenys I Targaryen
				has_inactive_trait = asoiaf_Targaryen_31_trait #Maegor I Targaryen
				has_inactive_trait = asoiaf_Targaryen_33_trait #Aegon Targaryen (son of Aenys)
				has_inactive_trait = asoiaf_Targaryen_59_trait #Rhaenys Targaryen (daughter of Aemon)
				has_inactive_trait = asoiaf_Targaryen_60_trait #Viserys I Targaryen
				has_inactive_trait = asoiaf_Targaryen_61_trait #Daemon Targaryen (son of Baelon)
				has_inactive_trait = asoiaf_Targaryen_67_trait #Aemond Targaryen (son of Viserys I)
			}
		}
		#current_date < 8200.1.1 #by 200 we can assume all the Canon Children who would've ridden dragons are born, no need to spam the on_action; shouldn't be necessary now that it ONLY triggers for those characters included in the system
	}
	effect = {
		if = { #Aenys I - Quicksilver
			limit = {
				character:dragon_quicksilver ?= { #if Balerion is riderless
					is_alive = yes
					agot_has_relationship_dragon = no #hasn't already bonded with another rider
				}
				dynasty:dynn_Targaryen = { #if Aenys is riderless
					any_dynasty_member = {
						AND = {
							has_inactive_trait = asoiaf_Targaryen_30_trait #Aenys I Targaryen
							agot_has_relationship_dragon = no #not already bonded to another dragon
							NOT = { has_trait = nightswatch }
						}
					}
				}
			}
			dynasty:dynn_Targaryen = {
				every_dynasty_member = {
					limit = {
						AND = {
							has_inactive_trait = asoiaf_Targaryen_30_trait #Aenys I Targaryen
							agot_has_relationship_dragon = no #not already bonded to another dragon
						}
					}
					save_scope_as = asoiaf_aenys_i
				}
			}
			agot_bond_dragon_relation_effect = {
				ACTOR = scope:asoiaf_aenys_i
				DRAGON = character:dragon_quicksilver
			}
			send_interface_toast = {
				title = bond_dragon_notification
				left_icon = scope:asoiaf_aenys_i
				right_icon = character:dragon_quicksilver
				start_scheme = {
					type = bond_with_dragon_scheme
					target = character:dragon_quicksilver
				}
			}
		}
		if = { #Maegor I - Balerion
			limit = {
				character:dragon_balerion ?= { #if Balerion is riderless
					is_alive = yes
					agot_has_relationship_dragon = no #hasn't already bonded with another rider
				}
				dynasty:dynn_Targaryen = { #if Maegor is riderless
					any_dynasty_member = {
						AND = {
							has_inactive_trait = asoiaf_Targaryen_31_trait #Maegor I Targaryen
							agot_has_relationship_dragon = no #not already bonded to another dragon
							NOT = { has_trait = nightswatch }
						}
					}
				}
			}
			dynasty:dynn_Targaryen = {
				every_dynasty_member = {
					limit = {
						AND = {
							has_inactive_trait = asoiaf_Targaryen_31_trait #Maegor I Targaryen
							agot_has_relationship_dragon = no #not already bonded to another dragon
						}
					}
					save_scope_as = asoiaf_maegor_i
				}
			}
			agot_bond_dragon_relation_effect = {
				ACTOR = scope:asoiaf_maegor_i
				DRAGON = character:dragon_balerion
			}
			send_interface_toast = {
				title = bond_dragon_notification
				left_icon = scope:asoiaf_maegor_i
				right_icon = character:dragon_balerion
				start_scheme = {
					type = bond_with_dragon_scheme
					target = character:dragon_balerion
				}
			}
		}
		if = { #Aegon (son of Aenys I) - Quicksilver
			limit = {
				character:dragon_quicksilver ?= { #if Balerion is riderless
					is_alive = yes
					agot_has_relationship_dragon = no #hasn't already bonded with another rider
				}
				dynasty:dynn_Targaryen = { #if Maegor is riderless
					any_dynasty_member = {
						AND = {
							has_inactive_trait = asoiaf_Targaryen_33_trait #Aegon Targaryen (son of Aenys I)
							agot_has_relationship_dragon = no #not already bonded to another dragon
							NOT = { has_trait = nightswatch }
						}
					}
				}
			}
			dynasty:dynn_Targaryen = {
				every_dynasty_member = {
					limit = {
						AND = {
							has_inactive_trait = asoiaf_Targaryen_33_trait #Aegon Targaryen (son of Aenys I)
							agot_has_relationship_dragon = no #not already bonded to another dragon
						}
					}
					save_scope_as = asoiaf_aegon_the_uncrowned
				}
			}
			agot_bond_dragon_relation_effect = {
				ACTOR = scope:asoiaf_aegon_the_uncrowned
				DRAGON = character:dragon_quicksilver
			}
			send_interface_toast = {
				title = bond_dragon_notification
				left_icon = scope:asoiaf_aegon_the_uncrowned
				right_icon = character:dragon_quicksilver
				start_scheme = {
					type = bond_with_dragon_scheme
					target = character:dragon_quicksilver
				}
			}
		}
		if = { #Aerea - Balerion
			limit = {
				character:dragon_balerion ?= { #if Balerion is riderless
					is_alive = yes
					agot_has_relationship_dragon = no #hasn't already bonded with another rider
				}
				dynasty:dynn_Targaryen = { #if Aerea is riderless
					any_dynasty_member = {
						AND = {
							has_inactive_trait = asoiaf_Targaryen_41_trait #Aerea Targaryen (daughter of Aegon)
							agot_has_relationship_dragon = no #not already bonded to another dragon
							NOT = { has_trait = nightswatch }
						}
					}
				}
			}
			dynasty:dynn_Targaryen = {
				every_dynasty_member = {
					limit = {
						AND = {
							has_inactive_trait = asoiaf_Targaryen_41_trait #Aerea Targaryen (daughter of Aegon)
							agot_has_relationship_dragon = no #not already bonded to another dragon
						}
					}
					save_scope_as = asoiaf_aerea
				}
			}
			agot_bond_dragon_relation_effect = {
				ACTOR = scope:asoiaf_aerea
				DRAGON = character:dragon_balerion
			}
			send_interface_toast = {
				title = bond_dragon_notification
				left_icon = scope:asoiaf_aerea
				right_icon = character:dragon_balerion
				start_scheme = {
					type = bond_with_dragon_scheme
					target = character:dragon_balerion
				}
			}
		}
		if = { #Rhaenys - Meleys
			limit = {
				character:dragon_meleys ?= { #if Meleys is riderless
					is_alive = yes
					agot_has_relationship_dragon = no #hasn't already bonded with another rider
				}
				dynasty:dynn_Targaryen = { #if Rhaenys is riderless
					any_dynasty_member = {
						AND = {
							has_inactive_trait = asoiaf_Targaryen_59_trait #Rhaenys Targaryen (daughter of Aemon)
							agot_has_relationship_dragon = no #not already bonded to another dragon
							NOT = { has_trait = nightswatch }
						}
					}
				}
			}
			dynasty:dynn_Targaryen = {
				every_dynasty_member = {
					limit = {
						AND = {
							has_inactive_trait = asoiaf_Targaryen_59_trait #Rhaenys Targaryen (daughter of Aemon)
							agot_has_relationship_dragon = no #not already bonded to another dragon
						}
					}
					save_scope_as = asoiaf_rhaenys_queen_who_never_was
				}
			}
			agot_bond_dragon_relation_effect = {
				ACTOR = scope:asoiaf_rhaenys_queen_who_never_was
				DRAGON = character:dragon_meleys
			}
			send_interface_toast = {
				title = bond_dragon_notification
				left_icon = scope:asoiaf_rhaenys_queen_who_never_was
				right_icon = character:dragon_meleys
				start_scheme = {
					type = bond_with_dragon_scheme
					target = character:dragon_meleys
				}
			}
		}
		if = { #Viserys I - Balerion
			limit = {
				character:dragon_balerion ?= { #if Balerion is riderless
					is_alive = yes
					agot_has_relationship_dragon = no #hasn't already bonded with another rider
				}
				dynasty:dynn_Targaryen = { #if Viserys is riderless
					any_dynasty_member = {
						AND = {
							has_inactive_trait = asoiaf_Targaryen_60_trait #Viserys I Targaryen
							agot_has_relationship_dragon = no #not already bonded to another dragon
							NOT = { has_trait = nightswatch }
						}
					}
				}
			}
			dynasty:dynn_Targaryen = {
				every_dynasty_member = {
					limit = {
						AND = {
							has_inactive_trait = asoiaf_Targaryen_60_trait #Viserys I Targaryen
							agot_has_relationship_dragon = no #not already bonded to another dragon
						}
					}
					save_scope_as = asoiaf_viserys_i
				}
			}
			agot_bond_dragon_relation_effect = {
				ACTOR = scope:asoiaf_viserys_i
				DRAGON = character:dragon_balerion
			}
			send_interface_toast = {
				title = bond_dragon_notification
				left_icon = scope:asoiaf_viserys_i
				right_icon = character:dragon_balerion
				start_scheme = {
					type = bond_with_dragon_scheme
					target = character:dragon_balerion
				}
			}
		}
		if = { #Daemon - Caraxes
			limit = {
				character:dragon_caraxes ?= { #if Caraxes is riderless
					is_alive = yes
					agot_has_relationship_dragon = no #hasn't already bonded with another rider
				}
				dynasty:dynn_Targaryen = { #if Daemon is riderless
					any_dynasty_member = {
						AND = {
							has_inactive_trait = asoiaf_Targaryen_61_trait #Daemon Targaryen (son of Baelon)
							agot_has_relationship_dragon = no #not already bonded to another dragon
							NOT = { has_trait = nightswatch }
						}
					}
				}
			}
			dynasty:dynn_Targaryen = {
				every_dynasty_member = {
					limit = {
						AND = {
							has_inactive_trait = asoiaf_Targaryen_61_trait #Daemon Targaryen (son of Baelon)
							agot_has_relationship_dragon = no #not already bonded to another dragon
						}
					}
					save_scope_as = asoiaf_daemon_rogue_prince
				}
			}
			agot_bond_dragon_relation_effect = {
				ACTOR = scope:asoiaf_daemon_rogue_prince
				DRAGON = character:dragon_caraxes
			}
			send_interface_toast = {
				title = bond_dragon_notification
				left_icon = scope:asoiaf_daemon_rogue_prince
				right_icon = character:dragon_caraxes
				start_scheme = {
					type = bond_with_dragon_scheme
					target = character:dragon_caraxes
				}
			}
		}
		if = { #Aemond - Vhagar
			limit = {
				character:dragon_vhagar ?= { #if Vhagar is riderless
					is_alive = yes
					agot_has_relationship_dragon = no #hasn't already bonded with another rider
				}
				dynasty:dynn_Targaryen = { #if Aemond is riderless
					any_dynasty_member = {
						AND = {
							has_inactive_trait = asoiaf_Targaryen_67_trait #Aemond Targaryen (son of Viserys I)
							agot_has_relationship_dragon = no #not already bonded to another dragon
							NOT = { has_trait = nightswatch }
						}
					}
				}
			}
			dynasty:dynn_Targaryen = {
				every_dynasty_member = {
					limit = {
						AND = {
							has_inactive_trait = asoiaf_Targaryen_67_trait #Aemond Targaryen (son of Viserys I)
							agot_has_relationship_dragon = no #not already bonded to another dragon
						}
					}
					save_scope_as = asoiaf_aemond_one_eye
				}
			}
			agot_bond_dragon_relation_effect = {
				ACTOR = scope:asoiaf_aemond_one_eye
				DRAGON = character:dragon_vhagar
			}
			send_interface_toast = {
				title = bond_dragon_notification
				left_icon = scope:asoiaf_aemond_one_eye
				right_icon = character:dragon_vhagar
				start_scheme = {
					type = bond_with_dragon_scheme
					target = character:dragon_vhagar
				}
			}
		}
	}
}

#asoiaf_red_priest_maintenance = {
#	trigger = {
#		AND = { #only affects AI red priests
#			is_ai = yes
#			has_trait = devoted #conditions for being a Red Priest
#			religion = religion:rhllor_religion
#		}
#	}
#	effect = {
#		asoiaf_red_priest_maintenance_effect = yes
#	}
#}

#NOT WORKING

asoiaf_canon_children_betrothals = {
	#trigger = {
	#}
	effect = {
		if = {

		}
		if = {
			limit = {
				OR = {
					has_game_rule = agot_ema_targ
					has_game_rule = agot_ema_lps_targs
					has_game_rule = agot_ema_enabled
				}
				exists = dynasty
				dynasty = dynasty:dynn_Targaryen
				NOT = { has_trait = bastard }
				NOT = { has_trait = disinherited }
				NOT = { is_betrothed = yes }
				is_ai = yes
				trigger_if = {
					limit = { exists = court_owner }
					court_owner = { is_ai = yes }
				}
				any_sibling = {
					can_marry_character_trigger = { CHARACTER = root }
					NOT = { has_trait = bastard }
					NOT = { has_trait = disinherited }
					age > 1
					age < 21
					exists = dynasty
					dynasty = dynasty:dynn_Targaryen
					is_ai = yes
					trigger_if = {
						limit = { exists = court_owner }
						court_owner = { is_ai = yes }
					}
					NOT = {
						any_child = {
							is_alive = yes
						}
					}
				}
			}
			every_sibling = {
				limit = {
					can_marry_character_trigger = { CHARACTER = root }
					NOT = { has_trait = bastard }
					NOT = { has_trait = disinherited }
					age < 21
					exists = dynasty
					dynasty = dynasty:dynn_Targaryen
					is_ai = yes
					trigger_if = {
						limit = { exists = court_owner }
						court_owner = { is_ai = yes }
					}
					NOT = {
						any_child = {
							is_alive = yes
						}
					}
				}
				add_to_list = sibling_marriage_list
			}
			ordered_in_list = {
				list = sibling_marriage_list
				order_by = age
				save_scope_as = betrothed
			}
			if = {
				limit = { is_male = yes}
				root = {
					create_betrothal = scope:betrothed
				}
			}
			else = {
				scope:betrothed = {
					create_betrothal = root
				}
			}
		}
	}
}

# Called from code once every five years for all characters.
# Root is the character
five_year_everyone_pulse = {
	on_actions = {
		asoiaf_Targaryen_8_traits_change_maintenance
	}
}

asoiaf_Targaryen_8_traits_change_maintenance = {
	trigger = {
		exists = global_var:asoiaf_Targaryen_8_pending_traits_change_variable #if it exists, then he was under 16 and on the run on game start
		root = {
			has_inactive_trait = asoiaf_Targaryen_8_trait #this is Viserys
			is_alive = yes
			age >= 19
			OR = {
				is_landed = no #he's unlanded and on the run (whether in Essos or skulking across Westeros)
				AND = {
					is_landed = yes #he's landed, but located outside the Seven Kingdoms (in exile)
					location = { NOT = { geographical_region = world_westeros_seven_kingdoms } }
				}
			}
		}
	}
	effect = {
		root = {
			trigger_event = { id = asoiaf_maintenance_events.0001 days = 3 }
		}
	}
}