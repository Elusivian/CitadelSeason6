# Default combat values
dragon_roll_values_1 = 30
dragon_roll_values_2 = 50
dragon_roll_values_3 = 70
dragon_roll_values_4 = 100
dragon_roll_values_5 = 130
dragon_roll_values_6 = 160
dragon_roll_values_7 = 190
dragon_roll_values_8 = 240
dragon_roll_values_9 = 275
dragon_roll_values_10 = 350
dragon_roll_counter_values_1 = 10
dragon_roll_counter_values_2 = 15
dragon_roll_counter_values_3 = 35
dragon_roll_counter_values_4 = 50
dragon_roll_counter_values_5 = 60
dragon_roll_counter_values_6 = 75
dragon_roll_counter_values_7 = 90
dragon_roll_counter_values_8 = 115
dragon_roll_counter_values_9 = 135
dragon_roll_counter_values_10 = 155

# Dragon size values
level_one_dragon_size = 0
level_two_dragon_size = 20
level_three_dragon_size = 40
level_four_dragon_size = 60
level_five_dragon_size = 80
level_six_dragon_size = 100
level_seven_dragon_size = 125
level_eight_dragon_size = 150
level_nine_dragon_size = 175
level_ten_dragon_size = 200

# Dragon combat levels
level_one_dragon_combat = 30
level_two_dragon_combat = 40
level_three_dragon_combat = 60
level_four_dragon_combat = 80
level_five_dragon_combat = 100
level_six_dragon_combat = 120
level_seven_dragon_combat = 140
level_eight_dragon_combat = 170
level_nine_dragon_combat = 200
level_ten_dragon_combat = 250


# Dragon duel success values
dragon_duel_success_none = 0
dragon_duel_success_low = 1
dragon_duel_success_medium = 2
dragon_duel_success_high = 3
dragon_duel_success_very_high = 4
dragon_duel_success_guaranteed = 5

# Calculates the "rated" prowess the dragon should have based on training - call on dragon
dragon_combat_effectiveness = {
	value = dragon_size
	# Personality
	if = {
		limit = {
			has_trait = dragon_aggressive
		}
		multiply = 1.1
	}
	if = {
		limit = {
			has_trait = dragon_friendly
		}
		multiply = 0.95
	}
	if = {
		limit = {
			has_trait = dragon_impulsive
		}
		multiply = 1.02
	}
	if = {
		limit = {
			has_trait = dragon_calculating
		}
		multiply = 1.1
	}
	if = {
		limit = {
			has_trait = dragon_bloodthirsty
		}
		multiply = 1.1
	}
	if = {
		limit = {
			has_trait = dragon_skittish
		}
		multiply = 0.85
	}
	# Wounds
	if = {
		limit = {
			has_trait = dragon_wounded_1
		}
		multiply = 0.95
	}
	else_if = {
		limit = {
			has_trait = dragon_wounded_2
		}
		multiply = 0.9
	}
	else_if = {
		limit = {
			has_trait = dragon_wounded_3
		}
		multiply = 0.8
	}
	else_if = {
		limit = {
			has_trait = dragon_wounded_4
		}
		multiply = 0.7
	}
	else_if = {
		limit = {
			has_trait = dragon_wounded_5
		}
		multiply = 0.5
	}
	# Sick
	if = {
		limit = {
			has_trait = dragon_ill
		}
		multiply = 0.7
	}
	# Congenital traits
	if = {
		limit = {
			has_trait = dragon_swift
		}
		multiply = 1.15
	}
	else_if = {
		limit = {
			has_trait = dragon_slow
		}
		multiply = 0.85
	}
	if = {
		limit = {
			has_trait = dragon_spindly
		}
		multiply = 1.15
	}
	if = {
		limit = {
			has_trait = dragon_blind
		}
		multiply = 0.25
	}
	# Rider experience
	if = {
		limit = { exists = var:current_rider }
		if = {
			limit = {
				var:current_rider = {
					has_trait_xp = {
						trait = dragonrider
						track = dragon_training
						value > 30
					}
				}
			}
			multiply = 1.1
		}
		if = {
			limit = {
				var:current_rider = {
					has_trait_xp = {
						trait = dragonrider
						track = dragon_training
						value > 65
					}
				}
			}
			multiply = 1.1
		}
		if = {
			limit = {
				var:current_rider = {
					has_trait_xp = {
						trait = dragonrider
						track = dragon_training
						value = 100
					}
				}
			}
			multiply = 1.1
		}
	}
}

# Dragon causes stress to enemies
dragon_draconic_dread_stress_impact = {
	value = draconic_dread
	multiply = 0.5
}

# Adjusted dragon weight class to be used in combat for move checks
dragon_combat_weight_class = {
	if = {
		limit = {  # Gargantuan dragon
			dragon_combat_effectiveness > level_eight_dragon_combat
		}
		value = 4
	}
	else_if = { # Large dragon
		limit = {
			dragon_combat_effectiveness > level_five_dragon_combat
		}
		value = 3
	}
	else_if = { # Medium dragon
		limit = {
			dragon_combat_effectiveness >= level_three_dragon_combat
		}
		value = 2
	}
	else_if = { # Adult dragon
		limit = {
			dragon_combat_effectiveness >= level_one_dragon_combat
		}
		value = 1
	}
	else = { # Young dragon
		value = 0
	}
}

dsc_injury_calculator = {
	value = 0
	if = {
		limit = {
			has_trait = wounded_1
		}
		add = 1
	}
	if = {
		limit = {
			has_trait = wounded_2
		}
		add = 2
	}
	if = {
		limit = {
			has_trait = wounded_3
		}
		add = 3
	}
	if = {
		limit = {
			has_trait = burned
		}
		add = 2
	}
	if = {
		limit = {
			exists = var:current_dragon
		}
		if = {
			limit = {
				var:current_dragon = {
					has_trait = dragon_wounded_1
				}
			}
			add = 1
		}
		if = {
			limit = {
				var:current_dragon = {
					has_trait = dragon_wounded_2
				}
			}
			add = 2
		}
		if = {
			limit = {
				var:current_dragon = {
					has_trait = dragon_wounded_3
				}
			}
			add = 3
		}
		if = {
			limit = {
				var:current_dragon = {
					has_trait = dragon_wounded_4
				}
			}
			add = 4
		}
		if = {
			limit = {
				var:current_dragon = {
					has_trait = dragon_wounded_5
				}
			}
			add = 5
		}
		if = {
			limit = {
				var:current_dragon = {
					has_trait = dragon_burned
				}
			}
			add = 3
		}
	}
}

###############################
# Human vs Dragon Combat values
###############################

# The scaling of prowess in base game is sorely
# out of touch with prowess in of character
ds_human_combat_rating_1 = 0
ds_human_combat_rating_2 = 5
ds_human_combat_rating_3 = 10
ds_human_combat_rating_4 = 15
ds_human_combat_rating_5 = 20
ds_human_combat_rating_6 = 25
ds_human_combat_rating_7 = 30
ds_human_combat_rating_8 = 35
ds_human_combat_rating_9 = 40
ds_human_combat_rating_10 = 45

ds_combat_effectiveness = {
	value = dragon_size
	# Personality
	if = {
		limit = {
			has_trait = dragon_aggressive
		}
		multiply = 1.1
	}
	if = {
		limit = {
			has_trait = dragon_friendly
		}
		multiply = 0.95
	}
	if = {
		limit = {
			has_trait = dragon_impulsive
		}
		multiply = 1.02
	}
	if = {
		limit = {
			has_trait = dragon_calculating
		}
		multiply = 1.1
	}
	if = {
		limit = {
			has_trait = dragon_bloodthirsty
		}
		multiply = 1.1
	}
	if = {
		limit = {
			has_trait = dragon_skittish
		}
		multiply = 0.85
	}
	# Wounds
	if = {
		limit = {
			has_trait = dragon_wounded_1
		}
		multiply = 0.95
	}
	else_if = {
		limit = {
			has_trait = dragon_wounded_2
		}
		multiply = 0.9
	}
	else_if = {
		limit = {
			has_trait = dragon_wounded_3
		}
		multiply = 0.8
	}
	else_if = {
		limit = {
			has_trait = dragon_wounded_4
		}
		multiply = 0.7
	}
	else_if = {
		limit = {
			has_trait = dragon_wounded_5
		}
		multiply = 0.5
	}
	# Sick
	if = {
		limit = {
			has_trait = dragon_ill
		}
		multiply = 0.7
	}
	# Congenital traits
	if = {
		limit = {
			has_trait = dragon_swift
		}
		multiply = 1.15
	}
	else_if = {
		limit = {
			has_trait = dragon_slow
		}
		multiply = 0.85
	}
	if = {
		limit = {
			has_trait = dragon_spindly
		}
		multiply = 1.15
	}
}

ds_human_combat_effectiveness = {
	value = prowess

	if = {
		limit = {
			has_character_flag = ds_poison
		}
		multiply = 1.2
	}

	if = {
		limit = {
			has_trait = dragonslayer
		}
		multiply = 1.5
	}

	if = { # Learned from the citadel
		limit = {
			has_variable = agot_dragon_hatching_dragonlore_0003_triggered
		}
		multiply = 1.1
	}
}

dragon_siege_fort_level = {
	value = fort_level
	county.duchy.title_capital_county = { save_temporary_scope_as = duchy_capital }

	if = {
		limit = {
			NOT = {
				barony = { is_capital_barony = yes }
			}
			scope:duchy_capital.title_province = { has_building = march_01 }
			OR = {
				barony.holder = scope:duchy_capital.holder
				barony.holder = { is_vassal_or_below_of = scope:duchy_capital.holder }
			}
		}
		subtract = normal_building_fort_level_tier_2
	}
	else_if = {
		limit = {
			NOT = {
				barony = { is_capital_barony = yes }
			}
			scope:duchy_capital.title_province = { has_building = march_02 }
			OR = {
				barony.holder = scope:duchy_capital.holder
				barony.holder = { is_vassal_or_below_of = scope:duchy_capital.holder }
			}
		}
		subtract = normal_building_fort_level_tier_4
	}
	else_if = {
		limit = {
			NOT = {
				barony = { is_capital_barony = yes }
			}
			scope:duchy_capital.title_province = { has_building = march_03 }
			OR = {
				barony.holder = scope:duchy_capital.holder
				barony.holder = { is_vassal_or_below_of = scope:duchy_capital.holder }
			}
		}
		subtract = normal_building_fort_level_tier_6
	}

	if = {
		limit = {
			barony.holder = { vassal_contract_has_flag = fortification_rights_granted }
		}
		subtract = 1
	}

	if = {
		limit = {
			county.holder = {
				exists = cp:councillor_castellan
				cp:councillor_castellan = {
					is_performing_council_task = task_castellan_fortify
				}
			}
		}
		subtract = {
			value = county.holder.cp:councillor_castellan.martial
			divide = 5
		}
	}
}