# Dragon Taming Modifiers
agot_dragon_taming_modifier = {
	# Requires scopes:
	# dragon_taming_modifier_dragon
	# dragon_taming_modifier_tamer
	modifier = {
		add = dragon_taming_attempt_chance
	}
}

agot_dragon_taming_inverse_modifier = {
	# Requires scopes:
	# dragon_taming_modifier_dragon
	# dragon_taming_modifier_tamer
	modifier = {
		add = 100
	}
	modifier = {
		add = {
			subtract = dragon_taming_attempt_chance
		}
	}
}

# First bond modifier
agot_dragon_bonding_scheme_modifier = {
	modifier = {
		add = dragon_scheme_base_bonding_value
		desc = "SCHEME_DRAGON_BASE"
	}
	# Dragon is wild
	modifier = {
		scope:target = {
			NOT = { has_character_flag = owned_dragon }
		}
		add = dragon_scheme_base_wild_value
		desc = scheme_wild_dragon
	}
	# Traits in common
	modifier = {
		add = {
			value = dragon_traits_in_common
			multiply = dragon_scheme_base_common_traits_value
		}
		desc = "SCHEME_BOND_BOTH_TRAIT"
	}
	# Diligent / Lazy
	modifier = {
		scope:owner = { has_trait = diligent }
		add = dragon_scheme_diligent_value
		desc = "SCHEME_BOND_OWNER_DILIGENT"
	}
	modifier = {
		scope:owner = { has_trait = lazy }
		add = dragon_scheme_lazy_value
		desc = "SCHEME_BOND_OWNER_LAZY"
	}
	# Base dragon values
	modifier = {
		add = scope:target.temperament
		desc = "SCHEME_BOND_DRAGON_TEMPERAMENT"
	}
	modifier = {
		add = scope:target.taming_chance
		desc = "SCHEME_BOND_DRAGON_TAMING_CHANCE"
	}
	# Ex-dragonrider
	modifier = {
		scope:owner = { has_trait = dragonless_dragonrider }
		add = -30
		desc = "SCHEME_EX_DRAGONRIDER"
	}
	# Dragon is pitted
	modifier = {
		scope:target = {
			has_character_flag = in_dragonpit
		}
		add = 15
		desc = scheme_pitted_dragon
	}
	# Taught Dragonlore
	modifier = {
		scope:owner = { has_character_modifier = agot_taught_dragonlore }
		add = 5
		desc = scheme_taught_dragonlore
	}
	# Head Dragonkeeper Buffs - AGOT TODO BALANCE - Alternatively, maybe a special interaction 'Aid with Dragon Taming' that adds a scheme modifier instead? Or both?
	modifier = {
		add = 1
		scope:owner = {
			exists = court_position:head_dragonkeeper_court_position
			court_position:head_dragonkeeper_court_position = {
				aptitude:head_dragonkeeper_court_position = 0
			}
		}
		desc = scheme_dragonkeeper
	}
	modifier = {
		add = 2
		scope:owner = {
			exists = court_position:head_dragonkeeper_court_position
			court_position:head_dragonkeeper_court_position = {
				aptitude:head_dragonkeeper_court_position = 1
			}
		}
		desc = scheme_dragonkeeper
	}
	modifier = {
		add = 5
		scope:owner = {
			exists = court_position:head_dragonkeeper_court_position
			court_position:head_dragonkeeper_court_position = {
				aptitude:head_dragonkeeper_court_position = 2
			}
		}
		desc = scheme_dragonkeeper
	}
	modifier = {
		add = 10
		scope:owner = {
			exists = court_position:head_dragonkeeper_court_position
			court_position:head_dragonkeeper_court_position = {
				aptitude:head_dragonkeeper_court_position = 3
			}
		}
		desc = scheme_dragonkeeper
	}
	modifier = {
		add = 15
		scope:owner = {
			exists = court_position:head_dragonkeeper_court_position
			court_position:head_dragonkeeper_court_position = {
				aptitude:head_dragonkeeper_court_position = 4
			}
		}
		desc = scheme_dragonkeeper
	}
	# Blood of the dragon
	modifier = {
		add = {
			value = scope:owner.dragonblood_percent
			divide = 2
		}
		desc = "SCHEME_BOND_VALYRIAN_BLOOD"
	}
	modifier = {
		add = 20
		scope:owner = {
			dynasty ?= { has_dynasty_perk = dragonrider_dynasty_legacy_2 }
		}
		desc = "SCHEME_BOND_DYNASTY_LEGACY"
	}
	modifier = {
		add = 200
		has_game_rule = agot_canon_dragons_enabled
		agot_is_canon_rider_dragon_pair = { RIDER = scope:owner DRAGON = scope:target }
		desc = "SCHEME_BOND_DESTINED_RIDER"
	}
	# AGOT TODO - modifiers based on laws for who can try to tame dragons - authorized tamers get the bonuses of an HDK if their liege/family head lets them try to tame
}

# Tamed dragon deepen bond modifier
agot_dragon_deepen_bonding_scheme_modifier = {
	modifier = {
		add = dragon_deepen_scheme_base_bonding_value
		desc = "SCHEME_DRAGON_BASE"
	}
	#Language
	modifier = {
		add = dragon_scheme_base_common_language_value
		desc = YOU_SPEAK_THE_LANGUAGE
		scope:owner = { knows_language_of_culture = scope:target.culture }
	}
	# Traits in common
	modifier = {
		add = {
			value = dragon_traits_in_common
			multiply = dragon_scheme_base_common_traits_value
		}
		desc = "SCHEME_BOND_BOTH_TRAIT"
	}
	# Diligent / Lazy
	modifier = {
		scope:owner = { has_trait = diligent }
		add = dragon_scheme_diligent_value
		desc = "SCHEME_BOND_OWNER_DILIGENT"
	}
	modifier = {
		scope:owner = { has_trait = lazy }
		add = dragon_scheme_lazy_value
		desc = "SCHEME_BOND_OWNER_LAZY"
	}
	# Prestige
	modifier = {
		add = {
			value = scope:owner.prestige_level
			multiply = dragon_scheme_base_prestige_level_value
		}
		desc = "SCHEME_BOND_DRAGON_GRAVITAS"
	}
	modifier = {
		add = {
			value = scope:owner.dread
			multiply = dragon_scheme_base_dread_mult
		}
		desc = "SCHEME_BOND_DRAGON_DREAD"
	}
	modifier = {
		add = {
			value = {
				value = scope:target.draconic_dread
				multiply = dragon_scheme_base_draconic_dread_mult
			}
			divide = 2
		}
		desc = "SCHEME_BOND_DRAGON_DRACONIC_DREAD"
	}
	modifier = {
		add = {
			value = scope:target.temperament
			divide = 3
		}
		desc = "SCHEME_BOND_DRAGON_TEMPERAMENT"
	}
	# Dragon is pitted
	modifier = {
		scope:target = {
			has_character_flag = in_dragonpit
		}
		add = -5
		desc = scheme_pitted_dragon
	}
	# Taught Dragon Lore
	modifier = {
		scope:owner = { has_character_modifier = agot_taught_dragonlore }
		add = 5
		desc = scheme_taught_dragonlore
	}
	# Head Dragonkeeper Buffs - AGOT TODO BALANCE - Alternatively, maybe a special interaction 'Aid with Dragon Taming' that adds a scheme modifier instead? Or both?
	modifier = {
		add = 1
		scope:owner = {
			exists = court_position:head_dragonkeeper_court_position
			court_position:head_dragonkeeper_court_position = {
				aptitude:head_dragonkeeper_court_position = 0
			}
		}
		desc = scheme_dragonkeeper
	}
	modifier = {
		add = 2
		scope:owner = {
			exists = court_position:head_dragonkeeper_court_position
			court_position:head_dragonkeeper_court_position = {
				aptitude:head_dragonkeeper_court_position = 1
			}
		}
		desc = scheme_dragonkeeper
	}
	modifier = {
		add = 5
		scope:owner = {
			exists = court_position:head_dragonkeeper_court_position
			court_position:head_dragonkeeper_court_position = {
				aptitude:head_dragonkeeper_court_position = 2
			}
		}
		desc = scheme_dragonkeeper
	}
	modifier = {
		add = 10
		scope:owner = {
			exists = court_position:head_dragonkeeper_court_position
			court_position:head_dragonkeeper_court_position = {
				aptitude:head_dragonkeeper_court_position = 3
			}
		}
		desc = scheme_dragonkeeper
	}
	modifier = {
		add = 15
		scope:owner = {
			exists = court_position:head_dragonkeeper_court_position
			court_position:head_dragonkeeper_court_position = {
				aptitude:head_dragonkeeper_court_position = 4
			}
		}
		desc = scheme_dragonkeeper
	}
	# Blood of the dragon
	modifier = {
		add = {
			value = scope:owner.dragonblood_percent
			divide = 2
		}
		desc = "SCHEME_BOND_VALYRIAN_BLOOD"
	}
	# AGOT TODO - modifiers based on laws for who can try to tame dragons - authorized tamers get the bonuses of an HDK if their liege/family head lets them try to tame
}

# Dragon Hatching Modifiers
agot_hatching_hatching_weights = {
	modifier = { #Valyrian dragonlord modifier
		add = 15
		dynasty ?= {
			has_dynasty_modifier = valyrian_heritage_dynasty_modifier
		}
	}
	modifier = { #dragonlore
		add = 50
		exists = var:dragonlore
		var:dragonlore = 20
	}
	modifier = { #dragonlore
		add = 45
		exists = var:dragonlore
		var:dragonlore >= 18
		NOT = { var:dragonlore = 20 }
	}
	modifier = { #dragonlore
		add = 40
		exists = var:dragonlore
		var:dragonlore >= 16
		NOT = { var:dragonlore > 17 }
	}
	modifier = { #dragonlore
		add = 35
		exists = var:dragonlore
		var:dragonlore >= 14
		NOT = { var:dragonlore > 15 }
	}
	modifier = { #dragonlore
		add = 30
		exists = var:dragonlore
		var:dragonlore >= 12
		NOT = { var:dragonlore > 13 }
	}
	modifier = { #dragonlore
		add = 25
		exists = var:dragonlore
		var:dragonlore >= 10
		NOT = { var:dragonlore > 11 }
	}
	modifier = { #dragonlore
		add = 20
		exists = var:dragonlore
		var:dragonlore >= 8
		NOT = { var:dragonlore > 9 }
	}
	modifier = { #dragonlore
		add = 15
		exists = var:dragonlore
		var:dragonlore >= 6
		NOT = { var:dragonlore > 7 }
	}
	modifier = { #dragonlore
		add = 10
		exists = var:dragonlore
		var:dragonlore >= 4
		NOT = { var:dragonlore > 5 }
	}
	modifier = { #dragonlore
		add = 5
		exists = var:dragonlore
		var:dragonlore >= 2
		NOT = { var:dragonlore > 3 }
	}
	modifier = { #dragonlore
		add = 2
		exists = var:dragonlore
		var:dragonlore = 1
	}
	modifier = { #valyrian blood
		add = 15
		culture = {
			this = culture:high_valyrian
		}
	}
	modifier = { #valyrian blood
		add = 10
		culture = {
			has_cultural_pillar = heritage_valyrian
			NOT = { this = culture:high_valyrian }
		}
	}
	modifier = {
		add = 10
		scope:province = {
			has_building = dragonpit_01 # Historical Version
			has_building = dragonpit_ruins_03 # Fully Restored Ruin Version
			has_building_or_higher = dragonstone_01 # Dragonmont not included to avoid double up with Dragonstone modifier
		}
	}
	modifier = {
		add = -10
		scope:province = {
			this = province:4797
		}
	}
}

# Dragon siege modifier
dragon_scorpion_siege_event_modifiers = {
	modifier = {
		add = 10
		scope:sieging_location = { has_stationed_scorpions = yes }
	}
	modifier = {
		add = 10
		scope:sieging_location = {
			fort_level >= 10
			county.culture = { has_innovation = innovation_agot_anti_dragon_fighting }
		}
	}
	modifier = {
		add = 10
		scope:sieging_location = {
			fort_level >= 20
			county.culture = { has_innovation = innovation_agot_anti_dragon_fighting }
		}
	}
	modifier = {
		add = 5
		scope:sieging_location = {
			has_building_or_higher = workshops_05
		}
	}
	modifier = {
		add = 5
		scope:sieging_location = {
			has_building_or_higher = workshops_06
		}
	}
	modifier = {
		add = 5
		scope:sieging_location = {
			has_building_or_higher = workshops_07
		}
	}
	modifier = {
		add = 5
		scope:sieging_location = {
			has_building_or_higher = workshops_08
		}
	}
}

dragon_scorpion_battle_event_modifiers = {
	modifier = {
		add = 5
		scope:combat_side = {
			enemy_side = {
				has_maa_of_type = scorpions
			}
		}
	}
	# AGOT TODO: Add modifiers for holding the battle is on
	# Currently this is not...neat, since we need to check holder of the holding is an enemy of the dragon,
	# but that is very unwieldy since IIRC there is not a single trigger like is_enemy_of
}

# Dragon Single Combat Modifiers
dsc_timid_personality_scripted_modifier = {
	ai_value_modifier = {
		ai_boldness = -0.25
		ai_vengefulness = -0.25
	}
}

dsc_preferred_timid_personality_scripted_modifier = {
	ai_value_modifier = {
		ai_boldness = -0.50
		ai_vengefulness = -0.50
	}
}

dsc_rational_personality_scripted_modifier = {
	ai_value_modifier = { ai_rationality = 0.5 }
}

dsc_preferred_rational_personality_scripted_modifier = {
	ai_value_modifier = { ai_rationality = 1 }
}

dsc_aggressive_personality_scripted_modifier = {
	ai_value_modifier = {
		ai_boldness = 0.25
		ai_vengefulness = 0.25
	}
}

dsc_preferred_aggressive_personality_scripted_modifier = {
	ai_value_modifier = {
		ai_boldness = 0.75
		ai_vengefulness = 0.75
	}
}

dsc_enjoys_arrogant_speeches_scripted_modifier = {
	ai_value_modifier = {
		ai_sociability = 0.25
		ai_vengefulness = 0.25
		ai_rationality = -0.25
	}
}

dsc_shrewd_fighter_scripted_modifier = {
	ai_value_modifier = {
		ai_rationality = 0.25
		ai_energy = 0.25
		ai_boldness = 0.25
	}
}

dsc_preferred_shrewd_fighter_scripted_modifier = {
	ai_value_modifier = {
		ai_rationality = 0.5
		ai_energy = 0.5
		ai_boldness = 0.5
	}
}

unlanded_tame_bond_etc_pulse_scripted_modifier = {
	modifier = {
		add = ai_boldness
	}
	modifier = {
		add = 100
		has_trait = ambitious
	}
	modifier = {
		add = 50
		has_trait = brave
	}
	modifier = {
		add = 200
		OR = {
			house ?= { has_house_modifier = dragonrider_house_modifier }
			culture = {
				has_cultural_pillar = heritage_valyrian
			}
			agot_has_dragonblood_heritage = yes
			any_ancestor = {
				even_if_dead = yes
				has_trait = dragonrider
			}
		}
	}
	modifier = {
		add = 200
		has_character_modifier = agot_child_interested_in_dragons
	}
	modifier = {
		add = -150
		has_character_modifier = agot_child_terrified_by_dragons
	}
}