destroy_slave_camps_effect = {
	if = {
		limit = { has_building = agot_slave_camps_08 }
		remove_building = agot_slave_camps_08
		county = { remove_slave_population_effect = yes }
	}
	else_if = {
		limit = { has_building = agot_slave_camps_07 }
		remove_building = agot_slave_camps_07
		county = { remove_slave_population_effect = yes }
	}
	else_if = {
		limit = { has_building = agot_slave_camps_06 }
		remove_building = agot_slave_camps_06
		county = { remove_slave_population_effect = yes }
	}
	else_if = {
		limit = { has_building = agot_slave_camps_05 }
		remove_building = agot_slave_camps_05
		county = { remove_slave_population_effect = yes }
	}
	else_if = {
		limit = { has_building = agot_slave_camps_04 }
		remove_building = agot_slave_camps_04
		county = { remove_slave_population_effect = yes }
	}
	else_if = {
		limit = { has_building = agot_slave_camps_03 }
		remove_building = agot_slave_camps_03
		county = { remove_slave_population_effect = yes }
	}
	else_if = {
		limit = { has_building = agot_slave_camps_02 }
		remove_building = agot_slave_camps_02
		county = { remove_slave_population_effect = yes }
	}
	else_if = {
		limit = { has_building = agot_slave_camps_01 }
		remove_building = agot_slave_camps_01
		county = { remove_slave_population_effect = yes }
	}
}

destroy_realm_slave_camps_effect = {
	every_sub_realm_title = {
		limit = { tier = tier_barony }
		title_province = { destroy_slave_camps_effect = yes }
	}
}

remove_slave_population_effect = {
	if = {
		limit = { has_county_modifier = slave_pop_8 }
		remove_county_modifier = slave_pop_8
	}
	else_if = {
		limit = { has_county_modifier = slave_pop_7 }
		remove_county_modifier = slave_pop_7
	}
	else_if = {
		limit = { has_county_modifier = slave_pop_6 }
		remove_county_modifier = slave_pop_6
	}
	else_if = {
		limit = { has_county_modifier = slave_pop_5 }
		remove_county_modifier = slave_pop_5
	}
	else_if = {
		limit = { has_county_modifier = slave_pop_4 }
		remove_county_modifier = slave_pop_4
	}
	else_if = {
		limit = { has_county_modifier = slave_pop_3 }
		remove_county_modifier = slave_pop_3
	}
	else_if = {
		limit = { has_county_modifier = slave_pop_2 }
		remove_county_modifier = slave_pop_2
	}
	else_if = {
		limit = { has_county_modifier = slave_pop_1 }
		remove_county_modifier = slave_pop_1
	}
}

remove_realm_slave_population_effect = {
	every_sub_realm_title = {
		limit = { tier = tier_barony }
		county = { remove_slave_population_effect = yes }
	}
}

end_realm_slavery_effect = {
	custom_description = {
		text = end_realm_slavery_effect_desc
		remove_realm_slave_population_effect = yes
	}
	if = {
		limit = {
			has_trait = slave_master
			NOT = { has_character_flag = forced_to_end_slavery }
		}
		remove_trait = slave_master
	}
	hidden_effect = {
		every_vassal_or_below = {
			if = {
				limit = {
					primary_title.tier > tier_barony
					NOT = { has_realm_law = slavery_disallowed_law }
				}
				add_character_flag = {
					flag = forced_to_end_slavery
					days = 1
				}
				add_realm_law = slavery_disallowed_law
			}
		}
	}
}

forcibly_end_realm_slavery_effect = {
	custom_description = {
		text = forcibly_end_realm_slavery_effect
		destroy_realm_slave_camps_effect = yes
		#Call both to clean up any lingering modifiers with no buildings
		remove_realm_slave_population_effect = yes
	}
	if = {
		limit = {
			NOT = { has_realm_law = slavery_disallowed_law }
		}
		add_realm_law = slavery_disallowed_law
	}
	if = {
		limit = {
			has_trait = slave_master
			NOT = { has_character_flag = forced_to_end_slavery }
		}
		remove_trait = slave_master
	}
	hidden_effect = {
		every_vassal_or_below = {
			if = {
				limit = {
					primary_title.tier > tier_barony
					NOT = { has_realm_law = slavery_disallowed_law }
				}
				add_character_flag = {
					flag = forced_to_end_slavery
					days = 1
				}
				add_realm_law = slavery_disallowed_law
			}
		}
	}
}

upgrade_slave_population_effect = {
	if = {
		limit = { has_county_modifier = slave_pop_7 }
		remove_county_modifier = slave_pop_7
		add_county_modifier = slave_pop_8
	}
	else_if = {
		limit = { has_county_modifier = slave_pop_6 }
		remove_county_modifier = slave_pop_6
		add_county_modifier = slave_pop_7
	}
	else_if = {
		limit = { has_county_modifier = slave_pop_5 }
		remove_county_modifier = slave_pop_5
		add_county_modifier = slave_pop_6
	}
	else_if = {
		limit = { has_county_modifier = slave_pop_4 }
		remove_county_modifier = slave_pop_4
		add_county_modifier = slave_pop_5
	}
	else_if = {
		limit = { has_county_modifier = slave_pop_3 }
		remove_county_modifier = slave_pop_3
		add_county_modifier = slave_pop_4
	}
	else_if = {
		limit = { has_county_modifier = slave_pop_2 }
		remove_county_modifier = slave_pop_2
		add_county_modifier = slave_pop_3
	}
	else_if = {
		limit = { has_county_modifier = slave_pop_1 }
		remove_county_modifier = slave_pop_1
		add_county_modifier = slave_pop_2
	}
	else = {
		add_county_modifier = slave_pop_1
	}
}

set_random_faith_culture_slave_effect = {
	random_living_character = {
		save_scope_as = identity_theft_target
	}
	set_character_faith = scope:identity_theft_target.faith
	set_culture = scope:identity_theft_target.culture
}

sell_into_slavery_opinion_effect = {
	$VICTIM$ = {
		# Victim's family & spouse hates SLAVER
		every_close_family_member = {
			limit = { NOT = { this = $SLAVER$ } }
			add_to_temporary_list = victim_family_list
		}
		every_spouse = {
			limit = {
				NOR = {
					this = $SLAVER$
					is_in_list = victim_family_list
				}
			}
			add_to_temporary_list = victim_family_list
		}

		if = {
			limit = {
				any_in_list = {
					list = victim_family_list
					count > 0
				}
			}
			every_in_list = {
				list = victim_family_list
				custom = all_close_family_and_spouses
				add_opinion = {
					target = $SLAVER$
					modifier = sold_close_family
				}
				###esr
				if = {
					limit = {
						NOT = {
							has_trait = forgiving
						}
					}
					save_scope_as = esr_victim_family_member
					esr_hate_by_association = {HATED=$SLAVER$ VICTIM=$VICTIM$ VICTIM_ASSOCIATE=scope:esr_victim_family_member MODIFIER=esr_hate_by_association_execution }
				}
				###esr/
			}
		}

		###esr
		# Victim's Extended family members
		every_close_or_extended_family_member = {
			limit = {
				NOR = {
					this = $SLAVER$
					is_in_list = victim_family_list
				}
			}
			custom = esr_extended_family_members
			add_to_temporary_list = esr_victim_extended_family_list
			add_opinion = {
				target = $SLAVER$
				modifier = sold_extended_family
			}
		}
		###esr/

		# Victim's dynasty hates SLAVER
		if = {
			limit = {
				exists = dynasty
				exists = $SLAVER$.dynasty
				NOT = { dynasty = $SLAVER$.dynasty }
				NOT = {
					$SLAVER$ = {
						has_execute_reason = $VICTIM$
					}
				}
			}
			dynasty = {
				every_dynasty_member = {
					limit = {
						NOR = {
							this = $VICTIM$
							is_in_list = victim_family_list
							###esr
							is_in_list = esr_victim_extended_family_list
							###esr/
						}
					}
					custom = all_dynasty_members
					add_to_temporary_list = victim_dynasty_list
					add_opinion = {
						target = $SLAVER$
						modifier = sold_dynasty_member
					}
				}
			}
		}

		###esr
		#Victim's normal relations
		every_relation = {
			type = friend
			limit = {
				NOR = {
					this = $VICTIM$
					###esr
					this = $SLAVER$
					has_relation_best_friend = $VICTIM$
					#is_in_list = close_family_murder_opinion_list
					###esr/
				}
			}
			add_to_list = victim_close_relations_list
		}
		every_relation = {
			type = lover
			limit = {
				NOR = {
					this = $VICTIM$
					###esr
					this = $SLAVER$
					has_relation_soulmate = $VICTIM$
					#is_in_list = close_family_murder_opinion_list
					###esr/
					is_in_list = victim_close_relations_list
				}
			}
			add_to_list = victim_close_relations_list
		}
		if = {
			limit = {
				any_in_list = {
					list = victim_close_relations_list
					always = yes
				}
			}
			every_in_list = {
				list = victim_close_relations_list
				limit = {
					NOT = { this = $SLAVER$ }
				}
				custom = all_friends_and_lovers
				add_opinion = {
					target = $SLAVER$
					modifier = sold_close_relation_opinion
				}
			}
		}

		every_relation = {
			type = rival
			limit = {
				NOR = {
					this = $SLAVER$
					has_relation_nemesis = $VICTIM$
					has_trait = just
					has_trait = compassionate
					has_trait = forgiving
					has_trait = honest
					has_trait = trusting
				}
			}
			custom = esr_rivals_execution
			add_opinion = {
				target = $SLAVER$
				modifier = sold_rival
			}
		}

		###esr
		#Victim's lifelong relations
		every_relation = {
			type = best_friend
			limit = { NOT = {this = $SLAVER$}}
			add_opinion = {
				target = $SLAVER$
				modifier = sold_best_friend
			}
		}

		every_relation = {
			type = soulmate
			limit = { NOT = {this = $SLAVER$}}
			add_opinion = {
				target = $SLAVER$
				modifier = sold_soulmate
			}
		}

		every_relation = {
			type = nemesis

			limit = {
				NOR = {
					this = $SLAVER$
					has_trait = just
					has_trait = compassionate
					has_trait = forgiving
				}
			}
			add_opinion = {
				target = $SLAVER$
				modifier = sold_nemesis
			}
		}
		###esr/
	}
}

create_skilled_freed_slave_effect = {
	$LIBERATOR$ = { save_scope_as = liberator }
	$SLAVEOWNER$ = { save_scope_as = slaveowner }

	random_living_character = {
		limit = {
			in_diplomatic_range = scope:slaveowner
		}
		faith = { save_scope_as = guest_faith }
		culture = { save_scope_as = guest_culture }
	}

	random_list = {
		# Skilled Martial / Commander
		100 = {
			create_character = {
				template = celebration_martial_character
				location = scope:liberator.capital_province
				save_scope_as = freedman
			}
		}

		# Skilled Diplomat
		100 = {
			create_character = {
				template = celebration_diplomat_character
				location = scope:liberator.capital_province
				save_scope_as = freedman
			}
		}

		# Skilled Spy
		100 = {
			create_character = {
				template = celebration_spy_character
				location = scope:liberator.capital_province
				save_scope_as = freedman
			}
		}

		# Skilled Steward
		100 = {
			create_character = {
				template = celebration_steward_character
				location = scope:liberator.capital_province
				save_scope_as = freedman
			}
		}

		# Skilled Hunter
		100 = {
			create_character = {
				template = celebration_hunter_character
				location = scope:liberator.capital_province
				save_scope_as = freedman
			}
		}

		# Skilled Priest
		100 = {
			create_character = {
				template = celebration_martial_character
				location = scope:liberator.capital_province
				save_scope_as = freedman
			}
		}

		# Skilled Scholar
		100 = {
			create_character = {
				template = celebration_scholar_character
				location = scope:liberator.capital_province
				save_scope_as = freedman
			}
		}

		# Skilled Artisan - default wait is lower has they are going to be inspired
		50 = {
			trigger = {
				# Only for RoCo owners
				has_ep1_dlc_trigger = yes
				# has_royal_court = yes # Should check royal court?
			}

			# Generate the actual character
			create_character = {
				template = celebration_artisan_character
				location = scope:liberator.capital_province
				save_scope_as = freedman
			}
		}

		# Chess Master
		100 = {
			create_character = {
				template = celebration_chessmaster_character
				location = scope:liberator.capital_province
				save_scope_as = freedman
			}
		}
	}

	scope:freedman = { add_trait = freedman }
}

free_slave_history_effect = {
	$LIBERATOR$ = { save_scope_as = liberator }
	$SLAVEOWNER$ = { save_scope_as = slaveowner }
	save_scope_as = freedman

	scope:freedman = {
		add_opinion = {
			modifier = enslaved_me_opinion
			target = scope:slaveowner
		}
		add_opinion = {
			modifier = freed_me_opinion
			target = scope:liberator
		}

		create_character_memory = {
			type = agot_freed_from_slavery_memory

			participants = {
				slaveowner = scope:slaveowner
				liberator = scope:liberator
			}
		}
	}

	scope:liberator = {
		add_hook_no_toast = {
			type = loyalty_hook
			target = scope:freedman
		}
	}
}

agot_setup_slave_leader_effect = {
	save_scope_as = faction
	# Does a peasant capital county already exist?
	if = {
		limit = {
			NOT = { exists = scope:slave_county }
		}
		random_faction_county_member = { save_scope_as = slave_county }
	}
	# Does a slave leader already exist?
	if = {
		limit = {
			NOT = { exists = scope:slave_leader }
		}
		create_character = {
			location = scope:slave_county.title_province
			template = slave_faction_leader_template
			faith = scope:slave_county.faith
			culture = scope:slave_county.culture
			gender_female_chance = {
				if = {
					limit = { scope:slave_county.faith = { has_doctrine = doctrine_gender_male_dominated } }
					add = 0
				}
				else_if = {
					limit = { scope:slave_county.faith = { has_doctrine = doctrine_gender_female_dominated } }
					add = 100
				}
				else = {
					add = 50
				}
			}
			save_scope_as = slave_leader
		}
	}

	create_dynamic_title = {
		tier = duchy
		name = FACTION_SLAVE_TITLE_NAME
	}
	create_title_and_vassal_change = {
		type = created
		save_scope_as = change
		add_claim_on_loss = no
	}

	scope:new_title = {
		set_capital_county = scope:slave_county
		set_landless_title = yes
		set_destroy_on_succession = yes
		set_delete_on_destroy = yes
		set_no_automatic_claims = yes
		set_definitive_form = yes
		set_can_be_named_after_dynasty = no
		change_title_holder = {
			holder = scope:slave_leader
			change = scope:change
		}

		set_variable = {
			name = faction
			value = scope:faction
		}

		# avoid unused variable error. This variable is referenced in code
		var:faction = {}
	}
	resolve_title_and_vassal_change = scope:change
	scope:slave_leader = {
		set_variable = {
			name = slave_title
			value = scope:new_title
		}
	}
	scope:new_title = { generate_coa = factions }

	scope:slave_leader = {
		set_variable = {
			name = rebel_leader_slave
			value = scope:faction
		}
		join_faction_skip_check = scope:faction
	}

	set_special_character = scope:slave_leader
}

slave_faction_demands_enforced = {
	$FACTION$ = {
		faction_target = {
			add_character_flag = {
				flag = forced_to_end_slavery
				days = 1
			}
			forcibly_end_realm_slavery_effect = yes
		}

		hidden_effect = {
			clean_revolt_county_modifiers_from_faction_members_effect = yes
			destroy_faction = yes
		}
	}
}
