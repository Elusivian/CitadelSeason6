# Tier One move effects
dragon_combat_move_wait_and_hope_effect = {
	#No special effects.

	#Iterate last move for loc purposes.
	if = {
		limit = { this = scope:dsc_attacker }
		save_scope_value_as = {
			name = dsc_attacker_last_move
			value = flag:dragon_wait_and_hope
		}
	}
	if = {
		limit = { this = scope:dsc_defender }
		save_scope_value_as = {
			name = dsc_defender_last_move
			value = flag:dragon_wait_and_hope
		}
	}

	#And adjust risk-reward scores.
	adjust_dragon_risk_reward_effect = {
		#INJURY_RISK = injury_risk_medium
		DUEL_SUCCESS = dragon_duel_success_none
	}
}
dragon_combat_move_unsure_attack_effect = {
	#No special effects.

	#Change the last move registered for loc purposes.
	if = {
		limit = { this = scope:dsc_attacker }
		save_scope_value_as = {
			name = dsc_attacker_last_move
			value = flag:dragon_unsure_attack
		}
	}
	if = {
		limit = { this = scope:dsc_defender }
		save_scope_value_as = {
			name = dsc_defender_last_move
			value = flag:dragon_unsure_attack
		}
	}

	#And adjust risk-reward scores.
	adjust_dragon_risk_reward_effect = {
		#INJURY_RISK = injury_risk_high
		DUEL_SUCCESS = dragon_duel_success_low
	}
}
dragon_combat_move_enthusiastic_onslaught_effect = {
	#No special effects.

	#Change the last move registered for loc purposes.
	if = {
		limit = { this = scope:dsc_attacker }
		save_scope_value_as = {
			name = dsc_attacker_last_move
			value = flag:dragon_enthusiastic_onslaught
		}
		random_list = {
			30 = {
				scope:dsc_attacker_dragon = {
					wound_dragon = yes
				}
			}
			70 = {}
		}
	}
	if = {
		limit = { this = scope:dsc_defender }
		save_scope_value_as = {
			name = dsc_defender_last_move
			value = flag:dragon_enthusiastic_onslaught
		}
		random_list = {
			30 = {
				scope:dsc_defender_dragon = {
					wound_dragon = yes
				}
			}
			70 = {}
		}
	}

	#And adjust risk-reward scores.
	adjust_dragon_risk_reward_effect = {
		#INJURY_RISK = injury_risk_very_high
		DUEL_SUCCESS = dragon_duel_success_high
	}
}
dragon_combat_move_underbelly_effect = {
	# A risky charge at your opponent dragon's underbelly.

	#Change the last move registered for loc purposes.
	if = {
		limit = { this = scope:dsc_attacker }
		scope:dsc_defender = {
			random_list = {
				50 = {
				}
				50 = {
					scope:dsc_defender_dragon = {
						wound_dragon = yes
					}
				}
			}
		}
		scope:dsc_attacker = {
			random_list = {
				50 = {
				}
				50 = {
					scope:dsc_attacker_dragon = {
						wound_dragon = yes
					}
				}
			}
		}
		save_scope_value_as = {
			name = dsc_attacker_last_move
			value = flag:dragon_underbelly
		}
	}
	if = {
		limit = { this = scope:dsc_defender }
		scope:dsc_attacker = {
			random_list = {
				50 = {
				}
				50 = {
					scope:dsc_attacker_dragon = {
						wound_dragon = yes
					}
				}
			}
		}
		scope:dsc_defender = {
			random_list = {
				50 = {
				}
				50 = {
					scope:dsc_defender_dragon = {
						wound_dragon = yes
					}
				}
			}
		}
		save_scope_value_as = {
			name = dsc_attacker_last_move
			value = flag:dragon_underbelly
		}
	}

	#And adjust risk-reward scores.
	adjust_dragon_risk_reward_effect = {
		#INJURY_RISK = injury_risk_high
		DUEL_SUCCESS = dragon_duel_success_medium
	}
}
dragon_combat_move_tail_smash_effect = {
	# A thwack with the old tail.

	#Change the last move registered for loc purposes.
	if = {
		limit = { this = scope:dsc_attacker }
		scope:dsc_defender = {
			wound_dragon = yes
		}
		save_scope_value_as = {
			name = dsc_attacker_last_move
			value = flag:dragon_tail_smash
		}
	}
	if = {
		limit = { this = scope:dsc_defender }
		scope:dsc_attacker_dragon = {
			wound_dragon = yes
		}
		save_scope_value_as = {
			name = dsc_attacker_last_move
			value = flag:dragon_tail_smash
		}
	}

	#And adjust risk-reward scores.
	adjust_dragon_risk_reward_effect = {
		DUEL_SUCCESS = dragon_duel_success_low
	}
}

# Tier Two move effects
dragon_combat_move_guard_effect = {
	#Change the last move registered for loc purposes.
	if = {
		limit = { this = scope:dsc_attacker }
		save_scope_value_as = {
			name = dsc_attacker_last_move
			value = flag:dragon_guard
		}
	}
	if = {
		limit = { this = scope:dsc_defender }
		save_scope_value_as = {
			name = dsc_defender_last_move
			value = flag:dragon_guard
		}
	}

	#And adjust risk-reward scores.
	adjust_dragon_risk_reward_effect = {
		#INJURY_RISK = injury_risk_low
		DUEL_SUCCESS = dragon_duel_success_medium
	}
}
dragon_combat_move_probing_attack_effect = {
	#Change the last move registered for loc purposes.
	if = {
		limit = { this = scope:dsc_attacker }
		save_scope_value_as = {
			name = dsc_attacker_last_move
			value = flag:dragon_probing_attack
		}
		scope:dsc_defender_dragon = {
			random_list = {
				90 = {}
				20 = {
					wound_dragon = yes
				}
			}
		}
	}
	if = {
		limit = { this = scope:dsc_defender }
		save_scope_value_as = {
			name = dsc_defender_last_move
			value = flag:dragon_probing_attack
		}
		scope:dsc_attacker_dragon = {
			random_list = {
				90 = {}
				20 = {
					wound_dragon = yes
				}
			}
		}
	}

	#And adjust risk-reward scores.
	adjust_dragon_risk_reward_effect = {
		#INJURY_RISK = injury_risk_medium
		DUEL_SUCCESS = dragon_duel_success_medium
	}
}
dragon_combat_move_onslaught_effect = {
	#No special effects.

	#Change the last move registered for loc purposes.
	if = {
		limit = { this = scope:dsc_attacker }
		save_scope_value_as = {
			name = dsc_attacker_last_move
			value = flag:dragon_onslaught
		}
	}
	if = {
		limit = { this = scope:dsc_defender }
		save_scope_value_as = {
			name = dsc_defender_last_move
			value = flag:dragon_onslaught
		}
	}

	#And adjust risk-reward scores.
	adjust_dragon_risk_reward_effect = {
		#INJURY_RISK = injury_risk_high
		DUEL_SUCCESS = dragon_duel_success_high
	}
}
dragon_combat_move_surprise_attack_effect = {
	#Special effects taken care of in risk-reward section.

	#Change the last move registered for loc purposes.
	if = {
		limit = { this = scope:dsc_attacker }
		save_scope_value_as = {
			name = dsc_attacker_last_move
			value = flag:dragon_surprise_attack
		}
	}
	if = {
		limit = { this = scope:dsc_defender }
		save_scope_value_as = {
			name = dsc_defender_last_move
			value = flag:dragon_surprise_attack
		}
	}

	#And adjust risk-reward scores.
	if = {
		limit = {
			OR = {
				AND = {
					this = scope:dsc_attacker
					scope:dsc_defender = { has_trait = trusting }
				}
				AND = {
					this = scope:dsc_defender
					scope:dsc_attacker = { has_trait = trusting }
				}
			}
		}
		adjust_dragon_risk_reward_effect = {
			DUEL_SUCCESS = dragon_duel_success_very_high
		}
	}
	else = {
		random_list = {
			33 = {
				adjust_dragon_risk_reward_effect = {
					DUEL_SUCCESS = dragon_duel_success_low
				}
			}
			34 = {
				adjust_dragon_risk_reward_effect = {
					DUEL_SUCCESS = dragon_duel_success_medium
				}
			}
			33 = {
				adjust_dragon_risk_reward_effect = {
					DUEL_SUCCESS = dragon_duel_success_high
				}
			}
		}
	}
}
dragon_combat_move_taunt_effect = {
	#Your AI opponent becomes enraged.
	if = {
		limit = { this = scope:dsc_attacker }
		scope:dsc_defender = {
			add_character_modifier = { modifier = dragon_combat_move_taunt_modifier }
		}
	}
	if = {
		limit = { this = scope:dsc_defender }
		scope:dsc_attacker = {
			add_character_modifier = { modifier = dragon_combat_move_taunt_modifier }
		}
	}

	#Change the last move registered for loc purposes.
	if = {
		limit = { this = scope:dsc_attacker }
		save_scope_value_as = {
			name = dsc_attacker_last_move
			value = flag:dragon_taunt
		}
	}
	if = {
		limit = { this = scope:dsc_defender }
		save_scope_value_as = {
			name = dsc_defender_last_move
			value = flag:dragon_taunt
		}
	}

	#And adjust risk-reward scores.
	adjust_dragon_risk_reward_effect = {
		DUEL_SUCCESS = dragon_duel_success_none
	}
}
dragon_combat_move_go_for_the_gonads_effect = {
	#No special effects.

	#Change the last move registered for loc purposes.
	if = {
		limit = { this = scope:dsc_attacker }
		save_scope_value_as = {
			name = dsc_attacker_last_move
			value = flag:dragon_go_for_the_gonads
		}
		scope:dsc_defender_dragon = {
			random_list = {
				80 = {}
				20 = {
					wound_dragon = yes
				}
			}
		}
	}
	if = {
		limit = { this = scope:dsc_defender }
		save_scope_value_as = {
			name = dsc_defender_last_move
			value = flag:dragon_go_for_the_gonads
		}
		scope:dsc_attacker_dragon = {
			random_list = {
				80 = {}
				20 = {
					wound_dragon = yes
				}
			}
		}
	}

	#And adjust risk-reward scores.
	adjust_dragon_risk_reward_effect = {
		DUEL_SUCCESS = dragon_duel_success_high
	}
}

# Tier Three move effects
dragon_combat_move_strict_guard_effect = {
	#No special effects.

	#Change the last move registered for loc purposes.
	if = {
		limit = { this = scope:dsc_attacker }
		save_scope_value_as = {
			name = dsc_attacker_last_move
			value = flag:dragon_strict_guard
		}
	}
	if = {
		limit = { this = scope:dsc_defender }
		save_scope_value_as = {
			name = dsc_defender_last_move
			value = flag:dragon_strict_guard
		}
	}

	#And adjust risk-reward scores.
	adjust_dragon_risk_reward_effect = {
		DUEL_SUCCESS = dragon_duel_success_high
	}
}
dragon_combat_move_confident_attack_effect = {
	#No special effects.

	#Change the last move registered for loc purposes.
	if = {
		limit = { this = scope:dsc_attacker }
		save_scope_value_as = {
			name = dsc_attacker_last_move
			value = flag:dragon_confident_attack
		}
		scope:dsc_defender_dragon = {
			random_list = {
				25 = {}
				75 = {
					wound_dragon = yes
				}
			}
		}
	}
	if = {
		limit = { this = scope:dsc_defender }
		save_scope_value_as = {
			name = dsc_defender_last_move
			value = flag:dragon_confident_attack
		}
		scope:dsc_attacker_dragon = {
			random_list = {
				25 = {}
				75 = {
					wound_dragon = yes
				}
			}
		}
	}

	#And adjust risk-reward scores.
	adjust_dragon_risk_reward_effect = {
		DUEL_SUCCESS = dragon_duel_success_medium
	}
}
dragon_combat_move_expert_onslaught_effect = {
	#No special effects.

	#Change the last move registered for loc purposes.
	if = {
		limit = { this = scope:dsc_attacker }
		save_scope_value_as = {
			name = dsc_attacker_last_move
			value = flag:dragon_expert_onslaught
		}
	}
	if = {
		limit = { this = scope:dsc_defender }
		save_scope_value_as = {
			name = dsc_defender_last_move
			value = flag:dragon_expert_onslaught
		}
	}

	#And adjust risk-reward scores.
	adjust_dragon_risk_reward_effect = {
		DUEL_SUCCESS = dragon_duel_success_very_high
	}
}
dragon_combat_move_lightning_assault_effect = {
	#No special effects.

	#Change the last move registered for loc purposes.
	if = {
		limit = { this = scope:dsc_attacker }
		save_scope_value_as = {
			name = dsc_attacker_last_move
			value = flag:dragon_lightning_assault
		}
		scope:dsc_defender_dragon = {
			wound_dragon = yes
		}
	}
	if = {
		limit = { this = scope:dsc_defender }
		save_scope_value_as = {
			name = dsc_defender_last_move
			value = flag:dragon_lightning_assault
		}
		scope:dsc_attacker_dragon = {
			wound_dragon = yes
		}
	}

	#And adjust risk-reward scores.
	adjust_dragon_risk_reward_effect = {
		#INJURY_RISK = injury_risk_high
		DUEL_SUCCESS = dragon_duel_success_high
	}
}
dragon_combat_move_tire_opponent_effect = {
	#Change the last move registered for loc purposes.
	if = {
		limit = { this = scope:dsc_attacker }
		save_scope_value_as = {
			name = dsc_attacker_last_move
			value = flag:dragon_tire_opponent
		}
	}
	if = {
		limit = { this = scope:dsc_defender }
		save_scope_value_as = {
			name = dsc_defender_last_move
			value = flag:dragon_tire_opponent
		}
	}

	#And adjust risk-reward scores.
	adjust_dragon_risk_reward_effect = {
		DUEL_SUCCESS = dragon_duel_success_medium
	}
}

# High Secondary Skill move effects
dragon_combat_move_chomp_effect = {
	# CHOMP SMALLER DRAGON
	if = {
		limit = { this = scope:dsc_attacker }
		show_as_tooltip = {
			scope:dsc_defender = {
				death = {
					killer = scope:dsc_attacker
					death_reason = death_dragon_duel_ate
				}
			}
			scope:dsc_defender_dragon = {
				death = {
					killer = scope:dsc_attacker
					death_reason = death_dragon_duel_ate
				}
			}
			add_kinslayer_trait_or_nothing_effect = { VICTIM = scope:dsc_defender }
		}
		save_scope_value_as = {
			name = dsc_attacker_last_move
			value = flag:dragon_chomp
		}
	}
	if = {
		limit = { this = scope:dsc_defender }
		show_as_tooltip = {
			scope:dsc_attacker = {
				death = {
					killer = scope:dsc_defender
					death_reason = death_dragon_duel_ate
				}
			}
			scope:dsc_attacker_dragon = {
				death = {
					killer = scope:dsc_defender
					death_reason = death_dragon_duel_ate
				}
			}
			add_kinslayer_trait_or_nothing_effect = { VICTIM = scope:dsc_attacker }
		}
		save_scope_value_as = {
			name = dsc_defender_last_move
			value = flag:dragon_chomp
		}
	}

	#And adjust risk-reward scores.
	adjust_dragon_risk_reward_effect = {
		#INJURY_RISK = injury_risk_none
		DUEL_SUCCESS = dragon_duel_success_guaranteed
	}
}
dragon_combat_move_motivate_effect = {
	# Motivate your dragon to fight harder.
	#Change the last move registered for loc purposes.
	if = {
		limit = { this = scope:dsc_attacker }
		scope:dsc_attacker_dragon = {
			if = {
				limit = { has_trait = dragon_wounded_5 }
				remove_trait = dragon_wounded_5
				add_trait = dragon_wounded_4
			}
			else_if = {
				limit = { has_trait = dragon_wounded_4 }
				remove_trait = dragon_wounded_4
				add_trait = dragon_wounded_3
			}
			else_if = {
				limit = { has_trait = dragon_wounded_3 }
				remove_trait = dragon_wounded_3
				add_trait = dragon_wounded_2
			}
			else_if = {
				limit = { has_trait = dragon_wounded_2 }
				remove_trait = dragon_wounded_2
				add_trait = dragon_wounded_1
			}
			else = {
				remove_trait = dragon_wounded_1
			}
		}
		save_scope_value_as = {
			name = dsc_attacker_last_move
			value = flag:dragon_motivate
		}
	}
	if = {
		limit = { this = scope:dsc_defender }
		scope:dsc_defender_dragon = {
			if = {
				limit = { has_trait = dragon_wounded_5 }
				remove_trait = dragon_wounded_5
				add_trait = dragon_wounded_4
			}
			else_if = {
				limit = { has_trait = dragon_wounded_4 }
				remove_trait = dragon_wounded_4
				add_trait = dragon_wounded_3
			}
			else_if = {
				limit = { has_trait = dragon_wounded_3 }
				remove_trait = dragon_wounded_3
				add_trait = dragon_wounded_2
			}
			else_if = {
				limit = { has_trait = dragon_wounded_2 }
				remove_trait = dragon_wounded_2
				add_trait = dragon_wounded_1
			}
			else = {
				remove_trait = dragon_wounded_1
			}
		}
		save_scope_value_as = {
			name = dsc_defender_last_move
			value = flag:dragon_motivate
		}
	}

	#And adjust risk-reward scores.
	adjust_dragon_risk_reward_effect = {
		DUEL_SUCCESS = dragon_duel_success_none
	}
}
dragon_combat_move_technique_from_legend_effect = {
	#No special effects.

	#Change the last move registered for loc purposes.
	if = {
		limit = { this = scope:dsc_attacker }
		save_scope_value_as = {
			name = dsc_attacker_last_move
			value = flag:dragon_technique_from_legend
		}
		scope:dsc_defender_dragon = {
			random_list = {
				50 = {}
				50 = { add_trait = dragon_burned }
			}
		}
	}
	if = {
		limit = { this = scope:dsc_defender }
		save_scope_value_as = {
			name = dsc_defender_last_move
			value = flag:dragon_technique_from_legend
		}
		scope:dsc_attacker_dragon = {
			random_list = {
				50 = {}
				50 = { add_trait = dragon_burned }
			}
		}
	}

	#And adjust risk-reward scores.
	adjust_dragon_risk_reward_effect = {
		DUEL_SUCCESS = dragon_duel_success_high
	}
}
dragon_combat_move_like_a_viper_effect = {
	#Change the last move registered for loc purposes.
	if = {
		limit = { this = scope:dsc_attacker }
		save_scope_value_as = {
			name = dsc_attacker_last_move
			value = flag:dragon_like_a_viper
		}
	}
	if = {
		limit = { this = scope:dsc_defender }
		save_scope_value_as = {
			name = dsc_defender_last_move
			value = flag:dragon_like_a_viper
		}
	}

	#And adjust risk-reward scores.
	adjust_dragon_risk_reward_effect = {
		DUEL_SUCCESS = dragon_duel_success_very_high
	}
}
dragon_combat_move_martial_voice_effect = {
	# You go drill sergeant on your dragon.
	#Change the last move registered for loc purposes.
	if = {
		limit = { this = scope:dsc_attacker }
		save_scope_value_as = {
			name = dsc_attacker_last_move
			value = flag:dragon_martial_voice
		}
	}
	if = {
		limit = { this = scope:dsc_defender }
		save_scope_value_as = {
			name = dsc_defender_last_move
			value = flag:dragon_martial_voice
		}
	}

	#And adjust risk-reward scores.
	adjust_dragon_risk_reward_effect = {
		DUEL_SUCCESS = dragon_duel_success_very_high
	}
}
dragon_combat_move_mocking_boast_effect = {
	## scope:dsc_attacker first.
	add_prestige = 200
	if = {
		limit = { this = scope:dsc_attacker }
		scope:dsc_defender = {
			# Arrogant characters are a bit more susceptible.
			if = {
				limit = { has_trait = arrogant }
				add_stress = medium_stress_gain
			}
			else = { add_stress = minor_stress_gain }
		}
	}
	## Then we look at scope:dsc_defender.
	else_if = {
		limit = { this = scope:dsc_defender }
		scope:dsc_attacker = {
			# Arrogant characters are a bit more susceptible.
			if = {
				limit = { has_trait = arrogant }
				add_stress = medium_stress_gain
			}
			else = { add_stress = minor_stress_gain }
		}
	}

	#Change the last move registered for loc purposes.
	if = {
		limit = { this = scope:dsc_attacker }
		save_scope_value_as = {
			name = dsc_attacker_last_move
			value = flag:dragon_mocking_boast
		}
	}
	if = {
		limit = { this = scope:dsc_defender }
		save_scope_value_as = {
			name = dsc_defender_last_move
			value = flag:dragon_mocking_boast
		}
	}

	#And adjust risk-reward scores.
	adjust_dragon_risk_reward_effect = {
		DUEL_SUCCESS = dragon_duel_success_low
	}
}

# Location-Specific move effects
dragon_combat_move_desert_warrior_effect = {
	if = {
		limit = { this = scope:dsc_attacker }
		scope:dsc_defender_dragon = {
			wound_dragon = yes
		}
	}
	## Then we look at scope:dsc_defender.
	else_if = {
		limit = { this = scope:dsc_defender }
		scope:dsc_attacker_dragon = {
			wound_dragon = yes
		}
	}

	#Change the last move registered for loc purposes.
	if = {
		limit = { this = scope:dsc_attacker }
		save_scope_value_as = {
			name = dsc_attacker_last_move
			value = flag:dragon_desert_warrior
		}
	}
	if = {
		limit = { this = scope:dsc_defender }
		save_scope_value_as = {
			name = dsc_defender_last_move
			value = flag:dragon_desert_warrior
		}
	}

	#And adjust risk-reward scores.
	adjust_dragon_risk_reward_effect = {
		DUEL_SUCCESS = dragon_duel_success_high
	}
}
dragon_combat_move_jungle_stalker_effect = {
	if = {
		limit = { this = scope:dsc_attacker }
		scope:dsc_defender_dragon = {
			wound_dragon = yes
		}
	}
	## Then we look at scope:dsc_defender.
	else_if = {
		limit = { this = scope:dsc_defender }
		scope:dsc_attacker_dragon = {
			wound_dragon = yes
		}
	}

	#Change the last move registered for loc purposes.
	if = {
		limit = { this = scope:dsc_attacker }
		save_scope_value_as = {
			name = dsc_attacker_last_move
			value = flag:dragon_jungle_stalker
		}
	}
	if = {
		limit = { this = scope:dsc_defender }
		save_scope_value_as = {
			name = dsc_defender_last_move
			value = flag:dragon_jungle_stalker
		}
	}

	#And adjust risk-reward scores.
	adjust_dragon_risk_reward_effect = {
		DUEL_SUCCESS = dragon_duel_success_high
	}
}
dragon_combat_move_open_terrain_expert_effect = {
	if = {
		limit = { this = scope:dsc_attacker }
		scope:dsc_defender_dragon = {
			wound_dragon = yes
		}
	}
	## Then we look at scope:dsc_defender.
	else_if = {
		limit = { this = scope:dsc_defender }
		scope:dsc_attacker_dragon = {
			wound_dragon = yes
		}
	}

	#Change the last move registered for loc purposes.
	if = {
		limit = { this = scope:dsc_attacker }
		save_scope_value_as = {
			name = dsc_attacker_last_move
			value = flag:dragon_open_terrain_expert
		}
	}
	if = {
		limit = { this = scope:dsc_defender }
		save_scope_value_as = {
			name = dsc_defender_last_move
			value = flag:dragon_open_terrain_expert
		}
	}

	#And adjust risk-reward scores.
	adjust_dragon_risk_reward_effect = {
		DUEL_SUCCESS = dragon_duel_success_high
	}
}
dragon_combat_move_rough_terrain_expert_effect = {
	if = {
		limit = { this = scope:dsc_attacker }
		scope:dsc_defender_dragon = {
			wound_dragon = yes
		}
	}
	## Then we look at scope:dsc_defender.
	else_if = {
		limit = { this = scope:dsc_defender }
		scope:dsc_attacker_dragon = {
			wound_dragon = yes
		}
	}

	#Change the last move registered for loc purposes.
	if = {
		limit = { this = scope:dsc_attacker }
		save_scope_value_as = {
			name = dsc_attacker_last_move
			value = flag:dragon_rough_terrain_expert
		}
	}
	if = {
		limit = { this = scope:dsc_defender }
		save_scope_value_as = {
			name = dsc_defender_last_move
			value = flag:dragon_rough_terrain_expert
		}
	}

	#And adjust risk-reward scores.
	adjust_dragon_risk_reward_effect = {
		DUEL_SUCCESS = dragon_duel_success_high
	}
}
dragon_combat_move_forest_fighter_effect = {
	if = {
		limit = { this = scope:dsc_attacker }
		scope:dsc_defender_dragon = {
			wound_dragon = yes
		}
	}
	## Then we look at scope:dsc_defender.
	else_if = {
		limit = { this = scope:dsc_defender }
		scope:dsc_attacker_dragon = {
			wound_dragon = yes
		}
	}

	#Change the last move registered for loc purposes.
	if = {
		limit = { this = scope:dsc_attacker }
		save_scope_value_as = {
			name = dsc_attacker_last_move
			value = flag:dragon_forest_fighter
		}
	}
	if = {
		limit = { this = scope:dsc_defender }
		save_scope_value_as = {
			name = dsc_defender_last_move
			value = flag:dragon_forest_fighter
		}
	}

	#And adjust risk-reward scores.
	adjust_dragon_risk_reward_effect = {
		DUEL_SUCCESS = dragon_duel_success_high
	}
}

# Trait-Specific move effects

# Misc move effects
dragon_combat_move_special_fallback_effect = {
	#No special effects.

	#Change the last move registered for loc purposes.
	if = {
		limit = { this = scope:dsc_attacker }
		save_scope_value_as = {
			name = dsc_attacker_last_move
			value = flag:dragon_special_fallback
		}
	}
	if = {
		limit = { this = scope:dsc_defender }
		save_scope_value_as = {
			name = dsc_defender_last_move
			value = flag:dragon_special_fallback
		}
	}

	#And adjust risk-reward scores.
	adjust_dragon_risk_reward_effect = {
		DUEL_SUCCESS = dragon_duel_success_none
	}
}