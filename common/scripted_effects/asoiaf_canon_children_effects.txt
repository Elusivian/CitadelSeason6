### MISC EFFECTS ###

asoiaf_crown_test = {
	if = {
		limit = { agot_has_artifact_equiped = { ARTIFACT_VARIABLE = robertI_crown_artifact } }
		make_trait_inactive = asoiaf_robert_I_crown_vanilla_death_traits
	}
}

asoiaf_canon_children_male_1_pregnancy_effect = {
	scope:mother = {
		set_pregnancy_gender = male
		set_num_pregnancy_children = 1
	}
}
asoiaf_canon_children_female_1_pregnancy_effect = {
	scope:mother = {
		set_pregnancy_gender = female
		set_num_pregnancy_children = 1
	}
}
asoiaf_canon_children_genderless_1_pregnancy_effect = {
	scope:mother = {
		set_num_pregnancy_children = 1
	}
}
asoiaf_canon_children_terminate_pregnancy_effect = {
	end_pregnancy = yes
	trigger_event = { id = asoiaf_canon_children_pregnancy_events.1 days = 1 }
}

asoiaf_clear_bad_pregnancy_flags_effect = {
	remove_character_flag = birth_mother_will_die
	remove_character_flag = birth_mother_will_become_ill
	remove_character_flag = birth_child_will_become_sickly
	add_character_flag = {
		flag = birth_will_go_smoothly #ensure the pregnancy goes smoothly
		days = 270
	}
}

asoiaf_assign_marriage_type_flags_effect = {
	if = {
		limit = {
			AND = { #the mother/father are married patrilineally
				scope:father = { is_spouse_of_even_if_dead = scope:mother }
				scope:mother = { patrilinear_marriage = yes }
			}
		}
		scope:mother = {
			add_character_flag = {
				flag = asoiaf_patrilineal_parentage
				days = 270
			}
		}
	}
	if = {
		limit = {
			AND = { #the mother/father are married matrilineally
				scope:father = { is_spouse_of_even_if_dead = scope:mother }
				scope:mother = { matrilinear_marriage = yes }
			}
		}
		scope:mother = {
			add_character_flag = {
				flag = asoiaf_matrilineal_parentage
				days = 270
			}
		}
	}
}

asoiaf_canon_children_parentage_assignment_effect = { #effect to assign proper House/culture/faith depending on marriage type of parents
	if = {
		limit = {
			scope:mother = { has_character_flag = asoiaf_patrilineal_parentage }
		}
		set_house = scope:father.house #this can even be a false father in the case of bastards!
		set_character_faith = scope:father.faith
		set_culture = scope:father.culture
	}
	if = {
		limit = {
			scope:mother = { has_character_flag = asoiaf_matrilineal_parentage }
		}
		set_house = scope:mother.house
		set_character_faith = scope:mother.faith
		set_culture = scope:mother.culture
	}
	if = {
		limit = {
			NOT = { exists = scope:father } #bastard born out of wedlock
		}
		set_house = scope:mother.house
		set_character_faith = scope:mother.faith
		set_culture = scope:mother.culture
		add_trait = bastard
		agot_add_custom_bastard_nickname_effect = yes
	}
}

asoiaf_canon_children_join_travel_plan_effect = {
	scope:mother = {
		if = {
			limit = {
				exists = current_travel_plan #she's travelling
				is_ruler = yes #mother is ruler
			}
			current_travel_plan ?= { add_companion = scope:child }
			if = {
				limit = { exists = scope:child_2 }
				current_travel_plan ?= { add_companion = scope:child_2 }
			}
		}
		if = {
			limit = {
				exists = current_travel_plan #she's travelling
				is_courtier = yes #mother is courtier in someone else's travel plan
			}
			scope:mother.liege = { current_travel_plan ?= { add_companion = scope:child } }
			if = {
				limit = { exists = scope:child_2 }
				scope:mother.liege = { current_travel_plan ?= { add_companion = scope:child_2 } }
			}
		}
	}
}

### HOUSE STARK ###
asoiaf_canon_children_Stark_94_birth_effect = { #Rickard Stark (son of Cregan)
	create_character = {
		age = 0
		name = "Rickard"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = male
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Stark_94_born_variable
			make_trait_inactive = asoiaf_Stark_94_trait
			add_character_modifier = asoiaf_Stark_94_modifier
			copy_inheritable_appearance_from = character:Stark_asoiaf_94
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = dark_brown_hair

			set_sexuality = heterosexual
			add_martial_skill = 8
			add_diplomacy_skill = 3
			add_intrigue_skill = 3
			add_stewardship_skill = 3
			add_learning_skill = 3
			add_prowess_skill = 12
			
			if = {
				limit = { has_game_rule = asoiaf_canon_children_rule_on_traits }
				add_trait = diligent
				add_trait = gregarious
				add_trait = brave
				add_trait = just #honorable
				add_trait = poet #sang a song for Alysanne Blackwood during her wedding to Cregan
				
				set_focus = education_martial
			}
		}
	}
	hidden_effect = {
		scope:mother = {
			if = {
				limit = { has_game_rule = asoiaf_canon_children_pregnancy_negation_rule_on }
				add_character_modifier = asoiaf_canon_children_pregnancy_negation_modifier
			}
			if = {
				limit = { asoiaf_historical_trigger = yes }
				death = { death_reason = death_childbirth }
			}
		}
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:father = { trigger_event = birth.1003 } #regular
	}
}

asoiaf_canon_children_Stark_95_birth_effect = { #Sarra Stark (daughter of Cregan)
	create_character = {
		age = 0
		name = "Sarra"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = female
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Stark_95_born_variable
			make_trait_inactive = asoiaf_Stark_95_trait
			add_character_modifier = asoiaf_Stark_95_modifier
			copy_inheritable_appearance_from = character:Stark_asoiaf_95
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = dark_brown_hair
		}
	}
	hidden_effect = {
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:father = { trigger_event = birth.1003 } #regular
	}
}

asoiaf_canon_children_Stark_96_birth_effect = { #Alys Stark (daughter of Cregan)
	create_character = {
		age = 0
		name = "Alys"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = female
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Stark_96_born_variable
			make_trait_inactive = asoiaf_Stark_96_trait
			add_character_modifier = asoiaf_Stark_96_modifier
			copy_inheritable_appearance_from = character:Stark_asoiaf_96
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = dark_brown_hair
		}
	}
	hidden_effect = {
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:father = { trigger_event = birth.1003 } #regular
	}
}

asoiaf_canon_children_Stark_97_birth_effect = { #Raya Stark (daughter of Cregan)
	create_character = {
		age = 0
		name = "Raya"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = female
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Stark_97_born_variable
			make_trait_inactive = asoiaf_Stark_97_trait
			add_character_modifier = asoiaf_Stark_97_modifier
			copy_inheritable_appearance_from = character:Stark_asoiaf_97
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = dark_brown_hair
		}
	}
	hidden_effect = {
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:father = { trigger_event = birth.1003 } #regular
	}
}

asoiaf_canon_children_Stark_98_birth_effect = { #Mariah Stark (daughter of Cregan)
	create_character = {
		age = 0
		name = "Mariah"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = female
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Stark_98_born_variable
			make_trait_inactive = asoiaf_Stark_98_trait
			add_character_modifier = asoiaf_Stark_98_modifier
			copy_inheritable_appearance_from = character:Stark_asoiaf_98
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = dark_brown_hair
		}
	}
	hidden_effect = {
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:father = { trigger_event = birth.1003 } #regular
	}
}

asoiaf_canon_children_Stark_99_birth_effect = { #Jonnel Stark (son of Cregan)
	create_character = {
		age = 0
		name = "Jonnel"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = male
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Stark_99_born_variable
			make_trait_inactive = asoiaf_Stark_99_trait
			add_character_modifier = asoiaf_Stark_99_modifier
			copy_inheritable_appearance_from = character:Stark_asoiaf_99
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = dark_brown_hair

			add_trait = infertile
		}
	}
	hidden_effect = {
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:father = { trigger_event = birth.1003 } #regular
	}
}

asoiaf_canon_children_Stark_100_birth_effect = { #Edric Stark (son of Cregan)
	create_character = {
		age = 0
		name = "Edric"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = male
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Stark_100_born_variable
			make_trait_inactive = asoiaf_Stark_100_trait
			add_character_modifier = asoiaf_Stark_100_modifier
			copy_inheritable_appearance_from = character:Stark_asoiaf_100
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = dark_brown_hair
		}
	}
	hidden_effect = {
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:father = { trigger_event = birth.1003 } #regular
	}
}

asoiaf_canon_children_Stark_101_birth_effect = { #Lyanna Stark (daughter of Cregan)
	create_character = {
		age = 0
		name = "Lyanna"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = female
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Stark_101_born_variable
			make_trait_inactive = asoiaf_Stark_101_trait
			add_character_modifier = asoiaf_Stark_101_modifier
			copy_inheritable_appearance_from = character:Stark_asoiaf_101
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = dark_brown_hair
		}
	}
	hidden_effect = {
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:father = { trigger_event = birth.1003 } #regular
	}
}

asoiaf_canon_children_Stark_102_birth_effect = { #Barthogan Stark (son of Cregan)
	create_character = {
		age = 0
		name = "Barthogan"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = female
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Stark_102_born_variable
			make_trait_inactive = asoiaf_Stark_102_trait
			add_character_modifier = asoiaf_Stark_102_modifier
			copy_inheritable_appearance_from = character:Stark_asoiaf_102
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = dark_brown_hair

			add_prowess_skill = 5
			
			if = {
				limit = { has_game_rule = asoiaf_canon_children_rule_on_traits }
				add_trait = brave
				add_trait = diligent
				add_trait = impatient
				add_trait = education_martial_prowess_3
				
				set_focus = education_martial
			}
		}
	}
	hidden_effect = {
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:father = { trigger_event = birth.1003 } #regular
	}
}

asoiaf_canon_children_Stark_103_birth_effect = { #Brandon Stark (son of Cregan)
	create_character = {
		age = 0
		name = "Brandon"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = female
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Stark_103_born_variable
			make_trait_inactive = asoiaf_Stark_103_trait
			add_character_modifier = asoiaf_Stark_103_modifier
			copy_inheritable_appearance_from = character:Stark_asoiaf_103
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = dark_brown_hair
		}
	}
	hidden_effect = {
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:father = { trigger_event = birth.1003 } #regular
	}
}

asoiaf_canon_children_Stark_2_birth_effect = { #Brandon Stark (son of Rickard)
	create_character = {
		age = 0
		name = "Brandon"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = male
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Stark_2_born_variable
			make_trait_inactive = asoiaf_Stark_2_trait
			add_character_modifier = asoiaf_Stark_2_modifier
			copy_inheritable_appearance_from = character:Stark_asoiaf_2
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = dark_brown_hair

			set_sexuality = heterosexual
			add_martial_skill = 6
			add_diplomacy_skill = 3
			add_intrigue_skill = 4
			add_stewardship_skill = 6
			add_learning_skill = 4
			add_prowess_skill = 9
			add_trait = beauty_good_2
			add_trait = rowdy
			
			if = {
				limit = { has_game_rule = asoiaf_canon_children_rule_on_traits }
				add_trait = wrathful
				add_trait = authoritative
				add_trait = brave
				add_trait = arrogant
				add_trait = strong
				add_trait = lifestyle_blademaster
				add_trait = tourney_participant
				add_trait_xp = {
					trait = tourney_participant
					track = horse
					value = 65
				}
				
				set_focus = education_martial
			}
		}
	}
	hidden_effect = {
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:father = { trigger_event = birth.1003 } #regular
	}
}

asoiaf_canon_children_Stark_3_birth_effect = { #Eddard Stark (son of Rickard)
	create_character = {
		age = 0
		name = "Eddard"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = male
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Stark_3_born_variable
			make_trait_inactive = asoiaf_Stark_3_trait
			add_character_modifier = asoiaf_Stark_3_modifier
			copy_inheritable_appearance_from = character:Stark_asoiaf_3
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = brown_hair

			set_sexuality = heterosexual
			add_martial_skill = 8
			add_diplomacy_skill = 9
			add_intrigue_skill = 1
			add_stewardship_skill = 6
			add_learning_skill = 5
			add_prowess_skill = 9
			add_trait = pensive
			
			if = {
				limit = { has_game_rule = asoiaf_canon_children_rule_on_traits }
				add_trait = honest
				add_trait = diligent #honorable
				add_trait = trusting
				add_trait = just
				add_trait = education_martial_prowess_3
				add_trait = lifestyle_blademaster
				
				set_focus = education_martial
				add_perk = befriend_perk
				add_perk = confidants_perk
				add_perk = flatterer_perk
				add_perk = familial_familiar_perk
				add_perk = groomed_to_rule_perk
				add_perk = thicker_than_water_perk
				add_perk = friendly_counsel_perk
				add_perk = sound_foundations_perk
				add_perk = family_man_perk
			}
		}
	}
	hidden_effect = {
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:father = { trigger_event = birth.1003 } #regular
	}
}

asoiaf_canon_children_Stark_5_birth_effect = { #Lyanna Stark (daughter of Rickard)
	create_character = {
		age = 0
		name = "Lyanna"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = female
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Stark_5_born_variable
			make_trait_inactive = asoiaf_Stark_5_trait
			add_character_modifier = asoiaf_Stark_5_modifier
			copy_inheritable_appearance_from = character:Stark_asoiaf_5
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = dark_brown_hair
			add_character_flag = tomboy

			set_sexuality = heterosexual
			add_martial_skill = 6
			add_diplomacy_skill = 9
			add_intrigue_skill = 4
			add_stewardship_skill = 6
			add_learning_skill = 6
			add_prowess_skill = 8
			add_trait = beauty_good_2
			add_trait = bossy

			agot_create_personal_coa_for_historical_ai = { ACTOR = scope:child COA_KEY = laughing_tree_personal_coa }
			
			if = {
				limit = { has_game_rule = asoiaf_canon_children_rule_on_traits }
				add_trait = compassionate
				add_trait = brave
				add_trait = stubborn
				add_trait = education_martial_prowess_3
				add_trait = tourney_participant
				add_trait_xp = {
					trait = tourney_participant
					track = horse
					value = 30
				}
				
				set_focus = education_diplomacy
			}
		}
	}
	hidden_effect = {
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:father = { trigger_event = birth.1003 } #regular
	}
}

asoiaf_canon_children_Stark_4_birth_effect = { #Benjen Stark (son of Rickard)
	create_character = {
		age = 0
		name = "Benjen"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = male
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Stark_4_born_variable
			make_trait_inactive = asoiaf_Stark_4_trait
			add_character_modifier = asoiaf_Stark_4_modifier
			copy_inheritable_appearance_from = character:Stark_asoiaf_4
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = black_hair

			set_sexuality = heterosexual
			add_martial_skill = 6
			add_diplomacy_skill = 5
			add_intrigue_skill = 5
			add_stewardship_skill = 5
			add_learning_skill = 5
			add_prowess_skill = 7
			add_trait = curious
			
			if = {
				limit = { has_game_rule = asoiaf_canon_children_rule_on_traits }
				add_trait = brave
				add_trait = honest
				add_trait = just #honorable
				add_trait = content
				
				set_focus = education_martial
			}
		}
	}
	hidden_effect = {
		scope:mother = {
			if = {
				limit = { has_game_rule = asoiaf_canon_children_pregnancy_negation_rule_on }
				add_character_modifier = asoiaf_canon_children_pregnancy_negation_modifier
			}
		}
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:father = { trigger_event = birth.1003 } #regular
	}
}

asoiaf_canon_children_Stark_6_birth_effect = { #Robb Stark (son of Eddard)
	create_character = {
		age = 0
		name = "Robb"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = male
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Stark_6_born_variable
			make_trait_inactive = asoiaf_Stark_6_trait
			add_character_modifier = asoiaf_Stark_6_modifier
			copy_inheritable_appearance_from = character:Stark_asoiaf_6
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = auburn_hair
			make_trait_inactive = blue_eyes

			set_sexuality = heterosexual
			add_martial_skill = 7
			add_diplomacy_skill = 7
			add_intrigue_skill = 3
			add_stewardship_skill = 4
			add_learning_skill = 5
			add_prowess_skill = 6
			add_trait = beauty_good_2
			add_trait = bossy

			agot_create_personal_coa_for_historical_ai = { ACTOR = scope:child COA_KEY = robb_stark_personal_coa }
			
			if = {
				limit = { has_game_rule = asoiaf_canon_children_rule_on_traits }
				add_trait = brave
				add_trait = just
				add_trait = trusting #honorable
				add_trait = authoritative
				add_trait = flexible_leader
				add_trait = education_martial_prowess_2
				
				set_focus = education_martial
				add_perk = bellum_justum_perk
				add_perk = parthian_tactics_perk
				add_perk = envelopment_perk
				add_perk = organized_retreat_perk
				add_perk = hit_and_run_perk
				add_perk = engineered_for_destruction_perk
				add_perk = living_off_the_land_perk
				add_perk = sappers_perk
				add_perk = strategist_perk
			}
		}
	}
	hidden_effect = {
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:father = { trigger_event = birth.1003 } #regular
	}
}

asoiaf_canon_children_Stark_8_birth_effect = { #Sansa Stark (daughter of Eddard)
	create_character = {
		age = 0
		name = "Sansa"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = female
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Stark_8_born_variable
			make_trait_inactive = asoiaf_Stark_8_trait
			add_character_modifier = asoiaf_Stark_8_modifier
			copy_inheritable_appearance_from = character:Stark_asoiaf_8
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = auburn_hair
			make_trait_inactive = blue_eyes

			set_sexuality = heterosexual
			add_martial_skill = 2
			add_diplomacy_skill = 6
			add_intrigue_skill = 4
			add_stewardship_skill = 4
			add_learning_skill = 5
			add_trait = beauty_good_2
			add_trait = charming
			
			if = {
				limit = { has_game_rule = asoiaf_canon_children_rule_on_traits }
				add_trait = content
				add_trait = trusting
				add_trait = arrogant
				add_trait = generous
				add_trait = fashionable
				
				set_focus = education_diplomacy
			}
		}
	}
	hidden_effect = {
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:father = { trigger_event = birth.1003 } #regular
	}
}

asoiaf_canon_children_Stark_9_birth_effect = { #Arya Stark (daughter of Eddard)
	create_character = {
		age = 0
		name = "Arya"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = female
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Stark_9_born_variable
			make_trait_inactive = asoiaf_Stark_9_trait
			add_character_modifier = asoiaf_Stark_9_modifier
			copy_inheritable_appearance_from = character:Stark_asoiaf_9
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = dark_brown_hair
			add_character_flag = tomboy

			set_sexuality = heterosexual
			add_martial_skill = 6
			add_diplomacy_skill = 2
			add_intrigue_skill = 6
			add_stewardship_skill = 2
			add_learning_skill = 4
			add_prowess_skill = 6
			add_trait = rowdy
			
			if = {
				limit = { has_game_rule = asoiaf_canon_children_rule_on_traits }
				add_trait = vengeful
				add_trait = brave
				add_trait = stubborn
				add_trait = uncouth
				add_trait = lifestyle_blademaster
				add_trait = refusing_marriage
				add_trait = shrewd
				
				set_focus = education_martial
			}
		}
	}
	hidden_effect = {
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:father = { trigger_event = birth.1003 } #regular
	}
}

asoiaf_canon_children_Stark_10_birth_effect = { #Brandon Stark (son of Eddard)
	create_character = {
		age = 0
		name = "Brandon"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = male
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Stark_10_born_variable
			make_trait_inactive = asoiaf_Stark_10_trait
			add_character_modifier = asoiaf_Stark_10_modifier
			copy_inheritable_appearance_from = character:Stark_asoiaf_10
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = dark_brown_hair

			add_trait = rowdy
			
			if = {
				limit = { has_game_rule = asoiaf_canon_children_rule_on_traits }
				add_trait = just #honorable
				add_trait = brave
				add_trait = diligent
				
				set_focus = education_martial
				add_character_modifier = training_for_kingsguard #he dreamed of joining the Kingsguard, but will not add refusing marriage for gameplay flexibility
			}
		}
	}
	hidden_effect = {
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:father = { trigger_event = birth.1003 } #regular
	}
}

asoiaf_canon_children_Stark_11_birth_effect = { #Rickon Stark (son of Eddard)
	create_character = {
		age = 0
		name = "Rickon"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = male
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Stark_11_born_variable
			make_trait_inactive = asoiaf_Stark_11_trait
			add_character_modifier = asoiaf_Stark_11_modifier
			copy_inheritable_appearance_from = character:Stark_asoiaf_11
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon

			add_trait = bossy
			
			if = {
				limit = { has_game_rule = asoiaf_canon_children_rule_on_traits }
				add_trait = stubborn
				add_trait = compassionate
				#no third trait due to lack of personality
				add_trait = irritable #he doesn't become wrathful until after the death of Maester Luwin
			}
		}
	}
	hidden_effect = {
		scope:mother = {
			if = {
				limit = { has_game_rule = asoiaf_canon_children_pregnancy_negation_rule_on }
				add_character_modifier = asoiaf_canon_children_pregnancy_negation_modifier
			}
		}
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:father = { trigger_event = birth.1003 } #regular
	}
}

### HOUSE BARATHEON ###

asoiaf_canon_children_Baratheon_2_birth_effect = { #Robert I Baratheon
	create_character = {
		age = 0
		name = "Robert"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = male
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Baratheon_2_born_variable
			make_trait_inactive = asoiaf_Baratheon_2_trait
			if = {
				limit = {
					NOT = { has_character_modifier = asoiaf_Baratheon_2_modifier } #necessary to stop duplicating the artefacts; the modifier is assigned immediately after
				}
				agot_create_artifact_bobby_hammer_effect = { OWNER = this CREATOR = this }
				agot_create_artifact_roberts_armour_effect = { OWNER = this }
			}
			add_character_modifier = asoiaf_Baratheon_2_modifier
			copy_inheritable_appearance_from = character:Baratheon_asoiaf_2
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = dark_brown_hair
			make_trait_inactive = blue_eyes
			add_character_flag = { flag = no_drunkard_visual }

			set_sexuality = heterosexual
			add_martial_skill = 10
			add_diplomacy_skill = 8
			add_intrigue_skill = 4
			add_stewardship_skill = 1
			add_learning_skill = 5
			add_prowess_skill = 11
			add_trait = physique_good_1
			
			if = {
				limit = { has_game_rule = asoiaf_canon_children_rule_on_traits }
				add_trait = gregarious
				add_trait = wrathful
				add_trait = lustful
				add_trait = brave
				add_trait = strong
				add_trait = education_martial_prowess_3
				add_trait = aggressive_attacker
				add_trait = organizer
				
				set_focus = education_martial
			}
		}
	}
	hidden_effect = {
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:father = { trigger_event = birth.1003 } #regular
	}
}

asoiaf_canon_children_Baratheon_3_birth_effect = { #Stannis Baratheon (son of Steffon)
	create_character = {
		age = 0
		name = "Stannis"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = male
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Baratheon_3_born_variable
			make_trait_inactive = asoiaf_Baratheon_3_trait
			add_character_modifier = asoiaf_Baratheon_3_modifier
			copy_inheritable_appearance_from = character:Baratheon_asoiaf_3
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = dark_brown_hair

			set_sexuality = heterosexual
			add_martial_skill = 11
			add_diplomacy_skill = 2
			add_intrigue_skill = 6
			add_stewardship_skill = 8
			add_learning_skill = 5
			add_prowess_skill = 5
			
			if = {
				limit = { has_game_rule = asoiaf_canon_children_rule_on_traits }
				add_trait = callous
				add_trait = just
				add_trait = stubborn
				add_trait = cynical
				add_trait = unyielding_defender
				add_trait = forder
				add_trait = military_engineer
				add_trait = education_martial_prowess_2
				add_secret = { type = secret_non_believer }
				
				set_focus = education_martial
				add_perk = bellum_justum_perk
				add_perk = parthian_tactics_perk
				add_perk = envelopment_perk
				add_perk = organized_retreat_perk
				add_perk = hit_and_run_perk
				add_perk = engineered_for_destruction_perk
				add_perk = living_off_the_land_perk
				add_perk = sappers_perk
				add_perk = strategist_perk
			}
		}
	}
	hidden_effect = {
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:father = { trigger_event = birth.1003 } #regular
	}
}

asoiaf_canon_children_Baratheon_4_birth_effect = { #Renly Baratheon (son of Steffon)
	create_character = {
		age = 0
		name = "Renly"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = male
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Baratheon_4_born_variable
			make_trait_inactive = asoiaf_Baratheon_4_trait
			add_character_modifier = asoiaf_Baratheon_4_modifier
			copy_inheritable_appearance_from = character:Baratheon_asoiaf_4
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = dark_brown_hair

			set_sexuality = homosexual
			add_martial_skill = 6
			add_diplomacy_skill = 10
			add_intrigue_skill = 6
			add_stewardship_skill = 8
			add_learning_skill = 5
			add_prowess_skill = 3
			add_trait = beauty_good_2
			
			if = {
				limit = { has_game_rule = asoiaf_canon_children_rule_on_traits }
				add_trait = compassionate
				add_trait = temperate
				add_trait = gregarious
				add_trait = arrogant
				add_trait = fashionable
				add_trait = education_martial_prowess_2
				
				set_focus = education_diplomacy
				add_perk = thoughtful_perk
				add_perk = ducal_conquest_perk
				add_perk = forced_vassalage_perk
				add_perk = adaptive_traditions_perk
				add_perk = flexible_truces_perk
				add_perk = defensive_negotiations_perk
				add_perk = embassies_perk
				add_perk = accomplished_forger_perk
				add_perk = diplomat_perk
			}
		}
	}
	hidden_effect = {
		scope:mother = {
			if = {
				limit = { has_game_rule = asoiaf_canon_children_pregnancy_negation_rule_on }
				add_character_modifier = asoiaf_canon_children_pregnancy_negation_modifier
			}
		}
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:father = { trigger_event = birth.1003 } #regular
	}
}

asoiaf_canon_children_Baratheon_2_1_birth_effect = { #Alaric Baratheon (son of Robert I)
	create_character = {
		age = 0
		name = "Alaric"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = male
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Baratheon_2_1_born_variable
			make_trait_inactive = asoiaf_Baratheon_2_1_trait
			add_character_modifier = asoiaf_Baratheon_2_1_modifier
			copy_inheritable_appearance_from = character:Baratheon_asoiaf_2_1
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = blue_eyes
			make_trait_inactive = black_hair

			add_trait = beauty_good_1
			
			if = {
				limit = { has_game_rule = asoiaf_canon_children_rule_on_traits }
				add_trait = stubborn #described as a fighter, even as a baby
			}
			if = {
				limit = { asoiaf_historical_trigger = yes }
				add_trait = ill
				death = { death_reason = death_ill }
			}
		}
	}
	hidden_effect = {
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:father = { trigger_event = birth.1003 } #regular
	}
}

asoiaf_canon_children_Lannister_6_pregnancy_effect = {
	dynasty:dynn_Lannister = {
		every_dynasty_member = {
			limit = {
				has_inactive_trait = asoiaf_Lannister_6_trait #Cersei Lannister (daughter of Tywin)
			}
			save_scope_as = asoiaf_Lannister_6
		}
	}
	dynasty:dynn_Lannister = { #DON'T default to Jaime, first check if she has a viable lover that's in her close family. Then use Jaime as long as they're both lovers.
		every_dynasty_member = {
			limit = {
				has_inactive_trait = asoiaf_Lannister_7_trait #Jaime Lannister (son of Tywin)
			}
			save_scope_as = asoiaf_Lannister_7
		}
	}
	scope:asoiaf_Lannister_6 = {
		make_pregnant_no_checks = {
			father = scope:asoiaf_Lannister_7
			number_of_children = 1
			known_bastard = no
		}
	}
}

asoiaf_canon_children_Baratheon_5_birth_effect = { #Joffrey I Baratheon
	create_character = {
		age = 0
		name = "Joffrey"
		father = scope:father #Robert
		real_father = scope:real_father #Jaime
		mother = scope:mother
		gender = male
		faith = scope:father.faith #Robert's faith
		culture = scope:father.culture #Robert's culture
		dynasty_house = scope:father.house #Robert's House
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Baratheon_5_born_variable
			make_trait_inactive = asoiaf_Baratheon_5_trait
			add_character_modifier = asoiaf_Baratheon_5_modifier
			copy_inheritable_appearance_from = character:Baratheon_asoiaf_5
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = gold_hair

			set_sexuality = heterosexual
			add_martial_skill = 4
			add_diplomacy_skill = 4
			add_intrigue_skill = 9
			add_stewardship_skill = 4
			add_learning_skill = 4
			add_trait = beauty_good_1
			add_trait = rowdy

			if = {
				limit = { NOT = { scope:real_father = scope:father } } #he's a secret bastard
				add_trait = disputed_heritage
			}
			if = { #bastardy is exposed while pregnant
				limit = {
					scope:mother = { has_character_flag = pregnancy_real_father_of_bastard_is_known_flag }
				}
				set_house = scope:real_father.house
				set_father = scope:real_father
				remove_trait = disputed_heritage
				add_trait = bastard
				agot_add_custom_bastard_nickname_effect = yes
				set_culture = scope:real_father.culture
				set_character_faith = scope:real_father.faith
			}
			if = { #incase Joffrey is born after Robert's death
				limit = {
					dynasty ?= dynasty:dynn_Baratheon #Joffrey is born a Baratheon
					any_sibling = {
						house ?= house:house_BaratheonKL
						is_house_head = yes
					}
				}
				set_house = house:house_BaratheonKL
			}
			if = {
				limit = {
					location = { geographical_region = world_westeros_the_crownlands }
				}
				set_culture = culture:crownlander
			}
			if = {
				limit = { has_game_rule = asoiaf_canon_children_rule_on_traits }
				add_trait = sadistic
				add_trait = greedy
				add_trait = arrogant
				add_trait = wrathful
				
				set_focus = education_intrigue
				add_perk = dark_insights_perk
				add_perk = divine_retribution_perk
				add_perk = dreadful_perk
				add_perk = thriving_in_chaos_perk
				add_perk = malice_implicit_perk
				add_perk = fear_tax_perk
				add_perk = forever_infamous_perk
				add_perk = prison_feudal_complex_perk
				add_perk = torturer_perk
			}
		}
	}
	hidden_effect = {
		if = {
			limit = {
				scope:child = {
					scope:father = scope:real_father
				}
			}
			scope:mother = { trigger_event = birth.1001 } #regular
		}
		if = {
			limit = {
				NOT = { scope:mother = { has_character_flag = pregnancy_spouse_knows_of_bastardy } } #husband doesn't know
				NOT = { scope:mother = { has_character_flag = pregnancy_real_father_of_bastard_is_known_flag } } #it's not been exposed to the public
			}
			scope:father = { trigger_event = birth.1003 } #regular
		}
		#BASTARD SECRET STUFF
		if = {
			limit = {
				scope:child = {
					NOT = { scope:father = scope:real_father }
				}
			}
			scope:mother = { trigger_event = birth.1002 } #secret bastard
			scope:mother = {
				add_secret = {
					type = secret_disputed_heritage
					target = scope:child
				}
				random_secret = { #Scope the secret
					limit = {
						secret_type = secret_disputed_heritage
						secret_target = scope:child
					}
					save_scope_as = new_secret
				}
				if = {
					limit = { #if Robert knows, he'll get the secret too
						has_character_flag = pregnancy_spouse_knows_of_bastardy
						NOT = { has_character_flag = pregnancy_real_father_of_bastard_is_known_flag } #if the bastardy is revealed to the public, the birth is no longer Robert's concern, so no event for him
					}
					scope:father = { add_to_list = illegitimacy_secret_knowers }
				}
			}
			scope:real_father = {
				if = {
					limit = { has_inactive_trait = asoiaf_Lannister_7_trait } #Jaime always knows since Cersei tells him
				}
				add_to_list = illegitimacy_secret_knowers
			}
			every_in_list = {
				list = illegitimacy_secret_knowers
				#A secret bastard is born - Share the news with everyone who knew that it was a bastard
				trigger_event = secret_bastard.0001
			}
		}
	}
}

asoiaf_canon_children_Baratheon_6_birth_effect = { #Myrcella Baratheon (daughter of Robert I)
	create_character = {
		age = 0
		name = "Myrcella"
		father = scope:father #Robert
		real_father = scope:real_father #Jaime
		mother = scope:mother
		gender = female
		faith = scope:father.faith #Robert's faith
		culture = scope:father.culture #Robert's culture
		dynasty_house = scope:father.house #Robert's House
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Baratheon_6_born_variable
			make_trait_inactive = asoiaf_Baratheon_6_trait
			add_character_modifier = asoiaf_Baratheon_6_modifier
			copy_inheritable_appearance_from = character:Baratheon_asoiaf_6
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = gold_hair

			set_sexuality = heterosexual
			add_martial_skill = 4
			add_diplomacy_skill = 6
			add_intrigue_skill = 6
			add_stewardship_skill = 6
			add_learning_skill = 7
			add_trait = beauty_good_3
			add_trait = intellect_good_1
			add_trait = curious
			
			if = {
				limit = { NOT = { scope:real_father = scope:father } } #he's a secret bastard
				add_trait = disputed_heritage
			}
			if = {
				limit = {
					scope:mother = { has_character_flag = pregnancy_real_father_of_bastard_is_known_flag }
				}
				set_house = scope:real_father.house
				set_father = scope:real_father
				remove_trait = disputed_heritage
				add_trait = bastard
				agot_add_custom_bastard_nickname_effect = yes
				set_culture = scope:real_father.culture
				set_character_faith = scope:real_father.faith
			}
			if = { #incase Myrcella is born after Robert's death
				limit = {
					dynasty ?= dynasty:dynn_Baratheon #Myrcella is born a Baratheon
					any_sibling = {
						house = house:house_BaratheonKL
						is_house_head = yes
					}
				}
				set_house = house:house_BaratheonKL
			}
			if = {
				limit = {
					location = { geographical_region = world_westeros_the_crownlands }
				}
				set_culture = culture:crownlander
			}
			if = {
				limit = { has_game_rule = asoiaf_canon_children_rule_on_traits }
				add_trait = compassionate
				add_trait = trusting
				add_trait = stubborn
				add_trait = generous
				
				set_focus = education_diplomacy
				add_perk = benevolent_intent_perk
				add_perk = pedagogy_perk
				add_perk = open_minded_perk
			}
		}
	}
	hidden_effect = {
		if = {
			limit = {
				scope:child = {
					scope:father = scope:real_father
				}
			}
			scope:mother = { trigger_event = birth.1001 } #regular
		}
		if = {
			limit = {
				NOT = { scope:mother = { has_character_flag = pregnancy_spouse_knows_of_bastardy } } #husband doesn't know
				NOT = { scope:mother = { has_character_flag = pregnancy_real_father_of_bastard_is_known_flag } } #it's not been exposed to the public
			}
			scope:father = { trigger_event = birth.1003 } #regular
		}
		#BASTARD SECRET STUFF
		if = {
			limit = {
				scope:child = {
					NOT = { scope:father = scope:real_father }
				}
			}
			scope:mother = { trigger_event = birth.1002 } #secret bastard
			scope:mother = {
				add_secret = {
					type = secret_disputed_heritage
					target = scope:child
				}
				random_secret = { #Scope the secret
					limit = {
						secret_type = secret_disputed_heritage
						secret_target = scope:child
					}
					save_scope_as = new_secret
				}
				if = {
					limit = { #if Robert knows, he'll get the secret too
						has_character_flag = pregnancy_spouse_knows_of_bastardy
						NOT = { has_character_flag = pregnancy_real_father_of_bastard_is_known_flag } #if the bastardy is revealed to the public, the birth is no longer Robert's concern, so no event for him
					}
					scope:father = { add_to_list = illegitimacy_secret_knowers }
				}
			}
			scope:real_father = {
				if = {
					limit = { has_inactive_trait = asoiaf_Lannister_7_trait } #Jaime always knows since Cersei tells him
				}
				add_to_list = illegitimacy_secret_knowers
			}
			every_in_list = {
				list = illegitimacy_secret_knowers
				#A secret bastard is born - Share the news with everyone who knew that it was a bastard
				trigger_event = secret_bastard.0001
			}
		}
	}
}

asoiaf_canon_children_Baratheon_7_birth_effect = { #Tommen I Baratheon
	create_character = {
		age = 0
		name = "Tommen"
		father = scope:father #Robert
		real_father = scope:real_father #Jaime
		mother = scope:mother
		gender = male
		faith = scope:father.faith #Robert's faith
		culture = scope:father.culture #Robert's culture
		dynasty_house = scope:father.house #Robert's House
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Baratheon_7_born_variable
			make_trait_inactive = asoiaf_Baratheon_7_trait
			add_character_modifier = asoiaf_Baratheon_7_modifier
			copy_inheritable_appearance_from = character:Baratheon_asoiaf_7
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = gold_hair

			set_sexuality = heterosexual
			add_martial_skill = 5
			add_diplomacy_skill = 4
			add_intrigue_skill = 4
			add_stewardship_skill = 4
			add_learning_skill = 4
			add_trait = beauty_good_2
			add_trait = pensive
			
			if = {
				limit = { NOT = { scope:real_father = scope:father } } #he's a secret bastard
				add_trait = disputed_heritage
			}
			if = {
				limit = {
					scope:mother = { has_character_flag = pregnancy_real_father_of_bastard_is_known_flag }
				}
				set_house = scope:real_father.house
				set_father = scope:real_father
				remove_trait = disputed_heritage
				add_trait = bastard
				agot_add_custom_bastard_nickname_effect = yes
				set_culture = scope:real_father.culture
				set_character_faith = scope:real_father.faith
			}
			if = { #incase Tommen is born after Robert's death
				limit = {
					dynasty ?= dynasty:dynn_Baratheon #Myrcella is born a Baratheon
					any_sibling = {
						house = house:house_BaratheonKL
						is_house_head = yes
					}
				}
				set_house = house:house_BaratheonKL
			}
			if = {
				limit = {
					location = { geographical_region = world_westeros_the_crownlands }
				}
				set_culture = culture:crownlander
			}
			if = {
				limit = { has_game_rule = asoiaf_canon_children_rule_on_traits }
				add_trait = compassionate
				add_trait = content
				add_trait = trusting
				add_trait = fickle

				set_focus = education_diplomacy
				add_perk = benevolent_intent_perk
				add_perk = inspiring_rule_perk
				add_perk = thoughtful_perk
				add_perk = befriend_perk
				add_perk = meritocracy_perk
				add_perk = chains_of_loyalty_perk
				add_perk = likable_perk
				add_perk = pedagogy_perk
				add_perk = open_minded_perk
			}
		}
	}
	hidden_effect = {
		scope:mother = {
			if = {
				limit = { has_game_rule = asoiaf_canon_children_pregnancy_negation_rule_on }
				add_character_modifier = asoiaf_canon_children_pregnancy_negation_modifier
			}
		}
		if = {
			limit = {
				scope:child = {
					scope:father = scope:real_father
				}
			}
			scope:mother = { trigger_event = birth.1001 } #regular
		}
		if = {
			limit = {
				NOT = { scope:mother = { has_character_flag = pregnancy_spouse_knows_of_bastardy } } #husband doesn't know
				NOT = { scope:mother = { has_character_flag = pregnancy_real_father_of_bastard_is_known_flag } } #it's not been exposed to the public
			}
			scope:father = { trigger_event = birth.1003 } #regular
		}
		#BASTARD SECRET STUFF
		if = {
			limit = {
				scope:child = {
					NOT = { scope:father = scope:real_father }
				}
			}
			scope:mother = { trigger_event = birth.1002 } #secret bastard
			scope:mother = {
				add_secret = {
					type = secret_disputed_heritage
					target = scope:child
				}
				random_secret = { #Scope the secret
					limit = {
						secret_type = secret_disputed_heritage
						secret_target = scope:child
					}
					save_scope_as = new_secret
				}
				if = {
					limit = { #if Robert knows, he'll get the secret too
						has_character_flag = pregnancy_spouse_knows_of_bastardy
						NOT = { has_character_flag = pregnancy_real_father_of_bastard_is_known_flag } #if the bastardy is revealed to the public, the birth is no longer Robert's concern, so no event for him
					}
					scope:father = { add_to_list = illegitimacy_secret_knowers }
				}
			}
			scope:real_father = {
				if = {
					limit = { has_inactive_trait = asoiaf_Lannister_7_trait } #Jaime always knows since Cersei tells him
				}
				add_to_list = illegitimacy_secret_knowers
			}
			every_in_list = {
				list = illegitimacy_secret_knowers
				#A secret bastard is born - Share the news with everyone who knew that it was a bastard
				trigger_event = secret_bastard.0001
			}
		}
	}
}

asoiaf_canon_children_Baratheon_3_1_birth_effect = { #Petyr Baratheon (son of Stannis)
	create_character = {
		age = 0
		name = "Petyr"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = male
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Baratheon_3_1_born_variable
			make_trait_inactive = asoiaf_Baratheon_3_1_trait
			add_character_modifier = asoiaf_Baratheon_3_1_modifier
			copy_inheritable_appearance_from = character:Baratheon_asoiaf_3_1
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = blue_eyes
			make_trait_inactive = black_hair

			add_trait = sickly
			
			if = {
				limit = { asoiaf_historical_trigger = yes }
				death = { death_reason = death_stillborn }
				scope:mother = {
					if = {
						limit = {
							NOT = { has_character_modifier = asoiaf_stress_jarred_children }
						}
						add_character_modifier = asoiaf_stress_jarred_children #keeps her stillborn children in jars
					}
				}
			}
		}
	}
	hidden_effect = {
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:father = { trigger_event = birth.1003 } #regular
	}
}

asoiaf_canon_children_Baratheon_3_2_birth_effect = { #Tommard Baratheon (son of Stannis)
	create_character = {
		age = 0
		name = "Tommard"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = male
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Baratheon_3_2_born_variable
			make_trait_inactive = asoiaf_Baratheon_3_2_trait
			add_character_modifier = asoiaf_Baratheon_3_2_modifier
			copy_inheritable_appearance_from = character:Baratheon_asoiaf_3_2
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = blue_eyes
			make_trait_inactive = black_hair

			add_trait = sickly
			
			if = {
				limit = { asoiaf_historical_trigger = yes }
				death = { death_reason = death_stillborn }
				scope:mother = {
					if = {
						limit = {
							NOT = { has_character_modifier = asoiaf_stress_jarred_children }
						}
						add_character_modifier = asoiaf_stress_jarred_children #keeps her stillborn children in jars
					}
				}
			}
		}
	}
	hidden_effect = {
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:father = { trigger_event = birth.1003 } #regular
	}
}

asoiaf_canon_children_Baratheon_3_3_birth_effect = { #Edric Baratheon (son of Stannis)
	create_character = {
		age = 0
		name = "Edric"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = male
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Baratheon_3_3_born_variable
			make_trait_inactive = asoiaf_Baratheon_3_3_trait
			add_character_modifier = asoiaf_Baratheon_3_3_modifier
			copy_inheritable_appearance_from = character:Baratheon_asoiaf_3_3
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = blue_eyes
			make_trait_inactive = black_hair

			add_trait = sickly
			
			if = {
				limit = { asoiaf_historical_trigger = yes }
				death = { death_reason = death_stillborn }
				scope:mother = {
					if = {
						limit = {
							NOT = { has_character_modifier = asoiaf_stress_jarred_children }
						}
						add_character_modifier = asoiaf_stress_jarred_children #keeps her stillborn children in jars
					}
				}
			}
		}
	}
	hidden_effect = {
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:father = { trigger_event = birth.1003 } #regular
	}
}

asoiaf_canon_children_Baratheon_13_birth_effect = { #Shireen Baratheon (daughter of Stannis)
	create_character = {
		age = 0
		name = "Shireen"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = female
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Baratheon_13_born_variable
			make_trait_inactive = asoiaf_Baratheon_13_trait
			add_character_modifier = asoiaf_Baratheon_13_modifier
			copy_inheritable_appearance_from = character:Baratheon_asoiaf_13
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = brown_hair

			add_martial_skill = 2
			add_diplomacy_skill = 10
			add_intrigue_skill = 2
			add_stewardship_skill = 4
			add_learning_skill = 7
			add_trait = curious
			add_trait = greyscale
			trigger_event = { id = asoiaf_canon_children_baratheon_events.302 days = 30 } #to remove greyscale trait

			if = {
				limit = { has_game_rule = asoiaf_canon_children_rule_on_traits }
				add_trait = shy
				add_trait = compassionate
				add_trait = humble
				
				set_focus = education_learning
			}
		}
	}
	hidden_effect = {
		scope:mother = {
			if = {
				limit = { has_game_rule = asoiaf_canon_children_pregnancy_negation_rule_on }
				add_character_modifier = asoiaf_canon_children_pregnancy_negation_modifier
			}
		}
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:father = { trigger_event = birth.1003 } #regular
	}
}

### HOUSE LANNISTER ###

asoiaf_canon_children_Lannister_6_and_7_birth_effect = { #Cersei & Jaime Lannister (children of Tywin)
	create_character = {
		age = 0
		name = "Cersei"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = female
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer

		random_traits = no

		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Lannister_6_born_variable
			make_trait_inactive = asoiaf_Lannister_6_trait
			add_character_modifier = asoiaf_Lannister_6_modifier
			copy_inheritable_appearance_from = character:Lannister_asoiaf_6
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = gold_hair
			make_trait_inactive = emerald_eyes
			add_character_flag = { flag = no_drunkard_visual }
			
			set_sexuality = heterosexual
			add_martial_skill = 2
			add_diplomacy_skill = 8
			add_intrigue_skill = 10
			add_stewardship_skill = 6
			add_learning_skill = 4
			add_trait = twin
			add_trait = beauty_good_3
			add_trait = bossy
			
			if = {
				limit = { has_game_rule = asoiaf_canon_children_rule_on_traits }
				add_trait = deceitful
				add_trait = vengeful
				add_trait = ambitious
				add_trait = arrogant
				add_trait = fashionable
				
				set_focus = education_intrigue
				add_perk = truth_is_relative_perk
				add_perk = digging_for_dirt_perk
				add_perk = kidnapper_perk
				add_perk = court_of_shadows_perk
				add_perk = prepared_for_anything_perk
				add_perk = swift_execution_perk
				add_perk = a_job_done_right_perk
				add_perk = twice_schemed_perk
				add_perk = schemer_perk
				add_perk = like_weed_in_a_garden_perk
				add_perk = unshackled_lust_perk
				add_perk = subtle_desire_perk
				add_perk = mortal_adoration_perk
				add_perk = enticing_opportunity_perk
				add_perk = home_advantage_perk
				add_perk = graceful_recovery_perk
				add_perk = smooth_operator_perk
				add_perk = seducer_perk
			}
		}
	}
	create_character = {
		age = 0
		name = "Jaime"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = male
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer

		random_traits = no

		save_scope_as = child_2
		after_creation = {
			change_age = -1 #to guarantee he'll be the youngest
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Lannister_7_born_variable
			make_trait_inactive = asoiaf_Lannister_7_trait
			add_character_modifier = asoiaf_Lannister_7_modifier
			copy_inheritable_appearance_from = character:Lannister_asoiaf_7
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = gold_hair
			make_trait_inactive = emerald_eyes
			
			set_sexuality = heterosexual
			add_martial_skill = 9
			add_diplomacy_skill = 4
			add_intrigue_skill = 3
			add_stewardship_skill = 4
			add_learning_skill = 4
			add_prowess_skill = 10
			add_trait = twin
			add_trait = beauty_good_3
			add_trait = rowdy
			
			if = {
				limit = { has_game_rule = asoiaf_canon_children_rule_on_traits }
				add_trait = brave
				add_trait = arrogant
				add_trait = impatient
				add_trait = callous
				add_trait = education_martial_prowess_4
				add_trait = lifestyle_blademaster
				add_trait_xp = {
					trait = lifestyle_blademaster
					value = 100
				}
				add_trait = reckless
				add_trait = tourney_participant
				add_trait_xp = {
					trait = tourney_participant
					track = horse
					value = 60
				}
				add_trait_xp = {
					trait = tourney_participant
					track = foot
					value = 40
				}
				
				set_focus = education_martial
				add_character_modifier = training_for_kingsguard #so that there's at least a fleeting chance he'll join, like in the lore
			}
		}
	}
	hidden_effect = {
		scope:child_2 = {
			dynasty:dynn_Lannister = {
				every_dynasty_member = {
					limit = {
						has_inactive_trait = asoiaf_Lannister_6_trait #Cersei Lannister (daughter of Tywin)
					}
					save_scope_as = asoiaf_cersei
				}
			}
			set_relation_crush = { reason = test_crush_desc target = scope:asoiaf_cersei }
			scope:asoiaf_cersei = {
				set_relation_crush = { reason = test_crush_desc target = scope:child_2 }
			}
		}
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:father = { trigger_event = birth.1003 } #regular
	}
}

asoiaf_canon_children_Lannister_8_birth_effect = { #Tyrion Lannister (son of Tywin)
	create_character = {
		age = 0
		name = "Tyrion"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = male
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Lannister_8_born_variable
			make_trait_inactive = asoiaf_Lannister_8_trait
			add_character_modifier = asoiaf_Lannister_8_modifier
			copy_inheritable_appearance_from = character:Lannister_asoiaf_8
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = gold_hair
			add_character_flag = { flag = no_drunkard_visual }

			set_sexuality = heterosexual
			add_diplomacy_skill = 12
			add_intrigue_skill = 10
			add_stewardship_skill = 10
			add_learning_skill = 10
			add_trait = dwarf
			add_trait = intellect_good_3
			give_nickname = nick_the_imp
			add_trait = curious

			if = {
				limit = { has_game_rule = asoiaf_canon_children_rule_on_traits }
				add_trait = cynical
				add_trait = diligent
				add_trait = gregarious
				add_trait = just
				add_trait = lifestyle_reveler
				add_trait = rakish
				add_trait = shrewd
				
				set_focus = education_intrigue
				add_perk = pedagogy_perk
				add_perk = open_minded_perk
				add_perk = apostate_perk
				add_perk = scientific_perk
				add_perk = planned_cultivation_perk
				add_perk = scholarly_circles_perk
				add_perk = learn_on_the_job_perk
				add_perk = sanctioned_loopholes_perk
				add_perk = scholar_perk
			}
		}
	}
	hidden_effect = {
		scope:mother = {
			if = {
				limit = { has_game_rule = asoiaf_canon_children_pregnancy_negation_rule_on }
				add_character_modifier = asoiaf_canon_children_pregnancy_negation_modifier
			}
			if = {
				limit = { asoiaf_historical_trigger = yes }
				death = { death_reason = death_childbirth }
			}
		}
		scope:father = { #should always be Tywin due to the triggers
			if = {
				limit = { asoiaf_historical_trigger = yes } #if either of the historical game rules are enabled, Joanna is guaranteed to die, so Tywin should get the trait
				add_trait = refusing_marriage
				add_opinion = {
					target = scope:child #Tyrion
					modifier = murdered_close_family #blamed Tyrion for Joanna's death
				}
			}
		}
		scope:child = {
			dynasty:dynn_Lannister = {
				every_dynasty_member = {
					limit = {
						has_inactive_trait = asoiaf_Lannister_6_trait #Cersei Lannister (daughter of Tywin)
						is_alive = yes
					}
					save_scope_as = asoiaf_cersei
				}
			}
			if = {
				limit = {
					asoiaf_historical_trigger = yes #if either of the historical game rules are enabled, Joanna is guaranteed to die
					scope:child.mother = scope:asoiaf_cersei.mother #Tyrion's mother is also Cersei's mother, otherwise she wouldn't care
				}
				set_relation_bully = scope:asoiaf_cersei
				scope:asoiaf_cersei = {
					set_relation_grudge = { reason = asoiaf_cersei_tyrion_grudge_desc target = scope:child }
					add_opinion = {
						target = scope:child #Tyrion
						modifier = murdered_close_family #blamed Tyrion for Joanna's death
					}
				}
				dynasty:dynn_Lannister = {
					every_dynasty_member = {
						limit = {
							has_inactive_trait = asoiaf_Lannister_7_trait #Jaime Lannister (son of Tywin)
							is_alive = yes
						}
						save_scope_as = asoiaf_jaime
					}
				}
				scope:asoiaf_jaime = { set_relation_friend = scope:child }
			}
		}
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:father = { trigger_event = birth.1003 } #regular
	}
}

asoiaf_canon_children_Lannister_9_birth_effect = { #Lancel Lannister (son of Kevan)
	create_character = {
		age = 0
		name = "Lancel"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = male
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Lannister_9_born_variable
			make_trait_inactive = asoiaf_Lannister_9_trait
			add_character_modifier = asoiaf_Lannister_9_modifier
			copy_inheritable_appearance_from = character:Lannister_asoiaf_9
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = gold_hair

			set_sexuality = heterosexual
			add_martial_skill = 6
			add_diplomacy_skill = 6
			add_intrigue_skill = 4
			add_stewardship_skill = 5
			add_learning_skill = 6
			add_prowess_skill = 3
			add_trait = beauty_good_3
			add_trait = pensive

			if = {
				limit = { has_game_rule = asoiaf_canon_children_rule_on_traits }
				add_trait = arrogant #traits before finding his faith
				add_trait = trusting
				add_trait = greedy
				add_trait = calm
				add_trait = fashionable
				add_trait = education_martial_prowess_1
				
				set_focus = education_intrigue
			}
		}
	}
	hidden_effect = {
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:father = { trigger_event = birth.1003 } #regular
	}
}

asoiaf_canon_children_Lannister_10_and_11_birth_effect = { #Willem & Martyn Lannister (children of Kevan)
	create_character = {
		age = 0
		name = "Willem"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = male
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer

		random_traits = no

		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Lannister_10_born_variable
			make_trait_inactive = asoiaf_Lannister_10_trait
			add_character_modifier = asoiaf_Lannister_10_modifier
			copy_inheritable_appearance_from = character:Lannister_asoiaf_10
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = gold_hair
			
			set_sexuality = homosexual
			add_prowess_skill = 3
			add_trait = twin
			add_trait = beauty_good_2
			add_trait = pensive
			
			if = {
				limit = { has_game_rule = asoiaf_canon_children_rule_on_traits }
				add_trait = trusting
				add_trait = calm
				add_trait = content
				add_trait = shy
				add_trait = education_martial_prowess_2
				
				set_focus = education_diplomacy
			}
		}
	}
	create_character = {
		age = 0
		name = "Martyn"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = male
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer

		random_traits = no

		save_scope_as = child_2
		after_creation = {
			change_age = -1 #to guarantee he'll be the youngest
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Lannister_11_born_variable
			make_trait_inactive = asoiaf_Lannister_11_trait
			add_character_modifier = asoiaf_Lannister_11_modifier
			copy_inheritable_appearance_from = character:Lannister_asoiaf_11
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = gold_hair

			add_prowess_skill = 3
			add_trait = twin
			add_trait = beauty_good_2
			add_trait = curious
			
			if = {
				limit = { has_game_rule = asoiaf_canon_children_rule_on_traits }
				add_trait = trusting
				add_trait = stubborn
				add_trait = compassionate
				add_trait = inquisitive
				add_trait = education_martial_prowess_2
				
				set_focus = education_diplomacy
			}
		}
	}
	hidden_effect = {
		scope:child_2 = {
			set_relation_friend = scope:child #Willem Lannister (son of Kevan)
		}
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:father = { trigger_event = birth.1003 } #regular
	}
}

asoiaf_canon_children_Lannister_12_birth_effect = { #Janei Lannister (daughter of Kevan)
	create_character = {
		age = 0
		name = "Janei"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = female
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Lannister_12_born_variable
			make_trait_inactive = asoiaf_Lannister_12_trait
			add_character_modifier = asoiaf_Lannister_12_modifier
			copy_inheritable_appearance_from = character:Lannister_asoiaf_12
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = gold_hair

			set_sexuality = heterosexual
			add_martial_skill = 1
			add_diplomacy_skill = 5
			add_intrigue_skill = 10
			add_stewardship_skill = 5
			add_learning_skill = 5
			add_prowess_skill = 5
			add_trait = beauty_good_2
			add_trait = bossy

			if = {
				limit = { has_game_rule = asoiaf_canon_children_rule_on_traits }
				add_trait = diligent
				add_trait = compassionate
				add_trait = stubborn
				add_trait = authoritative
				
				set_focus = education_stewardship
			}
		}
	}
	hidden_effect = {
		scope:mother = {
			if = {
				limit = { has_game_rule = asoiaf_canon_children_pregnancy_negation_rule_on }
				add_character_modifier = asoiaf_canon_children_pregnancy_negation_modifier
			}
		}
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:father = { trigger_event = birth.1003 } #regular
	}
}

### HOUSE ARRYN ###

asoiaf_canon_children_Arryn_7_birth_effect = { #Jeyne Arryn (daughter of Jon)
	create_character = {
		age = 0
		name = "Jeyne"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = female
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Arryn_7_born_variable
			make_trait_inactive = asoiaf_Arryn_7_trait
			add_character_modifier = asoiaf_Arryn_7_modifier
			copy_inheritable_appearance_from = character:Arryn_asoiaf_7
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon

			add_trait = sickly
			
			if = {
				limit = { asoiaf_historical_trigger = yes }
				death = { death_reason = death_stillborn }
			}
		}
	}
	hidden_effect = {
		scope:mother = {
			if = {
				limit = { asoiaf_historical_trigger = yes }
				death = { death_reason = death_childbirth }
			}
		}
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:father = { trigger_event = birth.1003 } #regular
	}
}

asoiaf_canon_children_Arryn_3_1_birth_effect = { #Cariah Arryn (daughter of Jon)
	create_character = {
		age = 0
		name = "Cariah"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = female
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Arryn_3_1_born_variable
			make_trait_inactive = asoiaf_Arryn_3_1_trait
			add_character_modifier = asoiaf_Arryn_3_1_modifier
			copy_inheritable_appearance_from = character:Arryn_asoiaf_3_1
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon

			add_trait = physique_bad_1
			add_trait = sickly
			
			if = {
				limit = { asoiaf_historical_trigger = yes }
				death = { death_reason = death_stillborn }
			}
		}
	}
	hidden_effect = {
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:father = { trigger_event = birth.1003 } #regular
	}
}

asoiaf_canon_children_Arryn_3_2_birth_effect = { #Eldric Arryn (son of Jon)
	create_character = {
		age = 0
		name = "Eldric"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = male
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Arryn_3_2_born_variable
			make_trait_inactive = asoiaf_Arryn_3_2_trait
			add_character_modifier = asoiaf_Arryn_3_2_modifier
			copy_inheritable_appearance_from = character:Arryn_asoiaf_3_2
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon

			add_trait = sickly
			
			if = {
				limit = { asoiaf_historical_trigger = yes }
				death = { death_reason = death_stillborn }
			}
		}
	}
	hidden_effect = {
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:father = { trigger_event = birth.1003 } #regular
	}
}

asoiaf_canon_children_Arryn_8_birth_effect = { #Robin Arryn (son of Jon)
	create_character = {
		age = 0
		name = "Robin"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = male
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Arryn_8_born_variable
			if = {
				limit = { has_game_rule = asoiaf_got_names_rule_on }
				add_character_modifier = asoiaf_Arryn_8_modifier
			}
			if = {
				limit = { has_game_rule = asoiaf_got_names_rule_off }
				change_first_name = Robert
				add_character_modifier = asoiaf_Arryn_8_alt_modifier
			}
			make_trait_inactive = asoiaf_Arryn_8_trait
			copy_inheritable_appearance_from = character:Arryn_asoiaf_8
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = dark_brown_hair

			add_martial_skill = 1
			add_diplomacy_skill = 2
			add_intrigue_skill = 1
			add_stewardship_skill = 2
			add_learning_skill = 2
			add_trait = physique_bad_2
			add_trait = beauty_good_1
			add_trait = bossy
			
			if = {
				limit = { has_game_rule = asoiaf_canon_children_rule_on_traits }
				add_trait = arbitrary
				add_trait = impatient
				#no more personality traits to allow room for growth
				add_trait = irritable
			}
		}
	}
	hidden_effect = {
		scope:mother = {
			if = {
				limit = { has_game_rule = asoiaf_canon_children_pregnancy_negation_rule_on }
				add_character_modifier = asoiaf_canon_children_pregnancy_negation_modifier
			}
		}
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:father = { trigger_event = birth.1003 } #regular
	}
}

### HOUSE TYRELL ###

asoiaf_canon_children_Tyrell_11_birth_effect = { #Willas Tyrell (son of Mace)
	create_character = {
		age = 0
		name = "Willas"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = male
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Tyrell_11_born_variable
			make_trait_inactive = asoiaf_Tyrell_11_trait
			add_character_modifier = asoiaf_Tyrell_11_modifier
			copy_inheritable_appearance_from = character:Tyrell_asoiaf_11
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = brown_hair

			set_sexuality = heterosexual
			add_martial_skill = 4
			add_diplomacy_skill = 10
			add_intrigue_skill = 5
			add_stewardship_skill = 9
			add_learning_skill = 10
			add_prowess_skill = 6
			add_trait = intellect_good_1
			add_trait = pensive
			
			if = {
				limit = { has_game_rule = asoiaf_canon_children_rule_on_traits }
				add_trait = compassionate
				add_trait = forgiving
				add_trait = patient
				add_trait = lifestyle_hunter
				
				set_focus = education_diplomacy
				add_perk = pedagogy_perk
				add_perk = open_minded_perk
				add_perk = apostate_perk
				add_perk = scientific_perk
				add_perk = planned_cultivation_perk
				add_perk = scholarly_circles_perk
				add_perk = learn_on_the_job_perk
				add_perk = sanctioned_loopholes_perk
				add_perk = scholar_perk
			}
		}
	}
	hidden_effect = {
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:father = { trigger_event = birth.1003 } #regular
	}
}

asoiaf_canon_children_Tyrell_12_birth_effect = { #Garlan Tyrell (son of Mace)
	create_character = {
		age = 0
		name = "Garlan"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = male
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Tyrell_12_born_variable
			make_trait_inactive = asoiaf_Tyrell_12_trait
			add_character_modifier = asoiaf_Tyrell_12_modifier
			copy_inheritable_appearance_from = character:Tyrell_asoiaf_12
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = light_blue_eyes
			make_trait_inactive = brown_hair

			set_sexuality = heterosexual
			add_martial_skill = 10
			add_diplomacy_skill = 7
			add_intrigue_skill = 5
			add_stewardship_skill = 5
			add_learning_skill = 5
			add_prowess_skill = 13
			add_trait = bossy

			agot_create_personal_coa_for_historical_ai = { ACTOR = scope:child COA_KEY = garlan_tyrell_personal_coa }
			
			if = {
				limit = { has_game_rule = asoiaf_canon_children_rule_on_traits }
				add_trait = compassionate
				add_trait = brave
				add_trait = just #honorable
				add_trait = diligent
				add_trait = athletic
				add_trait = lifestyle_blademaster
				add_trait_xp = {
					trait = lifestyle_blademaster
					value = 75
				}
				
				set_focus = education_martial
			}
		}
	}
	hidden_effect = {
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:father = { trigger_event = birth.1003 } #regular
	}
}

asoiaf_canon_children_Tyrell_13_birth_effect = { #Loras Tyrell (son of Mace)
	create_character = {
		age = 0
		name = "Loras"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = male
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Tyrell_13_born_variable
			make_trait_inactive = asoiaf_Tyrell_13_trait
			add_character_modifier = asoiaf_Tyrell_13_modifier
			copy_inheritable_appearance_from = character:Tyrell_asoiaf_13
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = light_blue_eyes
			make_trait_inactive = brown_hair

			set_sexuality = homosexual
			add_martial_skill = 10
			add_diplomacy_skill = 5
			add_intrigue_skill = 4
			add_stewardship_skill = 4
			add_learning_skill = 4
			add_prowess_skill = 10
			trait = beauty_good_3
			add_trait = charming

			agot_create_personal_coa_for_historical_ai = { ACTOR = scope:child COA_KEY = loras_tyrell_personal_coa }
			
			if = {
				limit = { has_game_rule = asoiaf_canon_children_rule_on_traits }
				add_trait = brave
				add_trait = generous
				add_trait = stubborn
				add_trait = arrogant
				add_trait = fashionable
				add_trait = tourney_participant
				add_trait_xp = {
					trait = tourney_participant
					track = horse
					value = 100
				}
				add_trait_xp = {
					trait = tourney_participant
					track = foot
					value = 50
				}
				add_trait_xp = {
					trait = tourney_participant
					track = wit
					value = 50
				}
				add_trait = education_martial_prowess_2
				
				set_focus = education_martial
				add_perk = stalwart_leader_perk
				add_perk = chivalric_dominance_perk
				add_perk = never_back_down_perk
				add_perk = kingsguard_perk
				add_perk = courtship_perk
				add_perk = promising_prospects_perk
				add_perk = loyalty_and_respect_perk
				add_perk = peacemaker_perk
				add_perk = gallant_perk
				add_character_modifier = training_for_kingsguard #so he has at least a slight chance of joining
			}
		}
	}
	hidden_effect = {
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:father = { trigger_event = birth.1003 } #regular
	}
}

asoiaf_canon_children_Tyrell_14_birth_effect = { #Margaery Tyrell (daughter of Mace)
	create_character = {
		age = 0
		name = "Margaery"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = female
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Tyrell_14_born_variable
			make_trait_inactive = asoiaf_Tyrell_14_trait
			add_character_modifier = asoiaf_Tyrell_14_modifier
			copy_inheritable_appearance_from = character:Tyrell_asoiaf_14
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = light_blue_eyes
			make_trait_inactive = brown_hair

			set_sexuality = heterosexual
			add_martial_skill = 4
			add_diplomacy_skill = 9
			add_intrigue_skill = 10
			add_stewardship_skill = 6
			add_learning_skill = 8
			add_trait = beauty_good_3
			add_trait = intellect_good_1
			add_trait = charming
			
			if = {
				limit = { has_game_rule = asoiaf_canon_children_rule_on_traits }
				add_trait = deceitful
				add_trait = generous
				add_trait = ambitious
				add_trait = compassionate
				add_trait = shrewd
				add_trait = lifestyle_hunter
				
				set_focus = education_intrigue
				add_perk = truth_is_relative_perk
				add_perk = digging_for_dirt_perk
				add_perk = kidnapper_perk
				add_perk = court_of_shadows_perk
				add_perk = prepared_for_anything_perk
				add_perk = swift_execution_perk
				add_perk = a_job_done_right_perk
				add_perk = twice_schemed_perk
				add_perk = schemer_perk
				add_perk = like_weed_in_a_garden_perk
				add_perk = unshackled_lust_perk
				add_perk = subtle_desire_perk
				add_perk = mortal_adoration_perk
				add_perk = enticing_opportunity_perk
				add_perk = home_advantage_perk
				add_perk = graceful_recovery_perk
				add_perk = smooth_operator_perk
				add_perk = seducer_perk
			}
		}
	}
	hidden_effect = {
		scope:mother = {
			if = {
				limit = { has_game_rule = asoiaf_canon_children_pregnancy_negation_rule_on }
				add_character_modifier = asoiaf_canon_children_pregnancy_negation_modifier
			}
		}
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:father = { trigger_event = birth.1003 } #regular
	}
}

### HOUSE HIGHTOWER ###

asoiaf_canon_children_Hightower_96_birth_effect = { #Bryndon Hightower (son of Otto)
	create_character = {
		age = 0
		name = "Bryndon"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = male
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Hightower_96_born_variable
			make_trait_inactive = asoiaf_Hightower_96_trait
			add_character_modifier = asoiaf_Hightower_96_modifier
			copy_inheritable_appearance_from = character:Hightower_asoiaf_96
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon

			add_martial_skill = 8
			add_stewardship_skill = 4
			add_learning_skill = 8
			add_prowess_skill = 12
			
			if = {
				limit = { has_game_rule = asoiaf_canon_children_rule_on_traits }
				add_trait = arrogant
				add_trait = brave
				
				set_focus = education_martial
			}
		}
	}
	hidden_effect = {
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:father = { trigger_event = birth.1003 } #regular
	}
}

asoiaf_canon_children_Hightower_97_birth_effect = { #Alicent Hightower (daughter of Otto)
	create_character = {
		age = 0
		name = "Alicent"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = female
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Hightower_97_born_variable
			make_trait_inactive = asoiaf_Hightower_97_trait
			add_character_modifier = asoiaf_Hightower_97_modifier
			copy_inheritable_appearance_from = character:Hightower_asoiaf_97
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon

			add_diplomacy_skill = 5
			add_stewardship_skill = 7
			add_learning_skill = 9
			add_trait = beauty_good_2
			add_trait = pensive
			
			if = {
				limit = { has_game_rule = asoiaf_canon_children_rule_on_traits }
				add_trait = honest
				add_trait = diligent
				add_trait = temperate
				add_trait = zealous #alt: just
				
				set_focus = education_learning
				add_perk = befriend_perk
				add_perk = confidants_perk
				add_perk = flatterer_perk
				add_perk = familial_familiar_perk
				add_perk = groomed_to_rule_perk
				add_perk = thicker_than_water_perk
				add_perk = friendly_counsel_perk
				add_perk = sound_foundations_perk
				add_perk = family_man_perk
			}
		}
	}
	hidden_effect = {
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:father = { trigger_event = birth.1003 } #regular
	}
}

asoiaf_canon_children_Hightower_98_birth_effect = { #Myles Hightower (son of Otto)
	create_character = {
		age = 0
		name = "Myles"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = male
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Hightower_98_born_variable
			make_trait_inactive = asoiaf_Hightower_98_trait
			add_character_modifier = asoiaf_Hightower_98_modifier
			copy_inheritable_appearance_from = character:Hightower_asoiaf_98
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon

			add_intrigue_skill = 5
			
			if = {
				limit = { has_game_rule = asoiaf_canon_children_rule_on_traits }
				add_trait = arbitrary
				add_trait = greedy
				
				set_focus = education_stewardship
			}
		}
	}
	hidden_effect = {
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:father = { trigger_event = birth.1003 } #regular
	}
}

asoiaf_canon_children_Hightower_99_birth_effect = { #Gwayne Hightower (son of Otto)
	create_character = {
		age = 0
		name = "Gwayne"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = male
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Hightower_99_born_variable
			make_trait_inactive = asoiaf_Hightower_99_trait
			add_character_modifier = asoiaf_Hightower_99_modifier
			copy_inheritable_appearance_from = character:Hightower_asoiaf_99
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon

			add_martial_skill = 5
			add_prowess_skill = 6
			add_trait = beauty_good_2
			add_trait = charming
			
			if = {
				limit = { has_game_rule = asoiaf_canon_children_rule_on_traits }
				add_trait = arrogant
				add_trait = honest
				add_trait = diligent
				add_trait = gregarious
				add_trait = education_martial_prowess_3
				add_trait = tourney_participant
				add_trait_xp = {
					trait = tourney_participant
					track = horse
					value = 30
				}
				
				set_focus = education_martial
			}
		}
	}
	hidden_effect = {
		scope:mother = {
			if = {
				limit = { has_game_rule = asoiaf_canon_children_pregnancy_negation_rule_on }
				add_character_modifier = asoiaf_canon_children_pregnancy_negation_modifier
			}
			if = {
				limit = { asoiaf_historical_trigger = yes }
				death = { death_reason = death_childbirth }
			}
		}
		scope:father = {
			if = {
				limit = { asoiaf_historical_trigger = yes } #wife dies
				add_trait = refusing_marriage
			}
		}
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:father = { trigger_event = birth.1003 } #regular
	}
}

### HOUSE TARGARYEN ###

asoiaf_canon_children_Targaryen_30_birth_effect = { #Aenys I Targaryen
	create_character = {
		age = 0
		name = "Aenys"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = male
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Targaryen_30_born_variable
			make_trait_inactive = asoiaf_Targaryen_30_trait
			add_character_modifier = asoiaf_Targaryen_30_modifier
			copy_inheritable_appearance_from = character:Targaryen_asoiaf_30
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = cool_neutral_silver_hair
			make_trait_inactive = purple_eyes_5
			learn_language = language_common

			set_sexuality = heterosexual
			add_martial_skill = 2
			add_diplomacy_skill = 4
			add_intrigue_skill = 3
			add_stewardship_skill = 2
			add_learning_skill = 6
			add_trait = curious
			
			if = {
				limit = { has_game_rule = asoiaf_canon_children_rule_on_traits }
				add_trait = trusting
				add_trait = compassionate
				add_trait = fickle
				add_trait = content
				add_trait = poet
				add_trait = weak
				add_trait = fashionable
				add_trait = education_martial_prowess_2
				add_trait = lifestyle_mystic
				
				set_focus = education_learning
			}
			if = {
				limit = { has_game_rule = asoiaf_canon_children_dragon_bonding_rule_on }
				if = {
					limit = {
						character:dragon_quicksilver ?= {
							is_alive = yes
							agot_has_relationship_dragon = no #hasn't already bonded with another rider
						}
						agot_has_relationship_dragon = no #not already bonded to another dragon
					}
					agot_bond_dragon_relation_effect = {
						ACTOR = scope:child
						DRAGON = character:dragon_quicksilver
					}
					send_interface_toast = {
						title = bond_dragon_notification
						left_icon = scope:child
						right_icon = character:dragon_quicksilver
						start_scheme = {
							type = bond_with_dragon_scheme
							target = character:dragon_quicksilver
						}
					}
				}
			}
		}
	}
	hidden_effect = {
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:father = { trigger_event = birth.1003 } #regular
	}
}

asoiaf_canon_children_Targaryen_31_birth_effect = { #Maegor I Targaryen
	create_character = {
		age = 0
		name = "Maegor"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = male
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Targaryen_31_born_variable
			make_trait_inactive = asoiaf_Targaryen_31_trait
			add_character_modifier = asoiaf_Targaryen_31_modifier
			copy_inheritable_appearance_from = character:Targaryen_asoiaf_31
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = cool_neutral_silver_hair
			make_trait_inactive = purple_eyes_5
			learn_language = language_common

			set_sexuality = heterosexual
			add_martial_skill = 6
			add_diplomacy_skill = 2
			add_intrigue_skill = 5
			add_stewardship_skill = 2
			add_learning_skill = 2
			add_prowess_skill = 4
			add_trait = physique_good_2
			add_trait = lunatic_genetic
			add_trait = infertile
			add_trait = rowdy
			
			if = {
				limit = { has_game_rule = asoiaf_canon_children_rule_on_traits }
				add_trait = brave
				add_trait = sadistic
				add_trait = stubborn
				add_trait = wrathful
				add_trait = aggressive_attacker
				add_trait = strong
				add_trait = irritable
				add_trait = education_martial_prowess_4
				
				set_focus = education_martial
				add_perk = dark_insights_perk
				add_perk = divine_retribution_perk
				add_perk = dreadful_perk
				add_perk = thriving_in_chaos_perk
				add_perk = malice_implicit_perk
				add_perk = fear_tax_perk
				add_perk = forever_infamous_perk
				add_perk = prison_feudal_complex_perk
				add_perk = torturer_perk
			}
			if = {
				limit = { has_game_rule = asoiaf_canon_children_dragon_bonding_rule_on }
				if = {
					limit = {
						character:dragon_balerion ?= {
							is_alive = yes
							agot_has_relationship_dragon = no #hasn't already bonded with another rider
						}
						agot_has_relationship_dragon = no #not already bonded to another dragon
					}
					agot_bond_dragon_relation_effect = {
						ACTOR = scope:child
						DRAGON = character:dragon_balerion
					}
					send_interface_toast = {
						title = bond_dragon_notification
						left_icon = scope:child
						right_icon = character:dragon_balerion
						start_scheme = {
							type = bond_with_dragon_scheme
							target = character:dragon_balerion
						}
					}
				}
			}
		}
	}
	hidden_effect = {
		scope:father = {
			if = {
				limit = { has_game_rule = asoiaf_canon_children_pregnancy_negation_rule_on }
				every_spouse = {
					if = {
						limit = { house ?= character:Targaryen_13.house }
						asoiaf_canon_children_terminate_pregnancy_effect = yes
						add_character_modifier = asoiaf_canon_children_pregnancy_negation_modifier
					}
				}
			}
		}
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:father = { trigger_event = birth.1003 } #regular
	}
}

asoiaf_canon_children_Targaryen_32_birth_effect = { #Rhaena Targaryen (daughter of Aenys I)
	create_character = {
		age = 0
		name = "Rhaena"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = female
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Targaryen_32_born_variable
			make_trait_inactive = asoiaf_Targaryen_32_trait
			add_character_modifier = asoiaf_Targaryen_32_modifier
			copy_inheritable_appearance_from = character:Targaryen_asoiaf_32
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = cool_neutral_silver_hair
			make_trait_inactive = purple_eyes_5
			learn_language = language_common

			set_sexuality = homosexual
			add_martial_skill = 3
			add_diplomacy_skill = 9
			add_intrigue_skill = 7
			add_stewardship_skill = 8
			add_learning_skill = 4
			add_trait = beauty_good_2
			add_trait = rowdy
			
			if = {
				limit = { has_game_rule = asoiaf_canon_children_rule_on_traits }
				add_trait = brave
				add_trait = stubborn
				add_trait = vengeful
				add_trait = cynical
				
				set_focus = education_diplomacy
			}
		}
	}
	hidden_effect = {
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:father = { trigger_event = birth.1003 } #regular
	}
}

asoiaf_canon_children_Targaryen_33_birth_effect = { #Aegon Targaryen (son of Aenys I)
	create_character = {
		age = 0
		name = "Aegon"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = male
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Targaryen_33_born_variable
			make_trait_inactive = asoiaf_Targaryen_33_trait
			add_character_modifier = asoiaf_Targaryen_33_modifier
			copy_inheritable_appearance_from = character:Targaryen_asoiaf_33
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = cool_neutral_silver_hair
			make_trait_inactive = purple_eyes_5
			learn_language = language_common

			set_sexuality = heterosexual
			add_martial_skill = 8
			add_diplomacy_skill = 9
			add_intrigue_skill = 7
			add_stewardship_skill = 8
			add_learning_skill = 4
			add_prowess_skill = 6
			add_trait = beauty_good_2
			add_trait = charming
			
			if = {
				limit = { has_game_rule = asoiaf_canon_children_rule_on_traits }
				add_trait = brave
				add_trait = ambitious
				add_trait = impatient
				add_trait = reckless
				add_trait = athletic
				add_trait = education_martial_prowess_3
				add_trait = tourney_participant
				add_trait_xp = {
					trait = tourney_participant
					track = horse
					value = 75
				}
				
				set_focus = education_martial
			}
			if = {
				limit = { has_game_rule = asoiaf_canon_children_dragon_bonding_rule_on }
				if = {
					limit = {
						character:dragon_quicksilver ?= {
							is_alive = yes
							agot_has_relationship_dragon = no #hasn't already bonded with another rider
						}
						agot_has_relationship_dragon = no #not already bonded to another dragon
					}
					agot_bond_dragon_relation_effect = {
						ACTOR = scope:child
						DRAGON = character:dragon_quicksilver
					}
					send_interface_toast = {
						title = bond_dragon_notification
						left_icon = scope:child
						right_icon = character:dragon_quicksilver
						start_scheme = {
							type = bond_with_dragon_scheme
							target = character:dragon_quicksilver
						}
					}
				}
			}
		}
	}
	hidden_effect = {
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:father = { trigger_event = birth.1003 } #regular
	}
}

asoiaf_canon_children_Targaryen_34_birth_effect = { #Viserys Targaryen (son of Aenys I)
	create_character = {
		age = 0
		name = "Viserys"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = male
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Targaryen_34_born_variable
			make_trait_inactive = asoiaf_Targaryen_34_trait
			add_character_modifier = asoiaf_Targaryen_34_modifier
			copy_inheritable_appearance_from = character:Targaryen_asoiaf_34
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = neutral_silver_hair
			make_trait_inactive = purple_eyes_5
			learn_language = language_common

			set_sexuality = heterosexual
			add_martial_skill = 4
			add_diplomacy_skill = 7
			add_intrigue_skill = 6
			add_stewardship_skill = 6
			add_learning_skill = 4
			add_trait = charming
			
			if = {
				limit = { has_game_rule = asoiaf_canon_children_rule_on_traits }
				add_trait = compassionate
				add_trait = calm
				add_trait = brave
				
				set_focus = education_diplomacy
			}
		}
	}
	hidden_effect = {
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:father = { trigger_event = birth.1003 } #regular
	}
}

asoiaf_canon_children_Targaryen_35_birth_effect = { #Jaehaerys I Targaryen
	create_character = {
		age = 0
		name = "Jaehaerys"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = male
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Targaryen_35_born_variable
			make_trait_inactive = asoiaf_Targaryen_35_trait
			add_character_modifier = asoiaf_Targaryen_35_modifier
			copy_inheritable_appearance_from = character:Targaryen_asoiaf_35
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = cool_silver_hair
			make_trait_inactive = purple_eyes_5
			learn_language = language_common

			set_sexuality = heterosexual
			add_martial_skill = 3
			add_diplomacy_skill = 10
			add_intrigue_skill = 8
			add_stewardship_skill = 10
			add_learning_skill = 6
			add_prowess_skill = 6
			add_trait = intellect_good_2
			add_trait = fecund
			add_trait = bossy
			
			if = {
				limit = { has_game_rule = asoiaf_canon_children_rule_on_traits }
				add_trait = diligent
				add_trait = just
				add_trait = stubborn
				add_trait = temperate
				add_trait = shrewd
				add_trait = education_martial_prowess_3
				add_trait = lifestyle_traveler
				
				set_focus = education_stewardship
				add_perk = tax_man_perk
				add_perk = defensive_measures_perk
				add_perk = organized_muster_rolls_perk
				add_perk = cutting_corners_perk
				add_perk = professional_workforce_perk
				add_perk = centralization_perk
				add_perk = popular_figurehead_perk
				add_perk = divided_attention_perk
				add_perk = architect_perk
				add_perk = thoughtful_perk
				add_perk = ducal_conquest_perk
				add_perk = forced_vassalage_perk
				add_perk = adaptive_traditions_perk
				add_perk = flexible_truces_perk
				add_perk = defensive_negotiations_perk
				add_perk = embassies_perk
				add_perk = accomplished_forger_perk
				add_perk = diplomat_perk
			}
			if = {
				limit = { has_game_rule = asoiaf_canon_children_dragon_bonding_rule_on }
				if = {
					limit = {
						character:dragon_vermithor ?= {
							is_alive = yes
							agot_has_relationship_dragon = no #hasn't already bonded with another rider
						}
						agot_has_relationship_dragon = no #not already bonded to another dragon
					}
					agot_bond_dragon_relation_effect = {
						ACTOR = scope:child
						DRAGON = character:dragon_vermithor
					}
					send_interface_toast = {
						title = bond_dragon_notification
						left_icon = scope:child
						right_icon = character:dragon_vermithor
						start_scheme = {
							type = bond_with_dragon_scheme
							target = character:dragon_vermithor
						}
					}
				}
			}
		}
	}
	hidden_effect = {
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:father = { trigger_event = birth.1003 } #regular
	}
}

asoiaf_canon_children_Targaryen_36_birth_effect = { #Alysanne Targaryen (daughter of Aenys I)
	create_character = {
		age = 0
		name = "Alysanne"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = female
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Targaryen_36_born_variable
			make_trait_inactive = asoiaf_Targaryen_36_trait
			add_character_modifier = asoiaf_Targaryen_36_modifier
			copy_inheritable_appearance_from = character:Targaryen_asoiaf_36
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = silver_gold_hair
			make_trait_inactive = purple_eyes_5
			learn_language = language_common

			set_sexuality = heterosexual
			add_martial_skill = 2
			add_diplomacy_skill = 15
			add_intrigue_skill = 8
			add_stewardship_skill = 10
			add_learning_skill = 4
			add_trait = beauty_good_1
			add_trait = intellect_good_1
			add_trait = fecund
			add_trait = bossy
			
			if = {
				limit = { has_game_rule = asoiaf_canon_children_rule_on_traits }
				add_trait = diligent
				add_trait = generous
				add_trait = just
				add_trait = compassionate
				add_trait = lifestyle_hunter
				
				set_focus = education_diplomacy
				add_perk = befriend_perk
				add_perk = confidants_perk
				add_perk = flatterer_perk
				add_perk = familial_familiar_perk
				add_perk = groomed_to_rule_perk
				add_perk = thicker_than_water_perk
				add_perk = friendly_counsel_perk
				add_perk = sound_foundations_perk
				add_perk = family_man_perk
			}
			if = {
				limit = { has_game_rule = asoiaf_canon_children_dragon_bonding_rule_on }
				if = {
					limit = {
						character:dragon_silverwing ?= {
							is_alive = yes
							agot_has_relationship_dragon = no #hasn't already bonded with another rider
						}
						agot_has_relationship_dragon = no #not already bonded to another dragon
					}
					agot_bond_dragon_relation_effect = {
						ACTOR = scope:child
						DRAGON = character:dragon_silverwing
					}
					send_interface_toast = {
						title = bond_dragon_notification
						left_icon = scope:child
						right_icon = character:dragon_silverwing
						start_scheme = {
							type = bond_with_dragon_scheme
							target = character:dragon_silverwing
						}
					}
				}
			}
		}
	}
	hidden_effect = {
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:father = { trigger_event = birth.1003 } #regular
	}
}

asoiaf_canon_children_Targaryen_37_birth_effect = { #Vaella Targaryen (daughter of Aenys I)
	create_character = {
		age = 0
		name = "Vaella"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = female
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Targaryen_37_born_variable
			make_trait_inactive = asoiaf_Targaryen_37_trait
			add_character_modifier = asoiaf_Targaryen_37_modifier
			copy_inheritable_appearance_from = character:Targaryen_asoiaf_37
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = neutral_silver_hair
			make_trait_inactive = purple_eyes_5
			learn_language = language_common

			add_trait = sickly

			if = {
				limit = { asoiaf_historical_trigger = yes }
				add_trait = ill
				death = { death_reason = death_ill }
			}
		}
	}
	hidden_effect = {
		scope:mother = {
			if = {
				limit = { has_game_rule = asoiaf_canon_children_pregnancy_negation_rule_on }
				add_character_modifier = asoiaf_canon_children_pregnancy_negation_modifier
			}
		}
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:father = { trigger_event = birth.1003 } #regular
	}
}

asoiaf_canon_children_Targaryen_38_birth_effect = { #Aegon Targaryen (son of Maegor I)
	create_character = {
		age = 0
		name = "Aegon"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = male
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Targaryen_38_born_variable
			make_trait_inactive = asoiaf_Targaryen_38_trait
			add_character_modifier = asoiaf_Targaryen_38_modifier
			copy_inheritable_appearance_from = character:Targaryen_asoiaf_38
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = cool_neutral_silver_hair
			make_trait_inactive = purple_eyes_5
			learn_language = language_common

			add_trait = beauty_bad_3
			add_trait = hunchbacked
			add_trait = blind

			death = { death_reason = death_stillborn }
		}
	}
	hidden_effect = {
		scope:mother = {
			if = {
				limit = { has_game_rule = asoiaf_canon_children_pregnancy_negation_rule_on }
				add_character_modifier = asoiaf_canon_children_pregnancy_negation_modifier
			}
		}
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:father = { trigger_event = birth.1003 } #regular
	}
}

asoiaf_canon_children_Targaryen_40_birth_effect = { #Rhaenys Targaryen (daughter of Maegor I)
	create_character = {
		age = 0
		name = "Rhaenys"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = female
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Targaryen_40_born_variable
			make_trait_inactive = asoiaf_Targaryen_40_trait
			add_character_modifier = asoiaf_Targaryen_40_modifier
			copy_inheritable_appearance_from = character:Targaryen_asoiaf_40
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = cool_neutral_silver_hair
			make_trait_inactive = purple_eyes_5
			learn_language = language_common

			add_trait = beauty_bad_3
			add_trait = clubfooted
			add_trait = maimed
			add_trait = disfigured #double genitalia

			death = { death_reason = death_stillborn }
		}
	}
	hidden_effect = {
		scope:mother = {
			if = {
				limit = { has_game_rule = asoiaf_canon_children_pregnancy_negation_rule_on }
				add_character_modifier = asoiaf_canon_children_pregnancy_negation_modifier
			}
		}
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:father = { trigger_event = birth.1003 } #regular
	}
}

asoiaf_canon_children_Targaryen_39_birth_effect = { #Viserys Targaryen (son of Maegor I)
	create_character = {
		age = 0
		name = "Viserys"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = male
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Targaryen_39_born_variable
			make_trait_inactive = asoiaf_Targaryen_39_trait
			add_character_modifier = asoiaf_Targaryen_39_modifier
			copy_inheritable_appearance_from = character:Targaryen_asoiaf_39
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = cool_neutral_silver_hair
			make_trait_inactive = purple_eyes_5
			learn_language = language_common

			add_trait = beauty_bad_3
			add_trait = hunchbacked
			add_trait = blind

			death = { death_reason = death_stillborn }
		}
	}
	hidden_effect = {
		scope:mother = {
			if = {
				limit = { has_game_rule = asoiaf_canon_children_pregnancy_negation_rule_on }
				add_character_modifier = asoiaf_canon_children_pregnancy_negation_modifier
			}
		}
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:father = { trigger_event = birth.1003 } #regular
	}
}

asoiaf_canon_children_maegor_children_birth_effect = { #stillbirth effect for Maegor the Cruel's non-canon children
	scope:child = {
		random_list = {
			85 = { #the child is deformed and dies stillborn
				add_trait = beauty_bad_3
				random_list = {
					60 =  { add_trait = blind }
					40 = { }
				}
				random_list = {
					60 =  { add_trait = hunchbacked }
					40 = { }
				}
				random_list = {
					60 =  { add_trait = clubfooted }
					40 = { }
				}
				random_list = {
					60 =  { add_trait = maimed }
					40 = { }
				}
				death = { death_reason = death_stillborn }
			}
			15 = { } #the child is born without problems
		}
	}
	scope:mother = { asoiaf_canon_children_terminate_pregnancy_effect = yes } #in case the pregnancy glitches
}

asoiaf_canon_children_Targaryen_41_and_42_birth_effect = { #Aerea & Rhaella Targaryen (children of Aegon)
	create_character = {
		age = 0
		name = "Aerea"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = female
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer

		random_traits = no

		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Targaryen_41_born_variable
			make_trait_inactive = asoiaf_Targaryen_41_trait
			add_character_modifier = asoiaf_Targaryen_41_modifier
			copy_inheritable_appearance_from = character:Targaryen_asoiaf_41
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = cool_neutral_silver_hair
			make_trait_inactive = purple_eyes_5
			learn_language = language_common
			
			set_sexuality = heterosexual
			add_martial_skill = 3
			add_diplomacy_skill = 3
			add_intrigue_skill = 3
			add_stewardship_skill = 3
			add_learning_skill = 3
			add_trait = twin
			
			if = {
				limit = { has_game_rule = asoiaf_canon_children_rule_on_traits }
				add_trait = stubborn
				add_trait = brave
				add_trait = arrogant
				add_trait = gregarious
				
				set_focus = education_martial
			}
			if = {
				limit = { has_game_rule = asoiaf_canon_children_dragon_bonding_rule_on }
				if = {
					limit = {
						character:dragon_balerion ?= {
							is_alive = yes
							agot_has_relationship_dragon = no #hasn't already bonded with another rider
						}
						agot_has_relationship_dragon = no #not already bonded to another dragon
					}
					agot_bond_dragon_relation_effect = {
						ACTOR = scope:child
						DRAGON = character:dragon_balerion
					}
					send_interface_toast = {
						title = bond_dragon_notification
						left_icon = scope:child
						right_icon = character:dragon_balerion
						start_scheme = {
							type = bond_with_dragon_scheme
							target = character:dragon_balerion
						}
					}
				}
			}
		}
	}
	create_character = {
		age = 0
		name = "Rhaella"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = female
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer

		random_traits = no

		save_scope_as = child_2
		after_creation = {
			change_age = -1 #to guarantee she'll be the youngest
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Targaryen_42_born_variable
			make_trait_inactive = asoiaf_Targaryen_42_trait
			add_character_modifier = asoiaf_Targaryen_42_modifier
			copy_inheritable_appearance_from = character:Targaryen_asoiaf_42
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = cool_neutral_silver_hair
			make_trait_inactive = purple_eyes_5
			learn_language = language_common
			
			set_sexuality = heterosexual
			add_martial_skill = 3
			add_diplomacy_skill = 3
			add_intrigue_skill = 3
			add_stewardship_skill = 3
			add_learning_skill = 3
			add_trait = twin
			
			if = {
				limit = { has_game_rule = asoiaf_canon_children_rule_on_traits }
				add_trait = compassionate
				add_trait = patient
				add_trait = zealous
				add_trait = temperate
				
				set_focus = education_learning
				add_perk = pedagogy_perk
				add_perk = open_minded_perk
				add_perk = apostate_perk
				add_perk = scientific_perk
				add_perk = planned_cultivation_perk
				add_perk = scholarly_circles_perk
				add_perk = learn_on_the_job_perk
				add_perk = sanctioned_loopholes_perk
				add_perk = scholar_perk
			}
		}
	}
	hidden_effect = {
		scope:mother = {
			if = {
				limit = { has_game_rule = asoiaf_canon_children_pregnancy_negation_rule_on }
				add_character_modifier = asoiaf_canon_children_pregnancy_negation_modifier
			}
		}
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:father = { trigger_event = birth.1003 } #regular
	}
}

asoiaf_canon_children_Targaryen_43_birth_effect = { #Aegon Targaryen (son of Jaehaerys I)
	create_character = {
		age = 0
		name = "Aegon"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = male
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Targaryen_43_born_variable
			make_trait_inactive = asoiaf_Targaryen_43_trait
			add_character_modifier = asoiaf_Targaryen_43_modifier
			copy_inheritable_appearance_from = character:Targaryen_asoiaf_43
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = cool_neutral_silver_hair
			make_trait_inactive = purple_eyes_5
			learn_language = language_common

			add_trait = sickly
			
			if = {
				limit = { asoiaf_historical_trigger = yes }
				death = { death_reason = death_stillborn }
			}
		}
	}
	hidden_effect = {
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:father = { trigger_event = birth.1003 } #regular
	}
}

asoiaf_canon_children_Targaryen_44_birth_effect = { #Daenerys Targaryen (daughter of Jaehaerys I)
	create_character = {
		age = 0
		name = "Daenerys"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = female
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Targaryen_44_born_variable
			make_trait_inactive = asoiaf_Targaryen_44_trait
			add_character_modifier = asoiaf_Targaryen_44_modifier
			copy_inheritable_appearance_from = character:Targaryen_asoiaf_44
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = cool_neutral_silver_hair
			make_trait_inactive = purple_eyes_5
			learn_language = language_common

			add_martial_skill = 2
			add_diplomacy_skill = 2
			add_intrigue_skill = 2
			add_stewardship_skill = 2
			add_learning_skill = 2
			add_trait = beauty_good_2
			
			trigger_event = { id = asoiaf_canon_children_targaryen_events.6000 days = 2000 } #to give her pneumonia (the illness that kills her)

			if = {
				limit = { has_game_rule = asoiaf_canon_children_rule_on_traits }
				add_trait = compassionate
				add_trait = brave
			}
		}
	}
	hidden_effect = {
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:father = { trigger_event = birth.1003 } #regular
	}
}

asoiaf_canon_children_Targaryen_45_birth_effect = { #Aemon Targaryen (son of Jaehaerys I)
	create_character = {
		age = 0
		name = "Aemon"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = male
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Targaryen_45_born_variable
			make_trait_inactive = asoiaf_Targaryen_45_trait
			add_character_modifier = asoiaf_Targaryen_45_modifier
			copy_inheritable_appearance_from = character:Targaryen_asoiaf_45
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = cool_neutral_silver_hair
			make_trait_inactive = purple_eyes_5
			learn_language = language_common

			set_sexuality = heterosexual
			add_martial_skill = 5
			add_diplomacy_skill = 4
			add_intrigue_skill = 4
			add_stewardship_skill = 6
			add_learning_skill = 4
			add_prowess_skill = 10

			if = {
				limit = { has_game_rule = asoiaf_canon_children_rule_on_traits }
				add_trait = compassionate
				add_trait = patient
				add_trait = temperate #honorable
				add_trait = just
				
				set_focus = education_stewardship
			}
			if = {
				limit = { has_game_rule = asoiaf_canon_children_dragon_bonding_rule_on }
				if = {
					limit = {
						character:dragon_caraxes ?= {
							is_alive = yes
							agot_has_relationship_dragon = no #hasn't already bonded with another rider
						}
						agot_has_relationship_dragon = no #not already bonded to another dragon
					}
					agot_bond_dragon_relation_effect = {
						ACTOR = scope:child
						DRAGON = character:dragon_caraxes
					}
					send_interface_toast = {
						title = bond_dragon_notification
						left_icon = scope:child
						right_icon = character:dragon_caraxes
						start_scheme = {
							type = bond_with_dragon_scheme
							target = character:dragon_caraxes
						}
					}
				}
			}
		}
	}
	hidden_effect = {
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:father = { trigger_event = birth.1003 } #regular
	}
}

asoiaf_canon_children_Targaryen_46_birth_effect = { #Baelon Targaryen (son of Jaehaerys I)
	create_character = {
		age = 0
		name = "Baelon"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = male
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Targaryen_46_born_variable
			make_trait_inactive = asoiaf_Targaryen_46_trait
			add_character_modifier = asoiaf_Targaryen_46_modifier
			copy_inheritable_appearance_from = character:Targaryen_asoiaf_46
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = cool_neutral_silver_hair
			make_trait_inactive = purple_eyes_5
			learn_language = language_common

			set_sexuality = heterosexual
			add_martial_skill = 8
			add_diplomacy_skill = 4
			add_intrigue_skill = 4
			add_stewardship_skill = 5
			add_learning_skill = 4
			add_prowess_skill = 10

			if = {
				limit = { has_game_rule = asoiaf_canon_children_rule_on_traits }
				add_trait = brave
				add_trait = gregarious
				add_trait = just #honorable
				add_trait = diligent
				
				set_focus = education_stewardship
			}
		}
	}
	hidden_effect = {
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:father = { trigger_event = birth.1003 } #regular
	}
}

asoiaf_canon_children_Targaryen_47_birth_effect = { #Alyssa Targaryen (daughter of Jaehaerys I)
	create_character = {
		age = 0
		name = "Alyssa"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = female
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Targaryen_47_born_variable
			make_trait_inactive = asoiaf_Targaryen_47_trait
			add_character_modifier = asoiaf_Targaryen_47_modifier
			copy_inheritable_appearance_from = character:Targaryen_asoiaf_47
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = neutral_silver_hair
			make_trait_inactive = purple_eyes_5
			learn_language = language_common

			set_sexuality = heterosexual
			add_martial_skill = 4
			add_diplomacy_skill = 4
			add_intrigue_skill = 4
			add_stewardship_skill = 4
			add_learning_skill = 4
			add_prowess_skill = 5
			add_trait = rowdy

			if = {
				limit = { has_game_rule = asoiaf_canon_children_rule_on_traits }
				add_trait = diligent
				add_trait = gregarious
				add_trait = brave
				
				set_focus = education_diplomacy
			}
			if = {
				limit = { has_game_rule = asoiaf_canon_children_dragon_bonding_rule_on }
				if = {
					limit = {
						character:dragon_meleys ?= {
							is_alive = yes
							agot_has_relationship_dragon = no #hasn't already bonded with another rider
						}
						agot_has_relationship_dragon = no #not already bonded to another dragon
					}
					agot_bond_dragon_relation_effect = {
						ACTOR = scope:child
						DRAGON = character:dragon_meleys
					}
					send_interface_toast = {
						title = bond_dragon_notification
						left_icon = scope:child
						right_icon = character:dragon_meleys
						start_scheme = {
							type = bond_with_dragon_scheme
							target = character:dragon_meleys
						}
					}
				}
			}
		}
	}
	hidden_effect = {
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:father = { trigger_event = birth.1003 } #regular
	}
}

asoiaf_canon_children_Targaryen_48_birth_effect = { #Maegelle Targaryen (daughter of Jaehaerys I)
	create_character = {
		age = 0
		name = "Maegelle"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = female
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Targaryen_48_born_variable
			make_trait_inactive = asoiaf_Targaryen_48_trait
			add_character_modifier = asoiaf_Targaryen_48_modifier
			copy_inheritable_appearance_from = character:Targaryen_asoiaf_48
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = cool_neutral_silver_hair
			make_trait_inactive = purple_eyes_5
			learn_language = language_common

			set_sexuality = heterosexual
			add_martial_skill = 4
			add_diplomacy_skill = 10
			add_intrigue_skill = 4
			add_stewardship_skill = 4
			add_learning_skill = 4
			add_trait = intellect_good_1

			if = {
				limit = { has_game_rule = asoiaf_canon_children_rule_on_traits }
				add_trait = compassionate
				add_trait = patient
				add_trait = just #honorable
				add_trait = zealous
				add_trait = lifestyle_physician
				
				set_focus = education_diplomacy
				add_perk = thoughtful_perk
				add_perk = ducal_conquest_perk
				add_perk = forced_vassalage_perk
				add_perk = adaptive_traditions_perk
				add_perk = flexible_truces_perk
				add_perk = defensive_negotiations_perk
				add_perk = embassies_perk
				add_perk = accomplished_forger_perk
				add_perk = diplomat_perk
			}
		}
	}
	hidden_effect = {
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:father = { trigger_event = birth.1003 } #regular
	}
}

asoiaf_canon_children_Targaryen_49_birth_effect = { #Vaegon Targaryen (son of Jaehaerys I)
	create_character = {
		age = 0
		name = "Vaegon"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = male
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Targaryen_49_born_variable
			make_trait_inactive = asoiaf_Targaryen_49_trait
			add_character_modifier = asoiaf_Targaryen_49_modifier
			copy_inheritable_appearance_from = character:Targaryen_asoiaf_49
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = cool_neutral_silver_hair
			make_trait_inactive = purple_eyes_5
			learn_language = language_common

			set_sexuality = heterosexual
			add_martial_skill = 4
			add_diplomacy_skill = 4
			add_intrigue_skill = 4
			add_stewardship_skill = 4
			add_learning_skill = 10
			add_trait = intellect_good_2
			add_trait = weak

			if = {
				limit = { has_game_rule = asoiaf_canon_children_rule_on_traits }
				add_trait = patient
				add_trait = rude
				add_trait = chaste
				add_trait = content
				add_trait = lifestyle_mystic
				
				set_focus = education_learning
				add_perk = meritocracy_perk
				add_perk = chains_of_loyalty_perk
				add_perk = likable_perk
				add_perk = positions_of_power_perk
				add_perk = large_levies_perk
				add_perk = soon_forgiven_perk
				add_perk = toe_the_line_perk
				add_perk = honored_to_serve_perk
				add_perk = administrator_perk
			}
		}
	}
	hidden_effect = {
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:father = { trigger_event = birth.1003 } #regular
	}
}

asoiaf_canon_children_Targaryen_50_birth_effect = { #Daella Targaryen (daughter of Jaehaerys I)
	create_character = {
		age = 0
		name = "Daella"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = female
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Targaryen_50_born_variable
			make_trait_inactive = asoiaf_Targaryen_50_trait
			add_character_modifier = asoiaf_Targaryen_50_modifier
			copy_inheritable_appearance_from = character:Targaryen_asoiaf_50
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = cool_neutral_silver_hair
			make_trait_inactive = purple_eyes_5
			learn_language = language_common

			set_sexuality = heterosexual
			add_martial_skill = 4
			add_diplomacy_skill = 4
			add_intrigue_skill = 4
			add_stewardship_skill = 4
			add_learning_skill = 4
			add_trait = physique_bad_2
			add_trait = intellect_bad_1

			if = {
				limit = { has_game_rule = asoiaf_canon_children_rule_on_traits }
				add_trait = fickle
				add_trait = zealous
				add_trait = shy
				add_trait = trusting
				
				set_focus = education_diplomacy
			}
		}
	}
	hidden_effect = {
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:father = { trigger_event = birth.1003 } #regular
	}
}

asoiaf_canon_children_Targaryen_51_birth_effect = { #Saera Targaryen (daughter of Jaehaerys I)
	create_character = {
		age = 0
		name = "Saera"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = female
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Targaryen_51_born_variable
			make_trait_inactive = asoiaf_Targaryen_51_trait
			add_character_modifier = asoiaf_Targaryen_51_modifier
			copy_inheritable_appearance_from = character:Targaryen_asoiaf_51
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = cool_neutral_silver_hair
			make_trait_inactive = purple_eyes_5
			learn_language = language_common

			set_sexuality = heterosexual
			add_martial_skill = 4
			add_diplomacy_skill = 4
			add_intrigue_skill = 7
			add_stewardship_skill = 4
			add_learning_skill = 4
			add_trait = beauty_good_2
			add_trait = intellect_good_1
			add_trait = bossy

			if = {
				limit = { has_game_rule = asoiaf_canon_children_rule_on_traits }
				add_trait = stubborn
				add_trait = arrogant
				add_trait = deceitful
				add_trait = lustful
				
				set_focus = education_intrigue
				add_perk = like_weed_in_a_garden_perk
				add_perk = unshackled_lust_perk
				add_perk = subtle_desire_perk
				add_perk = mortal_adoration_perk
				add_perk = enticing_opportunity_perk
				add_perk = home_advantage_perk
				add_perk = graceful_recovery_perk
				add_perk = smooth_operator_perk
				add_perk = seducer_perk
			}
		}
	}
	hidden_effect = {
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:father = { trigger_event = birth.1003 } #regular
	}
}

asoiaf_canon_children_Targaryen_52_birth_effect = { #Viserra Targaryen (daughter of Jaehaerys I)
	create_character = {
		age = 0
		name = "Viserra"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = female
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Targaryen_52_born_variable
			make_trait_inactive = asoiaf_Targaryen_52_trait
			add_character_modifier = asoiaf_Targaryen_52_modifier
			copy_inheritable_appearance_from = character:Targaryen_asoiaf_52
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = cool_neutral_silver_hair
			make_trait_inactive = purple_eyes_5
			learn_language = language_common

			set_sexuality = heterosexual
			add_martial_skill = 4
			add_diplomacy_skill = 10
			add_intrigue_skill = 8
			add_stewardship_skill = 4
			add_learning_skill = 4
			add_prowess_skill = 5
			add_trait = beauty_good_3
			add_trait = charming

			if = {
				limit = { has_game_rule = asoiaf_canon_children_rule_on_traits }
				add_trait = arrogant
				add_trait = arbitrary
				add_trait = ambitious
				
				set_focus = education_diplomacy
			}
		}
	}
	hidden_effect = {
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:father = { trigger_event = birth.1003 } #regular
	}
}

asoiaf_canon_children_Targaryen_53_birth_effect = { #Gaemon Targaryen (son of Jaehaerys I)
	create_character = {
		age = 0
		name = "Gaemon"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = male
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Targaryen_53_born_variable
			make_trait_inactive = asoiaf_Targaryen_53_trait
			add_character_modifier = asoiaf_Targaryen_53_modifier
			copy_inheritable_appearance_from = character:Targaryen_asoiaf_53
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = cool_silver_hair
			make_trait_inactive = purple_eyes_5
			learn_language = language_common

			add_trait = physique_bad_2
			add_trait = sickly

			if = {
				limit = { asoiaf_historical_trigger = yes }
				death = { death_reason = death_stillborn }
			}
		}
	}
	hidden_effect = {
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:father = { trigger_event = birth.1003 } #regular
	}
}

asoiaf_canon_children_Targaryen_54_birth_effect = { #Valerion Targaryen (son of Jaehaerys I)
	create_character = {
		age = 0
		name = "Valerion"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = male
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Targaryen_54_born_variable
			make_trait_inactive = asoiaf_Targaryen_54_trait
			add_character_modifier = asoiaf_Targaryen_54_modifier
			copy_inheritable_appearance_from = character:Targaryen_asoiaf_54
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = neutral_silver_hair
			make_trait_inactive = purple_eyes_5
			learn_language = language_common

			add_trait = physique_bad_2
			add_trait = sickly

			if = {
				limit = { asoiaf_historical_trigger = yes }
				death = { death_reason = death_ill }
			}
		}
	}
	hidden_effect = {
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:father = { trigger_event = birth.1003 } #regular
	}
}

asoiaf_canon_children_Targaryen_55_birth_effect = { #Gael Targaryen (daughter of Jaehaerys I)
	create_character = {
		age = 0
		name = "Gael"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = female
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Targaryen_55_born_variable
			make_trait_inactive = asoiaf_Targaryen_55_trait
			add_character_modifier = asoiaf_Targaryen_55_modifier
			copy_inheritable_appearance_from = character:Targaryen_asoiaf_55
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = cool_silver_hair
			make_trait_inactive = purple_eyes_5
			learn_language = language_common

			set_sexuality = heterosexual
			add_martial_skill = 4
			add_diplomacy_skill = 10
			add_intrigue_skill = 8
			add_stewardship_skill = 4
			add_learning_skill = 4
			add_prowess_skill = 5
			add_trait = physique_bad_1
			add_trait = intellect_bad_1

			if = {
				limit = { has_game_rule = asoiaf_canon_children_rule_on_traits }
				add_trait = compassionate
				add_trait = shy
				add_trait = trusting
				
				set_focus = education_diplomacy
			}
		}
	}
	hidden_effect = {
		scope:mother = {
			if = {
				limit = { has_game_rule = asoiaf_canon_children_pregnancy_negation_rule_on }
				add_character_modifier = asoiaf_canon_children_pregnancy_negation_modifier
			}
		}
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:father = { trigger_event = birth.1003 } #regular
	}
}

asoiaf_canon_children_Targaryen_55_1_birth_effect = { #Gael's Stillborn bastard
	create_character = {
		age = 0
		name = "Maegon"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = male
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Targaryen_55_1_born_variable
			make_trait_inactive = asoiaf_Targaryen_55_1_trait
			add_character_modifier = asoiaf_Targaryen_55_1_modifier
			copy_inheritable_appearance_from = character:Targaryen_asoiaf_55_1
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = neutral_silver_hair
			make_trait_inactive = purple_eyes_5
			learn_language = language_common

			add_trait = physique_bad_1
			add_trait = sickly

			if = {
				limit = { asoiaf_historical_trigger = yes }
				death = { death_reason = death_stillborn }
			}
		}
	}
	hidden_effect = {
		scope:mother = {
			if = {
				limit = { asoiaf_historical_trigger = yes } #Gael's son dies
				death = { death_reason = death_suicide } #Gael kills herself
			}
		}
		scope:mother.mother = {
			if = {
				limit = {
					asoiaf_historical_trigger = yes #Gael kills herself
					is_alive = yes #Alysanne is alive
				}
				add_trait = depressed_1 #Alysanne becomes depressed
			}
		}
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:mother = { trigger_event = birth.1002 } #secret bastard
	}
}

asoiaf_canon_children_Targaryen_56_birth_effect = { #Aelor (bastard of Saera)
	create_character = {
		age = 0
		name = "Aelor"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = male
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Targaryen_56_born_variable
			make_trait_inactive = asoiaf_Targaryen_56_trait
			add_character_modifier = asoiaf_Targaryen_56_modifier
			copy_inheritable_appearance_from = character:Targaryen_asoiaf_56
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = neutral_silver_hair
			make_trait_inactive = purple_eyes_5
			learn_language = language_common

			add_trait = beauty_good_1
		}
	}
	hidden_effect = {
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:mother = { trigger_event = birth.1002 } #secret bastard
	}
}

asoiaf_canon_children_Targaryen_57_birth_effect = { #Jaecerys (bastard of Saera)
	create_character = {
		age = 0
		name = "Jaecerys"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = male
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Targaryen_57_born_variable
			make_trait_inactive = asoiaf_Targaryen_57_trait
			add_character_modifier = asoiaf_Targaryen_57_modifier
			copy_inheritable_appearance_from = character:Targaryen_asoiaf_57
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = neutral_silver_hair
			make_trait_inactive = purple_eyes_5
			learn_language = language_common
		}
	}
	hidden_effect = {
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:mother = { trigger_event = birth.1002 } #secret bastard
	}
}

asoiaf_canon_children_Targaryen_58_birth_effect = { #Aegon (bastard of Saera)
	create_character = {
		age = 0
		name = "Aegon"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = male
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Targaryen_58_born_variable
			make_trait_inactive = asoiaf_Targaryen_58_trait
			add_character_modifier = asoiaf_Targaryen_58_modifier
			copy_inheritable_appearance_from = character:Targaryen_asoiaf_58
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = cool_neutral_silver_hair
			make_trait_inactive = purple_eyes_5
			learn_language = language_common
		}
	}
	hidden_effect = {
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:mother = { trigger_event = birth.1002 } #secret bastard
	}
}

asoiaf_canon_children_Hammer_1_birth_effect = { #Hugh the Hammer
	create_character = {
		age = 0
		name = "Hugh"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = male
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Hammer_1_born_variable
			make_trait_inactive = asoiaf_Hammer_1_trait
			add_character_modifier = asoiaf_Hammer_1_modifier
			copy_inheritable_appearance_from = character:Hammer_asoiaf_1
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = neutral_silver_hair
			learn_language = language_common

			set_sexuality = heterosexual
			add_martial_skill = 5
			add_diplomacy_skill = 1
			add_intrigue_skill = 5
			add_stewardship_skill = 2
			add_learning_skill = 1
			add_prowess_skill = 5
			add_trait = physique_good_3

			if = {
				limit = { has_game_rule = asoiaf_canon_children_rule_on_traits }
				add_trait = brave
				add_trait = trusting
				add_trait = wrathful
				add_trait = strong
				
				set_focus = education_martial
			}
		}
	}
	hidden_effect = {
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:mother = { trigger_event = birth.1002 } #secret bastard
	}
}

asoiaf_canon_children_Hammer_2_birth_effect = { #Hugh's daughter
	create_character = {
		age = 0
		name = "Marcia"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = female
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Hammer_2_born_variable
			make_trait_inactive = asoiaf_Hammer_2_trait
			add_character_modifier = asoiaf_Hammer_2_modifier
			copy_inheritable_appearance_from = character:Hammer_asoiaf_2
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = black_hair

			add_trait = physique_bad_1
		}
	}
	hidden_effect = {
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:father = { trigger_event = birth.1003 } #regular
	}
}

asoiaf_canon_children_Targaryen_59_birth_effect = { #Rhaenys Targaryen (daughter of Aemon)
	create_character = {
		age = 0
		name = "Rhaenys"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = female
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Targaryen_59_born_variable
			make_trait_inactive = asoiaf_Targaryen_59_trait
			add_character_modifier = asoiaf_Targaryen_59_modifier
			copy_inheritable_appearance_from = character:Targaryen_asoiaf_59
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = neutral_silver_hair
			make_trait_inactive = purple_eyes_5
			learn_language = language_common

			set_sexuality = heterosexual
			add_martial_skill = 5
			add_diplomacy_skill = 7
			add_intrigue_skill = 5
			add_stewardship_skill = 4
			add_learning_skill = 4
			add_prowess_skill = 6

			if = {
				limit = { has_game_rule = asoiaf_canon_children_rule_on_traits }
				add_trait = brave
				add_trait = arrogant
				add_trait = temperate
				add_trait = stubborn
				
				set_focus = education_diplomacy
			}
			if = {
				limit = { has_game_rule = asoiaf_canon_children_dragon_bonding_rule_on }
				if = {
					limit = {
						character:dragon_meleys ?= {
							is_alive = yes
							agot_has_relationship_dragon = no #hasn't already bonded with another rider
						}
						agot_has_relationship_dragon = no #not already bonded to another dragon
					}
					agot_bond_dragon_relation_effect = {
						ACTOR = scope:child
						DRAGON = character:dragon_meleys
					}
					send_interface_toast = {
						title = bond_dragon_notification
						left_icon = scope:child
						right_icon = character:dragon_meleys
						start_scheme = {
							type = bond_with_dragon_scheme
							target = character:dragon_meleys
						}
					}
				}
			}
		}
	}
	hidden_effect = {
		scope:mother = {
			if = {
				limit = { has_game_rule = asoiaf_canon_children_pregnancy_negation_rule_on }
				add_character_modifier = asoiaf_canon_children_pregnancy_negation_modifier
			}
		}
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:father = { trigger_event = birth.1003 } #regular
	}
}

asoiaf_canon_children_Targaryen_60_birth_effect = { #Viserys I Targaryen
	create_character = {
		age = 0
		name = "Viserys"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = male
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Targaryen_60_born_variable
			make_trait_inactive = asoiaf_Targaryen_60_trait
			add_character_modifier = asoiaf_Targaryen_60_modifier
			copy_inheritable_appearance_from = character:Targaryen_asoiaf_60
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = neutral_silver_hair
			make_trait_inactive = purple_eyes_5
			learn_language = language_common

			set_sexuality = heterosexual
			add_martial_skill = 2
			add_diplomacy_skill = 7
			add_intrigue_skill = 4
			add_stewardship_skill = 9
			add_learning_skill = 10
			add_prowess_skill = 2
			add_trait = curious

			agot_create_personal_coa_for_historical_ai = { ACTOR = scope:child COA_KEY = viserys_I_targaryen_personal_coa }

			if = {
				limit = { has_game_rule = asoiaf_canon_children_rule_on_traits }
				add_trait = inquisitive
				add_trait = stubborn
				add_trait = forgiving
				add_trait = content
				add_trait = dragon_dreams
				add_trait = lifestyle_hunter
				add_trait = improvident
				
				set_focus = education_diplomacy
				add_perk = pedagogy_perk
				add_perk = open_minded_perk
				add_perk = apostate_perk
				add_perk = scientific_perk
				add_perk = planned_cultivation_perk
				add_perk = scholarly_circles_perk
				add_perk = learn_on_the_job_perk
				add_perk = sanctioned_loopholes_perk
				add_perk = scholar_perk
				add_perk = befriend_perk
				add_perk = confidants_perk
				add_perk = flatterer_perk
				add_perk = familial_familiar_perk
				add_perk = groomed_to_rule_perk
				add_perk = thicker_than_water_perk
				add_perk = friendly_counsel_perk
				add_perk = sound_foundations_perk
				add_perk = family_man_perk
			}
			if = {
				limit = { has_game_rule = asoiaf_canon_children_dragon_bonding_rule_on }
				if = {
					limit = {
						character:dragon_balerion ?= {
							is_alive = yes
							agot_has_relationship_dragon = no #hasn't already bonded with another rider
						}
						agot_has_relationship_dragon = no #not already bonded to another dragon
					}
					agot_bond_dragon_relation_effect = {
						ACTOR = scope:child
						DRAGON = character:dragon_balerion
					}
					send_interface_toast = {
						title = bond_dragon_notification
						left_icon = scope:child
						right_icon = character:dragon_balerion
						start_scheme = {
							type = bond_with_dragon_scheme
							target = character:dragon_balerion
						}
					}
				}
			}
		}
	}
	hidden_effect = {
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:father = { trigger_event = birth.1003 } #regular
	}
}

asoiaf_canon_children_Targaryen_61_birth_effect = { #Daemon Targaryen (son of Baelon)
	create_character = {
		age = 0
		name = "Daemon"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = male
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Targaryen_61_born_variable
			make_trait_inactive = asoiaf_Targaryen_61_trait
			add_character_modifier = asoiaf_Targaryen_61_modifier
			copy_inheritable_appearance_from = character:Targaryen_asoiaf_61
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = neutral_silver_hair
			make_trait_inactive = purple_eyes_5
			learn_language = language_common

			set_sexuality = heterosexual
			add_martial_skill = 2
			add_diplomacy_skill = 7
			add_intrigue_skill = 4
			add_stewardship_skill = 9
			add_learning_skill = 10
			add_prowess_skill = 2
			add_trait = beauty_good_1
			add_trait = rowdy

			agot_create_personal_coa_for_historical_ai = { ACTOR = scope:child COA_KEY = daemon_targaryen_personal_coa }

			if = {
				limit = { has_game_rule = asoiaf_canon_children_rule_on_traits }
				add_trait = brave
				add_trait = wrathful
				add_trait = ambitious
				add_trait = callous #ruthless
				add_trait = shrewd
				add_trait = lifestyle_blademaster
				add_trait = education_martial_prowess_3
				add_trait = aggressive_attacker
				add_trait = reckless
				add_trait = tourney_participant
				add_trait_xp = {
					trait = tourney_participant
					track = horse
					value = 35
				}
				add_trait_xp = {
					trait = tourney_participant
					track = foot
					value = 40
				}
				
				set_focus = education_martial
				add_perk = dreadful_perk
				add_perk = serve_the_crown_perk
				add_perk = strict_organization_perk
				add_perk = hard_rule_perk
				add_perk = bellum_justum_perk
				add_perk = stalwart_leader_perk
			}
			if = {
				limit = { has_game_rule = asoiaf_canon_children_dragon_bonding_rule_on }
				if = {
					limit = {
						character:dragon_caraxes ?= {
							is_alive = yes
							agot_has_relationship_dragon = no #hasn't already bonded with another rider
						}
						agot_has_relationship_dragon = no #not already bonded to another dragon
					}
					agot_bond_dragon_relation_effect = {
						ACTOR = scope:child
						DRAGON = character:dragon_caraxes
					}
					send_interface_toast = {
						title = bond_dragon_notification
						left_icon = scope:child
						right_icon = character:dragon_caraxes
						start_scheme = {
							type = bond_with_dragon_scheme
							target = character:dragon_caraxes
						}
					}
				}
			}
		}
	}
	hidden_effect = {
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:father = { trigger_event = birth.1003 } #regular
	}
}

asoiaf_canon_children_Targaryen_62_birth_effect = { #Aegon Targaryen (son of Baelon)
	create_character = {
		age = 0
		name = "Aegon"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = male
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Targaryen_62_born_variable
			make_trait_inactive = asoiaf_Targaryen_62_trait
			add_character_modifier = asoiaf_Targaryen_62_modifier
			copy_inheritable_appearance_from = character:Targaryen_asoiaf_62
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = cool_neutral_silver_hair
			make_trait_inactive = purple_eyes_5
			learn_language = language_common

			add_trait = sickly

			if = {
				limit = { asoiaf_historical_trigger = yes }
				death = { death_reason = death_stillborn }
			}
		}
	}
	hidden_effect = {
		scope:mother = { #Alyssa
			if = {
				limit = { has_game_rule = asoiaf_canon_children_pregnancy_negation_rule_on }
				add_character_modifier = asoiaf_canon_children_pregnancy_negation_modifier
			}
			add_trait = ill
			add_trait = weak
			if = {
				limit = { asoiaf_historical_trigger = yes }
				death = { death_reason = death_childbirth }
			}
		}
		scope:father = { #Baelon
			if = {
				limit = { asoiaf_historical_trigger = yes } #Alyssa dies
				add_trait = depressed_1
				add_trait = refusing_marriage
			}
		}
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:father = { trigger_event = birth.1003 } #regular
	}
}

asoiaf_canon_children_Targaryen_131_birth_effect = { #Aemon Targaryen (son of Viserys I)
	create_character = {
		age = 0
		name = "Aemon"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = male
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Targaryen_131_born_variable
			make_trait_inactive = asoiaf_Targaryen_131_trait
			add_character_modifier = asoiaf_Targaryen_131_modifier
			copy_inheritable_appearance_from = character:Targaryen_asoiaf_131
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = cool_neutral_silver_hair
			make_trait_inactive = purple_eyes_5
			learn_language = language_common

			add_trait = sickly
			add_trait = ill

			if = {
				limit = { asoiaf_historical_trigger = yes }
				death = { death_reason = death_ill }
			}
		}
	}
	hidden_effect = {
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:father = { trigger_event = birth.1003 } #regular
	}
}

asoiaf_canon_children_Targaryen_63_birth_effect = { #Rhaenyra Targaryen (daughter of Viserys I)
	create_character = {
		age = 0
		name = "Rhaenyra"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = female
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Targaryen_63_born_variable
			make_trait_inactive = asoiaf_Targaryen_63_trait
			add_character_modifier = asoiaf_Targaryen_63_modifier
			copy_inheritable_appearance_from = character:Targaryen_asoiaf_63
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = neutral_silver_hair
			make_trait_inactive = purple_eyes_5
			learn_language = language_common

			set_sexuality = heterosexual
			add_martial_skill = 6
			add_diplomacy_skill = 11
			add_intrigue_skill = 5
			add_stewardship_skill = 8
			add_learning_skill = 3
			add_trait = beauty_good_2
			add_trait = bossy

			if = {
				limit = { has_game_rule = asoiaf_canon_children_rule_on_traits }
				add_trait = brave
				add_trait = arrogant
				add_trait = authoritative
				add_trait = rude
				add_trait = fashionable
				
				set_focus = education_diplomacy
				add_perk = familial_familiar_perk
				add_perk = groomed_to_rule_perk
			}
			if = {
				limit = { has_game_rule = asoiaf_canon_children_dragon_bonding_rule_on }
				if = {
					limit = {
						character:dragon_syrax ?= {
							is_alive = yes
							agot_has_relationship_dragon = no #hasn't already bonded with another rider
						}
						agot_has_relationship_dragon = no #not already bonded to another dragon
					}
					agot_bond_dragon_relation_effect = {
						ACTOR = scope:child
						DRAGON = character:dragon_syrax
					}
					send_interface_toast = {
						title = bond_dragon_notification
						left_icon = scope:child
						right_icon = character:dragon_syrax
						start_scheme = {
							type = bond_with_dragon_scheme
							target = character:dragon_syrax
						}
					}
				}
			}
		}
	}
	hidden_effect = {
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:father = { trigger_event = birth.1003 } #regular
	}
}
asoiaf_canon_children_Targaryen_63_personality_change_effect = { #PERSONALITY CHANGE AFTER MOTHERHOOD for Rhaenyra
	scope:mother = { #should always be Rhaenyra
		remove_trait = brave
		remove_trait = arrogant
		remove_trait = authoritative
		remove_trait = rude
		add_trait = brave
		add_trait = arbitrary
		add_trait = ambitious
		add_trait = patient
	}
}

asoiaf_canon_children_Targaryen_64_birth_effect = { #Baelon Targaryen (son of Viserys I)
	create_character = {
		age = 0
		name = "Baelon"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = male
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Targaryen_64_born_variable
			make_trait_inactive = asoiaf_Targaryen_64_trait
			add_character_modifier = asoiaf_Targaryen_64_modifier
			copy_inheritable_appearance_from = character:Targaryen_asoiaf_64
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = cool_neutral_silver_hair
			make_trait_inactive = purple_eyes_5
			learn_language = language_common

			add_trait = sickly
			add_trait = inbred

			if = {
				limit = { asoiaf_historical_trigger = yes }
				give_nickname = nick_the_heir_for_a_day
				death = { death_reason = death_sickly }
			}
		}
	}
	hidden_effect = {
		scope:mother = {
			if = {
				limit = { has_game_rule = asoiaf_canon_children_pregnancy_negation_rule_on }
				add_character_modifier = asoiaf_canon_children_pregnancy_negation_modifier
			}
			if = {
				limit = { asoiaf_historical_trigger = yes }
				death = { death_reason = death_childbirth }
			}
		}
		scope:father = { #Viserys I
			if = {
				limit = { asoiaf_historical_trigger = yes } #wife dies
				add_trait = depressed_1
				add_character_modifier = stress_frozen_grief
			}
		}
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:father = { trigger_event = birth.1003 } #regular
	}
}

asoiaf_canon_children_Targaryen_65_birth_effect = { #Aegon II Targaryen
	create_character = {
		age = 0
		name = "Aegon"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = male
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Targaryen_65_born_variable
			make_trait_inactive = asoiaf_Targaryen_65_trait
			add_character_modifier = asoiaf_Targaryen_65_modifier
			copy_inheritable_appearance_from = character:Targaryen_asoiaf_65
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = cool_neutral_silver_hair
			make_trait_inactive = purple_eyes_5
			learn_language = language_common
			add_character_flag = { flag = no_drunkard_visual }

			set_sexuality = heterosexual
			add_martial_skill = 5
			add_diplomacy_skill = 7
			add_intrigue_skill = 5
			add_stewardship_skill = 5
			add_learning_skill = 5
			add_prowess_skill = 3
			add_trait = beauty_good_2

			agot_create_personal_coa_for_historical_ai = { ACTOR = scope:child COA_KEY = aegon_ii_personal_arms }

			if = {
				limit = { has_game_rule = asoiaf_canon_children_rule_on_traits }
				add_trait = arbitrary
				add_trait = gregarious
				add_trait = impatient
				add_trait = lustful
				add_trait = education_martial_prowess_2
				add_trait = drunkard
				add_trait = rakish
				add_trait = lifestyle_reveler
				add_trait = reckless
				
				set_focus = education_stewardship
				add_perk = benevolent_intent_perk
				add_perk = befriend_perk
				add_perk = confidants_perk
				add_perk = enticing_opportunity_perk
				add_perk = home_advantage_perk
				add_perk = like_weed_in_a_garden_perk
				add_perk = unshackled_lust_perk
			}
			if = {
				limit = { has_game_rule = asoiaf_canon_children_dragon_bonding_rule_on }
				if = {
					limit = {
						character:dragon_sunfyre ?= {
							is_alive = yes
							agot_has_relationship_dragon = no #hasn't already bonded with another rider
						}
						agot_has_relationship_dragon = no #not already bonded to another dragon
					}
					agot_bond_dragon_relation_effect = {
						ACTOR = scope:child
						DRAGON = character:dragon_sunfyre
					}
					send_interface_toast = {
						title = bond_dragon_notification
						left_icon = scope:child
						right_icon = character:dragon_sunfyre
						start_scheme = {
							type = bond_with_dragon_scheme
							target = character:dragon_sunfyre
						}
					}
				}
			}
		}
	}
	hidden_effect = {
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:father = { trigger_event = birth.1003 } #regular
		scope:child = { #triggered again to overwrite the random DNA he gets in the Rogue Prince bookmark for some reason
			copy_inheritable_appearance_from = character:Targaryen_asoiaf_65
		}
		scope:child = { #set friendship with Criston Cole if he's available
			dynasty:dynn_Cole = {
				every_dynasty_member = {
					limit = {
						has_inactive_trait = asoiaf_Cole_11_trait #Criston Cole (the Kingmaker)
						has_trait = kingsguard
					}
					save_scope_as = asoiaf_criston_cole
				}
			}
			scope:asoiaf_criston_cole = {
				set_relation_friend = { reason = asoiaf_criston_aegon_friend_desc target = scope:child } #Cole takes on a father figure to Alicent's children
			}
		}
	}
}

asoiaf_canon_children_Targaryen_66_birth_effect = { #Helaena Targaryen (daughter of Viserys I)
	create_character = {
		age = 0
		name = "Helaena"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = female
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Targaryen_66_born_variable
			make_trait_inactive = asoiaf_Targaryen_66_trait
			add_character_modifier = asoiaf_Targaryen_66_modifier
			copy_inheritable_appearance_from = character:Targaryen_asoiaf_66
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = neutral_silver_hair
			make_trait_inactive = purple_eyes_5
			learn_language = language_common

			set_sexuality = heterosexual
			add_martial_skill = 2
			add_diplomacy_skill = 4
			add_intrigue_skill = 4
			add_stewardship_skill = 4
			add_learning_skill = 6

			if = {
				limit = { has_game_rule = asoiaf_canon_children_rule_on_traits }
				add_trait = shy
				add_trait = eccentric
				add_trait = compassionate
				add_trait = content
				add_trait = dragon_dreams
				add_trait = reclusive
				
				set_focus = education_learning
				add_perk = familial_familiar_perk
				add_perk = scientific_perk
				add_perk = anatomical_studies_perk
				add_perk = carefree_perk
			}
			if = {
				limit = { has_game_rule = asoiaf_canon_children_dragon_bonding_rule_on }
				if = {
					limit = {
						character:dragon_dreamfyre ?= {
							is_alive = yes
							agot_has_relationship_dragon = no #hasn't already bonded with another rider
						}
						agot_has_relationship_dragon = no #not already bonded to another dragon
					}
					agot_bond_dragon_relation_effect = {
						ACTOR = scope:child
						DRAGON = character:dragon_dreamfyre
					}
					send_interface_toast = {
						title = bond_dragon_notification
						left_icon = scope:child
						right_icon = character:dragon_dreamfyre
						start_scheme = {
							type = bond_with_dragon_scheme
							target = character:dragon_dreamfyre
						}
					}
				}
			}
		}
	}
	hidden_effect = {
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:father = { trigger_event = birth.1003 } #regular
		scope:child = { #set friendship with Criston Cole if he's available
			dynasty:dynn_Cole = {
				every_dynasty_member = {
					limit = {
						has_inactive_trait = asoiaf_Cole_11_trait #Criston Cole (the Kingmaker)
						has_trait = kingsguard
					}
					save_scope_as = asoiaf_criston_cole
				}
			}
			scope:asoiaf_criston_cole = {
				set_relation_friend = { reason = asoiaf_criston_helaena_friend_desc target = scope:child } #Cole takes on a father figure to Alicent's children
			}
		}
	}
}

asoiaf_canon_children_Targaryen_67_birth_effect = { #Aemond Targaryen (son of Viserys I)
	create_character = {
		age = 0
		name = "Aemond"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = male
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Targaryen_67_born_variable
			make_trait_inactive = asoiaf_Targaryen_67_trait
			add_character_modifier = asoiaf_Targaryen_67_modifier
			copy_inheritable_appearance_from = character:Targaryen_asoiaf_67
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = neutral_silver_hair
			make_trait_inactive = purple_eyes_5
			learn_language = language_common

			set_sexuality = heterosexual
			add_martial_skill = 7
			add_diplomacy_skill = 4
			add_intrigue_skill = 4
			add_stewardship_skill = 4
			add_learning_skill = 6
			add_prowess_skill = 7

			if = {
				limit = { has_game_rule = asoiaf_canon_children_rule_on_traits }
				add_trait = brave
				add_trait = ambitious
				add_trait = diligent
				add_trait = vengeful
				add_trait = lifestyle_blademaster
				add_trait = education_martial_prowess_4
				add_trait = aggressive_attacker
				add_trait = strong
				
				set_focus = education_martial
				add_perk = pedagogy_perk
				add_perk = open_minded_perk
				add_perk = apostate_perk
				add_perk = scientific_perk
				add_perk = planned_cultivation_perk
				add_perk = scholarly_circles_perk
				add_perk = learn_on_the_job_perk
				add_perk = sanctioned_loopholes_perk
				add_perk = scholar_perk #studies histories and philosophy
				add_perk = stalwart_leader_perk
				add_perk = serve_the_crown_perk
				add_perk = strict_organization_perk
				add_perk = hard_rule_perk
				add_perk = firm_hand_perk
				add_perk = dreadful_perk
			}
			if = {
				limit = { has_game_rule = asoiaf_canon_children_dragon_bonding_rule_on }
				if = {
					limit = {
						character:dragon_vhagar ?= {
							is_alive = yes
							agot_has_relationship_dragon = no #hasn't already bonded with another rider
						}
						agot_has_relationship_dragon = no #not already bonded to another dragon
					}
					agot_bond_dragon_relation_effect = {
						ACTOR = scope:child
						DRAGON = character:dragon_vhagar
					}
					send_interface_toast = {
						title = bond_dragon_notification
						left_icon = scope:child
						right_icon = character:dragon_vhagar
						start_scheme = {
							type = bond_with_dragon_scheme
							target = character:dragon_vhagar
						}
					}
				}
			}
		}
	}
	hidden_effect = {
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:father = { trigger_event = birth.1003 } #regular
		scope:child = { #set friendship with Criston Cole if he's available
			dynasty:dynn_Cole = {
				every_dynasty_member = {
					limit = {
						has_inactive_trait = asoiaf_Cole_11_trait #Criston Cole (the Kingmaker)
						has_trait = kingsguard
					}
					save_scope_as = asoiaf_criston_cole
				}
			}
			scope:asoiaf_criston_cole = {
				set_relation_friend = { reason = asoiaf_criston_aemond_friend_desc target = scope:child } #Cole takes on a father figure to Alicent's children
			}
			dynasty:dynn_Targaryen = {
				every_dynasty_member = {
					limit = {
						has_inactive_trait = asoiaf_Targaryen_65_trait #Aegon II Targaryen
						is_alive = yes
					}
					save_scope_as = asoiaf_aegon_II
				}
			}
			set_relation_grudge = { reason = asoiaf_aemond_aegon_grudge_desc target = scope:asoiaf_aegon_II }
			#if = { #can't have both a bully relation and a grudge relation, so I'm going with grudge as it's more meaningful
			#	limit = {
			#		scope:asoiaf_aegon_II = { age < 16 }
			#	}
			#	set_relation_bully = scope:asoiaf_aegon_II
			#}
		}
	}
}

asoiaf_canon_children_Targaryen_68_birth_effect = { #Daeron Targaryen (son of Viserys I)
	create_character = {
		age = 0
		name = "Daeron"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = male
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Targaryen_68_born_variable
			make_trait_inactive = asoiaf_Targaryen_68_trait
			add_character_modifier = asoiaf_Targaryen_68_modifier
			copy_inheritable_appearance_from = character:Targaryen_asoiaf_68
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = neutral_silver_hair
			make_trait_inactive = purple_eyes_5
			learn_language = language_common

			set_sexuality = heterosexual
			add_martial_skill = 7
			add_diplomacy_skill = 7
			add_intrigue_skill = 4
			add_stewardship_skill = 4
			add_learning_skill = 7
			add_prowess_skill = 5
			add_trait = beauty_good_2
			add_trait = intellect_good_1

			if = {
				limit = { has_game_rule = asoiaf_canon_children_rule_on_traits }
				add_trait = brave
				add_trait = humble
				add_trait = gregarious
				add_trait = compassionate
				add_trait = poet #good with his lute
				add_trait = education_martial_prowess_3
				
				set_focus = education_martial
			}
			if = {
				limit = { has_game_rule = asoiaf_canon_children_dragon_bonding_rule_on }
				if = {
					limit = {
						character:dragon_tessarion ?= {
							is_alive = yes
							agot_has_relationship_dragon = no #hasn't already bonded with another rider
						}
						agot_has_relationship_dragon = no #not already bonded to another dragon
					}
					agot_bond_dragon_relation_effect = {
						ACTOR = scope:child
						DRAGON = character:dragon_tessarion
					}
					send_interface_toast = {
						title = bond_dragon_notification
						left_icon = scope:child
						right_icon = character:dragon_tessarion
						start_scheme = {
							type = bond_with_dragon_scheme
							target = character:dragon_tessarion
						}
					}
				}
			}
		}
	}
	hidden_effect = {
		scope:mother = {
			if = {
				limit = { has_game_rule = asoiaf_canon_children_pregnancy_negation_rule_on }
				add_character_modifier = asoiaf_canon_children_pregnancy_negation_modifier
			}
		}
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:father = { trigger_event = birth.1003 } #regular
	}
}

asoiaf_canon_children_Targaryen_69_birth_effect = { #Baela Targaryen (daughter of Daemon)
	create_character = {
		age = 0
		name = "Baela"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = female
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Targaryen_69_born_variable
			make_trait_inactive = asoiaf_Targaryen_69_trait
			add_character_modifier = asoiaf_Targaryen_69_modifier
			copy_inheritable_appearance_from = character:Targaryen_asoiaf_69
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = cool_neutral_silver_hair
			make_trait_inactive = purple_eyes_5
			learn_language = language_common

			set_sexuality = heterosexual
			add_martial_skill = 4
			add_diplomacy_skill = 4
			add_intrigue_skill = 4
			add_stewardship_skill = 4
			add_learning_skill = 4
			add_trait = beauty_good_1

			if = {
				limit = { has_game_rule = asoiaf_canon_children_rule_on_traits }
				add_trait = brave
				add_trait = authoritative
				add_trait = impatient
				
				set_focus = education_martial
			}
			if = {
				limit = { has_game_rule = asoiaf_canon_children_dragon_bonding_rule_on }
				if = {
					limit = {
						character:dragon_moondancer ?= {
							is_alive = yes
							agot_has_relationship_dragon = no #hasn't already bonded with another rider
						}
						agot_has_relationship_dragon = no #not already bonded to another dragon
					}
					agot_bond_dragon_relation_effect = {
						ACTOR = scope:child
						DRAGON = character:dragon_moondancer
					}
					send_interface_toast = {
						title = bond_dragon_notification
						left_icon = scope:child
						right_icon = character:dragon_moondancer
						start_scheme = {
							type = bond_with_dragon_scheme
							target = character:dragon_moondancer
						}
					}
				}
			}
		}
	}
	hidden_effect = {
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:father = { trigger_event = birth.1003 } #regular
		scope:child = { trigger_event = agot_dragon_egg_cradling.2010 }
	}
}

asoiaf_canon_children_Targaryen_70_birth_effect = { #Rhaena Targaryen (daughter of Daemon)
	create_character = {
		age = 0
		name = "Rhaena"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = female
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Targaryen_70_born_variable
			make_trait_inactive = asoiaf_Targaryen_70_trait
			add_character_modifier = asoiaf_Targaryen_70_modifier
			copy_inheritable_appearance_from = character:Targaryen_asoiaf_70
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = cool_neutral_silver_hair
			make_trait_inactive = purple_eyes_5
			learn_language = language_common

			set_sexuality = heterosexual
			add_martial_skill = 4
			add_diplomacy_skill = 4
			add_intrigue_skill = 4
			add_stewardship_skill = 4
			add_learning_skill = 4
			add_trait = beauty_good_2

			if = {
				limit = { has_game_rule = asoiaf_canon_children_rule_on_traits }
				add_trait = compassionate
				add_trait = patient
				add_trait = generous
				add_trait = forgiving
				
				set_focus = education_diplomacy
			}
			if = {
				limit = { has_game_rule = asoiaf_canon_children_dragon_bonding_rule_on }
				if = {
					limit = {
						character:dragon_morning ?= {
							is_alive = yes
							agot_has_relationship_dragon = no #hasn't already bonded with another rider
						}
						agot_has_relationship_dragon = no #not already bonded to another dragon
					}
					agot_bond_dragon_relation_effect = {
						ACTOR = scope:child
						DRAGON = character:dragon_morning
					}
					send_interface_toast = {
						title = bond_dragon_notification
						left_icon = scope:child
						right_icon = character:dragon_morning
						start_scheme = {
							type = bond_with_dragon_scheme
							target = character:dragon_morning
						}
					}
				}
			}
		}
	}
	hidden_effect = {
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:father = { trigger_event = birth.1003 } #regular
		scope:child = { trigger_event = agot_dragon_egg_cradling.2010 }
	}
}

asoiaf_canon_children_Targaryen_61_1_birth_effect = { #Laena's Third Child; Aerion Targaryen (son of Daemon)
	create_character = {
		age = 0
		name = "Aerion"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = male
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Targaryen_61_1_born_variable
			make_trait_inactive = asoiaf_Targaryen_61_1_trait
			add_character_modifier = asoiaf_Targaryen_61_1_modifier
			copy_inheritable_appearance_from = character:Targaryen_asoiaf_61_1
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = neutral_silver_hair
			make_trait_inactive = purple_eyes_5
			learn_language = language_common

			if = { #Laena is NOT dragonrider, so Aerion just dies during delivery
				limit = {
					asoiaf_historical_trigger = yes
					scope:mother = { is_current_dragonrider = no }
				}
				death = { death_reason = death_delivery }
			}
			if = { #Laena IS dragonrider, so Aerion burns along with Laena
				limit = {
					asoiaf_historical_trigger = yes
					scope:mother = { is_current_dragonrider = yes }
				}
				death = { death_reason = death_dragon_fire } #could put Laena as killer, but that might be a step too far; his death was indirect
			}
		}
	}
	hidden_effect = {
		scope:mother = {
			if = {
				limit = { has_game_rule = asoiaf_canon_children_pregnancy_negation_rule_on }
				add_character_modifier = asoiaf_canon_children_pregnancy_negation_modifier
			}
			if = { #Laena is NOT dragonrider, so kills herself
				limit = {
					asoiaf_historical_trigger = yes
					is_current_dragonrider = no
				}
				death = { death_reason = death_suicide }
			}
			if = { #Laena IS dragonrider, so commands her dragon to burn her
				limit = {
					asoiaf_historical_trigger = yes
					is_current_dragonrider = yes
				}
				#death = {
				#	death_reason = death_dragon_fire
				#	killer = scope:mother #displays as Laena incinerating herself rather than her dragon
				#}
				execute_dragon_prisoner_effect = {
					VICTIM = scope:mother
					EXECUTIONER = scope:mother #gives her the kinslayer trait for killing herself
					REASON = death_dragon_fire
				}
				remove_trait = kinslayer_3 #try to remove that kinslayer trait if possible
			}
		}
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:father = { trigger_event = birth.1003 } #regular
	}
}

asoiaf_canon_children_Targaryen_71_and_72_birth_effect = { #Jaehaera & Jaehaerys Targaryen (children of Aegon II)
	create_character = {
		age = 0
		name = "Jaehaera"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = female
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer

		random_traits = no

		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Targaryen_71_born_variable
			make_trait_inactive = asoiaf_Targaryen_71_trait
			add_character_modifier = asoiaf_Targaryen_71_modifier
			copy_inheritable_appearance_from = character:Targaryen_asoiaf_71
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = cool_neutral_silver_hair
			make_trait_inactive = purple_eyes_5
			learn_language = language_common
			
			add_martial_skill = 4
			add_diplomacy_skill = 4
			add_intrigue_skill = 4
			add_stewardship_skill = 4
			add_learning_skill = 4
			add_trait = twin
			add_trait = beauty_good_2
			add_trait = pensive
			
			if = {
				limit = { has_game_rule = asoiaf_canon_children_rule_on_traits }
				add_trait = content
				add_trait = shy
				add_trait = eccentric
				add_trait = depressed_genetic
				
				set_focus = education_learning
			}
		}
	}
	create_character = {
		age = 0
		name = "Jaehaerys"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = male
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer

		random_traits = no

		save_scope_as = child_2
		after_creation = {
			change_age = -1 #to guarantee he'll be the youngest
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Targaryen_72_born_variable
			make_trait_inactive = asoiaf_Targaryen_72_trait
			add_character_modifier = asoiaf_Targaryen_72_modifier
			copy_inheritable_appearance_from = character:Targaryen_asoiaf_72
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = cool_neutral_silver_hair
			make_trait_inactive = purple_eyes_5
			learn_language = language_common
			
			add_martial_skill = 4
			add_diplomacy_skill = 4
			add_intrigue_skill = 4
			add_stewardship_skill = 4
			add_learning_skill = 4
			add_trait = twin
			add_trait = the_mark #to represent 6 fingers/toes until a proper trait is made
			add_trait = pensive
			
			if = {
				limit = { has_game_rule = asoiaf_canon_children_rule_on_traits }
				add_trait = impatient
				add_trait = content
				
				set_focus = education_learning
			}
		}
	}
	hidden_effect = {
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:father = { trigger_event = birth.1003 } #regular
	}
}

asoiaf_canon_children_Targaryen_73_birth_effect = { #Maelor Targaryen (son of Aegon II)
	create_character = {
		age = 0
		name = "Maelor"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = male
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Targaryen_73_born_variable
			make_trait_inactive = asoiaf_Targaryen_73_trait
			add_character_modifier = asoiaf_Targaryen_73_modifier
			copy_inheritable_appearance_from = character:Targaryen_asoiaf_73
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = cool_neutral_silver_hair
			make_trait_inactive = purple_eyes_5
			learn_language = language_common

			add_martial_skill = 4
			add_diplomacy_skill = 4
			add_intrigue_skill = 4
			add_stewardship_skill = 4
			add_learning_skill = 4
		}
	}
	hidden_effect = {
		scope:mother = {
			if = {
				limit = { has_game_rule = asoiaf_canon_children_pregnancy_negation_rule_on }
				add_character_modifier = asoiaf_canon_children_pregnancy_negation_modifier
			}
		}
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:father = { trigger_event = birth.1003 } #regular
	}
}

asoiaf_canon_children_Targaryen_75_birth_effect = { #Jacaerys Velaryon (son of Rhaenyra)
	create_character = {
		age = 0
		name = "Jacaerys"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = male
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Targaryen_75_born_variable
			make_trait_inactive = asoiaf_Targaryen_75_trait
			add_character_modifier = asoiaf_Targaryen_75_modifier
			copy_inheritable_appearance_from = character:Targaryen_asoiaf_75
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = dark_brown_hair
			learn_language = language_common

			set_sexuality = heterosexual
			add_martial_skill = 5
			add_diplomacy_skill = 5
			add_intrigue_skill = 5
			add_stewardship_skill = 5
			add_learning_skill = 5
			add_prowess_skill = 5
			add_trait = intellect_good_1
			add_trait = beauty_good_3
			add_trait = bossy
			
			if = {
				limit = { NOT = { scope:real_father = scope:father } } #he's a secret bastard
				add_trait = disputed_heritage
			}
			if = {
				limit = {
					scope:mother = { has_character_flag = pregnancy_real_father_of_bastard_is_known_flag }
				}
				set_house = scope:real_father.house
				set_father = scope:real_father
				remove_trait = disputed_heritage
				add_trait = bastard
				agot_add_custom_bastard_nickname_effect = yes
				set_culture = scope:real_father.culture
				set_character_faith = scope:real_father.faith
			}
			if = {
				limit = { has_game_rule = asoiaf_canon_children_rule_on_traits }
				add_trait = diligent
				add_trait = just #honorable
				add_trait = brave
				add_trait = gregarious
				
				set_focus = education_martial
			}
			if = {
				limit = { has_game_rule = asoiaf_canon_children_dragon_bonding_rule_on }
				if = {
					limit = {
						character:dragon_vermax ?= {
							is_alive = yes
							agot_has_relationship_dragon = no #hasn't already bonded with another rider
						}
						agot_has_relationship_dragon = no #not already bonded to another dragon
					}
					agot_bond_dragon_relation_effect = {
						ACTOR = scope:child
						DRAGON = character:dragon_vermax
					}
					send_interface_toast = {
						title = bond_dragon_notification
						left_icon = scope:child
						right_icon = character:dragon_vermax
						start_scheme = {
							type = bond_with_dragon_scheme
							target = character:dragon_vermax
						}
					}
				}
			}
		}
	}
	hidden_effect = {
		scope:mother = {
			if = {
				limit = { asoiaf_canon_children_Targaryen_63_personality_change_trigger = yes }
			}
			asoiaf_canon_children_Targaryen_63_personality_change_effect = yes
		}
		if = {
			limit = {
				scope:child = {
					scope:father = scope:real_father
				}
			}
			scope:mother = { trigger_event = birth.1001 } #regular
		}
		scope:child = { trigger_event = agot_dragon_egg_cradling.2010 }
		if = {
			limit = {
				NOT = { scope:mother = { has_character_flag = pregnancy_spouse_knows_of_bastardy } } #husband doesn't know
				NOT = { scope:mother = { has_character_flag = pregnancy_real_father_of_bastard_is_known_flag } } #it's not been exposed to the public
			}
			scope:father = { trigger_event = birth.1003 } #regular
		}
		#BASTARD SECRET STUFF
		if = {
			limit = {
				scope:child = {
					NOT = { scope:father = scope:real_father }
				}
			}
			scope:mother = { trigger_event = birth.1002 } #secret bastard
			scope:mother = {
				add_secret = {
					type = secret_disputed_heritage
					target = scope:child
				}
				random_secret = { #Scope the secret
					limit = {
						secret_type = secret_disputed_heritage
						secret_target = scope:child
					}
					save_scope_as = new_secret
				}
				if = {
					limit = { #if Laenor knows, he'll get the secret too
						has_character_flag = pregnancy_spouse_knows_of_bastardy
						NOT = { has_character_flag = pregnancy_real_father_of_bastard_is_known_flag } #if the bastardy is revealed to the public, the birth is no longer Laenor's concern, so no event for him
					}
					scope:father = { add_to_list = illegitimacy_secret_knowers }
				}
			}
			scope:real_father = {
				if = {
					limit = { has_inactive_trait = asoiaf_Strong_30_trait } #Harwin always knows since Rhaenyra tells him
				}
				add_to_list = illegitimacy_secret_knowers
			}
			every_in_list = {
				list = illegitimacy_secret_knowers
				#A secret bastard is born - Share the news with everyone who knew that it was a bastard
				trigger_event = secret_bastard.0001
			}
		}
	}
}

asoiaf_canon_children_Targaryen_76_birth_effect = { #Lucerys Velaryon (son of Rhaenyra)
	create_character = {
		age = 0
		name = "Lucerys"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = male
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Targaryen_76_born_variable
			make_trait_inactive = asoiaf_Targaryen_76_trait
			add_character_modifier = asoiaf_Targaryen_76_modifier
			copy_inheritable_appearance_from = character:Targaryen_asoiaf_76
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = dark_brown_hair
			learn_language = language_common

			set_sexuality = heterosexual
			add_martial_skill = 5
			add_diplomacy_skill = 2
			add_intrigue_skill = 5
			add_stewardship_skill = 5
			add_learning_skill = 5
			add_trait = beauty_good_1
			add_trait = bossy
			
			if = {
				limit = { NOT = { scope:real_father = scope:father } } #he's a secret bastard
				add_trait = disputed_heritage
			}
			if = {
				limit = {
					scope:mother = { has_character_flag = pregnancy_real_father_of_bastard_is_known_flag }
				}
				set_house = scope:real_father.house
				set_father = scope:real_father
				remove_trait = disputed_heritage
				add_trait = bastard
				agot_add_custom_bastard_nickname_effect = yes
				set_culture = scope:real_father.culture
				set_character_faith = scope:real_father.faith
			}
			if = {
				limit = { has_game_rule = asoiaf_canon_children_rule_on_traits }
				add_trait = diligent
				add_trait = trusting
				add_trait = compassionate
				add_trait = humble
				
				set_focus = education_stewardship
			}
			if = {
				limit = { has_game_rule = asoiaf_canon_children_dragon_bonding_rule_on }
				if = {
					limit = {
						character:dragon_arrax ?= {
							is_alive = yes
							agot_has_relationship_dragon = no #hasn't already bonded with another rider
						}
						agot_has_relationship_dragon = no #not already bonded to another dragon
					}
					agot_bond_dragon_relation_effect = {
						ACTOR = scope:child
						DRAGON = character:dragon_arrax
					}
					send_interface_toast = {
						title = bond_dragon_notification
						left_icon = scope:child
						right_icon = character:dragon_arrax
						start_scheme = {
							type = bond_with_dragon_scheme
							target = character:dragon_arrax
						}
					}
				}
			}
		}
	}
	hidden_effect = {
		if = {
			limit = {
				scope:child = {
					scope:father = scope:real_father
				}
			}
			scope:mother = { trigger_event = birth.1001 } #regular
		}
		scope:child = { trigger_event = agot_dragon_egg_cradling.2010 }
		if = {
			limit = {
				NOT = { scope:mother = { has_character_flag = pregnancy_spouse_knows_of_bastardy } } #husband doesn't know
				NOT = { scope:mother = { has_character_flag = pregnancy_real_father_of_bastard_is_known_flag } } #it's not been exposed to the public
			}
			scope:father = { trigger_event = birth.1003 } #regular
		}
		#BASTARD SECRET STUFF
		if = {
			limit = {
				scope:child = {
					NOT = { scope:father = scope:real_father }
				}
			}
			scope:mother = { trigger_event = birth.1002 } #secret bastard
			scope:mother = {
				add_secret = {
					type = secret_disputed_heritage
					target = scope:child
				}
				random_secret = { #Scope the secret
					limit = {
						secret_type = secret_disputed_heritage
						secret_target = scope:child
					}
					save_scope_as = new_secret
				}
				if = {
					limit = { #if Laenor knows, he'll get the secret too
						has_character_flag = pregnancy_spouse_knows_of_bastardy
						NOT = { has_character_flag = pregnancy_real_father_of_bastard_is_known_flag } #if the bastardy is revealed to the public, the birth is no longer Laenor's concern, so no event for him
					}
					scope:father = { add_to_list = illegitimacy_secret_knowers }
				}
			}
			scope:real_father = {
				if = {
					limit = { has_inactive_trait = asoiaf_Strong_30_trait } #Harwin always knows since Rhaenyra tells him
				}
				add_to_list = illegitimacy_secret_knowers
			}
			every_in_list = {
				list = illegitimacy_secret_knowers
				#A secret bastard is born - Share the news with everyone who knew that it was a bastard
				trigger_event = secret_bastard.0001
			}
		}
	}
}

asoiaf_canon_children_Targaryen_77_birth_effect = { #Joffrey Velaryon (son of Rhaenyra)
	create_character = {
		age = 0
		name = "Joffrey"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = male
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Targaryen_77_born_variable
			make_trait_inactive = asoiaf_Targaryen_77_trait
			add_character_modifier = asoiaf_Targaryen_77_modifier
			copy_inheritable_appearance_from = character:Targaryen_asoiaf_77
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = dark_brown_hair
			learn_language = language_common

			set_sexuality = heterosexual
			add_martial_skill = 3
			add_diplomacy_skill = 3
			add_intrigue_skill = 3
			add_stewardship_skill = 3
			add_learning_skill = 3
			add_trait = rowdy
			
			if = {
				limit = { NOT = { scope:real_father = scope:father } } #he's a secret bastard
				add_trait = disputed_heritage
			}
			if = {
				limit = {
					scope:mother = { has_character_flag = pregnancy_real_father_of_bastard_is_known_flag }
				}
				set_house = scope:real_father.house
				set_father = scope:real_father
				remove_trait = disputed_heritage
				add_trait = bastard
				agot_add_custom_bastard_nickname_effect = yes
				set_culture = scope:real_father.culture
				set_character_faith = scope:real_father.faith
			}
			if = {
				limit = { has_game_rule = asoiaf_canon_children_rule_on_traits }
				add_trait = brave
				add_trait = impatient
				add_trait = ambitious
				add_trait = stubborn
				
				set_focus = education_martial
			}
			if = {
				limit = { has_game_rule = asoiaf_canon_children_dragon_bonding_rule_on }
				if = {
					limit = {
						character:dragon_tyraxes ?= {
							is_alive = yes
							agot_has_relationship_dragon = no #hasn't already bonded with another rider
						}
						agot_has_relationship_dragon = no #not already bonded to another dragon
					}
					agot_bond_dragon_relation_effect = {
						ACTOR = scope:child
						DRAGON = character:dragon_tyraxes
					}
					send_interface_toast = {
						title = bond_dragon_notification
						left_icon = scope:child
						right_icon = character:dragon_tyraxes
						start_scheme = {
							type = bond_with_dragon_scheme
							target = character:dragon_tyraxes
						}
					}
				}
			}
		}
	}
	hidden_effect = {
		scope:mother = {
			if = {
				limit = { #if she's married to someone who is NOT a Targaryen (i.e., she'd be ineligible to have her Targaryen canon children), add the modifier to her
					has_game_rule = asoiaf_canon_children_pregnancy_negation_rule_on
					NOT = { any_spouse.house ?= character:Targaryen_13.house }
				}
				add_character_modifier = asoiaf_canon_children_pregnancy_negation_modifier
			}
		}
		if = {
			limit = {
				scope:child = {
					scope:father = scope:real_father
				}
			}
			scope:mother = { trigger_event = birth.1001 } #regular
		}
		scope:child = { trigger_event = agot_dragon_egg_cradling.2010 }
		if = {
			limit = {
				NOT = { scope:mother = { has_character_flag = pregnancy_spouse_knows_of_bastardy } } #husband doesn't know
				NOT = { scope:mother = { has_character_flag = pregnancy_real_father_of_bastard_is_known_flag } } #it's not been exposed to the public
			}
			scope:father = { trigger_event = birth.1003 } #regular
		}
		#BASTARD SECRET STUFF
		if = {
			limit = {
				scope:child = {
					NOT = { scope:father = scope:real_father }
				}
			}
			scope:mother = { trigger_event = birth.1002 } #secret bastard
			scope:mother = {
				add_secret = {
					type = secret_disputed_heritage
					target = scope:child
				}
				random_secret = { #Scope the secret
					limit = {
						secret_type = secret_disputed_heritage
						secret_target = scope:child
					}
					save_scope_as = new_secret
				}
				if = {
					limit = { #if Laenor knows, he'll get the secret too
						has_character_flag = pregnancy_spouse_knows_of_bastardy
						NOT = { has_character_flag = pregnancy_real_father_of_bastard_is_known_flag } #if the bastardy is revealed to the public, the birth is no longer Laenor's concern, so no event for him
					}
					scope:father = { add_to_list = illegitimacy_secret_knowers }
				}
			}
			scope:real_father = {
				if = {
					limit = { has_inactive_trait = asoiaf_Strong_30_trait } #Harwin always knows since Rhaenyra tells him
				}
				add_to_list = illegitimacy_secret_knowers
			}
			every_in_list = {
				list = illegitimacy_secret_knowers
				#A secret bastard is born - Share the news with everyone who knew that it was a bastard
				trigger_event = secret_bastard.0001
			}
		}
	}
}

asoiaf_canon_children_Targaryen_78_birth_effect = { #Aegon III Targaryen
	create_character = {
		age = 0
		name = "Aegon"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = male
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Targaryen_78_born_variable
			make_trait_inactive = asoiaf_Targaryen_78_trait
			add_character_modifier = asoiaf_Targaryen_78_modifier
			copy_inheritable_appearance_from = character:Targaryen_asoiaf_78
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = cool_silver_hair
			make_trait_inactive = purple_eyes_5
			learn_language = language_common

			set_sexuality = heterosexual
			add_martial_skill = 5
			add_diplomacy_skill = 3
			add_intrigue_skill = 3
			add_stewardship_skill = 7
			add_learning_skill = 5
			add_trait = beauty_good_1
			add_trait = pensive
			
			if = {
				limit = { has_game_rule = asoiaf_canon_children_rule_on_traits }
				add_trait = chaste
				add_trait = shy
				add_trait = temperate
				add_trait = calm #mentions of dragons sent him into a grief-striken rage, but we can assume being rageful isn't part of his personality and is instead a stress response to trauma
				
				set_focus = education_diplomacy
			}
			if = {
				limit = { has_game_rule = asoiaf_canon_children_dragon_bonding_rule_on }
				if = {
					limit = {
						character:dragon_stormcloud ?= {
							is_alive = yes
							agot_has_relationship_dragon = no #hasn't already bonded with another rider
						}
						agot_has_relationship_dragon = no #not already bonded to another dragon
					}
					agot_bond_dragon_relation_effect = {
						ACTOR = scope:child
						DRAGON = character:dragon_stormcloud
					}
					send_interface_toast = {
						title = bond_dragon_notification
						left_icon = scope:child
						right_icon = character:dragon_stormcloud
						start_scheme = {
							type = bond_with_dragon_scheme
							target = character:dragon_stormcloud
						}
					}
				}
			}
		}
	}
	hidden_effect = {
		scope:mother = {
			if = {
				limit = { asoiaf_canon_children_Targaryen_63_personality_change_trigger = yes }
			}
			asoiaf_canon_children_Targaryen_63_personality_change_effect = yes
		}
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:father = { trigger_event = birth.1003 } #regular
		scope:child = { trigger_event = agot_dragon_egg_cradling.2010 }
	}
}

asoiaf_canon_children_Targaryen_79_birth_effect = { #Viserys II Targaryen
	create_character = {
		age = 0
		name = "Viserys"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = male
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Targaryen_79_born_variable
			make_trait_inactive = asoiaf_Targaryen_79_trait
			add_character_modifier = asoiaf_Targaryen_79_modifier
			copy_inheritable_appearance_from = character:Targaryen_asoiaf_79
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = neutral_silver_hair
			make_trait_inactive = purple_eyes_5
			learn_language = language_common

			set_sexuality = heterosexual
			add_martial_skill = 4
			add_diplomacy_skill = 9
			add_intrigue_skill = 11
			add_stewardship_skill = 14
			add_learning_skill = 5
			add_prowess_skill = 5
			add_trait = intellect_good_3
			
			if = {
				limit = { has_game_rule = asoiaf_canon_children_rule_on_traits }
				add_trait = diligent
				add_trait = patient
				add_trait = gregarious
				add_trait = authoritative
				add_trait = education_martial_prowess_3
				
				set_focus = education_stewardship
				add_perk = meritocracy_perk
				add_perk = chains_of_loyalty_perk
				add_perk = likable_perk
				add_perk = positions_of_power_perk
				add_perk = large_levies_perk
				add_perk = soon_forgiven_perk
				add_perk = toe_the_line_perk
				add_perk = honored_to_serve_perk
				add_perk = administrator_perk
			}
		}
	}
	hidden_effect = {
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:father = { trigger_event = birth.1003 } #regular
	}
}

asoiaf_canon_children_Targaryen_80_birth_effect = { #Visenya Targaryen (daughter of Rhaenyra)
	create_character = {
		age = 0
		name = "Visenya"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = female
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Targaryen_80_born_variable
			make_trait_inactive = asoiaf_Targaryen_80_trait
			add_character_modifier = asoiaf_Targaryen_80_modifier
			copy_inheritable_appearance_from = character:Targaryen_asoiaf_80
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = cool_neutral_silver_hair
			make_trait_inactive = purple_eyes_5
			learn_language = language_common

			add_trait = inbred
			add_trait = scaly
			add_trait = sickly
			
			if = {
				limit = { asoiaf_historical_trigger = yes }
				death = { death_reason = death_sickly }
			}
		}
	}
	hidden_effect = {
		scope:mother = {
			if = {
				limit = {
					has_game_rule = asoiaf_canon_children_pregnancy_negation_rule_on
					NOT = {
						any_spouse = { #if her husband is Aegon II, then she doesn't get the modifier so she can have HIS canon children after Visenya
							has_inactive_trait = asoiaf_Targaryen_65_trait #Aegon II Targaryen
						}
					}
				}
				add_character_modifier = asoiaf_canon_children_pregnancy_negation_modifier
			}
		}
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:father = { trigger_event = birth.1003 } #regular
	}
}

asoiaf_canon_children_Targaryen_81_birth_effect = { #Daeron I Targaryen
	create_character = {
		age = 0
		name = "Daeron"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = male
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Targaryen_81_born_variable
			make_trait_inactive = asoiaf_Targaryen_81_trait
			add_character_modifier = asoiaf_Targaryen_81_modifier
			copy_inheritable_appearance_from = character:Targaryen_asoiaf_81
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = neutral_silver_hair
			make_trait_inactive = purple_eyes_5
			learn_language = language_common

			set_sexuality = heterosexual
			add_martial_skill = 7
			add_diplomacy_skill = 2
			add_intrigue_skill = 2
			add_stewardship_skill = 3
			add_learning_skill = 7
			add_prowess_skill = 5
			add_trait = beauty_good_2
			
			if = {
				limit = { has_game_rule = asoiaf_canon_children_rule_on_traits }
				add_trait = brave
				add_trait = ambitious
				add_trait = gregarious
				add_trait = authoritative
				add_trait = athletic
				add_trait = poet
				add_trait = aggressive_attacker
				add_trait = organizer
				add_trait = education_martial_prowess_3
				
				set_focus = education_martial
				add_perk = bellum_justum_perk
				add_perk = parthian_tactics_perk
				add_perk = envelopment_perk
				add_perk = organized_retreat_perk
				add_perk = hit_and_run_perk
				add_perk = engineered_for_destruction_perk
				add_perk = living_off_the_land_perk
				add_perk = sappers_perk
				add_perk = strategist_perk
			}
		}
	}
	hidden_effect = {
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:father = { trigger_event = birth.1003 } #regular
	}
}

asoiaf_canon_children_Targaryen_82_birth_effect = { #Baelor I Targaryen
	create_character = {
		age = 0
		name = "Baelor"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = male
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Targaryen_82_born_variable
			make_trait_inactive = asoiaf_Targaryen_82_trait
			add_character_modifier = asoiaf_Targaryen_82_modifier
			copy_inheritable_appearance_from = character:Targaryen_asoiaf_82
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = neutral_silver_hair
			make_trait_inactive = purple_eyes_5
			learn_language = language_common

			set_sexuality = heterosexual
			add_martial_skill = 2
			add_diplomacy_skill = 2
			add_intrigue_skill = 2
			add_stewardship_skill = 2
			add_learning_skill = 8
			add_trait = lunatic_genetic
			
			if = {
				limit = { has_game_rule = asoiaf_canon_children_rule_on_traits }
				add_trait = zealous
				add_trait = chaste
				add_trait = humble
				add_trait = temperate
				add_trait = improvident
				add_trait = lunatic_genetic
				add_trait = inappetetic
				add_trait = celibate
				
				set_focus = education_learning
				add_perk = anatomical_studies_perk
				add_perk = restraint_perk

				add_perk = faithful_perk
				add_perk = zealous_proselytizer_perk
				add_perk = religious_icon_perk
				add_perk = prophet_perk
				add_perk = clerical_justifications_perk
				add_perk = church_and_state_perk
				add_perk = radiant_perk
				add_perk = defender_of_the_faith_perk
				add_perk = theologian_perk
			}
		}
	}
	hidden_effect = {
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:father = { trigger_event = birth.1003 } #regular
	}
}

asoiaf_canon_children_Targaryen_83_birth_effect = { #Daena Targaryen (daughter of Aegon III)
	create_character = {
		age = 0
		name = "Daena"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = female
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Targaryen_83_born_variable
			make_trait_inactive = asoiaf_Targaryen_83_trait
			add_character_modifier = asoiaf_Targaryen_83_modifier
			copy_inheritable_appearance_from = character:Targaryen_asoiaf_83
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = neutral_silver_hair
			make_trait_inactive = purple_eyes_5
			learn_language = language_common

			set_sexuality = heterosexual
			add_martial_skill = 9
			add_diplomacy_skill = 3
			add_intrigue_skill = 2
			add_stewardship_skill = 3
			add_learning_skill = 3
			add_prowess_skill = 5
			add_trait = beauty_good_3
			
			if = {
				limit = { has_game_rule = asoiaf_canon_children_rule_on_traits }
				add_trait = brave
				add_trait = stubborn
				add_trait = ambitious
				add_trait = strong
				add_trait = athletic
				add_trait = lifestyle_hunter

				set_focus = education_martial
			}
		}
	}
	hidden_effect = {
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:father = { trigger_event = birth.1003 } #regular
	}
}

asoiaf_canon_children_Targaryen_84_birth_effect = { #Rhaena Targaryen (daughter of Aegon III)
	create_character = {
		age = 0
		name = "Rhaena"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = female
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Targaryen_84_born_variable
			make_trait_inactive = asoiaf_Targaryen_84_trait
			add_character_modifier = asoiaf_Targaryen_84_modifier
			copy_inheritable_appearance_from = character:Targaryen_asoiaf_84
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = neutral_silver_hair
			make_trait_inactive = purple_eyes_5
			learn_language = language_common

			set_sexuality = heterosexual
			add_martial_skill = 1
			add_diplomacy_skill = 4
			add_intrigue_skill = 2
			add_stewardship_skill = 3
			add_learning_skill = 6
			add_trait = beauty_good_1
			
			if = {
				limit = { has_game_rule = asoiaf_canon_children_rule_on_traits }
				add_trait = zealous
				add_trait = humble
				add_trait = content
				add_trait = temperate

				set_focus = education_learning
			}
		}
	}
	hidden_effect = {
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:father = { trigger_event = birth.1003 } #regular
	}
}

asoiaf_canon_children_Targaryen_85_birth_effect = { #Elaena Targaryen (daughter of Aegon III)
	create_character = {
		age = 0
		name = "Elaena"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = female
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Targaryen_85_born_variable
			make_trait_inactive = asoiaf_Targaryen_85_trait
			add_character_modifier = asoiaf_Targaryen_85_modifier
			copy_inheritable_appearance_from = character:Targaryen_asoiaf_85
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = neutral_silver_hair
			make_trait_inactive = purple_eyes_5
			learn_language = language_common

			set_sexuality = heterosexual
			add_martial_skill = 3
			add_diplomacy_skill = 6
			add_intrigue_skill = 5
			add_stewardship_skill = 10
			add_learning_skill = 4
			add_trait = intellect_good_1
			
			if = {
				limit = { has_game_rule = asoiaf_canon_children_rule_on_traits }
				add_trait = stubborn
				add_trait = diligent
				add_trait = arrogant
				add_trait = shrewd

				set_focus = education_stewardship
			}
		}
	}
	hidden_effect = {
		scope:mother = {
			if = {
				limit = { has_game_rule = asoiaf_canon_children_pregnancy_negation_rule_on }
				add_character_modifier = asoiaf_canon_children_pregnancy_negation_modifier
			}
		}
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:father = { trigger_event = birth.1003 } #regular
	}
}

asoiaf_canon_children_Targaryen_88_birth_effect = { #Aegon IV Targaryen
	create_character = {
		age = 0
		name = "Aegon"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = male
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Targaryen_88_born_variable
			make_trait_inactive = asoiaf_Targaryen_88_trait
			add_character_modifier = asoiaf_Targaryen_88_modifier
			copy_inheritable_appearance_from = character:Targaryen_asoiaf_88
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = neutral_silver_hair
			make_trait_inactive = purple_eyes_5
			learn_language = language_common
			add_character_flag = { flag = no_drunkard_visual }

			set_sexuality = heterosexual
			add_martial_skill = 1
			add_diplomacy_skill = 6
			add_intrigue_skill = 2
			add_stewardship_skill = 1
			add_learning_skill = 3
			add_prowess_skill = 5
			add_trait = beauty_good_1
			add_trait = fecund
			
			if = {
				limit = { has_game_rule = asoiaf_canon_children_rule_on_traits }
				add_trait = gluttonous
				add_trait = lustful
				add_trait = gregarious
				add_trait = arbitrary
				add_trait = lifestyle_reveler
				add_trait = rakish
				add_trait = lifestyle_hunter

				set_focus = education_intrigue
				add_perk = like_weed_in_a_garden_perk
				add_perk = unshackled_lust_perk
				add_perk = subtle_desire_perk
				add_perk = mortal_adoration_perk
				add_perk = enticing_opportunity_perk
				add_perk = home_advantage_perk
				add_perk = graceful_recovery_perk
				add_perk = smooth_operator_perk
				add_perk = seducer_perk
			}
		}
	}
	hidden_effect = {
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:father = { trigger_event = birth.1003 } #regular
	}
}

asoiaf_canon_children_Targaryen_89_birth_effect = { #Aemon Targaryen (son of Viserys II)
	create_character = {
		age = 0
		name = "Aemon"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = male
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Targaryen_89_born_variable
			make_trait_inactive = asoiaf_Targaryen_89_trait
			add_character_modifier = asoiaf_Targaryen_89_modifier
			copy_inheritable_appearance_from = character:Targaryen_asoiaf_89
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = neutral_silver_hair
			make_trait_inactive = purple_eyes_5
			learn_language = language_common

			set_sexuality = heterosexual
			add_martial_skill = 10
			add_diplomacy_skill = 2
			add_intrigue_skill = 2
			add_stewardship_skill = 2
			add_learning_skill = 5
			add_prowess_skill = 10
			add_trait = beauty_good_2
			
			if = {
				limit = { has_game_rule = asoiaf_canon_children_rule_on_traits }
				add_trait = compassionate
				add_trait = just #honorable
				add_trait = chaste
				add_trait = brave
				add_trait = strong
				add_trait = loyal
				add_trait = education_martial_prowess_4 #tier 5 can't be given to children
				add_trait = lifestyle_blademaster
				add_trait_xp = {
					trait = lifestyle_blademaster
					value = 100
				}
				add_trait = tourney_participant
				add_trait_xp = {
					trait = tourney_participant
					track = horse
					value = 30
				}
				add_trait_xp = {
					trait = tourney_participant
					track = foot
					value = 30
				}

				set_focus = education_martial
				add_perk = stalwart_leader_perk
				add_perk = chivalric_dominance_perk
				add_perk = never_back_down_perk
				add_perk = kingsguard_perk
				add_perk = courtship_perk
				add_perk = promising_prospects_perk
				add_perk = loyalty_and_respect_perk
				add_perk = peacemaker_perk
				add_perk = gallant_perk
				add_character_modifier = training_for_kingsguard
			}
		}
	}
	hidden_effect = {
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:father = { trigger_event = birth.1003 } #regular
	}
}

asoiaf_canon_children_Targaryen_90_birth_effect = { #Naerys Targaryen (daughter of Viserys II)
	create_character = {
		age = 0
		name = "Naerys"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = female
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Targaryen_90_born_variable
			make_trait_inactive = asoiaf_Targaryen_90_trait
			add_character_modifier = asoiaf_Targaryen_90_modifier
			copy_inheritable_appearance_from = character:Targaryen_asoiaf_90
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = neutral_silver_hair
			make_trait_inactive = purple_eyes_5
			learn_language = language_common

			set_sexuality = heterosexual
			add_martial_skill = 2
			add_diplomacy_skill = 3
			add_intrigue_skill = 2
			add_stewardship_skill = 3
			add_learning_skill = 6
			add_trait = beauty_good_2
			add_trait = physique_bad_2
			
			if = {
				limit = { has_game_rule = asoiaf_canon_children_rule_on_traits }
				add_trait = zealous
				add_trait = humble
				add_trait = compassionate
				add_trait = temperate
				add_trait = poet

				set_focus = education_diplomacy
			}
		}
	}
	hidden_effect = {
		scope:mother = {
			if = {
				limit = { has_game_rule = asoiaf_canon_children_pregnancy_negation_rule_on }
				add_character_modifier = asoiaf_canon_children_pregnancy_negation_modifier
			}
		}
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:father = { trigger_event = birth.1003 } #regular
	}
}

asoiaf_canon_children_Targaryen_91_birth_effect = { #Daeron II Targaryen
	create_character = {
		age = 0
		name = "Daeron"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = male
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Targaryen_91_born_variable
			make_trait_inactive = asoiaf_Targaryen_91_trait
			add_character_modifier = asoiaf_Targaryen_91_modifier
			copy_inheritable_appearance_from = character:Targaryen_asoiaf_91
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = cool_neutral_silver_hair
			make_trait_inactive = purple_eyes_5
			learn_language = language_common
			
			set_sexuality = heterosexual
			add_martial_skill = 2
			add_diplomacy_skill = 7
			add_intrigue_skill = 3
			add_stewardship_skill = 5
			add_learning_skill = 6
			add_prowess_skill = 5
			add_trait = disputed_heritage
			
			if = {
				limit = { has_game_rule = asoiaf_canon_children_rule_on_traits }
				add_trait = generous
				add_trait = just
				add_trait = diligent
				add_trait = compassionate
				add_trait = disputed_heritage
				add_trait = education_martial_prowess_1

				set_focus = education_diplomacy
				add_perk = pedagogy_perk
				add_perk = open_minded_perk
				add_perk = apostate_perk
				add_perk = scientific_perk
				add_perk = planned_cultivation_perk
				add_perk = scholarly_circles_perk
				add_perk = learn_on_the_job_perk
				add_perk = sanctioned_loopholes_perk
				add_perk = scholar_perk
			}
		}
	}
	hidden_effect = {
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:father = { trigger_event = birth.1003 } #regular
	}
}

asoiaf_canon_children_Targaryen_134_birth_effect = { #Viserra Targaryen (daughter of Aegon IV)
	create_character = {
		age = 0
		name = "Viserra"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = female
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Targaryen_134_born_variable
			make_trait_inactive = asoiaf_Targaryen_134_trait
			add_character_modifier = asoiaf_Targaryen_134_modifier
			copy_inheritable_appearance_from = character:Targaryen_asoiaf_134
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = cool_neutral_silver_hair
			make_trait_inactive = purple_eyes_5
			learn_language = language_common
			
			add_trait = sickly

			if = {
				limit = { asoiaf_historical_trigger = yes }
				death = { death_reason = death_stillborn }
			}
		}
	}
	hidden_effect = {
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:father = { trigger_event = birth.1003 } #regular
	}
}

asoiaf_canon_children_Targaryen_132_and_133_birth_effect = { #Viserys & Baelon Targaryen (children of Aegon IV)
	create_character = {
		age = 0
		name = "Viserys"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = male
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer

		random_traits = no

		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Targaryen_132_born_variable
			make_trait_inactive = asoiaf_Targaryen_132_trait
			add_character_modifier = asoiaf_Targaryen_132_modifier
			copy_inheritable_appearance_from = character:Targaryen_asoiaf_132
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = cool_neutral_silver_hair
			make_trait_inactive = purple_eyes_5
			learn_language = language_common

			add_trait = twin
			add_trait = sickly
			
			if = {
				limit = { asoiaf_historical_trigger = yes }
				death = { death_reason = death_stillborn }
			}
		}
	}
	create_character = {
		age = 0
		name = "Baelon"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = male
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer

		random_traits = no

		save_scope_as = child_2
		after_creation = {
			change_age = -1 #to guarantee he'll be the youngest
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Targaryen_133_born_variable
			make_trait_inactive = asoiaf_Targaryen_133_trait
			add_character_modifier = asoiaf_Targaryen_133_modifier
			copy_inheritable_appearance_from = character:Targaryen_asoiaf_133
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = cool_neutral_silver_hair
			make_trait_inactive = purple_eyes_5
			learn_language = language_common

			add_trait = twin
			add_trait = sickly

			if = {
				limit = { asoiaf_historical_trigger = yes }
				death = { death_reason = death_stillborn }
			}
		}
	}
	hidden_effect = {
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:father = { trigger_event = birth.1003 } #regular
	}
}

asoiaf_canon_children_Targaryen_92_and_93_birth_effect = { #Daenerys & Aemond Targaryen (children of Aegon IV)
	create_character = {
		age = 0
		name = "Daenerys"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = female
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer

		random_traits = no

		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Targaryen_92_born_variable
			make_trait_inactive = asoiaf_Targaryen_92_trait
			add_character_modifier = asoiaf_Targaryen_92_modifier
			copy_inheritable_appearance_from = character:Targaryen_asoiaf_92
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = neutral_silver_hair
			make_trait_inactive = purple_eyes_5
			learn_language = language_common

			set_sexuality = heterosexual
			add_martial_skill = 3
			add_diplomacy_skill = 8
			add_intrigue_skill = 5
			add_stewardship_skill = 6
			add_learning_skill = 6
			add_trait = twin
			add_trait = beauty_good_2
			
			if = {
				limit = { has_game_rule = asoiaf_canon_children_rule_on_traits }
				add_trait = compassionate
				add_trait = temperate
				add_trait = generous
				add_trait = diligent
				add_trait = depressed_1
				
				set_focus = education_diplomacy
			}
		}
	}
	hidden_effect = {
		scope:child = { #make Daenerys and Daemon I have crushes on each other as children
			dynasty:dynn_Targaryen = {
				every_dynasty_member = {
					limit = { has_inactive_trait = asoiaf_Targaryen_94_trait } #Daemon I Blackfyre
					save_scope_as = asoiaf_daemon_I
				}
			}
			if = {
				limit = {
					scope:asoiaf_daemon_I = { age < 16 } #crush mechanic only works with children
				}
				set_relation_crush = { reason = test_crush_desc target = scope:asoiaf_daemon_I }
				scope:asoiaf_daemon_I = {
					set_relation_crush = { reason = test_crush_desc target = scope:child }
				}
			}
		}
	}
	create_character = {
		age = 0
		name = "Aemond"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = male
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer

		random_traits = no

		save_scope_as = child_2
		after_creation = {
			change_age = -1 #to guarantee he'll be the youngest
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Targaryen_93_born_variable
			make_trait_inactive = asoiaf_Targaryen_93_trait
			add_character_modifier = asoiaf_Targaryen_93_modifier
			copy_inheritable_appearance_from = character:Targaryen_asoiaf_93
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = neutral_silver_hair
			make_trait_inactive = purple_eyes_5
			learn_language = language_common

			add_trait = twin
			add_trait = sickly

			if = {
				limit = { asoiaf_historical_trigger = yes }
				death = { death_reason = death_stillborn }
			}
		}
	}
	hidden_effect = {
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:father = { trigger_event = birth.1003 } #regular
	}
}

asoiaf_canon_children_Targaryen_135_birth_effect = { #Haegon Targaryen (son of Aegon IV)
	create_character = {
		age = 0
		name = "Haegon"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = male
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Targaryen_135_born_variable
			make_trait_inactive = asoiaf_Targaryen_135_trait
			add_character_modifier = asoiaf_Targaryen_135_modifier
			copy_inheritable_appearance_from = character:Targaryen_asoiaf_135
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = cool_neutral_silver_hair
			make_trait_inactive = purple_eyes_5
			learn_language = language_common
			
			add_trait = sickly

			if = {
				limit = { asoiaf_historical_trigger = yes }
				death = { death_reason = death_stillborn }
			}
		}
	}
	hidden_effect = {
		scope:mother = {
			if = {
				limit = { has_game_rule = asoiaf_canon_children_pregnancy_negation_rule_on }
				add_character_modifier = asoiaf_canon_children_pregnancy_negation_modifier
			}
			if = {
				limit = { asoiaf_historical_trigger = yes }
				death = { death_reason = death_childbirth }
			}
		}
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:father = { trigger_event = birth.1003 } #regular
	}
}

asoiaf_canon_children_Targaryen_94_birth_effect = { #Daemon I Blackfyre
	create_character = {
		age = 0
		name = "Daemon"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = male
		faith = scope:real_father.faith
		culture = scope:real_father.culture
		dynasty_house = scope:mother.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Targaryen_94_born_variable
			make_trait_inactive = asoiaf_Targaryen_94_trait
			add_character_modifier = asoiaf_Targaryen_94_modifier
			copy_inheritable_appearance_from = character:Targaryen_asoiaf_94
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = neutral_silver_hair
			make_trait_inactive = purple_eyes_5
			learn_language = language_common

			set_sexuality = heterosexual
			add_martial_skill = 11
			add_diplomacy_skill = 4
			add_intrigue_skill = 2
			add_stewardship_skill = 5
			add_learning_skill = 7
			add_prowess_skill = 7
			add_trait = beauty_good_3
			add_trait = physique_good_1

			if = {
				limit = { has_game_rule = asoiaf_canon_children_rule_on_traits }
				add_trait = gregarious
				add_trait = brave
				add_trait = just #honorable
				add_trait = ambitious
				add_trait = strong
				add_trait = aggressive_attacker
				add_trait = lifestyle_blademaster
				add_trait_xp = {
					trait = lifestyle_blademaster
					value = 50
				}
				add_trait = education_martial_prowess_4
				add_trait = tourney_participant
				add_trait_xp = {
					trait = tourney_participant
					track = horse
					value = 70
				}
				add_trait_xp = {
					trait = tourney_participant
					track = foot
					value = 50
				}
				
				set_focus = education_martial
				add_perk = stalwart_leader_perk
				add_perk = chivalric_dominance_perk
				add_perk = never_back_down_perk
				add_perk = kingsguard_perk
				add_perk = courtship_perk
				add_perk = promising_prospects_perk
				add_perk = loyalty_and_respect_perk
				add_perk = peacemaker_perk
				add_perk = gallant_perk
			}
		}
	}
	hidden_effect = {
		scope:child = { #make Daemon and Daenerys have crushes on each other as children
			dynasty:dynn_Targaryen = {
				every_dynasty_member = {
					limit = { has_inactive_trait = asoiaf_Targaryen_92_trait } #Daenerys Targaryen (daughter of Aegon IV)
					save_scope_as = asoiaf_daenerys
				}
			}
			if = {
				limit = {
					scope:asoiaf_daenerys = { age < 16 } #crush mechanic only works with children
				}
				set_relation_crush = { reason = test_crush_desc target = scope:asoiaf_daenerys }
				scope:asoiaf_daenerys = {
					set_relation_crush = { reason = test_crush_desc target = scope:child }
				}
			}
		}
		scope:mother = {
			if = {
				limit = {
					is_married = no
					has_game_rule = asoiaf_canon_children_pregnancy_negation_rule_on
				}
				add_character_modifier = asoiaf_canon_children_pregnancy_negation_modifier
			}
			if = {
				limit = {
					is_married = yes
					any_spouse = { has_inactive_trait = asoiaf_Targaryen_88_trait } #spouse is Aegon IV
					has_game_rule = asoiaf_canon_children_pregnancy_negation_rule_on
				}
				add_character_modifier = asoiaf_canon_children_pregnancy_negation_modifier
			}
		}
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:mother = { trigger_event = birth.1002 } #secret bastard
		scope:father = { trigger_event = birth.1003 } #regular
		#BASTARD SECRET STUFF
		if = {
			limit = {
				scope:child = {
					NOT = { scope:father = scope:real_father }
				}
			}
			scope:mother = {
				add_secret = {
					type = secret_disputed_heritage
					target = scope:child
				}
				random_secret = { #Scope the secret
					limit = {
						secret_type = secret_disputed_heritage
						secret_target = scope:child
					}
					save_scope_as = new_secret
				}
				if = {
					limit = {
						has_character_flag = pregnancy_spouse_knows_of_bastardy
						NOT = { has_character_flag = pregnancy_real_father_of_bastard_is_known_flag }
					}
					scope:father = { add_to_list = illegitimacy_secret_knowers }
				}
			}
			scope:real_father = {
				if = {
					limit = { has_inactive_trait = asoiaf_Targaryen_88_trait } #Aegon always knows for the sake of simplicity
				}
				add_to_list = illegitimacy_secret_knowers
			}
			every_in_list = {
				list = illegitimacy_secret_knowers
				#A secret bastard is born - Share the news with everyone who knew that it was a bastard
				trigger_event = secret_bastard.0001
			}
		}
		scope:child = { #if he's a bastard, make him a Blackfyre + bastard founder; triggered AFTER the birth event to ensure proper localisation for it
			if = {
				limit = {
					NOT = { scope:real_father = { is_spouse_of_even_if_dead = scope:mother } } #mother isn't married to Aegon
				}
				set_house = house:house_Blackfyre
				add_trait = bastard_founder #bastard substitute since he's got his own House; replaced with legitimized_bastard on Aegon IV's death
				agot_add_custom_bastard_nickname_effect = yes
				set_father = scope:real_father #Aegon acknowledges him for the sake of gameplay simplicity
				if = {
					limit = {
						scope:real_father = { is_married = no }
					}
					scope:real_father = { add_trait = fornicator }
				}
			}
		}
	}
}

asoiaf_canon_children_Targaryen_107_birth_effect = { #Baelor Targaryen (son of Daeron II)
	create_character = {
		age = 0
		name = "Baelor"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = male
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Targaryen_107_born_variable
			make_trait_inactive = asoiaf_Targaryen_107_trait
			add_character_modifier = asoiaf_Targaryen_107_modifier
			copy_inheritable_appearance_from = character:Targaryen_asoiaf_107
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = dark_brown_hair
			make_trait_inactive = brown_eyes
			learn_language = language_common

			set_sexuality = heterosexual
			add_martial_skill = 5
			add_diplomacy_skill = 10
			add_intrigue_skill = 6
			add_stewardship_skill = 8
			add_learning_skill = 4
			add_prowess_skill = 10
			add_trait = bossy
			
			if = {
				limit = { has_game_rule = asoiaf_canon_children_rule_on_traits }
				add_trait = generous
				add_trait = compassionate
				add_trait = just
				add_trait = brave
				add_trait = aggressive_attacker
				add_trait = education_martial_prowess_4
				add_trait = lifestyle_blademaster
				
				set_focus = education_martial
				add_perk = befriend_perk
				add_perk = pedagogy_perk
				add_perk = open_minded_perk
			}
		}
	}
	hidden_effect = {
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:father = { trigger_event = birth.1003 } #regular
	}
}

asoiaf_canon_children_Targaryen_108_birth_effect = { #Aerys I Targaryen
	create_character = {
		age = 0
		name = "Aerys"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = male
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Targaryen_108_born_variable
			make_trait_inactive = asoiaf_Targaryen_108_trait
			add_character_modifier = asoiaf_Targaryen_108_modifier
			copy_inheritable_appearance_from = character:Targaryen_asoiaf_108
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = neutral_silver_hair
			make_trait_inactive = purple_eyes_5
			learn_language = language_common

			set_sexuality = asexual
			add_martial_skill = 2
			add_diplomacy_skill = 4
			add_intrigue_skill = 2
			add_stewardship_skill = 1
			add_learning_skill = 8
			add_prowess_skill = 3
			add_trait = physique_bad_2
			add_trait = pensive
			
			if = {
				limit = { has_game_rule = asoiaf_canon_children_rule_on_traits }
				add_trait = content
				add_trait = inquisitive
				add_trait = shy
				add_trait = forgiving
				add_trait = reclusive
				add_trait = celibate
				
				set_focus = education_learning
				add_perk = pedagogy_perk
				add_perk = open_minded_perk
				add_perk = apostate_perk
				add_perk = scientific_perk
				add_perk = planned_cultivation_perk
				add_perk = scholarly_circles_perk
				add_perk = learn_on_the_job_perk
				add_perk = sanctioned_loopholes_perk
				add_perk = scholar_perk
				add_perk = anatomical_studies_perk
				add_perk = restraint_perk
			}
		}
	}
	hidden_effect = {
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:father = { trigger_event = birth.1003 } #regular
	}
}

asoiaf_canon_children_Targaryen_109_birth_effect = { #Rhaegel Targaryen (son of Daeron II)
	create_character = {
		age = 0
		name = "Rhaegel"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = male
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Targaryen_109_born_variable
			make_trait_inactive = asoiaf_Targaryen_109_trait
			add_character_modifier = asoiaf_Targaryen_109_modifier
			copy_inheritable_appearance_from = character:Targaryen_asoiaf_109
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = neutral_silver_hair
			make_trait_inactive = purple_eyes_5
			learn_language = language_common
			add_character_flag = { flag = no_drunkard_visual }

			set_sexuality = heterosexual
			add_martial_skill = 2
			add_diplomacy_skill = 2
			add_intrigue_skill = 2
			add_stewardship_skill = 1
			add_learning_skill = 2
			add_prowess_skill = 2
			add_trait = physique_bad_1
			add_trait = lunatic_genetic
			add_trait = curious
			
			if = {
				limit = { has_game_rule = asoiaf_canon_children_rule_on_traits }
				add_trait = gregarious
				add_trait = eccentric
				add_trait = content
				add_trait = fickle
				add_trait = education_martial_prowess_2
				
				set_focus = education_diplomacy
			}
		}
	}
	hidden_effect = {
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:father = { trigger_event = birth.1003 } #regular
	}
}

asoiaf_canon_children_Targaryen_110_birth_effect = { #Maekar I Targaryen
	create_character = {
		age = 0
		name = "Maekar"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = male
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Targaryen_110_born_variable
			make_trait_inactive = asoiaf_Targaryen_110_trait
			add_character_modifier = asoiaf_Targaryen_110_modifier
			copy_inheritable_appearance_from = character:Targaryen_asoiaf_110
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = neutral_silver_hair
			make_trait_inactive = purple_eyes_5
			learn_language = language_common

			set_sexuality = heterosexual
			add_martial_skill = 7
			add_diplomacy_skill = 5
			add_intrigue_skill = 6
			add_stewardship_skill = 6
			add_learning_skill = 4
			add_prowess_skill = 6
			add_trait = rowdy

			agot_create_personal_coa_for_historical_ai = { ACTOR = scope:child COA_KEY = maekar_targaryen_personal_arms }
			
			if = {
				limit = { has_game_rule = asoiaf_canon_children_rule_on_traits }
				add_trait = impatient
				add_trait = brave
				add_trait = diligent
				add_trait = callous
				add_trait = irritable
				add_trait = strong
				add_trait = unyielding_defender
				add_trait = education_martial_prowess_3
				
				set_focus = education_martial
				add_perk = stalwart_leader_perk
				add_perk = serve_the_crown_perk
				add_perk = strict_organization_perk
				add_perk = hard_rule_perk
			}
		}
	}
	hidden_effect = {
		scope:mother = {
			if = {
				limit = { has_game_rule = asoiaf_canon_children_pregnancy_negation_rule_on }
				add_character_modifier = asoiaf_canon_children_pregnancy_negation_modifier
			}
		}
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:father = { trigger_event = birth.1003 } #regular
	}
}

asoiaf_canon_children_Targaryen_111_birth_effect = { #Valarr Targaryen (son of Baelor)
	create_character = {
		age = 0
		name = "Valarr"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = male
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Targaryen_111_born_variable
			make_trait_inactive = asoiaf_Targaryen_111_trait
			add_character_modifier = asoiaf_Targaryen_111_modifier
			copy_inheritable_appearance_from = character:Targaryen_asoiaf_111
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = neutral_silver_hair
			make_trait_inactive = purple_eyes_5
			learn_language = language_common

			set_sexuality = heterosexual
			add_martial_skill = 7
			add_diplomacy_skill = 3
			add_intrigue_skill = 3
			add_stewardship_skill = 3
			add_learning_skill = 3
			add_prowess_skill = 6
			add_trait = bossy

			agot_create_personal_coa_for_historical_ai = { ACTOR = scope:child COA_KEY = valarr_targaryen_personal_coa }
			
			if = {
				limit = { has_game_rule = asoiaf_canon_children_rule_on_traits }
				add_trait = arrogant
				add_trait = temperate
				add_trait = brave
				add_trait = education_martial_prowess_3
				add_trait = lifestyle_blademaster
				add_trait = tourney_participant
				add_trait_xp = {
					trait = tourney_participant
					track = horse
					value = 30
				}
				
				set_focus = education_martial
			}
		}
	}
	hidden_effect = {
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:father = { trigger_event = birth.1003 } #regular
	}
}

asoiaf_canon_children_Targaryen_112_birth_effect = { #Matarys Targaryen (son of Baelor)
	create_character = {
		age = 0
		name = "Matarys"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = male
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Targaryen_112_born_variable
			make_trait_inactive = asoiaf_Targaryen_112_trait
			add_character_modifier = asoiaf_Targaryen_112_modifier
			copy_inheritable_appearance_from = character:Targaryen_asoiaf_112
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = brown_hair
			make_trait_inactive = brown_eyes
			learn_language = language_common

			set_sexuality = heterosexual
			add_martial_skill = 6
			add_diplomacy_skill = 3
			add_intrigue_skill = 3
			add_stewardship_skill = 3
			add_learning_skill = 3
			add_prowess_skill = 6

			#no traits as there's no known personality for him
		}
	}
	hidden_effect = {
		scope:mother = {
			if = {
				limit = { has_game_rule = asoiaf_canon_children_pregnancy_negation_rule_on }
				add_character_modifier = asoiaf_canon_children_pregnancy_negation_modifier
			}
		}
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:father = { trigger_event = birth.1003 } #regular
	}
}

asoiaf_canon_children_Targaryen_113_birth_effect = { #Daeron Targaryen (son of Valarr)
	create_character = {
		age = 0
		name = "Daeron"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = male
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Targaryen_113_born_variable
			make_trait_inactive = asoiaf_Targaryen_113_trait
			add_character_modifier = asoiaf_Targaryen_113_modifier
			copy_inheritable_appearance_from = character:Targaryen_asoiaf_113
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = neutral_silver_hair
			make_trait_inactive = purple_eyes_5
			learn_language = language_common

			add_trait = sickly

			if = {
				limit = { asoiaf_historical_trigger = yes }
				death = { death_reason = death_sickly }
			}
		}
	}
	hidden_effect = {
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:father = { trigger_event = birth.1003 } #regular
	}
}

asoiaf_canon_children_Targaryen_114_birth_effect = { #Baelor Targaryen (son of Valarr)
	create_character = {
		age = 0
		name = "Baelor"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = male
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Targaryen_114_born_variable
			make_trait_inactive = asoiaf_Targaryen_114_trait
			add_character_modifier = asoiaf_Targaryen_114_modifier
			copy_inheritable_appearance_from = character:Targaryen_asoiaf_114
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = neutral_silver_hair
			make_trait_inactive = purple_eyes_5
			learn_language = language_common

			add_trait = sickly

			if = {
				limit = { asoiaf_historical_trigger = yes }
				death = { death_reason = death_sickly }
			}
		}
	}
	hidden_effect = {
		scope:mother = {
			if = {
				limit = { has_game_rule = asoiaf_canon_children_pregnancy_negation_rule_on }
				add_character_modifier = asoiaf_canon_children_pregnancy_negation_modifier
			}
		}
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:father = { trigger_event = birth.1003 } #regular
	}
}

asoiaf_canon_children_Targaryen_115_and_116_birth_effect = { #Aelor & Aelora Targaryen (children of Rhaegel)
	create_character = {
		age = 0
		name = "Aelor"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = male
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer

		random_traits = no

		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Targaryen_115_born_variable
			make_trait_inactive = asoiaf_Targaryen_115_trait
			add_character_modifier = asoiaf_Targaryen_115_modifier
			copy_inheritable_appearance_from = character:Targaryen_asoiaf_115
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = neutral_silver_hair
			make_trait_inactive = purple_eyes_5
			learn_language = language_common
			
			set_sexuality = heterosexual
			add_martial_skill = 3
			add_diplomacy_skill = 3
			add_intrigue_skill = 3
			add_stewardship_skill = 3
			add_learning_skill = 3
			add_prowess_skill = 6
			add_trait = twin
			add_trait = pensive
			
			if = {
				limit = { has_game_rule = asoiaf_canon_children_rule_on_traits }
				add_trait = trusting
				add_trait = calm
				add_trait = forgiving
				
				set_focus = education_diplomacy
			}
		}
	}
	create_character = {
		age = 0
		name = "Aelora"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = female
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer

		random_traits = no

		save_scope_as = child_2
		after_creation = {
			change_age = -1 #to guarantee she'll be the youngest
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Targaryen_116_born_variable
			make_trait_inactive = asoiaf_Targaryen_116_trait
			add_character_modifier = asoiaf_Targaryen_116_modifier
			copy_inheritable_appearance_from = character:Targaryen_asoiaf_116
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = neutral_silver_hair
			make_trait_inactive = purple_eyes_5
			learn_language = language_common
			
			set_sexuality = heterosexual
			add_martial_skill = 3
			add_diplomacy_skill = 3
			add_intrigue_skill = 3
			add_stewardship_skill = 3
			add_learning_skill = 3
			add_prowess_skill = 3
			add_trait = twin
			add_trait = rowdy
			
			if = {
				limit = { has_game_rule = asoiaf_canon_children_rule_on_traits }
				add_trait = impatient
				add_trait = compassionate
				add_trait = authoritative
				
				set_focus = education_martial
			}
		}
	}
	hidden_effect = {
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:father = { trigger_event = birth.1003 } #regular
	}
}

asoiaf_canon_children_Targaryen_117_birth_effect = { #Daenora Targaryen (son of Baelor)
	create_character = {
		age = 0
		name = "Daenora"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = female
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Targaryen_117_born_variable
			make_trait_inactive = asoiaf_Targaryen_117_trait
			add_character_modifier = asoiaf_Targaryen_117_modifier
			copy_inheritable_appearance_from = character:Targaryen_asoiaf_117
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = neutral_silver_hair
			make_trait_inactive = purple_eyes_5
			learn_language = language_common

			set_sexuality = heterosexual
			add_martial_skill = 3
			add_diplomacy_skill = 3
			add_intrigue_skill = 3
			add_stewardship_skill = 3
			add_learning_skill = 3
			add_prowess_skill = 3
			add_trait = pensive

			if = {
				limit = { has_game_rule = asoiaf_canon_children_rule_on_traits }
				add_trait = content
				add_trait = calm
				add_trait = temperate
				
				set_focus = education_stewardship
			}
		}
	}
	hidden_effect = {
		scope:mother = {
			if = {
				limit = { has_game_rule = asoiaf_canon_children_pregnancy_negation_rule_on }
				add_character_modifier = asoiaf_canon_children_pregnancy_negation_modifier
			}
		}
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:father = { trigger_event = birth.1003 } #regular
	}
}

asoiaf_canon_children_Targaryen_118_birth_effect = { #Daeron Targaryen (son of Maekar I)
	create_character = {
		age = 0
		name = "Daeron"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = male
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Targaryen_118_born_variable
			make_trait_inactive = asoiaf_Targaryen_118_trait
			add_character_modifier = asoiaf_Targaryen_118_modifier
			copy_inheritable_appearance_from = character:Targaryen_asoiaf_118
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = neutral_silver_hair
			make_trait_inactive = purple_eyes_5
			learn_language = language_common
			add_character_flag = { flag = no_drunkard_visual }

			set_sexuality = heterosexual
			add_martial_skill = 2
			add_diplomacy_skill = 3
			add_intrigue_skill = 4
			add_stewardship_skill = 2
			add_learning_skill = 3
			add_prowess_skill = 3
			add_trait = pensive

			agot_create_personal_coa_for_historical_ai = { ACTOR = scope:child COA_KEY = daeron_targaryen_personal_arms }

			if = {
				limit = { has_game_rule = asoiaf_canon_children_rule_on_traits }
				add_trait = lustful
				add_trait = compassionate
				add_trait = fickle
				add_trait = dragon_dreams
				add_trait = drunkard
				add_trait = education_martial_prowess_1
				
				set_focus = education_stewardship
			}
		}
	}
	hidden_effect = {
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:father = { trigger_event = birth.1003 } #regular
	}
}

asoiaf_canon_children_Targaryen_119_birth_effect = { #Aerion Targaryen (son of Maekar I)
	create_character = {
		age = 0
		name = "Aerion"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = male
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Targaryen_119_born_variable
			make_trait_inactive = asoiaf_Targaryen_119_trait
			add_character_modifier = asoiaf_Targaryen_119_modifier
			copy_inheritable_appearance_from = character:Targaryen_asoiaf_119
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = neutral_silver_hair
			make_trait_inactive = purple_eyes_5
			learn_language = language_common
			add_character_flag = { flag = no_drunkard_visual }

			set_sexuality = heterosexual
			add_martial_skill = 2
			add_diplomacy_skill = 2
			add_intrigue_skill = 4
			add_stewardship_skill = 2
			add_learning_skill = 2
			add_prowess_skill = 5
			add_trait = beauty_good_3
			add_trait = lunatic_genetic
			add_trait = charming
			add_trait = rowdy

			agot_create_personal_coa_for_historical_ai = { ACTOR = scope:child COA_KEY = aerion_targaryen_personal_arms }

			if = {
				limit = { has_game_rule = asoiaf_canon_children_rule_on_traits }
				add_trait = arrogant
				add_trait = sadistic
				add_trait = deceitful
				add_trait = arbitrary
				add_trait = dragon_dreams
				add_trait = fashionable
				add_trait = lifestyle_mystic
				add_trait = education_martial_prowess_2
				add_trait = tourney_participant
				add_trait_xp = {
					trait = tourney_participant
					track = horse
					value = 30
				}
				add_trait_xp = {
					trait = tourney_participant
					track = wit
					value = 30
				}
				add_secret = { type = secret_witch }
				
				set_focus = education_martial
			}
		}
	}
	hidden_effect = {
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:father = { trigger_event = birth.1003 } #regular
	}
}

asoiaf_canon_children_Targaryen_120_birth_effect = { #Aemon Targaryen (son of Maekar I)
	create_character = {
		age = 0
		name = "Aemon"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = male
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Targaryen_120_born_variable
			make_trait_inactive = asoiaf_Targaryen_120_trait
			add_character_modifier = asoiaf_Targaryen_120_modifier
			copy_inheritable_appearance_from = character:Targaryen_asoiaf_120
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = neutral_silver_hair
			make_trait_inactive = purple_eyes_5
			learn_language = language_common

			set_sexuality = heterosexual
			add_martial_skill = 1
			add_diplomacy_skill = 4
			add_intrigue_skill = 4
			add_stewardship_skill = 6
			add_learning_skill = 13
			add_prowess_skill = 2
			add_trait = intellect_good_2
			add_trait = curious

			if = {
				limit = { has_game_rule = asoiaf_canon_children_rule_on_traits }
				add_trait = diligent
				add_trait = temperate
				add_trait = compassionate
				add_trait = content
				add_trait = dragon_dreams
				add_trait = lifestyle_physician
				
				set_focus = education_learning
			}
		}
	}
	hidden_effect = {
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:father = { trigger_event = birth.1003 } #regular
	}
}

asoiaf_canon_children_Targaryen_121_birth_effect = { #Daella Targaryen (daughter of Maekar I)
	create_character = {
		age = 0
		name = "Daella"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = female
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Targaryen_121_born_variable
			make_trait_inactive = asoiaf_Targaryen_121_trait
			add_character_modifier = asoiaf_Targaryen_121_modifier
			copy_inheritable_appearance_from = character:Targaryen_asoiaf_121
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = neutral_silver_hair
			make_trait_inactive = purple_eyes_5
			learn_language = language_common

			set_sexuality = heterosexual
			add_martial_skill = 2
			add_diplomacy_skill = 2
			add_intrigue_skill = 2
			add_stewardship_skill = 2
			add_learning_skill = 2
			add_prowess_skill = 2
			add_trait = charming

			if = {
				limit = { has_game_rule = asoiaf_canon_children_rule_on_traits }
				add_trait = compassionate
				add_trait = fickle
				add_trait = patient
				
				set_focus = education_diplomacy
			}
		}
	}
	hidden_effect = {
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:father = { trigger_event = birth.1003 } #regular
	}
}

asoiaf_canon_children_Targaryen_122_birth_effect = { #Aegon V Targaryen
	create_character = {
		age = 0
		name = "Aegon"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = male
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Targaryen_122_born_variable
			make_trait_inactive = asoiaf_Targaryen_122_trait
			add_character_modifier = asoiaf_Targaryen_122_modifier
			copy_inheritable_appearance_from = character:Targaryen_asoiaf_122
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = neutral_silver_hair
			make_trait_inactive = purple_eyes_5
			learn_language = language_common

			set_sexuality = heterosexual
			add_martial_skill = 7
			add_diplomacy_skill = 4
			add_intrigue_skill = 4
			add_stewardship_skill = 6
			add_learning_skill = 5
			add_prowess_skill = 5
			add_trait = intellect_good_2
			add_trait = bossy

			if = {
				limit = { has_game_rule = asoiaf_canon_children_rule_on_traits }
				add_trait = compassionate
				add_trait = diligent
				add_trait = stubborn
				add_trait = just
				add_trait = dragon_dreams
				add_trait = education_martial_prowess_3
				
				set_focus = education_martial
			}
		}
	}
	hidden_effect = {
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:father = { trigger_event = birth.1003 } #regular
	}
}

asoiaf_canon_children_Targaryen_123_birth_effect = { #Rhae Targaryen (daughter of Maekar I)
	create_character = {
		age = 0
		name = "Rhae"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = female
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Targaryen_123_born_variable
			make_trait_inactive = asoiaf_Targaryen_123_trait
			add_character_modifier = asoiaf_Targaryen_123_modifier
			copy_inheritable_appearance_from = character:Targaryen_asoiaf_123
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = neutral_silver_hair
			make_trait_inactive = purple_eyes_5
			learn_language = language_common

			set_sexuality = heterosexual
			add_martial_skill = 2
			add_diplomacy_skill = 2
			add_intrigue_skill = 2
			add_stewardship_skill = 2
			add_learning_skill = 2
			add_prowess_skill = 2
			add_trait = bossy

			if = {
				limit = { has_game_rule = asoiaf_canon_children_rule_on_traits }
				add_trait = gregarious
				add_trait = compassionate
				add_trait = brave
				add_trait = diligent
				
				set_focus = education_diplomacy
			}
		}
	}
	hidden_effect = {
		scope:mother = {
			if = {
				limit = { has_game_rule = asoiaf_canon_children_pregnancy_negation_rule_on }
				add_character_modifier = asoiaf_canon_children_pregnancy_negation_modifier
			}
		}
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:father = { trigger_event = birth.1003 } #regular
	}
}

asoiaf_canon_children_Targaryen_124_birth_effect = { #Vaella Targaryen (daughter of Daeron)
	create_character = {
		age = 0
		name = "Vaella"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = female
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Targaryen_124_born_variable
			make_trait_inactive = asoiaf_Targaryen_124_trait
			add_character_modifier = asoiaf_Targaryen_124_modifier
			copy_inheritable_appearance_from = character:Targaryen_asoiaf_124
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = neutral_silver_hair
			make_trait_inactive = purple_eyes_5
			learn_language = language_common

			add_martial_skill = 3
			add_diplomacy_skill = 3
			add_intrigue_skill = 3
			add_stewardship_skill = 3
			add_learning_skill = 3
			add_prowess_skill = 3
			add_trait = intellect_bad_3
			add_trait = pensive

			if = {
				limit = { has_game_rule = asoiaf_canon_children_rule_on_traits }
				add_trait = compassionate
				add_trait = content
				add_trait = trusting
				
				set_focus = education_diplomacy
			}
		}
	}
	hidden_effect = {
		scope:mother = {
			if = {
				limit = { has_game_rule = asoiaf_canon_children_pregnancy_negation_rule_on }
				add_character_modifier = asoiaf_canon_children_pregnancy_negation_modifier
			}
		}
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:father = { trigger_event = birth.1003 } #regular
	}
}

asoiaf_canon_children_Targaryen_125_birth_effect = { #Maegor Targaryen (son of Aerion)
	create_character = {
		age = 0
		name = "Maegor"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = male
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Targaryen_125_born_variable
			make_trait_inactive = asoiaf_Targaryen_125_trait
			add_character_modifier = asoiaf_Targaryen_125_modifier
			copy_inheritable_appearance_from = character:Targaryen_asoiaf_125
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = neutral_silver_hair
			make_trait_inactive = purple_eyes_5
			learn_language = language_common

			add_martial_skill = 3
			add_diplomacy_skill = 3
			add_intrigue_skill = 3
			add_stewardship_skill = 3
			add_learning_skill = 3
			add_prowess_skill = 3
			add_trait = beauty_good_2
			add_trait = bossy
		}
	}
	hidden_effect = {
		scope:mother = {
			if = {
				limit = { has_game_rule = asoiaf_canon_children_pregnancy_negation_rule_on }
				add_character_modifier = asoiaf_canon_children_pregnancy_negation_modifier
			}
		}
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:father = { trigger_event = birth.1003 } #regular
	}
}

asoiaf_canon_children_Targaryen_126_birth_effect = { #Duncan Targaryen (son of Aegon V)
	create_character = {
		age = 0
		name = "Duncan"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = male
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Targaryen_126_born_variable
			make_trait_inactive = asoiaf_Targaryen_126_trait
			add_character_modifier = asoiaf_Targaryen_126_modifier
			copy_inheritable_appearance_from = character:Targaryen_asoiaf_126
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = dark_brown_hair
			make_trait_inactive = brown_eyes
			learn_language = language_common

			set_sexuality = heterosexual
			add_martial_skill = 9
			add_diplomacy_skill = 9
			add_intrigue_skill = 6
			add_stewardship_skill = 4
			add_learning_skill = 5
			add_prowess_skill = 10
			add_trait = charming

			if = {
				limit = { has_game_rule = asoiaf_canon_children_rule_on_traits }
				add_trait = compassionate
				add_trait = generous
				add_trait = stubborn
				add_trait = brave
				add_trait = education_martial_prowess_2
				add_trait = tourney_participant
				add_trait_xp = {
					trait = tourney_participant
					track = horse
					value = 30
				}
				
				set_focus = education_martial
			}
		}
	}
	hidden_effect = {
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:father = { trigger_event = birth.1003 } #regular
	}
}

asoiaf_canon_children_Targaryen_127_birth_effect = { #Jaehaerys II Targaryen
	create_character = {
		age = 0
		name = "Jaehaerys"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = male
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Targaryen_127_born_variable
			make_trait_inactive = asoiaf_Targaryen_127_trait
			add_character_modifier = asoiaf_Targaryen_127_modifier
			copy_inheritable_appearance_from = character:Targaryen_asoiaf_127
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = neutral_silver_hair
			make_trait_inactive = purple_eyes_5
			learn_language = language_common

			set_sexuality = heterosexual
			add_martial_skill = 3
			add_diplomacy_skill = 6
			add_intrigue_skill = 5
			add_stewardship_skill = 7
			add_learning_skill = 5
			add_prowess_skill = 1
			add_trait = physique_bad_3
			add_trait = intellect_good_1
			add_trait = pensive

			if = {
				limit = { has_game_rule = asoiaf_canon_children_rule_on_traits }
				add_trait = temperate
				add_trait = diligent
				add_trait = just
				add_trait = brave
				
				set_focus = education_stewardship
			}
		}
	}
	hidden_effect = {
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:father = { trigger_event = birth.1003 } #regular
	}
}

asoiaf_canon_children_Targaryen_128_birth_effect = { #Shaera Targaryen (daughter of Aegon V)
	create_character = {
		age = 0
		name = "Shaera"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = female
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Targaryen_128_born_variable
			make_trait_inactive = asoiaf_Targaryen_128_trait
			add_character_modifier = asoiaf_Targaryen_128_modifier
			copy_inheritable_appearance_from = character:Targaryen_asoiaf_128
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = neutral_silver_hair
			make_trait_inactive = purple_eyes_5
			learn_language = language_common

			set_sexuality = heterosexual
			add_martial_skill = 3
			add_diplomacy_skill = 3
			add_intrigue_skill = 3
			add_stewardship_skill = 3
			add_learning_skill = 3
			add_prowess_skill = 1
			add_trait = beauty_good_1
			add_trait = charming

			if = {
				limit = { has_game_rule = asoiaf_canon_children_rule_on_traits }
				add_trait = compassionate
				add_trait = stubborn
				add_trait = trusting
				
				set_focus = education_diplomacy
			}
		}
	}
	hidden_effect = {
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:father = { trigger_event = birth.1003 } #regular
	}
}

asoiaf_canon_children_Targaryen_129_birth_effect = { #Daeron Targaryen (son of Aegon V)
	create_character = {
		age = 0
		name = "Daeron"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = male
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Targaryen_129_born_variable
			make_trait_inactive = asoiaf_Targaryen_129_trait
			add_character_modifier = asoiaf_Targaryen_129_modifier
			copy_inheritable_appearance_from = character:Targaryen_asoiaf_129
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = neutral_silver_hair
			make_trait_inactive = purple_eyes_5
			learn_language = language_common

			set_sexuality = homosexual
			add_martial_skill = 3
			add_diplomacy_skill = 3
			add_intrigue_skill = 3
			add_stewardship_skill = 3
			add_learning_skill = 3
			add_prowess_skill = 12
			add_trait = beauty_good_2
			add_trait = charming

			if = {
				limit = { has_game_rule = asoiaf_canon_children_rule_on_traits }
				add_trait = just
				add_trait = brave
				add_trait = compassionate
				add_trait = stubborn
				add_trait = education_martial_prowess_3
				add_trait = tourney_participant
				add_trait_xp = {
					trait = tourney_participant
					track = horse
					value = 30
				}
				add_trait_xp = {
					trait = tourney_participant
					track = foot
					value = 30
				}
				add_trait = refusing_marriage
				
				set_focus = education_martial
			}
		}
	}
	hidden_effect = {
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:father = { trigger_event = birth.1003 } #regular
	}
}

asoiaf_canon_children_Targaryen_130_birth_effect = { #Rhaelle Targaryen (daughter of Aegon V)
	create_character = {
		age = 0
		name = "Rhaelle"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = female
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Targaryen_130_born_variable
			make_trait_inactive = asoiaf_Targaryen_130_trait
			add_character_modifier = asoiaf_Targaryen_130_modifier
			copy_inheritable_appearance_from = character:Targaryen_asoiaf_130
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = neutral_silver_hair
			make_trait_inactive = purple_eyes_5
			learn_language = language_common

			set_sexuality = heterosexual
			add_martial_skill = 3
			add_diplomacy_skill = 3
			add_intrigue_skill = 3
			add_stewardship_skill = 3
			add_learning_skill = 3
			add_prowess_skill = 1
			add_trait = beauty_good_2
			add_trait = bossy

			if = {
				limit = { has_game_rule = asoiaf_canon_children_rule_on_traits }
				add_trait = arrogant
				add_trait = diligent
				add_trait = impatient
				add_trait = honest
				
				set_focus = education_stewardship
			}
		}
	}
	hidden_effect = {
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:father = { trigger_event = birth.1003 } #regular
	}
}

asoiaf_canon_children_Targaryen_1_birth_effect = { #Aerys II Targaryen
	create_character = {
		age = 0
		name = "Aerys"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = male
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Targaryen_1_born_variable
			make_trait_inactive = asoiaf_Targaryen_1_trait
			add_character_modifier = asoiaf_Targaryen_1_modifier
			copy_inheritable_appearance_from = character:Targaryen_asoiaf_1
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = neutral_silver_hair
			make_trait_inactive = purple_eyes_5
			learn_language = language_common

			set_sexuality = heterosexual
			add_martial_skill = 3
			add_diplomacy_skill = 5
			add_intrigue_skill = 5
			add_stewardship_skill = 5
			add_learning_skill = 5
			add_prowess_skill = 2
			add_trait = beauty_good_1
			add_trait = charming

			if = {
				limit = { has_game_rule = asoiaf_canon_children_rule_on_traits }
				add_trait = ambitious #pre-madness traits
				add_trait = arrogant
				add_trait = generous
				add_trait = fickle
				
				set_focus = education_intrigue
			}
		}
	}
	hidden_effect = {
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:father = { trigger_event = birth.1003 } #regular
	}
}

asoiaf_canon_children_Targaryen_2_birth_effect = { #Rhaella Targaryen (daughter of Jaehaerys II)
	create_character = {
		age = 0
		name = "Rhaella"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = female
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Targaryen_2_born_variable
			make_trait_inactive = asoiaf_Targaryen_2_trait
			add_character_modifier = asoiaf_Targaryen_2_modifier
			copy_inheritable_appearance_from = character:Targaryen_asoiaf_2
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = neutral_silver_hair
			make_trait_inactive = purple_eyes_5
			learn_language = language_common

			set_sexuality = heterosexual
			add_martial_skill = 3
			add_diplomacy_skill = 5
			add_intrigue_skill = 5
			add_stewardship_skill = 5
			add_learning_skill = 5
			add_prowess_skill = 2
			add_trait = beauty_good_2
			add_trait = pensive

			if = {
				limit = { has_game_rule = asoiaf_canon_children_rule_on_traits }
				add_trait = humble
				add_trait = shy
				add_trait = just
				add_trait = diligent
				
				set_focus = education_diplomacy
			}
		}
	}
	hidden_effect = {
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:father = { trigger_event = birth.1003 } #regular
	}
}

asoiaf_canon_children_Targaryen_3_birth_effect = { #Rhaegar Targaryen (son of Aerys II)
	create_character = {
		age = 0
		name = "Rhaegar"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = male
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Targaryen_3_born_variable
			make_trait_inactive = asoiaf_Targaryen_3_trait
			if = {
				limit = {
					NOT = { has_character_modifier = asoiaf_Targaryen_3_modifier } #necessary to stop duplicating the artefacts; the modifier is assigned immediately after
				}
				create_artifact_asoiaf_rhaegars_sword_effect = { OWNER = this }
				agot_create_artifact_rhaegars_armour_effect = { OWNER = this }
			}
			add_character_modifier = asoiaf_Targaryen_3_modifier
			copy_inheritable_appearance_from = character:Targaryen_asoiaf_3
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = neutral_silver_hair
			make_trait_inactive = purple_eyes_5
			learn_language = language_common
			
			set_sexuality = heterosexual
			add_martial_skill = 6
			add_diplomacy_skill = 8
			add_intrigue_skill = 5
			add_stewardship_skill = 9
			add_learning_skill = 9
			add_prowess_skill = 8
			add_trait = beauty_good_3
			add_trait = intellect_good_2
			add_trait = curious

			if = {
				limit = { has_game_rule = asoiaf_canon_children_rule_on_traits }
				add_trait = diligent
				add_trait = calm
				add_trait = brave
				add_trait = compassionate
				add_trait = lifestyle_blademaster
				add_trait = depressed_1
				add_trait = poet
				add_trait = education_martial_prowess_3
				add_trait = tourney_participant
				add_trait_xp = {
					trait = tourney_participant
					track = horse
					value = 70
				}
				add_trait_xp = {
					trait = tourney_participant
					track = foot
					value = 50
				}
				
				set_focus = education_learning
				add_perk = pedagogy_perk
				add_perk = open_minded_perk
				add_perk = apostate_perk
				add_perk = scientific_perk
				add_perk = planned_cultivation_perk
				add_perk = scholarly_circles_perk
				add_perk = learn_on_the_job_perk
				add_perk = sanctioned_loopholes_perk
				add_perk = scholar_perk
				add_perk = stalwart_leader_perk
				add_perk = chivalric_dominance_perk
				add_perk = never_back_down_perk
			}
		}
	}
	hidden_effect = {
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:father = { trigger_event = birth.1003 } #regular
	}
}

asoiaf_canon_children_Targaryen_4_birth_effect = { #Shaena Targaryen (daughter of Aerys II)
	create_character = {
		age = 0
		name = "Shaena"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = female
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Targaryen_4_born_variable
			make_trait_inactive = asoiaf_Targaryen_4_trait
			add_character_modifier = asoiaf_Targaryen_4_modifier
			copy_inheritable_appearance_from = character:Targaryen_asoiaf_4
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = cool_neutral_silver_hair
			make_trait_inactive = purple_eyes_5
			learn_language = language_common
			
			add_trait = beauty_good_1
			add_trait = sickly

			if = {
				limit = { asoiaf_historical_trigger = yes }
				death = { death_reason = death_stillborn }
			}
		}
	}
	hidden_effect = {
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:father = { trigger_event = birth.1003 } #regular
	}
}

asoiaf_canon_children_Targaryen_5_birth_effect = { #Daeron Targaryen (son of Aerys II)
	create_character = {
		age = 0
		name = "Daeron"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = male
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Targaryen_5_born_variable
			make_trait_inactive = asoiaf_Targaryen_5_trait
			add_character_modifier = asoiaf_Targaryen_5_modifier
			copy_inheritable_appearance_from = character:Targaryen_asoiaf_5
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = cool_neutral_silver_hair
			make_trait_inactive = purple_eyes_5
			learn_language = language_common
			
			add_trait = beauty_good_1
			add_trait = sickly

			if = {
				limit = { asoiaf_historical_trigger = yes }
				death = { death_reason = death_sickly }
			}
		}
	}
	hidden_effect = {
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:father = { trigger_event = birth.1003 } #regular
	}
}

asoiaf_canon_children_Targaryen_6_birth_effect = { #Aegon Targaryen (son of Aerys II)
	create_character = {
		age = 0
		name = "Aegon"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = male
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Targaryen_6_born_variable
			make_trait_inactive = asoiaf_Targaryen_6_trait
			add_character_modifier = asoiaf_Targaryen_6_modifier
			copy_inheritable_appearance_from = character:Targaryen_asoiaf_6
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = neutral_silver_hair
			make_trait_inactive = purple_eyes_5
			learn_language = language_common
			
			add_trait = intellect_good_1
			add_trait = sickly

			if = {
				limit = { asoiaf_historical_trigger = yes }
				add_trait = ill
				death = { death_reason = death_ill }
			}
		}
	}
	hidden_effect = {
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:father = { trigger_event = birth.1003 } #regular
	}
}

asoiaf_canon_children_Targaryen_7_birth_effect = { #Jaehaerys Targaryen (son of Aerys II)
	create_character = {
		age = 0
		name = "Jaehaerys"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = male
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Targaryen_7_born_variable
			make_trait_inactive = asoiaf_Targaryen_7_trait
			add_character_modifier = asoiaf_Targaryen_7_modifier
			copy_inheritable_appearance_from = character:Targaryen_asoiaf_7
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = neutral_silver_hair
			make_trait_inactive = purple_eyes_5
			learn_language = language_common
			
			add_trait = sickly
			add_trait = ill

			if = {
				limit = { asoiaf_historical_trigger = yes }
				death = { death_reason = death_sickly }
			}
		}
	}
	hidden_effect = {
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:father = { trigger_event = birth.1003 } #regular
	}
}

asoiaf_canon_children_Targaryen_8_birth_effect = { #Viserys Targaryen (son of Aerys II)
	create_character = {
		age = 0
		name = "Viserys"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = male
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Targaryen_8_born_variable
			make_trait_inactive = asoiaf_Targaryen_8_trait
			add_character_modifier = asoiaf_Targaryen_8_modifier
			copy_inheritable_appearance_from = character:Targaryen_asoiaf_8
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = cool_neutral_silver_hair
			make_trait_inactive = purple_eyes_5
			learn_language = language_common
			
			set_sexuality = heterosexual
			add_martial_skill = 2
			add_diplomacy_skill = 6
			add_intrigue_skill = 6
			add_stewardship_skill = 4
			add_learning_skill = 5
			add_trait = beauty_good_1
			add_trait = bossy

			if = {
				limit = { has_game_rule = asoiaf_canon_children_rule_on_traits }
				add_trait = stubborn #traits from before his exile (which stressed him so much it resulted in the bad traits we're familiar with)
				add_trait = impatient
				add_trait = arrogant
				add_trait = reckless
				
				set_focus = education_martial
				add_perk = dreadful_perk
				add_perk = dark_insights_perk
				add_perk = divine_retribution_perk
				add_perk = serve_the_crown_perk
				add_perk = a_mans_home_perk
				add_perk = firm_hand_perk
			}
		}
	}
	hidden_effect = {
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:father = { trigger_event = birth.1003 } #regular
	}
}

asoiaf_canon_children_Targaryen_9_birth_effect = { #Daenerys Targaryen (daughter of Aerys II)
	create_character = {
		age = 0
		name = "Daenerys"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = female
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Targaryen_9_born_variable
			make_trait_inactive = asoiaf_Targaryen_9_trait
			add_character_modifier = asoiaf_Targaryen_9_modifier
			copy_inheritable_appearance_from = character:Targaryen_asoiaf_9
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = neutral_silver_hair
			make_trait_inactive = purple_eyes_5
			learn_language = language_common
			
			set_sexuality = heterosexual
			add_martial_skill = 4
			add_diplomacy_skill = 3
			add_intrigue_skill = 2
			add_stewardship_skill = 3
			add_learning_skill = 5
			add_trait = beauty_good_3
			add_trait = intellect_good_1
			add_trait = pensive

			if = {
				limit = { has_game_rule = asoiaf_canon_children_rule_on_traits }
				add_trait = shy #TRAITS FROM BEFORE SHE MARRIED KHAL DROGO
				add_trait = temperate
				add_trait = trusting
				add_trait = dragon_dreams

				#add_trait = authoritative #her adult traits so I don't forget
				#add_trait = ambitious
				#add_trait = just
				#add_trait = wrathful
				
				set_focus = education_diplomacy
				add_perk = firm_hand_perk
				add_perk = praetorian_guard_perk
				add_perk = benevolent_intent_perk
				add_perk = inspiring_rule_perk
				add_perk = thoughtful_perk
				add_perk = ducal_conquest_perk
				add_perk = forced_vassalage_perk
				add_perk = adaptive_traditions_perk
				add_perk = pedagogy_perk
				add_perk = open_minded_perk
				add_perk = bellum_justum_perk
			}
		}
	}
	hidden_effect = {
		scope:mother = {
			if = {
				limit = { has_game_rule = asoiaf_canon_children_pregnancy_negation_rule_on }
				add_character_modifier = asoiaf_canon_children_pregnancy_negation_modifier
			}
			if = {
				limit = { asoiaf_historical_trigger = yes }
				death = { death_reason = death_childbirth }
			}
		}
		scope:father = {
			if = {
				limit = { is_ai = yes } #to not force it on a player
				add_trait = refusing_marriage
			}
		}
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:father = { trigger_event = birth.1003 } #regular
		scope:child = { trigger_event = agot_dragon_egg_cradling.2010 }
	}
}
asoiaf_canon_children_Targaryen_9_birth_effect_yearly = { #birth effect for Daenerys when triggered via the yearly_on_action for the RR bookmark
	root = {
		set_global_variable = asoiaf_canon_children_Targaryen_9_born_variable
		make_trait_inactive = asoiaf_Targaryen_9_trait
		if = {
			limit = { asoiaf_canon_children_enabled_trigger = yes }
			add_character_modifier = asoiaf_Targaryen_9_modifier
			add_martial_skill = 4
			add_diplomacy_skill = 3
			add_intrigue_skill = 2
			add_stewardship_skill = 3
			add_learning_skill = 5
			set_sexuality = heterosexual
			add_trait = pensive
		}
		add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
		if = {
			limit = { has_game_rule = asoiaf_new_dnas_valyrian_rule_on }
			copy_inheritable_appearance_from = character:Targaryen_asoiaf_9
			make_trait_inactive = neutral_silver_hair
			make_trait_inactive = purple_eyes_5
		}

		learn_language = language_common
		
		if = {
			limit = { has_game_rule = asoiaf_canon_children_rule_on_traits } #TRAITS FROM BEFORE SHE MARRIED KHAL DROGO
			add_trait = shy
			add_trait = temperate
			add_trait = trusting
			add_trait = dragon_dreams
			
			set_focus = education_diplomacy
			add_perk = firm_hand_perk
			add_perk = praetorian_guard_perk
			add_perk = benevolent_intent_perk
			add_perk = inspiring_rule_perk
			add_perk = thoughtful_perk
			add_perk = ducal_conquest_perk
			add_perk = forced_vassalage_perk
			add_perk = adaptive_traditions_perk
			add_perk = pedagogy_perk
			add_perk = open_minded_perk
			add_perk = bellum_justum_perk
		}
	}
}

asoiaf_canon_children_Targaryen_10_birth_effect = { #Rhaenys Targaryen (daughter of Rhaegar)
	create_character = {
		age = 0
		name = "Rhaenys"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = female
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Targaryen_10_born_variable
			make_trait_inactive = asoiaf_Targaryen_10_trait
			add_character_modifier = asoiaf_Targaryen_10_modifier
			copy_inheritable_appearance_from = character:Targaryen_asoiaf_10
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = dark_brown_hair
			make_trait_inactive = brown_eyes
			learn_language = language_common

			#no traits since she was too young to have any personality or education
		}
	}
	hidden_effect = {
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:father = { trigger_event = birth.1003 } #regular
	}
}

asoiaf_canon_children_Targaryen_11_birth_effect = { #Aegon Targaryen (son of Rhaegar)
	create_character = {
		age = 0
		name = "Aegon"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = male
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Targaryen_11_born_variable
			make_trait_inactive = asoiaf_Targaryen_11_trait
			add_character_modifier = asoiaf_Targaryen_11_modifier
			copy_inheritable_appearance_from = character:Targaryen_asoiaf_11
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = cool_neutral_silver_hair
			make_trait_inactive = purple_eyes_5
			learn_language = language_common

			add_martial_skill = 5
			add_diplomacy_skill = 7
			add_intrigue_skill = 4
			add_stewardship_skill = 7
			add_learning_skill = 7
			add_prowess_skill = 8
			add_trait = beauty_good_2
			add_trait = intellect_good_1

			if = {
				limit = { has_game_rule = asoiaf_canon_children_rule_on_traits }
				add_trait = diligent
				add_trait = authoritative
				add_trait = brave
				add_trait = ambitious
				add_trait = education_martial_prowess_3
				add_trait = aggressive_attacker
				add_trait = poet
				
				set_focus = education_martial
				add_perk = bellum_justum_perk
				add_perk = parthian_tactics_perk
				add_perk = envelopment_perk
				add_perk = organized_retreat_perk
				add_perk = hit_and_run_perk
				add_perk = engineered_for_destruction_perk
				add_perk = living_off_the_land_perk
				add_perk = sappers_perk
				add_perk = strategist_perk
				add_perk = stalwart_leader_perk
				add_perk = chivalric_dominance_perk
				add_perk = never_back_down_perk
				add_perk = meritocracy_perk
				add_perk = chains_of_loyalty_perk
				add_perk = likable_perk
				add_perk = positions_of_power_perk
				add_perk = benevolent_intent_perk
				add_perk = inspiring_rule_perk
				add_perk = pedagogy_perk
				add_perk = open_minded_perk
				
				learn_language = language_rhoynish
			}
		}
	}
	hidden_effect = {
		scope:mother = {
			if = {
				limit = { has_game_rule = asoiaf_canon_children_pregnancy_negation_rule_on }
				add_character_modifier = asoiaf_canon_children_pregnancy_negation_modifier
			}
		}
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:father = { trigger_event = birth.1003 } #regular
	}
}

asoiaf_canon_children_Stark_7_birth_effect = { #Jon Snow
	create_character = {
		age = 0
		name = "Jon"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = male
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Stark_7_born_variable
			make_trait_inactive = asoiaf_Stark_7_trait
			add_character_modifier = asoiaf_Stark_7_modifier
			copy_inheritable_appearance_from = character:Stark_asoiaf_7
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = black_hair

			set_sexuality = heterosexual
			add_martial_skill = 4
			add_diplomacy_skill = 9
			add_intrigue_skill = 3
			add_stewardship_skill = 9
			add_learning_skill = 5
			add_prowess_skill = 8
			add_trait = beauty_good_2
			add_trait = pensive

			if = {
				limit = { has_game_rule = asoiaf_canon_children_rule_on_traits }
				add_trait = brave
				add_trait = just
				add_trait = honest
				add_trait = trusting #honorable
				add_trait = education_martial_prowess_3
				
				set_focus = education_martial
			}
		}
	}
	hidden_effect = {
		scope:mother = {
			if = {
				limit = { asoiaf_historical_trigger = yes }
				death = { death_reason = death_childbirth }
			}
		}
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:father = { trigger_event = birth.1003 } #regular
	}
}
asoiaf_canon_children_Stark_7_birth_effect_scripted = { #Jon Snow when he's spawned by vanilla AGOT in the RR bookmark
	#change_first_name = Jon
	set_global_variable = asoiaf_canon_children_Stark_7_born_variable
	make_trait_inactive = asoiaf_Stark_7_trait
	add_character_modifier = asoiaf_Stark_7_modifier
	copy_inheritable_appearance_from = character:Stark_asoiaf_7
	add_character_flag = has_scripted_appearance
	add_character_flag = canon_status_canon
	make_trait_inactive = black_hair
	
	set_sexuality = heterosexual
	add_martial_skill = 4
	add_diplomacy_skill = 9
	add_intrigue_skill = 3
	add_stewardship_skill = 9
	add_learning_skill = 5
	add_prowess_skill = 8
	add_trait = beauty_good_2
	add_trait = pensive
	
	if = {
		limit = { has_game_rule = asoiaf_canon_children_rule_on_traits }
		add_trait = brave
		add_trait = just
		add_trait = honest
		add_trait = trusting #honorable
		add_trait = education_martial_prowess_3
		
		set_focus = education_martial
	}
}

### HOUSE VELARYON ###

asoiaf_canon_children_Velaryon_34_birth_effect = { #Laena Velaryon (daughter of Corlys)
	create_character = {
		age = 0
		name = "Laena"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = female
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Velaryon_34_born_variable
			make_trait_inactive = asoiaf_Velaryon_34_trait
			add_character_modifier = asoiaf_Velaryon_34_modifier
			if = {
				limit = {
					NOT = { has_game_rule = asoiaf_hbo_velaryons_rule_on }
				}
				copy_inheritable_appearance_from = character:Velaryon_asoiaf_34
			}
			if = {
				limit = { has_game_rule = asoiaf_hbo_velaryons_rule_on }
				copy_inheritable_appearance_from = character:Velaryon_asoiaf_34_HBO
			}
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = neutral_silver_hair
			learn_language = language_common
			
			set_sexuality = heterosexual
			add_trait = intellect_good_1
			add_trait = beauty_good_2

			if = {
				limit = { has_game_rule = asoiaf_canon_children_rule_on_traits }
				add_trait = compassionate
				add_trait = brave
				add_trait = stubborn
				add_trait = humble
				
				set_focus = education_diplomacy
				add_perk = befriend_perk
				add_perk = confidants_perk
				add_perk = flatterer_perk
				add_perk = familial_familiar_perk
				add_perk = groomed_to_rule_perk
				add_perk = thicker_than_water_perk
				add_perk = friendly_counsel_perk
				add_perk = sound_foundations_perk
				add_perk = family_man_perk
			}
			if = {
				limit = { has_game_rule = asoiaf_canon_children_dragon_bonding_rule_on }
				if = {
					limit = {
						character:dragon_vhagar ?= {
							is_alive = yes
							agot_has_relationship_dragon = no #hasn't already bonded with another rider
						}
						agot_has_relationship_dragon = no #not already bonded to another dragon
					}
					agot_bond_dragon_relation_effect = {
						ACTOR = scope:child
						DRAGON = character:dragon_vhagar
					}
					send_interface_toast = {
						title = bond_dragon_notification
						left_icon = scope:child
						right_icon = character:dragon_vhagar
						start_scheme = {
							type = bond_with_dragon_scheme
							target = character:dragon_vhagar
						}
					}
				}
			}
		}
	}
	hidden_effect = {
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:father = { trigger_event = birth.1003 } #regular
	}
}

asoiaf_canon_children_Velaryon_35_birth_effect = { #Laenor Velaryon (son of Corlys)
	create_character = {
		age = 0
		name = "Laenor"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = male
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Velaryon_35_born_variable
			make_trait_inactive = asoiaf_Velaryon_35_trait
			add_character_modifier = asoiaf_Velaryon_35_modifier
			if = {
				limit = {
					NOT = { has_game_rule = asoiaf_hbo_velaryons_rule_on }
				}
				copy_inheritable_appearance_from = character:Velaryon_asoiaf_35
			}
			if = {
				limit = { has_game_rule = asoiaf_hbo_velaryons_rule_on }
				copy_inheritable_appearance_from = character:Velaryon_asoiaf_35_HBO
			}
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = neutral_silver_hair
			learn_language = language_common
			
			set_sexuality = homosexual
			add_prowess_skill = 6
			add_trait = beauty_good_3

			if = {
				limit = { has_game_rule = asoiaf_canon_children_rule_on_traits }
				add_trait = compassionate
				add_trait = brave
				add_trait = gregarious
				add_trait = humble
				add_trait = fashionable
				add_trait = lifestyle_blademaster
				add_trait = education_martial_prowess_3
				
				set_focus = education_martial
			}
			if = {
				limit = { has_game_rule = asoiaf_canon_children_dragon_bonding_rule_on }
				if = {
					limit = {
						character:dragon_seasmoke ?= {
							is_alive = yes
							agot_has_relationship_dragon = no #hasn't already bonded with another rider
						}
						agot_has_relationship_dragon = no #not already bonded to another dragon
					}
					agot_bond_dragon_relation_effect = {
						ACTOR = scope:child
						DRAGON = character:dragon_seasmoke
					}
					send_interface_toast = {
						title = bond_dragon_notification
						left_icon = scope:child
						right_icon = character:dragon_seasmoke
						start_scheme = {
							type = bond_with_dragon_scheme
							target = character:dragon_seasmoke
						}
					}
				}
			}
		}
	}
	hidden_effect = {
		scope:mother = {
			if = {
				limit = { has_game_rule = asoiaf_canon_children_pregnancy_negation_rule_on }
				add_character_modifier = asoiaf_canon_children_pregnancy_negation_modifier
			}
		}
		scope:child = {
			dynasty:dynn_Velaryon = {
				every_dynasty_member = {
					limit = {
						has_inactive_trait = asoiaf_Velaryon_34_trait #Laena Velaryon (daughter of Corlys)
					}
					save_scope_as = asoiaf_laena
				}
			}
			set_relation_best_friend = scope:asoiaf_laena
		}
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:father = { trigger_event = birth.1003 } #regular
	}
}
asoiaf_canon_children_Velaryon_43_birth_effect = { #Addam Velaryon (bastard of Corlys)
	create_character = {
		age = 0
		name = "Addam"
		father = scope:real_father
		real_father = scope:real_father
		mother = scope:mother
		gender = male
		faith = scope:real_father.faith
		culture = scope:real_father.culture
		dynasty_house = scope:real_father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Velaryon_43_born_variable
			make_trait_inactive = asoiaf_Velaryon_43_trait
			add_character_modifier = asoiaf_Velaryon_43_modifier
			copy_inheritable_appearance_from = character:Velaryon_asoiaf_43
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = neutral_silver_hair
			learn_language = language_common

			set_sexuality = heterosexual
			add_trait = beauty_good_2
			add_trait = intellect_good_1
			add_trait = bastard
			
			if = { #bastardy is exposed while pregnant
				limit = {
					scope:mother = { has_character_flag = pregnancy_real_father_of_bastard_is_known_flag }
				}
				set_house = scope:real_father.house
				set_father = scope:real_father
				agot_add_custom_bastard_nickname_effect = yes
				set_culture = scope:real_father.culture
				set_character_faith = scope:real_father.faith
			}
			if = {
				limit = { has_game_rule = asoiaf_canon_children_rule_on_traits }
				add_trait = brave
				add_trait = diligent
				add_trait = just #honorable
				add_trait = stubborn
				add_trait = loyal
				
				set_focus = education_diplomacy
			}
		}
	}
	hidden_effect = {
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:mother = { trigger_event = birth.1002 } #secret bastard
		if = { #for the husband of the lowborn mother (if she has one)
			limit = {
				NOT = { scope:mother = { has_character_flag = pregnancy_spouse_knows_of_bastardy } } #husband doesn't know
				NOT = { scope:mother = { has_character_flag = pregnancy_real_father_of_bastard_is_known_flag } } #it's not been exposed to the public
			}
			scope:father = { trigger_event = birth.1003 } #regular
		}
		if = { #for Corlys if he marries a lowborn
			limit = {
				scope:real_father = { is_spouse_of_even_if_dead = scope:mother }
			}
			scope:father = { trigger_event = birth.1003 } #regular
		}
		#BASTARD SECRET STUFF
		if = {
			limit = {
				scope:child = {
					NOT = { scope:father = scope:real_father }
				}
			}
			scope:mother = {
				add_secret = {
					type = secret_disputed_heritage
					target = scope:child
				}
				random_secret = { #Scope the secret
					limit = {
						secret_type = secret_disputed_heritage
						secret_target = scope:child
					}
					save_scope_as = new_secret
				}
				if = {
					limit = { #if the husband knows, he'll get the secret too
						has_character_flag = pregnancy_spouse_knows_of_bastardy
						NOT = { has_character_flag = pregnancy_real_father_of_bastard_is_known_flag } #if the bastardy is revealed to the public, the birth is no longer the husband's concern, so no event for him
					}
					scope:father = { add_to_list = illegitimacy_secret_knowers }
				}
			}
			scope:real_father = {
				if = {
					limit = { has_inactive_trait = asoiaf_Velaryon_31_trait } #Corlys always knows
				}
				add_to_list = illegitimacy_secret_knowers
			}
			every_in_list = {
				list = illegitimacy_secret_knowers
				#A secret bastard is born - Share the news with everyone who knew that it was a bastard
				trigger_event = secret_bastard.0001
			}
		}
		scope:child = { #if he's a bastard, make him a Velaryon bastard; triggered AFTER the birth event to ensure proper localisation for it
			if = {
				limit = {
					NOT = { scope:real_father = { is_spouse_of_even_if_dead = scope:mother } } #mother isn't married to Corlys
				}
				set_house = scope:real_father.house
				agot_add_custom_bastard_nickname_effect = yes
				set_father = scope:real_father #Corlys acknowledges him for the sake of gameplay simplicity
				if = {
					limit = {
						scope:real_father = { is_married = no }
					}
					scope:real_father = { add_trait = fornicator }
				}
				if = {
					limit = {
						scope:real_father = { is_married = yes }
					}
					scope:real_father = { add_trait = adulterer }
				}
			}
		}
	}
}
asoiaf_canon_children_Velaryon_44_birth_effect = { #Alyn Velaryon (bastard of Corlys)
	create_character = {
		age = 0
		name = "Alyn"
		father = scope:real_father
		real_father = scope:real_father
		mother = scope:mother
		gender = male
		faith = scope:real_father.faith
		culture = scope:real_father.culture
		dynasty_house = scope:real_father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Velaryon_44_born_variable
			make_trait_inactive = asoiaf_Velaryon_44_trait
			add_character_modifier = asoiaf_Velaryon_44_modifier
			copy_inheritable_appearance_from = character:Velaryon_asoiaf_44
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = cool_neutral_silver_hair
			learn_language = language_common

			set_sexuality = heterosexual
			add_martial_skill = 9
			add_prowess_skill = 6
			add_trait = beauty_good_3
			add_trait = bastard
			
			if = { #bastardy is exposed while pregnant
				limit = {
					scope:mother = { has_character_flag = pregnancy_real_father_of_bastard_is_known_flag }
				}
				set_house = scope:real_father.house
				set_father = scope:real_father
				agot_add_custom_bastard_nickname_effect = yes
				set_culture = scope:real_father.culture
				set_character_faith = scope:real_father.faith
			}
			if = {
				limit = { has_game_rule = asoiaf_canon_children_rule_on_traits }
				add_trait = brave
				add_trait = diligent
				add_trait = arrogant
				add_trait = lustful
				add_trait = education_martial_prowess_3
				add_trait = aggressive_attacker
				add_trait = desert_warrior
				
				set_focus = education_martial
				add_perk = bellum_justum_perk
				add_perk = parthian_tactics_perk
				add_perk = envelopment_perk
				add_perk = organized_retreat_perk
				add_perk = hit_and_run_perk
				add_perk = engineered_for_destruction_perk
				add_perk = living_off_the_land_perk
				add_perk = sappers_perk
				add_perk = strategist_perk
			}
		}
	}
	hidden_effect = {
		scope:mother = {
			if = {
				limit = {
					is_married = no
					has_game_rule = asoiaf_canon_children_pregnancy_negation_rule_on
				}
				add_character_modifier = asoiaf_canon_children_pregnancy_negation_modifier
			}
			if = {
				limit = {
					is_married = yes
					any_spouse = { has_inactive_trait = asoiaf_Velaryon_31_trait } #spouse is Corlys
					has_game_rule = asoiaf_canon_children_pregnancy_negation_rule_on
				}
				add_character_modifier = asoiaf_canon_children_pregnancy_negation_modifier
			}
		}
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:mother = { trigger_event = birth.1002 } #secret bastard
		if = { #for the husband of the lowborn mother (if she has one)
			limit = {
				NOT = { scope:mother = { has_character_flag = pregnancy_spouse_knows_of_bastardy } } #husband doesn't know
				NOT = { scope:mother = { has_character_flag = pregnancy_real_father_of_bastard_is_known_flag } } #it's not been exposed to the public
			}
			scope:father = { trigger_event = birth.1003 } #regular
		}
		if = { #for Corlys if he marries a lowborn
			limit = {
				scope:real_father = { is_spouse_of_even_if_dead = scope:mother }
			}
			scope:father = { trigger_event = birth.1003 } #regular
		}
		#BASTARD SECRET STUFF
		if = {
			limit = {
				scope:child = {
					NOT = { scope:father = scope:real_father }
				}
			}
			scope:mother = {
				add_secret = {
					type = secret_disputed_heritage
					target = scope:child
				}
				random_secret = { #Scope the secret
					limit = {
						secret_type = secret_disputed_heritage
						secret_target = scope:child
					}
					save_scope_as = new_secret
				}
				if = {
					limit = { #if the husband knows, he'll get the secret too
						has_character_flag = pregnancy_spouse_knows_of_bastardy
						NOT = { has_character_flag = pregnancy_real_father_of_bastard_is_known_flag } #if the bastardy is revealed to the public, the birth is no longer the husband's concern, so no event for him
					}
					scope:father = { add_to_list = illegitimacy_secret_knowers }
				}
			}
			scope:real_father = {
				if = {
					limit = { has_inactive_trait = asoiaf_Velaryon_31_trait } #Corlys always knows
				}
				add_to_list = illegitimacy_secret_knowers
			}
			every_in_list = {
				list = illegitimacy_secret_knowers
				#A secret bastard is born - Share the news with everyone who knew that it was a bastard
				trigger_event = secret_bastard.0001
			}
		}
		scope:child = { #if he's a bastard, make him a Velaryon bastard; triggered AFTER the birth event to ensure proper localisation for it
			if = {
				limit = {
					NOT = { scope:real_father = { is_spouse_of_even_if_dead = scope:mother } } #mother isn't married to Corlys
				}
				set_house = scope:real_father.house
				agot_add_custom_bastard_nickname_effect = yes
				set_father = scope:real_father #Corlys acknowledges him for the sake of gameplay simplicity
				if = {
					limit = {
						scope:real_father = { is_married = no }
					}
					scope:real_father = { add_trait = fornicator }
				}
				if = {
					limit = {
						scope:real_father = { is_married = yes }
					}
					scope:real_father = { add_trait = adulterer }
				}
			}
		}
	}
}

### HOUSE MARTELL ###

asoiaf_canon_children_Martell_9_birth_effect = { #Arianne Martell (daughter of Doran)
	create_character = {
		age = 0
		name = "Arianne"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = female
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Martell_9_born_variable
			make_trait_inactive = asoiaf_Martell_9_trait
			add_character_modifier = asoiaf_Martell_9_modifier
			copy_inheritable_appearance_from = character:Martell_asoiaf_9
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = black_hair

			set_sexuality = heterosexual
			add_martial_skill = 5
			add_diplomacy_skill = 9
			add_intrigue_skill = 8
			add_stewardship_skill = 7
			add_learning_skill = 6
			add_trait = beauty_good_2
			
			if = {
				limit = { has_game_rule = asoiaf_canon_children_rule_on_traits }
				add_trait = lustful
				add_trait = brave
				add_trait = ambitious
				add_trait = impatient
				add_trait = shrewd
				
				set_focus = education_intrigue
				add_perk = like_weed_in_a_garden_perk
				add_perk = unshackled_lust_perk
				add_perk = subtle_desire_perk
				add_perk = mortal_adoration_perk
				add_perk = enticing_opportunity_perk
				add_perk = home_advantage_perk
				add_perk = graceful_recovery_perk
				add_perk = smooth_operator_perk
				add_perk = seducer_perk
			}
		}
	}
	hidden_effect = {
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:father = { trigger_event = birth.1003 } #regular
	}
}

asoiaf_canon_children_Martell_10_birth_effect = { #Quentyn Martell (son of Doran)
	create_character = {
		age = 0
		name = "Quentyn"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = male
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Martell_10_born_variable
			make_trait_inactive = asoiaf_Martell_10_trait
			add_character_modifier = asoiaf_Martell_10_modifier
			copy_inheritable_appearance_from = character:Martell_asoiaf_10
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = black_hair

			set_sexuality = heterosexual
			add_martial_skill = 5
			add_diplomacy_skill = 4
			add_intrigue_skill = 4
			add_stewardship_skill = 10
			add_learning_skill = 8
			add_prowess_skill = 6
			
			if = {
				limit = { has_game_rule = asoiaf_canon_children_rule_on_traits }
				add_trait = temperate
				add_trait = diligent
				add_trait = brave
				add_trait = chaste
				add_trait = education_martial_prowess_3
				
				set_focus = education_diplomacy
				add_perk = pedagogy_perk
				add_perk = open_minded_perk
				add_perk = apostate_perk
				add_perk = scientific_perk
				add_perk = planned_cultivation_perk
				add_perk = scholarly_circles_perk
				add_perk = learn_on_the_job_perk
				add_perk = sanctioned_loopholes_perk
				add_perk = scholar_perk

				learn_language = language_valyrian
				#learn_language = language_ghiscari
			}
		}
	}
	hidden_effect = {
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:father = { trigger_event = birth.1003 } #regular
	}
}

asoiaf_canon_children_Martell_11_birth_effect = { #Trystane Martell (son of Doran)
	create_character = {
		age = 0
		name = "Trystane"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = male
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Martell_11_born_variable
			make_trait_inactive = asoiaf_Martell_11_trait
			add_character_modifier = asoiaf_Martell_11_modifier
			copy_inheritable_appearance_from = character:Martell_asoiaf_11
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = black_hair

			set_sexuality = heterosexual
			add_martial_skill = 9
			add_diplomacy_skill = 10
			add_intrigue_skill = 8
			add_stewardship_skill = 8
			add_learning_skill = 7
			add_prowess_skill = 6
			add_trait = beauty_good_3
			
			if = {
				limit = { has_game_rule = asoiaf_canon_children_rule_on_traits }
				add_trait = just
				add_trait = brave
				add_trait = diligent #honorable
				add_trait = compassionate
				add_trait = loyal
				add_trait = education_martial_prowess_2
				
				set_focus = education_diplomacy
				add_perk = stalwart_leader_perk
				add_perk = chivalric_dominance_perk
				add_perk = never_back_down_perk
				add_perk = kingsguard_perk
				add_perk = courtship_perk
				add_perk = promising_prospects_perk
				add_perk = loyalty_and_respect_perk
				add_perk = peacemaker_perk
				add_perk = gallant_perk
			}
		}
	}
	hidden_effect = {
		scope:mother = {
			if = {
				limit = { has_game_rule = asoiaf_canon_children_pregnancy_negation_rule_on }
				add_character_modifier = asoiaf_canon_children_pregnancy_negation_modifier
			}
		}
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:father = { trigger_event = birth.1003 } #regular
	}
}

### HOUSE DAYNE ###

asoiaf_canon_children_Dayne_3_birth_effect = { #Ulrick Dayne (son of Beric)
	create_character = {
		age = 0
		name = "Ulrick"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = male
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Dayne_3_born_variable
			make_trait_inactive = asoiaf_Dayne_3_trait
			add_character_modifier = asoiaf_Dayne_3_modifier
			copy_inheritable_appearance_from = character:Dayne_asoiaf_3
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = neutral_silver_hair
			make_trait_inactive = blue_eyes
		}
	}
	hidden_effect = {
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:father = { trigger_event = birth.1003 } #regular
	}
}
asoiaf_canon_children_Dayne_5_birth_effect = { #Arthur Dayne (son of Beric)
	create_character = {
		age = 0
		name = "Arthur"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = male
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Dayne_5_born_variable
			make_trait_inactive = asoiaf_Dayne_5_trait
			add_character_modifier = asoiaf_Dayne_5_modifier
			copy_inheritable_appearance_from = character:Dayne_asoiaf_5
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = black_hair
			make_trait_inactive = blue_eyes

			set_sexuality = heterosexual
			add_martial_skill = 12
			add_diplomacy_skill = 7
			add_intrigue_skill = 6
			add_stewardship_skill = 8
			add_learning_skill = 5
			add_prowess_skill = 12
			add_trait = bossy
			
			if = {
				limit = { has_game_rule = asoiaf_canon_children_rule_on_traits }
				add_trait = just
				add_trait = brave
				add_trait = diligent
				add_trait = patient
				add_trait = loyal
				add_trait = education_martial_prowess_4 #tier 5 can't be given to children
				add_trait = strong
				add_trait = lifestyle_blademaster
				add_trait_xp = {
					trait = lifestyle_blademaster
					value = 100
				}
				
				set_focus = education_martial
				add_character_modifier = training_for_kingsguard
				add_perk = stalwart_leader_perk
				add_perk = chivalric_dominance_perk
				add_perk = never_back_down_perk
			}
		}
	}
	hidden_effect = {
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:father = { trigger_event = birth.1003 } #regular
	}
}
asoiaf_canon_children_Dayne_4_birth_effect = { #Ashara Dayne (daughter of Beric)
	create_character = {
		age = 0
		name = "Ashara"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = female
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Dayne_4_born_variable
			make_trait_inactive = asoiaf_Dayne_4_trait
			add_character_modifier = asoiaf_Dayne_4_modifier
			copy_inheritable_appearance_from = character:Dayne_asoiaf_4
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = black_hair
			make_trait_inactive = blue_eyes

			set_sexuality = heterosexual
			add_martial_skill = 1
			add_diplomacy_skill = 7
			add_intrigue_skill = 5
			add_stewardship_skill = 5
			add_learning_skill = 5
			add_prowess_skill = 1
			add_trait = beauty_good_3
			add_trait = charming
			
			if = {
				limit = { has_game_rule = asoiaf_canon_children_rule_on_traits }
				add_trait = gregarious
				add_trait = compassionate
				add_trait = trusting
				add_trait = fashionable
				
				set_focus = education_diplomacy
			}
		}
	}
	hidden_effect = {
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:father = { trigger_event = birth.1003 } #regular
	}
}
asoiaf_canon_children_Dayne_6_birth_effect = { #Allyria Dayne (daughter of Beric)
	create_character = {
		age = 0
		name = "Allyria"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = female
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Dayne_6_born_variable
			make_trait_inactive = asoiaf_Dayne_6_trait
			add_character_modifier = asoiaf_Dayne_6_modifier
			copy_inheritable_appearance_from = character:Dayne_asoiaf_6
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = black_hair
			make_trait_inactive = blue_eyes
		}
	}
	hidden_effect = {
		scope:mother = {
			if = {
				limit = { has_game_rule = asoiaf_canon_children_pregnancy_negation_rule_on }
				add_character_modifier = asoiaf_canon_children_pregnancy_negation_modifier
			}
		}
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:father = { trigger_event = birth.1003 } #regular
	}
}
asoiaf_canon_children_Dayne_7_birth_effect = { #Edric Dayne (son of Ulrick)
	create_character = {
		age = 0
		name = "Edric"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = male
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Dayne_7_born_variable
			make_trait_inactive = asoiaf_Dayne_7_trait
			add_character_modifier = asoiaf_Dayne_7_modifier
			copy_inheritable_appearance_from = character:Dayne_asoiaf_7
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = light_blonde_hair
			make_trait_inactive = purple_eyes_8

			add_martial_skill = 5
			add_diplomacy_skill = 5
			add_intrigue_skill = 5
			add_stewardship_skill = 5
			add_learning_skill = 5
			add_prowess_skill = 10
			add_trait = charming
			
			if = {
				limit = { has_game_rule = asoiaf_canon_children_rule_on_traits }
				add_trait = compassionate
				add_trait = brave
				add_trait = diligent
				add_trait = shy
				add_trait = loyal
				
				set_focus = education_martial
			}
		}
	}
	hidden_effect = {
		scope:mother = {
			if = {
				limit = { has_game_rule = asoiaf_canon_children_pregnancy_negation_rule_on }
				add_character_modifier = asoiaf_canon_children_pregnancy_negation_modifier
			}
		}
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:father = { trigger_event = birth.1003 } #regular
	}
}

### HOUSE TULLY ###

asoiaf_canon_children_Tully_2_birth_effect = { #Edmund Tully (son of Hoster)
	create_character = {
		age = 0
		name = "Edmund"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = male
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Tully_2_born_variable
			make_trait_inactive = asoiaf_Tully_2_trait
			add_character_modifier = asoiaf_Tully_2_modifier
			copy_inheritable_appearance_from = character:Tully_asoiaf_2
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = blue_eyes
			make_trait_inactive = auburn_hair

			add_trait = sickly
			
			if = {
				limit = { asoiaf_historical_trigger = yes }
				death = { death_reason = death_stillborn }
			}
		}
	}
	hidden_effect = {
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:father = { trigger_event = birth.1003 } #regular
	}
}

asoiaf_canon_children_Tully_3_birth_effect = { #Denys Tully (son of Hoster)
	create_character = {
		age = 0
		name = "Denys"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = male
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Tully_3_born_variable
			make_trait_inactive = asoiaf_Tully_3_trait
			add_character_modifier = asoiaf_Tully_3_modifier
			copy_inheritable_appearance_from = character:Tully_asoiaf_3
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = blue_eyes
			make_trait_inactive = auburn_hair

			add_trait = sickly
			
			if = {
				limit = { asoiaf_historical_trigger = yes }
				death = { death_reason = death_stillborn }
			}
		}
	}
	hidden_effect = {
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:father = { trigger_event = birth.1003 } #regular
	}
}

asoiaf_canon_children_Tully_4_birth_effect = { #Catelyn Tully (daughter of Hoster)
	create_character = {
		age = 0
		name = "Catelyn"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = female
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Tully_4_born_variable
			make_trait_inactive = asoiaf_Tully_4_trait
			add_character_modifier = asoiaf_Tully_4_modifier
			copy_inheritable_appearance_from = character:Tully_asoiaf_4
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = blue_eyes
			make_trait_inactive = auburn_hair

			set_sexuality = heterosexual
			add_martial_skill = 1
			add_diplomacy_skill = 4
			add_intrigue_skill = 3
			add_stewardship_skill = 6
			add_learning_skill = 3
			
			if = {
				limit = { has_game_rule = asoiaf_canon_children_rule_on_traits }
				add_trait = brave
				add_trait = diligent
				add_trait = honest
				add_trait = stubborn
				add_trait = reckless
				
				set_focus = education_diplomacy
				add_perk = befriend_perk
				add_perk = confidants_perk
				add_perk = flatterer_perk
				add_perk = familial_familiar_perk
				add_perk = groomed_to_rule_perk
				add_perk = thicker_than_water_perk
				add_perk = friendly_counsel_perk
				add_perk = sound_foundations_perk
				add_perk = family_man_perk
			}
		}
	}
	hidden_effect = {
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:father = { trigger_event = birth.1003 } #regular
	}
}

asoiaf_canon_children_Tully_6_birth_effect = { #Lysa Tully (daughter of Hoster)
	create_character = {
		age = 0
		name = "Lysa"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = female
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Tully_6_born_variable
			make_trait_inactive = asoiaf_Tully_6_trait
			add_character_modifier = asoiaf_Tully_6_modifier
			copy_inheritable_appearance_from = character:Tully_asoiaf_6
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = blue_eyes
			make_trait_inactive = auburn_hair

			set_sexuality = heterosexual
			add_martial_skill = 2
			add_diplomacy_skill = 2
			add_intrigue_skill = 4
			add_stewardship_skill = 3
			add_learning_skill = 1
			
			if = {
				limit = { has_game_rule = asoiaf_canon_children_rule_on_traits }
				add_trait = deceitful
				add_trait = trusting
				add_trait = wrathful
				add_trait = arrogant
				#add_trait = lunatic_1
				
				set_focus = education_intrigue
			}
		}
	}
	hidden_effect = {
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:father = { trigger_event = birth.1003 } #regular
	}
}

asoiaf_canon_children_Tully_7_birth_effect = { #Edmure Tully (son of Hoster)
	create_character = {
		age = 0
		name = "Edmure"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = male
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Tully_7_born_variable
			make_trait_inactive = asoiaf_Tully_7_trait
			add_character_modifier = asoiaf_Tully_7_modifier
			copy_inheritable_appearance_from = character:Tully_asoiaf_7
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = blue_eyes
			make_trait_inactive = auburn_hair

			set_sexuality = heterosexual
			add_martial_skill = 8
			add_diplomacy_skill = 8
			add_intrigue_skill = 4
			add_stewardship_skill = 6
			add_learning_skill = 5
			add_prowess_skill = 6
			
			if = {
				limit = { has_game_rule = asoiaf_canon_children_rule_on_traits }
				add_trait = arrogant
				add_trait = impatient
				add_trait = compassionate
				add_trait = diligent
				add_trait = cautious_leader
				
				set_focus = education_martial
			}
		}
	}
	hidden_effect = {
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:father = { trigger_event = birth.1003 } #regular
	}
}

asoiaf_canon_children_Tully_8_birth_effect = { #Patrek Tully (son of Hoster)
	create_character = {
		age = 0
		name = "Patrek"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = male
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Tully_8_born_variable
			make_trait_inactive = asoiaf_Tully_8_trait
			add_character_modifier = asoiaf_Tully_8_modifier
			copy_inheritable_appearance_from = character:Tully_asoiaf_8
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = blue_eyes
			make_trait_inactive = auburn_hair

			add_trait = sickly
			
			if = {
				limit = { asoiaf_historical_trigger = yes }
				death = { death_reason = death_stillborn }
			}
		}
	}
	hidden_effect = {
		scope:mother = {
			if = {
				limit = { has_game_rule = asoiaf_canon_children_pregnancy_negation_rule_on }
				add_character_modifier = asoiaf_canon_children_pregnancy_negation_modifier
			}
			if = {
				limit = { asoiaf_historical_trigger = yes }
				death = { death_reason = death_childbirth }
			}
		}
		scope:father = { #should always be Hoster due to the triggers
			if = {
				limit = { asoiaf_historical_trigger = yes } #if either of the historical game rules are enabled, Minisa is guaranteed to die, so Hoster should get the trait
				add_trait = refusing_marriage
			}
		}
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:father = { trigger_event = birth.1003 } #regular
	}
}

### HOUSE STRONG ###

asoiaf_canon_children_Strong_34_birth_effect = { #Alys Rivers
	create_character = {
		age = 0
		name = "Alys"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = female
		faith = scope:real_father.faith
		culture = scope:real_father.culture
		dynasty_house = scope:mother.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Strong_34_born_variable
			make_trait_inactive = asoiaf_Strong_34_trait
			add_character_modifier = asoiaf_Strong_34_modifier
			copy_inheritable_appearance_from = character:Strong_asoiaf_34
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = black_hair

			set_sexuality = heterosexual
			add_martial_skill = 1
			add_diplomacy_skill = 5
			add_intrigue_skill = 15
			add_stewardship_skill = 13
			add_learning_skill = 20
			add_prowess_skill = 2
			add_trait = bastard
			agot_add_custom_bastard_nickname_effect = yes

			if = {
				limit = { has_game_rule = asoiaf_canon_children_rule_on_traits }
				add_trait = callous
				add_trait = deceitful
				add_trait = stubborn
				add_trait = authoritative
				add_trait = witch
				add_trait = lifestyle_mystic
				add_trait = lifestyle_physician
				
				set_focus = education_intrigue
			}
		}
	}
	hidden_effect = {
		scope:mother = {
			if = {
				limit = {
					is_married = no
					has_game_rule = asoiaf_canon_children_pregnancy_negation_rule_on
				}
				add_character_modifier = asoiaf_canon_children_pregnancy_negation_modifier
			}
		}
		scope:mother = { trigger_event = birth.1002 } #secret bastard
		#BASTARD SECRET STUFF
		if = {
			limit = {
				scope:child = {
					NOT = { scope:father = scope:real_father }
				}
			}
			scope:mother = {
				add_secret = {
					type = secret_disputed_heritage
					target = scope:child
				}
				random_secret = { #Scope the secret
					limit = {
						secret_type = secret_disputed_heritage
						secret_target = scope:child
					}
					save_scope_as = new_secret
				}
				if = {
					limit = {
						has_character_flag = pregnancy_spouse_knows_of_bastardy
						NOT = { has_character_flag = pregnancy_real_father_of_bastard_is_known_flag }
					}
					scope:father = { add_to_list = illegitimacy_secret_knowers }
				}
			}
			scope:real_father = {
				if = {
					limit = { has_inactive_trait = asoiaf_Strong_29_trait } #Lyonel always knows for the sake of simplicity
				}
				add_to_list = illegitimacy_secret_knowers
			}
			every_in_list = {
				list = illegitimacy_secret_knowers
				#A secret bastard is born - Share the news with everyone who knew that it was a bastard
				trigger_event = secret_bastard.0001
			}
		}
		scope:child = { #if he's a bastard, make him a Blackfyre + bastard founder; triggered AFTER the birth event to ensure proper localisation for it
			set_house = scope:real_father.house
			set_father = scope:real_father #Lyonel acknowledges her for the sake of gameplay simplicity
			if = {
				limit = {
					scope:real_father = { is_married = no }
				}
				scope:real_father = { add_trait = fornicator }
			}
		}
	}
}

asoiaf_canon_children_Strong_30_birth_effect = { #Harwin Strong (son of Lyonel)
	create_character = {
		age = 0
		name = "Harwin"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = male
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Strong_30_born_variable
			make_trait_inactive = asoiaf_Strong_30_trait
			add_character_modifier = asoiaf_Strong_30_modifier
			copy_inheritable_appearance_from = character:Strong_asoiaf_30
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = dark_brown_hair

			set_sexuality = heterosexual
			add_martial_skill = 3
			add_diplomacy_skill = 3
			add_intrigue_skill = 3
			add_stewardship_skill = 3
			add_learning_skill = 3
			add_prowess_skill = 6
			
			if = {
				limit = { has_game_rule = asoiaf_canon_children_rule_on_traits }
				add_trait = brave
				add_trait = gregarious
				add_trait = compassionate
				add_trait = wrathful
				add_trait = loyal
				add_trait = strong
				add_trait = education_martial_prowess_4
				
				set_focus = education_martial
			}
		}
	}
	hidden_effect = {
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:father = { trigger_event = birth.1003 } #regular
	}
}

asoiaf_canon_children_Strong_31_birth_effect = { #Larys Strong (son of Lyonel)
	create_character = {
		age = 0
		name = "Larys"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = male
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Strong_31_born_variable
			make_trait_inactive = asoiaf_Strong_31_trait
			add_character_modifier = asoiaf_Strong_31_modifier
			copy_inheritable_appearance_from = character:Strong_asoiaf_31
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = dark_brown_hair

			set_sexuality = heterosexual
			add_martial_skill = 1
			add_diplomacy_skill = 10
			add_intrigue_skill = 10
			add_stewardship_skill = 6
			add_learning_skill = 6
			add_trait = clubfooted
			add_trait = intellect_good_3
			
			if = {
				limit = { has_game_rule = asoiaf_canon_children_rule_on_traits }
				add_trait = patient
				add_trait = deceitful
				add_trait = callous
				add_trait = cynical #ruthless
				
				set_focus = education_intrigue
				add_perk = truth_is_relative_perk
				add_perk = digging_for_dirt_perk
				add_perk = kidnapper_perk
				add_perk = court_of_shadows_perk
				add_perk = prepared_for_anything_perk
				add_perk = swift_execution_perk
				add_perk = a_job_done_right_perk
				add_perk = twice_schemed_perk
				add_perk = schemer_perk
				add_perk = master_of_masses_perk
				add_perk = instructed_spies_perk
				add_perk = convincing_perk
				add_perk = charismatic_perk
				add_perk = little_birds_perk
				add_perk = innocent_children_perk
				add_perk = omerta_perk
				add_perk = sleeper_cells_perk
				add_perk = spider_perk
			}
		}
	}
	hidden_effect = {
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:father = { trigger_event = birth.1003 } #regular
	}
}

asoiaf_canon_children_Strong_32_birth_effect = { #Catelyn Strong (daughter of Lyonel)
	create_character = {
		age = 0
		name = "Catelyn"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = female
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Strong_32_born_variable
			make_trait_inactive = asoiaf_Strong_32_trait
			add_character_modifier = asoiaf_Strong_32_modifier
			copy_inheritable_appearance_from = character:Strong_asoiaf_32
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = dark_brown_hair
		}
	}
	hidden_effect = {
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:father = { trigger_event = birth.1003 } #regular
	}
}

asoiaf_canon_children_Strong_33_birth_effect = { #Lysa Strong (daughter of Lyonel)
	create_character = {
		age = 0
		name = "Lysa"
		father = scope:father
		real_father = scope:real_father
		mother = scope:mother
		gender = female
		faith = scope:father.faith
		culture = scope:father.culture
		dynasty_house = scope:father.house
		location = scope:mother.location
		employer = scope:mother.employer
		random_traits = no
		save_scope_as = child
		after_creation = {
			asoiaf_canon_children_parentage_assignment_effect = yes
			asoiaf_canon_children_join_travel_plan_effect = yes
			set_global_variable = asoiaf_canon_children_Strong_33_born_variable
			make_trait_inactive = asoiaf_Strong_33_trait
			add_character_modifier = asoiaf_Strong_33_modifier
			copy_inheritable_appearance_from = character:Strong_asoiaf_33
			add_character_flag = has_scripted_appearance
			add_character_flag = canon_status_canon
			make_trait_inactive = dark_brown_hair
		}
	}
	hidden_effect = {
		scope:mother = {
			if = {
				limit = { has_game_rule = asoiaf_canon_children_pregnancy_negation_rule_on }
				add_character_modifier = asoiaf_canon_children_pregnancy_negation_modifier
			}
		}
		scope:mother = { trigger_event = birth.1001 } #regular
		scope:father = { trigger_event = birth.1003 } #regular
	}
}

asoiaf_canon_children_assign_pregnancy_negation_modifiers_effect = { #make sure the mothers who get the modifier here match the ones who get it in the above effects (if a mother exceptionally DOESNT up there, she shouldn't here either)
	if = {
		limit = {
			character:Stark_94 = { exists = yes }
			character:Stark_94.mother ?= { is_alive = yes }
			character:Stark_94.mother ?= { is_spouse_of = character:Stark_94.father }
		}
		character:Stark_94.mother = { add_character_modifier = asoiaf_canon_children_pregnancy_negation_modifier }
	}
	if = {
		limit = {
			character:Stark_98 = { exists = yes }
			character:Stark_98.mother ?= { is_alive = yes }
			character:Stark_98.mother ?= { is_spouse_of = character:Stark_98.father }
		}
		character:Stark_98.mother = { add_character_modifier = asoiaf_canon_children_pregnancy_negation_modifier }
	}
	if = {
		limit = {
			character:Stark_103 = { exists = yes }
			character:Stark_103.mother ?= { is_alive = yes }
			character:Stark_103.mother ?= { is_spouse_of = character:Stark_103.father }
		}
		character:Stark_103.mother = { add_character_modifier = asoiaf_canon_children_pregnancy_negation_modifier }
	}
	if = {
		limit = {
			character:Stark_4 = { exists = yes }
			character:Stark_4.mother ?= { is_alive = yes }
			character:Stark_4.mother ?= { is_spouse_of = character:Stark_4.father }
		}
		character:Stark_4.mother = { add_character_modifier = asoiaf_canon_children_pregnancy_negation_modifier }
	}
	if = {
		limit = {
			character:Stark_11 = { exists = yes }
			character:Stark_11.mother ?= { is_alive = yes }
			#character:Stark_11.mother ?= { is_spouse_of = character:Stark_11.father }
		}
		character:Stark_11.mother = { add_character_modifier = asoiaf_canon_children_pregnancy_negation_modifier }
	}
	if = {
		limit = {
			character:Baratheon_1 = { exists = yes }
			character:Baratheon_1.mother ?= { is_alive = yes }
			character:Baratheon_1.mother ?= { is_spouse_of = character:Baratheon_1.father }
		}
		character:Baratheon_1.mother = { add_character_modifier = asoiaf_canon_children_pregnancy_negation_modifier }
	}
	if = {
		limit = {
			character:Baratheon_4 = { exists = yes }
			character:Baratheon_4.mother ?= { is_alive = yes }
			character:Baratheon_4.mother ?= { is_spouse_of = character:Baratheon_4.father }
		}
		character:Baratheon_4.mother = { add_character_modifier = asoiaf_canon_children_pregnancy_negation_modifier }
	}
	if = {
		limit = {
			character:Baratheon_7 = { exists = yes }
			character:Baratheon_7.mother ?= { is_alive = yes }
			#character:Baratheon_7.mother ?= { is_spouse_of = character:Baratheon_7.father }
		}
		character:Baratheon_7.mother = { add_character_modifier = asoiaf_canon_children_pregnancy_negation_modifier }
	}
	if = {
		limit = {
			character:Baratheon_13 = { exists = yes }
			character:Baratheon_13.mother ?= { is_alive = yes }
			character:Baratheon_13.mother ?= { is_spouse_of = character:Baratheon_13.father }
		}
		character:Baratheon_13.mother = { add_character_modifier = asoiaf_canon_children_pregnancy_negation_modifier }
	}
	if = {
		limit = {
			character:Lannister_8 = { exists = yes }
			character:Lannister_8.mother ?= { is_alive = yes }
			character:Lannister_8.mother ?= { is_spouse_of = character:Lannister_8.father }
		}
		character:Lannister_8.mother = { add_character_modifier = asoiaf_canon_children_pregnancy_negation_modifier }
	}
	if = {
		limit = {
			character:Lannister_12 = { exists = yes }
			character:Lannister_12.mother ?= { is_alive = yes }
			character:Lannister_12.mother ?= { is_spouse_of = character:Lannister_12.father }
		}
		character:Lannister_12.mother = { add_character_modifier = asoiaf_canon_children_pregnancy_negation_modifier }
	}
	if = {
		limit = {
			character:Arryn_8 = { exists = yes }
			character:Arryn_8.mother ?= { is_alive = yes }
			#character:Arryn_8.mother ?= { is_spouse_of = character:Arryn_8.father }
		}
		character:Arryn_8.mother = { add_character_modifier = asoiaf_canon_children_pregnancy_negation_modifier }
	}
	if = {
		limit = {
			character:Arryn_80 = { exists = yes }
			character:Arryn_80.mother ?= { is_alive = yes }
			character:Arryn_80.mother ?= { is_spouse_of = character:Arryn_80.father }
		}
		character:Arryn_80.mother = { add_character_modifier = asoiaf_canon_children_pregnancy_negation_modifier }
	}
	if = {
		limit = {
			character:Tyrell_14 = { exists = yes }
			character:Tyrell_14.mother ?= { is_alive = yes }
			character:Tyrell_14.mother ?= { is_spouse_of = character:Tyrell_14.father }
		}
		character:Tyrell_14.mother = { add_character_modifier = asoiaf_canon_children_pregnancy_negation_modifier }
	}
	if = {
		limit = {
			character:Hightower_99 = { exists = yes }
			character:Hightower_99.mother ?= { is_alive = yes }
			character:Hightower_99.mother ?= { is_spouse_of = character:Hightower_99.father }
		}
		character:Hightower_99.mother = { add_character_modifier = asoiaf_canon_children_pregnancy_negation_modifier }
	}
	if = {
		limit = {
			character:Targaryen_30 = { exists = yes }
			character:Targaryen_30.mother ?= { is_alive = yes }
			character:Targaryen_30.mother ?= { is_spouse_of = character:Targaryen_30.father }
		}
		character:Targaryen_30.mother = { add_character_modifier = asoiaf_canon_children_pregnancy_negation_modifier }
	}
	if = {
		limit = {
			character:Targaryen_31 = { exists = yes }
			character:Targaryen_31.mother ?= { is_alive = yes }
			character:Targaryen_31.mother ?= { is_spouse_of = character:Targaryen_31.father }
		}
		character:Targaryen_31.mother = { add_character_modifier = asoiaf_canon_children_pregnancy_negation_modifier }
	}
	if = {
		limit = {
			character:Targaryen_37 = { exists = yes }
			character:Targaryen_37.mother ?= { is_alive = yes }
			character:Targaryen_37.mother ?= { is_spouse_of = character:Targaryen_37.father }
		}
		character:Targaryen_37.mother = { add_character_modifier = asoiaf_canon_children_pregnancy_negation_modifier }
	}
	if = {
		limit = {
			character:Targaryen_37 = { exists = yes }
			character:Targaryen_37.mother ?= { is_alive = yes }
			character:Targaryen_37.mother ?= { is_spouse_of = character:Targaryen_37.father }
		}
		character:Targaryen_37.mother = { add_character_modifier = asoiaf_canon_children_pregnancy_negation_modifier }
	}
	if = {
		limit = {
			character:Targaryen_38 = { exists = yes }
			character:Targaryen_38.mother ?= { is_alive = yes }
			character:Targaryen_38.mother ?= { is_spouse_of = character:Targaryen_38.father }
		}
		character:Targaryen_38.mother = { add_character_modifier = asoiaf_canon_children_pregnancy_negation_modifier }
	}
	if = {
		limit = {
			character:Targaryen_40 = { exists = yes }
			character:Targaryen_40.mother ?= { is_alive = yes }
			character:Targaryen_40.mother ?= { is_spouse_of = character:Targaryen_40.father }
		}
		character:Targaryen_40.mother = { add_character_modifier = asoiaf_canon_children_pregnancy_negation_modifier }
	}
	if = {
		limit = {
			character:Targaryen_39 = { exists = yes }
			character:Targaryen_39.mother ?= { is_alive = yes }
			character:Targaryen_39.mother ?= { is_spouse_of = character:Targaryen_39.father }
		}
		character:Targaryen_39.mother = { add_character_modifier = asoiaf_canon_children_pregnancy_negation_modifier }
	}
	if = {
		limit = {
			character:Targaryen_42 = { exists = yes }
			character:Targaryen_42.mother ?= { is_alive = yes }
			character:Targaryen_42.mother ?= { is_spouse_of = character:Targaryen_42.father }
		}
		character:Targaryen_42.mother = { add_character_modifier = asoiaf_canon_children_pregnancy_negation_modifier }
	}
	if = {
		limit = {
			character:Targaryen_55 = { exists = yes }
			character:Targaryen_55.mother ?= { is_alive = yes }
			character:Targaryen_55.mother ?= { is_spouse_of = character:Targaryen_55.father }
		}
		character:Targaryen_55.mother = { add_character_modifier = asoiaf_canon_children_pregnancy_negation_modifier }
	}
	if = {
		limit = {
			character:asoiaf_Hammer_2 = { exists = yes }
			character:asoiaf_Hammer_2.mother ?= { is_alive = yes }
			character:asoiaf_Hammer_2.mother ?= { is_spouse_of = character:asoiaf_Hammer_2.father }
		}
		character:asoiaf_Hammer_2.mother = { add_character_modifier = asoiaf_canon_children_pregnancy_negation_modifier }
	}
	if = {
		limit = {
			character:Targaryen_59 = { exists = yes }
			character:Targaryen_59.mother ?= { is_alive = yes }
			character:Targaryen_59.mother ?= { is_spouse_of = character:Targaryen_59.father }
		}
		character:Targaryen_59.mother = { add_character_modifier = asoiaf_canon_children_pregnancy_negation_modifier }
	}
	if = {
		limit = {
			character:Targaryen_62 = { exists = yes }
			character:Targaryen_62.mother ?= { is_alive = yes }
			character:Targaryen_62.mother ?= { is_spouse_of = character:Targaryen_62.father }
		}
		character:Targaryen_62.mother = { add_character_modifier = asoiaf_canon_children_pregnancy_negation_modifier }
	}
	if = {
		limit = {
			character:Targaryen_64 = { exists = yes }
			character:Targaryen_64.mother ?= { is_alive = yes }
			character:Targaryen_64.mother ?= { is_spouse_of = character:Targaryen_64.father }
		}
		character:Targaryen_64.mother = { add_character_modifier = asoiaf_canon_children_pregnancy_negation_modifier }
	}
	if = {
		limit = {
			character:Targaryen_68 = { exists = yes }
			character:Targaryen_68.mother ?= { is_alive = yes }
			#character:Targaryen_68.mother ?= { is_spouse_of = character:Targaryen_68.father }
		}
		character:Targaryen_68.mother = { add_character_modifier = asoiaf_canon_children_pregnancy_negation_modifier }
	}
	if = {
		limit = {
			character:Targaryen_61_1 = { exists = yes }
			character:Targaryen_61_1.mother ?= { is_alive = yes }
			character:Targaryen_61_1.mother ?= { is_spouse_of = character:Targaryen_61_1.father }
		}
		character:Targaryen_31.mother = { add_character_modifier = asoiaf_canon_children_pregnancy_negation_modifier }
	}
	if = {
		limit = {
			character:Targaryen_73 = { exists = yes }
			character:Targaryen_73.mother ?= { is_alive = yes }
			character:Targaryen_73.mother ?= { is_spouse_of = character:Targaryen_73.father }
		}
		character:Targaryen_73.mother = { add_character_modifier = asoiaf_canon_children_pregnancy_negation_modifier }
	}
	if = {
		limit = {
			character:Targaryen_80 = { exists = yes }
			character:Targaryen_80.mother ?= { is_alive = yes }
			character:Targaryen_80.mother ?= { is_spouse_of = character:Targaryen_80.father }
		}
		character:Targaryen_80.mother = { add_character_modifier = asoiaf_canon_children_pregnancy_negation_modifier }
	}
	if = {
		limit = {
			character:Targaryen_85 = { exists = yes }
			character:Targaryen_85.mother ?= { is_alive = yes }
			character:Targaryen_85.mother ?= { is_spouse_of = character:Targaryen_85.father }
		}
		character:Targaryen_85.mother = { add_character_modifier = asoiaf_canon_children_pregnancy_negation_modifier }
	}
	if = {
		limit = {
			character:Targaryen_90 = { exists = yes }
			character:Targaryen_90.mother ?= { is_alive = yes }
			character:Targaryen_90.mother ?= { is_spouse_of = character:Targaryen_90.father }
		}
		character:Targaryen_90.mother = { add_character_modifier = asoiaf_canon_children_pregnancy_negation_modifier }
	}
	if = {
		limit = {
			character:Targaryen_135 = { exists = yes }
			character:Targaryen_135.mother ?= { is_alive = yes }
			character:Targaryen_135.mother ?= { is_spouse_of = character:Targaryen_135.father }
		}
		character:Targaryen_135.mother = { add_character_modifier = asoiaf_canon_children_pregnancy_negation_modifier }
	}
	if = {
		limit = {
			character:Targaryen_101 = { exists = yes }
			character:Targaryen_101.mother ?= { is_alive = yes }
			#character:Targaryen_101.mother ?= { is_spouse_of = character:Targaryen_101.father }
		}
		character:Targaryen_101.mother = { add_character_modifier = asoiaf_canon_children_pregnancy_negation_modifier }
	}
	if = {
		limit = {
			character:Targaryen_94 = { exists = yes }
			character:Targaryen_94.mother ?= { is_alive = yes }
			#character:Targaryen_94.mother ?= { is_spouse_of = character:Targaryen_94.father }
		}
		character:Targaryen_94.mother = { add_character_modifier = asoiaf_canon_children_pregnancy_negation_modifier }
	}
	if = {
		limit = {
			character:Targaryen_110 = { exists = yes }
			character:Targaryen_110.mother ?= { is_alive = yes }
			character:Targaryen_110.mother ?= { is_spouse_of = character:Targaryen_110.father }
		}
		character:Targaryen_110.mother = { add_character_modifier = asoiaf_canon_children_pregnancy_negation_modifier }
	}
	if = {
		limit = {
			character:Targaryen_112 = { exists = yes }
			character:Targaryen_112.mother ?= { is_alive = yes }
			character:Targaryen_112.mother ?= { is_spouse_of = character:Targaryen_112.father }
		}
		character:Targaryen_112.mother = { add_character_modifier = asoiaf_canon_children_pregnancy_negation_modifier }
	}
	if = {
		limit = {
			character:Targaryen_114 = { exists = yes }
			character:Targaryen_114.mother ?= { is_alive = yes }
			character:Targaryen_114.mother ?= { is_spouse_of = character:Targaryen_114.father }
		}
		character:Targaryen_114.mother = { add_character_modifier = asoiaf_canon_children_pregnancy_negation_modifier }
	}
	if = {
		limit = {
			character:Targaryen_117 = { exists = yes }
			character:Targaryen_117.mother ?= { is_alive = yes }
			character:Targaryen_117.mother ?= { is_spouse_of = character:Targaryen_117.father }
		}
		character:Targaryen_117.mother = { add_character_modifier = asoiaf_canon_children_pregnancy_negation_modifier }
	}
	if = {
		limit = {
			character:Targaryen_123 = { exists = yes }
			character:Targaryen_123.mother ?= { is_alive = yes }
			character:Targaryen_123.mother ?= { is_spouse_of = character:Targaryen_123.father }
		}
		character:Targaryen_123.mother = { add_character_modifier = asoiaf_canon_children_pregnancy_negation_modifier }
	}
	if = {
		limit = {
			character:Targaryen_130 = { exists = yes }
			character:Targaryen_130.mother ?= { is_alive = yes }
			character:Targaryen_130.mother ?= { is_spouse_of = character:Targaryen_130.father }
		}
		character:Targaryen_130.mother = { add_character_modifier = asoiaf_canon_children_pregnancy_negation_modifier }
	}
	if = {
		limit = {
			character:Targaryen_2 = { exists = yes }
			character:Targaryen_2.mother ?= { is_alive = yes }
			character:Targaryen_2.mother ?= { is_spouse_of = character:Targaryen_2.father }
		}
		character:Targaryen_2.mother = { add_character_modifier = asoiaf_canon_children_pregnancy_negation_modifier }
	}
	if = {
		limit = {
			character:Targaryen_9 = { exists = yes }
			character:Targaryen_9.mother ?= { is_alive = yes }
			character:Targaryen_9.mother ?= { is_spouse_of = character:Targaryen_9.father }
		}
		character:Targaryen_9.mother = { add_character_modifier = asoiaf_canon_children_pregnancy_negation_modifier }
	}
	if = {
		limit = {
			character:Targaryen_11 = { exists = yes }
			character:Targaryen_11.mother ?= { is_alive = yes }
			character:Targaryen_11.mother ?= { is_spouse_of = character:Targaryen_11.father }
		}
		character:Targaryen_11.mother = { add_character_modifier = asoiaf_canon_children_pregnancy_negation_modifier }
	}
	if = {
		limit = {
			character:Velaryon_35 = { exists = yes }
			character:Velaryon_35.mother ?= { is_alive = yes }
			character:Velaryon_35.mother ?= { is_spouse_of = character:Velaryon_35.father }
		}
		character:Velaryon_35.mother = { add_character_modifier = asoiaf_canon_children_pregnancy_negation_modifier }
	}
	if = {
		limit = {
			character:Velaryon_44 = { exists = yes }
			character:Velaryon_44.mother ?= { is_alive = yes }
			#character:Velaryon_44.mother ?= { is_spouse_of = character:Velaryon_44.father }
		}
		character:Velaryon_44.mother = { add_character_modifier = asoiaf_canon_children_pregnancy_negation_modifier }
	}
	if = {
		limit = {
			character:Martell_11 = { exists = yes }
			character:Martell_11.mother ?= { is_alive = yes }
			character:Martell_11.mother ?= { is_spouse_of = character:Martell_11.father }
		}
		character:Martell_11.mother = { add_character_modifier = asoiaf_canon_children_pregnancy_negation_modifier }
	}
	if = {
		limit = {
			character:Tully_8 = { exists = yes }
			character:Tully_8.mother ?= { is_alive = yes }
			character:Tully_8.mother ?= { is_spouse_of = character:Tully_8.father }
		}
		character:Tully_8.mother = { add_character_modifier = asoiaf_canon_children_pregnancy_negation_modifier }
	}
	if = {
		limit = {
			character:Strong_33 = { exists = yes }
			character:Strong_33.mother ?= { is_alive = yes }
			character:Strong_33.mother ?= { is_spouse_of = character:Strong_33.father }
		}
		character:Strong_33.mother = { add_character_modifier = asoiaf_canon_children_pregnancy_negation_modifier }
	}
}