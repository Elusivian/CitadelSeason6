

murder_consequences_known_or_exposed_effect = {
	$MURDERER$ = {
		###ADD TRAITS###
		#Force tooltip is used for everyone but POV to make sure expose secret events looks right for everyone, even though the trait can only be added once. Kinslayer works the same way.
		add_trait_only_force_tooltip_if_not_pov_effect = { TRAIT = murderer POV = $POV$ }
		add_kinslayer_trait_or_nothing_effect = { VICTIM = $VICTIM$ }
		
		# Add piety penalty if the murder was unjust
		if = {
			limit = {
				NOR = {
					any_close_family_member = {
						even_if_dead = yes
						exists = killer
						killer = $VICTIM$
					}
					any_spouse = {
						even_if_dead = yes
						exists = killer
						killer = $VICTIM$
					}
					AND = {
						faith = { has_doctrine = tenet_fp3_fedayeen } #this checks that assassins don't get piety loss for killing unbelievers
						NOT = { faith = $VICTIM$.faith }
					}
				}		
			}
			add_piety = medium_piety_loss
		}
		
		# If we're a clan this affects unity
		if = {
			limit = { # If the victim is landed
				$VICTIM$ = { is_landed = yes }
			}
			add_clan_unity_interaction_effect = {
				CHARACTER = $MURDERER$
				TARGET = $VICTIM$
				VALUE = medium_unity_loss
				DESC = clan_unity_murder.desc
				REVERSE_NON_HOUSE_TARGET = no
			}
		}
		# For unlanded characters, we don't care as much, but you still lose some unity
		else = {
			add_clan_unity_interaction_effect = {
				CHARACTER = $MURDERER$
				TARGET = $VICTIM$
				VALUE = minor_unity_loss
				DESC = clan_unity_murder.desc
				REVERSE_NON_HOUSE_TARGET = no
			}
		}

		# Family Feud
		house_feud_murder_effect = { VICTIM = $VICTIM$ MURDERER = $MURDERER$ }

		# Opinion and dread: we only show this for the murderer.
		if = {
			limit = { this = $POV$ }
			murder_consequences_known_or_exposed_apply_dread_effect = { VICTIM = $VICTIM$ }
			murder_opinion_effect = { VICTIM = $VICTIM$ MURDERER = $MURDERER$ }
		}
		# There are some things you just shouldn't do
		show_as_tooltip = {
			if = {
				limit = {
					$VICTIM$ = { has_character_flag = is_party_baron }
				}
				add_character_modifier = { modifier = party_baron_murdered_the_joy_of_life_modifier }
			}
		}
		hidden_effect = {
			if = {
				limit = {
					OR = {
						exists = local_var:murdered_party_baron
						exists = scope:secret.var:murdered_party_baron
					}
				}
				add_character_modifier = { modifier = party_baron_murdered_the_joy_of_life_modifier }
			}
		}
	}

	# Struggle Catalysts.
	if = {
		limit = {
			$VICTIM$ = { is_vip_struggle_character = yes }
			$MURDERER$ = {
				any_character_struggle = {
					involvement = involved
					activate_struggle_catalyst_secondary_character_involvement_involved_trigger = {
						CATALYST = catalyst_discovery_of_very_important_murder
						CHAR = scope:victim
					}
				}
			}
		}
		$MURDERER$ = {
			every_character_struggle = {
				involvement = involved
				limit = {
					activate_struggle_catalyst_secondary_character_involvement_involved_trigger = {
						CATALYST = catalyst_discovery_of_very_important_murder
						CHAR = scope:victim
					}
				}
				activate_struggle_catalyst = {
					catalyst = catalyst_discovery_of_very_important_murder
					character = $MURDERER$
				}
			}
		}
	}
}

murder_consequences_known_or_exposed_hidden_opinion_effect = {
	$MURDERER$ = {
		###ADD TRAITS###
		#Force tooltip is used for everyone but POV to make sure expose secret events looks right for everyone, even though the trait can only be added once. Kinslayer works the same way.
		add_trait_only_force_tooltip_if_not_pov_effect = { TRAIT = murderer POV = $POV$ }
		add_kinslayer_trait_or_nothing_effect = { VICTIM = $VICTIM$ }
		
		if = { #Add piety penalty if the murder was unjust
			limit = {
				NOR = {
					any_close_family_member = {
						even_if_dead = yes
						exists = killer
						killer = $VICTIM$
					}
					any_spouse = {
						even_if_dead = yes
						exists = killer
						killer = $VICTIM$
					}
					AND = {
						faith = { has_doctrine = tenet_fp3_fedayeen } #this checks that assassins don't get piety loss for killing unbelievers
						NOT = { faith = $VICTIM$.faith }
					}
				}		
			}
			add_piety = medium_piety_loss
		}

		# Family Feud
		house_feud_murder_effect = { VICTIM = $VICTIM$ MURDERER = $MURDERER$ }

		###OPINION AND DREAD###
		#Hide this from POV if they're not the murderer
		if = {
			limit = { this = $POV$ }
			add_dread = 15
			hidden_effect = {
				murder_opinion_effect = { VICTIM = $VICTIM$ MURDERER = $MURDERER$ }
			}
		}
		else = {
			hidden_effect = {
				add_dread = 15
				murder_opinion_effect = { VICTIM = $VICTIM$ MURDERER = $MURDERER$ }
			}
		}
		# There are some things you just shouldn't do
		show_as_tooltip = {
			if = {
				limit = { $VICTIM$ = { has_character_flag = is_party_baron } }
				add_character_modifier = {
					modifier = party_baron_murdered_the_joy_of_life_modifier
				}
			}
		}
		hidden_effect = {
			if = {
				limit = {
					OR = {
						exists = local_var:murdered_party_baron
						exists = scope:secret.var:murdered_party_baron
					}
				}
				add_character_modifier = {
					modifier = party_baron_murdered_the_joy_of_life_modifier
				}
			}
		}
	}

	# Struggle Catalysts.
	if = {
		limit = {
			$VICTIM$ = { is_vip_struggle_character = yes }
			$MURDERER$ = {
				any_character_struggle = {
					involvement = involved
					activate_struggle_catalyst_secondary_character_involvement_involved_trigger = {
						CATALYST = catalyst_discovery_of_very_important_murder
						CHAR = scope:victim
					}
				}
			}
		}
		$MURDERER$ = {
			every_character_struggle = {
				involvement = involved
				limit = {
					activate_struggle_catalyst_secondary_character_involvement_involved_trigger = {
						CATALYST = catalyst_discovery_of_very_important_murder
						CHAR = scope:victim
					}
				}
				activate_struggle_catalyst = {
					catalyst = catalyst_discovery_of_very_important_murder
					character = $MURDERER$
				}
			}
		}
	}
}

unknown_murder_effect = {
	# Party Baron handling
	if = {
		limit = { $VICTIM$ = { has_character_flag = is_party_baron } }
		set_local_variable = {
			name = murdered_party_baron
			value = yes
		}
	}
	# If we're a clan this affects unity
	if = {
		limit = { # If the victim is landed
			$VICTIM$ = { is_landed = yes }
		}
		add_clan_unity_interaction_effect = {
			CHARACTER = $MURDERER$
			TARGET = $VICTIM$
			VALUE = minor_unity_loss
			DESC = clan_unity_murder_unknown.desc
			REVERSE_NON_HOUSE_TARGET = no
		}
	}
	else = { # For unlanded characters, we don't care as much, but you still lose some unity
		add_clan_unity_interaction_effect = {
			CHARACTER = $MURDERER$
			TARGET = $VICTIM$
			VALUE = miniscule_unity_loss
			DESC = clan_unity_murder_unknown.desc
			REVERSE_NON_HOUSE_TARGET = no
		}
	}
	$VICTIM$ = {
		#Killed by murder: set this up first to keep the killer hidden.
		hidden_effect = {
			death = {
				killer = $MURDERER$
				death_reason = $REASON$
			}
		}
		# Hide murderer in tooltip
		show_as_tooltip = {
			death = { death_reason = $REASON$ }
		}
	}
	$MURDERER$ = {
		if = {
			limit = { is_alive = yes }
			hidden_effect = {
				add_secret = {
					type = secret_murder
					target = $VICTIM$
				}
			}
			if = {
				limit = { exists = local_var:murdered_party_baron }
				random_secret = {
					limit = {
						secret_type = secret_murder
						secret_target = $VICTIM$
					}
					set_variable = {
						name = murdered_party_baron
						value = yes
					}
				}
			}
		}
	}
}

#If it's a cannibal eating you - so that that fact is saved for future reference
unknown_cannibal_murder_effect = {
	$VICTIM$ = {
		death = {
			death_reason = death_mysterious
			killer = $MURDERER$
		}
	}
	$MURDERER$ = {
		add_secret = {
			type = secret_murder
			target = $VICTIM$
		}
		random_secret = {
			limit = {
				secret_type = secret_murder
				secret_target = $VICTIM$
			}
			set_variable = { #To set the right death reason if the secret is revealed
				name = was_eaten_by_cannibal
				value = yes
			}
		}
	}
}

#Your head is turned into a bell chime
unknown_bell_murder_effect = {
	$VICTIM$ = {
		death = {
			death_reason = death_mysterious
			killer = $MURDERER$
		}
	}
	$MURDERER$ = {
		add_secret = {
			type = secret_murder
			target = $VICTIM$
		}
		random_secret = {
			limit = {
				secret_type = secret_murder
				secret_target = $VICTIM$
			}
			save_scope_as = bell_secret
			set_variable = { #To set the right death reason if the secret is revealed
				name = was_turned_into_bell_chime 
				value = yes
			}
		}
	}
}


#KNOWN MURDER

# Exposer can be another character, or the murderer themselves if no specific character makes sense
known_murder_effect = {
	$VICTIM$ = { save_scope_as = victim_scope }
	$MURDERER$ = { save_scope_as = murderer_scope }
	hidden_effect = {
		if = {
			limit = { $VICTIM$ = { has_character_flag = is_party_baron } }
			set_local_variable = {
				name = murdered_party_baron
				value = yes
			}
		}
	}
	# If we're a clan this affects unity
	if = {
		limit = { # If the victim is landed
			$VICTIM$ = { is_landed = yes }
		}
		add_clan_unity_interaction_effect = {
			CHARACTER = $MURDERER$
			TARGET = $VICTIM$
			VALUE = medium_unity_loss
			DESC = clan_unity_murder.desc
			REVERSE_NON_HOUSE_TARGET = no
		}
	}
	else = { # For unlanded characters, we don't care as much, but you still lose some unity
		add_clan_unity_interaction_effect = {
			CHARACTER = $MURDERER$
			TARGET = $VICTIM$
			VALUE = minor_unity_loss
			DESC = clan_unity_murder.desc
			REVERSE_NON_HOUSE_TARGET = no
		}
	}
	$VICTIM$ = {
		every_close_family_member = {
			limit = {
				NOR = {
					this = $MURDERER$
					is_scheming_against = {
						target = $VICTIM$
						type = murder
					}
					has_any_bad_relationship_with_character_trigger = { CHARACTER = $VICTIM$ }
					trigger_if = {
						limit = { exists = scope:scheme }
						scope:scheme = { scheme_is_character_agent = prev }
					}
				}
				opinion = {
					target = $VICTIM$
					value > -50
				}
			}
			hidden_effect = {
				random = {
					chance = 25
					modifier = {
			            factor = 2
			            has_trait = wrathful
			        }
			        modifier = {
			            factor = 2
			            has_trait = vengeful
			        }
			        modifier = {
			            factor = 2
			            has_any_good_relationship_with_character_trigger = { CHARACTER = $VICTIM$ }
			        }
			        modifier = {
			        	factor = 2
			        	OR = {
			        		is_parent_of = $VICTIM$
			        		is_child_of = $VICTIM$
			        	} 	
			        }
				    trigger_event = {
						id = bp1_yearly.8050
						days = 15
					}
				}
			}
		}
		death = {
			death_reason = death_murder
			killer = $MURDERER$
		}
		hidden_effect = { set_killer_public = yes }
	}
	$MURDERER$ = {
		hidden_effect = {
			add_secret = {
				type = secret_murder
				target = $VICTIM$
			}
			random_secret = {
				limit = {
					secret_type = secret_murder
					secret_target = $VICTIM$
				}

				set_variable = {
					name = known_murder
					value = yes
				}

				expose_secret = $EXPOSER$
			}
		}
	}
	show_as_tooltip = {
		murder_consequences_known_or_exposed_effect = {
			MURDERER = $MURDERER$
			VICTIM = $VICTIM$
			POV = root
		}
	}
	# Family Feud
	house_feud_murder_effect = { VICTIM = $VICTIM$ MURDERER = $MURDERER$ }
}

known_murder_hidden_opinion_effect = {
	$VICTIM$ = { save_scope_as = victim_scope }
	$MURDERER$ = { save_scope_as = murderer_scope }
	hidden_effect = {
		if = {
			limit = { $VICTIM$ = { has_character_flag = is_party_baron } }
			set_local_variable = {
				name = murdered_party_baron
				value = yes
			}
		}
	}
	$VICTIM$ = {
		every_close_family_member = {
			limit = {
				NOR = {
					this = $MURDERER$
					is_scheming_against = {
						target = $VICTIM$
						type = murder
					}
					has_any_bad_relationship_with_character_trigger = { CHARACTER = $VICTIM$ }
					trigger_if = {
						limit = { exists = scope:scheme }
						scope:scheme = { scheme_is_character_agent = prev }
					}
				}
				opinion = {
					target = $VICTIM$
					value > -50
				}
			}
			hidden_effect = {
				random = {
					chance = 25
					modifier = {
			            factor = 2
			            has_trait = wrathful
			        }
			        modifier = {
			            factor = 2
			            has_trait = vengeful
			        }
			        modifier = {
			            factor = 2
			            has_any_good_relationship_with_character_trigger = { CHARACTER = $VICTIM$ }
			        }
			        modifier = {
			        	factor = 2
			        	OR = {
			        		is_parent_of = $VICTIM$
			        		is_child_of = $VICTIM$
			        	} 	
			        }
				    trigger_event = {
						id = bp1_yearly.8050
						days = 15
					}
				}
			}
		}
		death = {
			death_reason = death_murder
			killer = $MURDERER$
		}
		hidden_effect = { set_killer_public = yes }
	}
	$MURDERER$ = {
		hidden_effect = {
			add_secret = {
				type = secret_murder
				target = $VICTIM$
			}
			random_secret = {
				limit = {
					secret_type = secret_murder
					secret_target = $VICTIM$
				}

				set_variable = {
					name = known_murder
					value = yes
				}

				expose_secret = $EXPOSER$
			}
		}
	}
	show_as_tooltip = {
		murder_consequences_known_or_exposed_hidden_opinion_effect = {
			MURDERER = $MURDERER$
			VICTIM = $VICTIM$
			POV = root
		}
	}
	# Family Feud
	house_feud_murder_effect = { VICTIM = $VICTIM$ MURDERER = $MURDERER$ }
}


murder_opinion_effect = {
	$VICTIM$ = {
		#Victim's family
		###AGOT Added - ESR
		save_scope_as = esr_victim
		every_spouse = {
			limit = { NOT = { this = $MURDERER$ } }
			add_to_temporary_list = close_family_murder_opinion_list
			###AGOT Added - ESR
			add_to_temporary_list = esr_spouse_murder_opinion_list
		}
		
		###AGOT Modified - ESR
		#every_close_family_member = {
		every_close_or_extended_family_member ={
			limit = { NOT = { this = $MURDERER$ } }
			add_to_temporary_list = close_family_murder_opinion_list
			###AGOT / ESR Note close_family_murder_opinion_list stores both close and extened family in esr
		}

		if = {
			limit = {
				any_in_list = {
					list = close_family_murder_opinion_list
					always = yes
				}
			}
			every_in_list = {
				list = close_family_murder_opinion_list
				custom = all_close_family_and_spouses

				###AGOT Modified - ESR
				# add_opinion = {
				# 	target = $MURDERER$
				# 	modifier = murdered_close_family_crime
				# }
				if = {
					limit = {
						OR = {
							is_close_family_of = $VICTIM$
							is_in_list = esr_spouse_murder_opinion_list
						}
					}

					save_scope_as = esr_victim_close_family_member

					add_opinion = {
						target = $MURDERER$
						modifier = murdered_close_family_crime
					}
					
					###Hate by association ( Victim's close family memebers lose opinion of Murder's close family members )
					# Can be replaced by esr_hate_by_association = {HATED= VICTIM= VICTIM_ASSOCIATE= MODIFIER= }
					hidden_effect = {
						$MURDERER$ = {

							every_spouse = {
								limit = { NOT = { this = $VICTIM$ } }
								add_to_temporary_list = esr_murder_close_family_list
							}

							every_close_family_member = {
								limit = { NOT = { this = $VICTIM$ } }
								add_to_temporary_list = esr_murder_close_family_list
							}

							every_in_list = {
								list = esr_murder_close_family_list
								save_scope_as = esr_murder_close_family_member
								scope:esr_victim_close_family_member = {
									if = {
										limit = {
											NOT = {
												has_trait = forgiving
											}
											#AGOT Added
											NOT = {
												this = scope:esr_murder_close_family_member
											}
										}
										add_opinion = {
											target = scope:esr_murder_close_family_member
											modifier = esr_hate_by_association_murder
										}
									}
								}
							}
						}
					}
					###Hate by association/
				}

				else = {
					add_opinion = {
						target = $MURDERER$
						modifier = esr_murdered_extended_family
					}
				}
			}
		}
		#AGOT Disabled, moved to story cycle below
		# #Victim's friends and lovers
		# every_relation = {
		# 	type = friend
		# 	limit = {
		# 		NOR = {
		# 			this = $VICTIM$
		# 			is_in_list = close_family_murder_opinion_list
		# 		}
		# 	}
		# 	add_to_list = victim_close_relations_list
		# }
		# every_relation = {
		# 	type = lover
		# 	limit = {
		# 		NOR = {
		# 			this = $VICTIM$
		# 			is_in_list = close_family_murder_opinion_list
		# 			is_in_list = victim_close_relations_list
		# 		}
		# 	}
		# 	add_to_list = victim_close_relations_list
		# }
		# if = {
		# 	limit = {
		# 		any_in_list = {
		# 			list = victim_close_relations_list
		# 			always = yes
		# 		}
		# 	}
		# 	every_in_list = {
		# 		list = victim_close_relations_list
		# 		custom = all_friends_and_lovers
		# 		add_opinion = {
		# 			target = $MURDERER$
		# 			modifier = executed_close_relation_opinion
		# 		}
		# 	}
		# }
	}
	#Victim's friends and lovers
	###AGOT Added - ESR
	#every_relation doesn't work for dead characters so a story cycle is used
	$MURDERER$ = {
		random_owned_story = {
			limit = {
				story_type = esr_story_cycle_relation_of_the_murdered
				exists = var:murdered_character
				var:murdered_character = $VICTIM$
			}

			if = {
				limit = {
					OR = {
						has_variable_list = esr_murdered_friends
						has_variable_list = esr_murdered_lovers
					}
				}

				if = {
					limit = {
						has_variable_list = esr_murdered_friends
					}
					every_in_list = {
						variable = esr_murdered_friends
						limit = {is_alive = yes}
						add_to_temporary_list = close_relation_murder_opinion_list
					}
				}

				if = {
					limit = {
						has_variable_list = esr_murdered_lovers
					}
					every_in_list = {
						variable = esr_murdered_lovers
						limit = {is_alive = yes}
						add_to_temporary_list = close_relation_murder_opinion_list
					}
				}

				every_in_list = {
					list = close_relation_murder_opinion_list
					custom = esr_all_friends_and_lovers
					add_opinion = {
						target = $MURDERER$
						modifier = executed_close_relation_opinion
					}
				}
			}

			if = {
				limit = {
					has_variable_list = esr_murdered_best_friends
				}

				every_in_list = {
					variable = esr_murdered_best_friends
					limit = {is_alive = yes}
					add_opinion = {
						target = $MURDERER$
						modifier = esr_murdered_best_friend 
					}
				}
			}

			if = {
				limit = {
					has_variable_list = esr_murdered_rivals
				}

				every_in_list = {
					variable = esr_murdered_rivals
					limit = {is_alive = yes}
					custom = esr_rivals
					add_opinion = {
						target = $MURDERER$
						modifier = esr_murdered_rival
					}
				}
			}

			if = {
				limit = {
					has_variable_list = esr_murdered_nemeses
				}
				every_in_list = {
					variable = esr_murdered_nemeses
					limit = {is_alive = yes}
					add_opinion = {
						target = $MURDERER$
						modifier = esr_murdered_nemesis
					}
				}
			}

			if = {
				limit = {
					has_variable_list = esr_murdered_lovers
				}
				every_in_list = {
					variable = esr_murdered_lovers
					limit = {is_alive = yes}
					add_opinion = {
						target = $MURDERER$
						modifier = executed_close_relation_opinion
					}
				}
			}

			if = {
				limit = {
					has_variable_list = esr_murdered_soulmates
				}
				every_in_list = {
					variable = esr_murdered_soulmates
					limit = {is_alive = yes}
					add_opinion = {
						target = $MURDERER$
						modifier = esr_murdered_soulmate
					}
				}
			}
		}
	}
}


attempted_murder_opinion_effect = {
	$VICTIM$ = {
		###AGOT Added - ESR
		save_scope_as = esr_victim
		if = {
			limit = { is_alive = yes }
			add_opinion = {
				target = $MURDERER$
				modifier = attempted_murder_me_crime
			}
			hidden_effect = {
				add_opinion = {
					target = $MURDERER$
					modifier = murder_personal_grudge_opinion
					years = 2
				}
			}
			###AGOT Added - ESR
			### A chance for the surviver to grow closer to forming a rivalry with the schemer
			if = {
				limit = { can_set_relation_rival_if_adult_trigger = { CHARACTER = $MURDERER$ } }
				random = {
					chance = 50
					modifier = {
						factor = 0.5
						$VICTIM$ = { ai_vengefulness <= medium_negative_vengefulness }
					}
					modifier = {
						factor = 1.4
						$VICTIM$ = { ai_vengefulness >= medium_positive_vengefulness }
					}
					modifier = {
						factor = 1.4
						$VICTIM$ = { ai_vengefulness >= high_positive_vengefulness }
					}
					progress_towards_rival_effect = {
						REASON = esr_rival_attempted_murder_vengeful
						CHARACTER = $MURDERER$
						OPINION = 0
					}
				}
			}

			### A chance for the surviving rival to become schemer's nemesis
			if = {
				limit = {
					can_set_relation_nemesis_trigger = { CHARACTER = $MURDERER$ }
					ai_vengefulness >= low_positive_vengefulness
				}
				set_relation_nemesis = {
					target = $MURDERER$
					reason = esr_rival_attempted_murder_vengeful
				}
			}

			if = {
				limit = {
					OR = {
						has_relation_friend = $MURDERER$
						has_relation_lover = $MURDERER$
					}
				}
				add_opinion = {
					target = $MURDERER$
					modifier = betrayed_me_opinion
					opinion = -60
				}
			}
	
			if = {
				limit = {
					OR = {
						has_relation_best_friend = $MURDERER$
						has_relation_soulmate = $MURDERER$
					}
				}
				add_opinion = {
					target = $MURDERER$
					modifier = betrayed_me_opinion
					opinion = -120
				}
			}
			###AGOT Added - ESR
		}

		every_spouse = {
			limit = { NOT = { this = $MURDERER$ } }
			add_to_temporary_list = close_family_murder_opinion_list
			###AGOT Added - ESR
			add_to_temporary_list = esr_spouse_murder_opinion_list
		}
		###AGOT Modified - ESR
		#every_close_family_member = {
		every_close_or_extended_family_member ={
			limit = { NOT = { this = $MURDERER$ } }
			add_to_temporary_list = close_family_murder_opinion_list
		}

		if = {
			limit = {
				any_in_list = {
					list = close_family_murder_opinion_list
					always = yes
				}
			}
			every_in_list = {
				list = close_family_murder_opinion_list
				###AGOT Modified - ESR
				#custom = all_close_family_and_spouses
				custom = all_family_members

				#add_opinion = {
					#target = $MURDERER$
					#modifier = murdered_close_family_crime
				#}

				if = {
					limit = {
						OR = {
							is_close_family_of = $VICTIM$
							is_in_list = esr_spouse_murder_opinion_list
						}
					}
					add_opinion = {
						target = $MURDERER$
						modifier = attempted_murder_close_family_crime
					}					
				}

				else = {
					add_opinion = {
						target = $MURDERER$
						modifier = esr_attempted_murder_extended_family
					}		
				}
				###AGOT Modified - ESR
			}
		}

		###AGOT Added - ESR
		#Victim's friends and lovers
		every_relation = {
			type = friend
			limit = {
				NOR = {
					this = $VICTIM$
					###esr
					this = $MURDERER$
					has_relation_best_friend = $VICTIM$
					#is_in_list = close_family_murder_opinion_list
					###esr/					
				}
			}
			add_to_list = victim_close_relations_list
		}
		every_relation = {
			type = lover
			limit = {
				NOR = {
					this = $VICTIM$
					###esr
					this = $MURDERER$
					has_relation_soulmate = $VICTIM$					
					#is_in_list = close_family_murder_opinion_list
					###esr/
					is_in_list = victim_close_relations_list
				}
			}
			add_to_list = victim_close_relations_list
		}
		if = {
			limit = {
				any_in_list = {
					list = victim_close_relations_list
					always = yes
				}
			}
			every_in_list = {
				list = victim_close_relations_list
				custom = all_friends_and_lovers
				add_opinion = {
					target = $MURDERER$
					modifier = esr_attempted_murder_close_relation_opinion
				}
			}
		}

		###AGOT Added - ESR
		#Victim's best friend and soulmate
		every_relation = {
			type = best_friend
			limit = { NOT = {this = $MURDERER$}}
			add_opinion = {
				target = $MURDERER$
				modifier = esr_attempted_murder_best_friend
			}
		}

		every_relation = {
			type = soulmate
			limit = { NOT = {this = $MURDERER$}}
			add_opinion = {
				target = $MURDERER$
				modifier = esr_attempted_murder_soulmate
			}
		}

		#Victim's rivals and nemesis
		every_relation = {
			type = rival
			limit = {
				NOR = {
					this = $MURDERER$
					has_relation_nemesis = $VICTIM$
					has_trait = just
					has_trait = compassionate
					has_trait = forgiving
					has_trait = honest
					has_trait = trusting
				}
			}
			custom = esr_rivals_attempted
			add_opinion = {
				target = $MURDERER$
				modifier = esr_attempted_murder_rival
			}
		}

		every_relation = {
			type = nemesis

			limit = {
				NOR = {
					this = $MURDERER$
					has_trait = just
					has_trait = compassionate
					has_trait = forgiving
				}
			}
			add_opinion = {
				target = $MURDERER$
				modifier = esr_attempted_murder_nemesis
			}
		}

	}
}

abduct_opinion_effect = {
	$VICTIM$ = {
		add_opinion = {
			target = $ABDUCTER$
			modifier = abducted_me_crime
		}
		#Victim's family
		every_spouse = {
			limit = { NOT = { this = $ABDUCTER$ } }
			add_to_temporary_list = close_family_abduct_opinion_list
		}
		every_close_family_member = {
			limit = { NOT = { this = $ABDUCTER$ } }
			add_to_temporary_list = close_family_abduct_opinion_list
		}

		if = {
			limit = {
				any_in_list = {
					list = close_family_abduct_opinion_list
					always = yes
				}
			}
			every_in_list = {
				list = close_family_abduct_opinion_list
				custom = all_close_family_and_spouses

				add_opinion = {
					target = $ABDUCTER$
					modifier = abducted_close_family_crime
				}
			}
		}
		#Victim's friends and lovers
		every_relation = {
			type = friend
			limit = {
				NOR = {
					this = $ABDUCTER$
					is_in_list = close_family_abduct_opinion_list
				}
			}
			add_to_list = victim_close_relations_list
		}
		every_relation = {
			type = lover
			limit = {
				NOR = {
					this = $VICTIM$
					is_in_list = close_family_abduct_opinion_list
					is_in_list = victim_close_relations_list
				}
			}
			add_to_list = victim_close_relations_list
		}
		if = {
			limit = {
				any_in_list = {
					list = victim_close_relations_list
					always = yes
				}
			}
			every_in_list = {
				list = victim_close_relations_list
				custom = all_friends_and_lovers
				add_opinion = {
					target = $ABDUCTER$
					modifier = abducted_close_relation_opinion
				}
			}
		}
	}
}

attempted_abduction_opinion_effect = {
	$VICTIM$ = {
		if = {
			limit = { is_alive = yes }
			add_opinion = {
				target = $ABDUCTER$
				modifier = attempted_abduct_me_crime
			}
			hidden_effect = {
				add_opinion = {
					target = $ABDUCTER$
					modifier = murder_personal_grudge_opinion
					years = 2
				}
			}
		}
		every_spouse = {
			limit = { NOT = { this = $ABDUCTER$ } }
			add_to_temporary_list = close_family_abduct_opinion_list
		}
		every_close_family_member = {
			limit = { NOT = { this = $ABDUCTER$ } }
			add_to_temporary_list = close_family_abduct_opinion_list
		}

		if = {
			limit = {
				any_in_list = {
					list = close_family_abduct_opinion_list
					always = yes
				}
			}
			every_in_list = {
				list = close_family_abduct_opinion_list
				custom = all_close_family_and_spouses

				add_opinion = {
					target = $ABDUCTER$
					modifier = attempted_abduct_close_family_crime
					years = 20
				}
			}
		}

	}
}


#Pick a Local Creepy Crawly
set_local_venomous_creature_effect = {
	random_list = {
		10 = {
			save_scope_value_as = {
				name = venomous_creature
				value = flag:rare_spider ##Very rare, as spiders poisonous enough to kill a man would need to come from VERY far
			}
		}
		500 = {
			save_scope_value_as = {
				name = venomous_creature
				value = flag:red_scorpion #India, Nepal
			}
			modifier = {
				factor = 0
				trigger_if = {
					limit = {
						exists = location
					}
					NOT = {
						#AGOT Modified
						# location = { geographical_region = world_india }
						location = { geographical_region = world_westeros_dorne_red_dunes }
					}
				}
			}
		}
		1000 = {
			save_scope_value_as = {
				name = venomous_creature
				value = flag:deathstalker #North Africa or Middle East
			}
			modifier = {
				factor = 0
				trigger_if = {
					limit = {
						exists = location
					}
					location = {
						NOR = {
							#AGOT Modified
							# geographical_region = world_africa_north
							# geographical_region = world_middle_east_jerusalem
							# geographical_region = world_middle_east_persia
							geographical_region = world_westeros_dornish_dustbowl
						}
					}
				}
			}
		}
		500 = {
			save_scope_value_as = {
				name = venomous_creature
				value = flag:fat_tail #Arabia, Middle East, Egypt
			}
			modifier = {
				factor = 0
				trigger_if = {
					limit = {
						exists = location
					}
					location = {
						NOR = {
							#AGOT Modified
							# geographical_region = world_middle_east
							# geographical_region = world_africa_north_east
							geographical_region = world_westeros_dornish_mountains
						}
					}
				}
			}
		}
		200 = {
			save_scope_value_as = {
				name = venomous_creature
				value = flag:viper #Everywhere - fallback
			}
			#AGOT Disabled, everywhere
			# modifier = {
			# 	factor = 0
			# 	trigger_if = {
			# 		limit = {
			# 			exists = location
			# 		}
			# 		location = {
			# 			NOR = {
			# 				geographical_region = world_europe_north
			# 				geographical_region = world_europe_east
			# 				geographical_region = world_europe_south_east
			# 			}
			# 		}
			# 	}
			# }
		}
		500 = {
			save_scope_value_as = {
				name = venomous_creature
				value = flag:mamba #Sub-saharan Africa
			}
			modifier = {
				factor = 0
				trigger_if = {
					limit = {
						exists = location
					}
					NOT = {
						#AGOT Modified
						# location = { geographical_region = world_africa_west }
						location = { geographical_region = world_sothoryos }
					}
				}
			}
		}
		250 = {
			save_scope_value_as = {
				name = venomous_creature
				value = flag:boomslang #Sub-saharan Africa
			}
			modifier = {
				factor = 0
				trigger_if = {
					limit = {
						exists = location
					}
					NOT = {
						#AGOT Modified
						# location = { geographical_region = world_africa_west }
						location = { geographical_region = world_sothoryos }
					}
				}
			}
		}
		250 = {
			save_scope_value_as = {
				name = venomous_creature
				value = flag:king_cobra #South-east Asia + India
			}
			modifier = {
				factor = 0
				trigger_if = {
					limit = {
						exists = location
					}
					location = {
						NOR = {
							#AGOT Modified
							# geographical_region = world_india
							# geographical_region = world_burma
							geographical_region = world_westeros_dornish_mountains
						}
					}
				}
			}
		}
		1000 = {
			save_scope_value_as = {
				name = venomous_creature
				value = flag:daboia #India
			}
			modifier = {
				factor = 0
				trigger_if = {
					limit = {
						exists = location
					}
					NAND = {
						#AGOT Modified
						# location = { geographical_region = world_india }
						location = { geographical_region = world_westeros_dorne }
						location = { is_coastal = yes }
					}
				}
			}
		}
		500 = {
			save_scope_value_as = {
				name = venomous_creature
				value = flag:saw_scale #North Africa, Middle East, Pakistan, India
			}
			modifier = {
				factor = 0
				trigger_if = {
					limit = {
						exists = location
					}
					location = {
						NOR = {
							#AGOT Modified
							# geographical_region = world_africa_north
							# geographical_region = world_middle_east
							# geographical_region = world_india
							geographical_region = world_essos_qarth
							geographical_region = world_essos_moraq
						}
					}
				}
			}
		}
		500 = {
			save_scope_value_as = {
				name = venomous_creature
				value = flag:krait #Pakistan, India, Southeast Asia
			}
			modifier = {
				factor = 0
				trigger_if = {
					limit = {
						exists = location
					}
					location = {
						NOR = {
							#AGOT Modified
							# geographical_region = world_india
							# geographical_region = world_burma
							geographical_region = world_jade_sea
						}
					}
				}
			}
		}
		1 = {
			save_scope_value_as = {
				name = venomous_creature
				value = flag:beaked_mammal #Australia
			}
			modifier = {
				factor = 0
				#AGOT Modified
				#stewardship <= 35 #Errr, *amazing* trade routes, I guess?
				trigger_if = {
					limit = {
						exists = location
					}
					location = {
						NOT = { geographical_region = world_sothoryos_wyvern_point }
					}
				}
			}
		}
	}
}
