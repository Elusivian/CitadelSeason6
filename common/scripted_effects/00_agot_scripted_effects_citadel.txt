agot_send_to_citadel_effect = {
	$MAESTER_CANDIDATE$ = {
		# Remove marriages
		if = {
			limit = {
				is_married = yes
			}
			every_spouse = {
				divorce = $MAESTER_CANDIDATE$
			}
		}
		# Break Betrothals
		if = {
			limit = {
				exists = betrothed
			}
			if = {
				limit = {
					has_been_promised_grand_wedding = yes
				}
				break_grand_wedding_betrothal_effect = yes
			}
			else = {
				break_betrothal = betrothed
			}
		}
		# Remove Guardians
		if = {
			limit = {
				any_relation = {
					type = guardian
					exists = this
				}
			}
			every_relation = {
				type = guardian
				$MAESTER_CANDIDATE$ = {
					remove_relation_guardian = prev
				}
			}
		}
		# Remove Wards
		if = {
			limit = {
				any_relation = {
					type = ward
					exists = this
				}
			}
			every_relation = {
				type = ward
				remove_relation_guardian = prev
			}
		}
		# Dropped as Cocubine
		if = {
			limit = {
				is_concubine = yes
			}
			this.concubinist = {
				remove_concubine = $MAESTER_CANDIDATE$
			}
		}
		# Drop Concubines
		if = {
			limit = {
				number_of_concubines > 0
			}
			every_concubine = {
				$MAESTER_CANDIDATE$ = {
					remove_concubine = prev
				}
			}
		}
		# For children, add appropriate learning focus and link inclinations
		if = {
			limit = {
				age < 16
			}

			if = {
				limit = {
					NOT = { has_focus = education_learning }
				}

				if = {
					limit = {
						has_focus = education_diplomacy
					}
					set_variable = {
						name = link_inclination
						value = flag:diplomacy
					}
				}
				else_if = {
					limit = {
						has_focus = education_martial
					}
					set_variable = {
						name = link_inclination
						value = flag:martial
					}
				}
				else_if = {
					limit = {
						has_focus = education_stewardship
					}
					set_variable = {
						name = link_inclination
						value = flag:stewardship
					}
				}
				else_if = {
					limit = {
						has_focus = education_intrigue
					}
					set_variable = {
						name = link_inclination
						value = flag:intrigue
					}
				}
				set_focus = education_learning
			}
			else = {
				set_variable = {
					name = link_inclination
					value = flag:learning
				}
			}
		}
		if = { #If they too old just give em a learning education, add inclination
			limit = {
				age >= 16
			}
			if = {
				limit = { has_trait = education_intrigue_1 }
				remove_trait = education_intrigue_1
				set_variable = {
					name = link_inclination
					value = flag:intrigue
				}
			}
			else_if = {
				limit = { has_trait = education_intrigue_2 }
				remove_trait = education_intrigue_2
				set_variable = {
					name = link_inclination
					value = flag:intrigue
				}
			}
			else_if = {
				limit = { has_trait = education_intrigue_3 }
				remove_trait = education_intrigue_3
				set_variable = {
					name = link_inclination
					value = flag:intrigue
				}
			}
			else_if = {
				limit = { has_trait = education_intrigue_4 }
				remove_trait = education_intrigue_4
				set_variable = {
					name = link_inclination
					value = flag:intrigue
				}
			}
			else_if = {
				limit = { has_trait = education_intrigue_5 }
				remove_trait = education_intrigue_5
				set_variable = {
					name = link_inclination
					value = flag:intrigue
				}
			}
			else_if = {
				limit = { has_trait = education_diplomacy_1 }
				remove_trait = education_diplomacy_1
				set_variable = {
					name = link_inclination
					value = flag:diplomacy
				}
			}
			else_if = {
				limit = { has_trait = education_diplomacy_2 }
				remove_trait = education_diplomacy_2
				set_variable = {
					name = link_inclination
					value = flag:diplomacy
				}
			}
			else_if = {
				limit = { has_trait = education_diplomacy_3 }
				remove_trait = education_diplomacy_3
				set_variable = {
					name = link_inclination
					value = flag:diplomacy
				}
			}
			else_if = {
				limit = { has_trait = education_diplomacy_4 }
				remove_trait = education_diplomacy_4
				set_variable = {
					name = link_inclination
					value = flag:diplomacy
				}
			}
			else_if = {
				limit = { has_trait = education_diplomacy_5 }
				remove_trait = education_diplomacy_5
				set_variable = {
					name = link_inclination
					value = flag:diplomacy
				}
			}
			else_if = {
				limit = { has_trait = education_stewardship_1 }
				remove_trait = education_stewardship_1
				set_variable = {
					name = link_inclination
					value = flag:stewardship
				}
			}
			else_if = {
				limit = { has_trait = education_stewardship_2 }
				remove_trait = education_stewardship_2
				set_variable = {
					name = link_inclination
					value = flag:stewardship
				}
			}
			else_if = {
				limit = { has_trait = education_stewardship_3 }
				remove_trait = education_stewardship_3
				set_variable = {
					name = link_inclination
					value = flag:stewardship
				}
			}
			else_if = {
				limit = { has_trait = education_stewardship_4 }
				remove_trait = education_stewardship_4
				set_variable = {
					name = link_inclination
					value = flag:stewardship
				}
			}
			else_if = {
				limit = { has_trait = education_stewardship_5 }
				remove_trait = education_stewardship_5
				set_variable = {
					name = link_inclination
					value = flag:stewardship
				}
			}
			else_if = {
				limit = { has_trait = education_martial_1 }
				remove_trait = education_martial_1
				set_variable = {
					name = link_inclination
					value = flag:martial
				}
			}
			else_if = {
				limit = { has_trait = education_martial_2 }
				remove_trait = education_martial_2
				set_variable = {
					name = link_inclination
					value = flag:martial
				}
			}
			else_if = {
				limit = { has_trait = education_martial_3 }
				remove_trait = education_martial_3
				set_variable = {
					name = link_inclination
					value = flag:martial
				}
			}
			else_if = {
				limit = { has_trait = education_martial_4 }
				remove_trait = education_martial_4
				set_variable = {
					name = link_inclination
					value = flag:martial
				}
			}
			else_if = {
				limit = { has_trait = education_martial_5 }
				remove_trait = education_martial_5
				set_variable = {
					name = link_inclination
					value = flag:martial
				}
			}
			else = {
				set_variable = {
					name = link_inclination
					value = flag:learning
				}
			}
			random_list = {
				1 = { add_trait = education_learning_1 }
				2 = { add_trait = education_learning_2 }
				2 = { add_trait = education_learning_3 }
				1 = { add_trait = education_learning_4 }
			}
		}
		add_trait = maester
		create_story = story_maester
		create_character_memory = {
			type = agot_joined_citadel
		}
	}

	if = {
		limit = {
			exists = global_var:citadel_title
		}

		global_var:citadel_title.holder = {
			add_courtier = $MAESTER_CANDIDATE$
		}
	}
	else = {
		title:b_the_citadel.holder = {
			add_courtier = $MAESTER_CANDIDATE$
		}
	}
	if = {
		limit = {
			has_trait = refusing_marriage
		}
		remove_trait = refusing_marriage
	}
	if = {
		limit = {
			has_character_modifier = training_for_kingsguard
		}
		remove_character_modifier = training_for_kingsguard
	}

	add_character_flag = blocked_from_leaving
}

#Moved from ninepenny to be more useful
send_traveling_maester_to_citadel = {
	scope:maester = {
		if = {
			limit = {
				has_character_flag = traveling_maester
			}
			remove_character_flag = traveling_maester
		}
		if = {
			limit = {
				NOT = { employer = global_var:citadel_title.holder}
			}
			set_employer = global_var:citadel_title.holder
		}
	}
}

agot_add_chain_link_histories_effect = {
	agot_add_chain_link_effect = { OWNER = root MAESTER = root }
}

#Adds a link to any chain or collection, or makes the first link
agot_add_chain_link_effect = {
	$OWNER$ = { save_scope_as = owner}
	$MAESTER$ = { save_scope_as = maester }

	if = { # If we aleady have some links, we change the artifact
		limit = {
			any_character_artifact = {
				OR = {
					artifact_type = maester_link
					artifact_type = maester_link_collection
				}
			}
		}
		random_character_artifact = {
			limit = {
				OR = {
					artifact_type = maester_link
					artifact_type = maester_link_collection
				}
			}
			# At this point in the link forming, we have chosen which link type to add
			save_scope_as = newly_created_artifact
			agot_artifact_link_set_modifiers = yes
			agot_artifact_link_set_count = yes

			change_variable = {
				name = links_collected
				add = 1
			}
			if = {
				limit = { # If we have two links we change to a collection
					var:links_collected = 2
				}
				reforge_artifact = {
					type = maester_link_collection
					name = agot_artifact_link_collection_name
					visuals = maester_link_collection
				}
			}
			#In any case, the description must be updated to count links properly
			set_artifact_description = agot_artifact_link_collection_desc
		}

		if = {
			limit = {
				has_trait_xp = {
					trait = maester
					value < 100
				}
			}

			add_trait_xp = {
				trait = maester
				value = 6
			}

			if = { #Check immediately to see if they have achieved 100 xp
				limit = {
					has_trait_xp = {
						trait = maester
						value = 100
					}
				}
				# Progress to maester, yayy
				agot_progress_to_maester_effect = { ACOLYTE = root }
			}
		}

	}
	else = { # If we don't have a link, we create the artifact

		agot_create_artifact_chain_link_effect = { OWNER = root }

		if = {
			limit = {
				agot_any_maester_in_citadel = yes
			}
			agot_random_maester_in_location_effect = { LOCATION = global_var:citadel_title.title_province }

			create_character_memory = {
				type = agot_earned_maester_link
				participants = {
					instructor = scope:maester
				}
			}
		}

		if = {
			limit = {
				has_trait = maester
				has_trait_xp = {
					trait = maester
					value = 0
				}
			}
			# Promote to acolyte
			add_trait_xp = {
				trait = maester
				value = 34
			}
		}
	}

	root = {
		remove_variable = link_type
		if = {
			limit = {
				has_variable_list = link_types
			}
			clear_variable_list = link_types
		}
		if = {
			limit = {
				has_trait = maester
				any_character_artifact = {
					OR = {
						artifact_type = maester_link
						artifact_type = maester_link_collection
						artifact_type = maester_chain
					}
					is_equipped = no
					root = { can_equip_artifact = prev }
				}
			}
			random_character_artifact = {
				limit = {
					OR = {
						artifact_type = maester_link
						artifact_type = maester_link_collection
						artifact_type = maester_chain
					}
				}
				equip_artifact_to_owner_replace = yes
			}
		}
	}

}

agot_complete_chain_effect = {

	if = {
		limit = {
			NOT = {
				has_trait = maester
			}
		}
		add_trait = maester
	}

	if = {
		limit = {
			any_character_artifact = {
				OR = {
					artifact_type = maester_link
					artifact_type = maester_link_collection
				}
			}
		}

		random_character_artifact = {
			limit = {
				OR = {
					artifact_type = maester_link
					artifact_type = maester_link_collection
				}
			}
			save_scope_value_as = {
				name = links_collected_scope
				value = var:links_collected
			}
		}
	}

	set_local_variable = {
		name = links_left
		value = 12
	}

	if = {
		limit = {
			exists = scope:links_collected_scope
		}

		set_local_variable = {
			name = links_collected
			value = scope:links_collected_scope
		}

		change_local_variable = {
			name = links_left
			subtract = local_var:links_collected
		}
	}

	while = {
		count < local_var:links_left

		if = {
			limit = {
				NOT = {
					has_variable = link_type
				}
			}

			agot_generate_random_link_types_effect = yes
			random_in_list = {
				variable = link_types
				prev = {
					set_variable = {
						name = link_type
						value = prev
					}
				}
			}
		}

		agot_add_chain_link_effect = { OWNER = root MAESTER = root }
	}
}

agot_add_partial_chain_effect = {
	set_local_variable = {
		name = links
		value = {
			integer_range = {
				min = 1
				max = 11
			}
		}
	}

	while = {
		count < local_var:links
		if = {
			limit = {
				agot_any_maester_in_citadel = yes
			}

			if = {
				limit = {
					NOT = {
						has_variable = link_type
					}
				}

				agot_generate_random_link_types_effect = yes
				random_in_list = {
					variable = link_types
					prev = {
						set_variable = {
							name = link_type
							value = prev
						}
					}
				}
			}

			agot_random_maester_in_location_effect = { LOCATION = global_var:citadel_title.title_province }
			agot_add_chain_link_effect = { OWNER = root MAESTER = scope:maester }
		}
	}
}

# Promote to maester, reforge artifact to chain
agot_progress_to_maester_effect = {
	$ACOLYTE$ = { save_scope_as = acolyte }

	random_character_artifact = {
		limit = {
			artifact_type = maester_link_collection
			#this.creator ?= scope:acolyte
		}
		set_artifact_rarity_masterwork = yes

		reforge_artifact = {
			name = agot_artifact_maester_chain_name
			description = agot_artifact_maester_chain_desc
			type = maester_chain
			visuals = maester_chain
			wealth = scope:wealth
			quality = scope:quality
		}
		equip_artifact_to_owner_replace = yes
	}
	create_character_memory = {
		type = agot_became_maester
	}

	# Will the maester stay at the citadel
	random = {
		chance = { # Max of 35 %
			value = 10 # 1 in 10 maesters stay
			if = {
				limit = {
					learning > 20
				}
				add = 5
			}
			if = { # Maesters with valyrian links are dedicated
				limit = {
					any_character_artifact = {
						artifact_type = maester_chain
						has_variable = vs_links
					}
				}
				add = 10
			}
			if = {
				limit = {
					has_trait_rank = {
						trait = intellect_good
						rank > 0
					}
				}
				add = 10
			}
			if = {
				limit = {
					OR = {
						has_trait = lustful
						has_trait = ambitious
					}
				}
				subtract = 10
			}
		}
		add_character_flag = maester_researcher
	}

	# Set up for archmaester selection
	if = { # Black Iron
		limit = {
			any_character_artifact = {
				artifact_type = maester_chain
				has_variable = black_iron_links
				save_temporary_scope_value_as = {
					name = links
					value = var:black_iron_links
				}
			}
		}
		if = {
			limit = {
				scope:links = 2
			}
			add_character_flag = black_iron_candidate
		}
		else = {
			add_character_flag = black_iron_candidate_lesser
		}
	}

	if = { # Brass
		limit = {
			any_character_artifact = {
				artifact_type = maester_chain
				has_variable = brass_links
				save_temporary_scope_value_as = {
					name = links
					value = var:brass_links
				}
			}
		}
		if = {
			limit = {
				scope:links = 2
			}
			add_character_flag = brass_candidate
		}
		else = {
			add_character_flag = brass_candidate_lesser
		}
	}

	if = { # Bronze
		limit = {
			any_character_artifact = {
				artifact_type = maester_chain
				has_variable = bronze_links
				save_temporary_scope_value_as = {
					name = links
					value = var:bronze_links
				}
			}
		}
		if = {
			limit = {
				scope:links = 2
			}
			add_character_flag = bronze_candidate
		}
		else = {
			add_character_flag = bronze_candidate_lesser
		}
	}

	if = { # Copper
		limit = {
			any_character_artifact = {
				artifact_type = maester_chain
				has_variable = copper_links
				save_temporary_scope_value_as = {
					name = links
					value = var:copper_links
				}
			}
		}
		if = {
			limit = {
				scope:links = 2
			}
			add_character_flag = copper_candidate
		}
		else = {
			add_character_flag = copper_candidate_lesser
		}
	}

	if = { # Electrum
		limit = {
			any_character_artifact = {
				artifact_type = maester_chain
				has_variable = electrum_links
				save_temporary_scope_value_as = {
					name = links
					value = var:electrum_links
				}
			}
		}
		if = {
			limit = {
				scope:links = 2
			}
			add_character_flag = electrum_candidate
		}
		else = {
			add_character_flag = electrum_candidate_lesser
		}
	}

	if = { # Yellow Gold
		limit = {
			any_character_artifact = {
				artifact_type = maester_chain
				has_variable = yellow_gold_links
				save_temporary_scope_value_as = {
					name = links
					value = var:yellow_gold_links
				}
			}
		}
		if = {
			limit = {
				scope:links = 2
			}
			add_character_flag = yellow_gold_candidate
		}
		else = {
			add_character_flag = yellow_gold_candidate_lesser
		}
	}

	if = { # Red Gold
		limit = {
			any_character_artifact = {
				artifact_type = maester_chain
				has_variable = red_gold_links
				save_temporary_scope_value_as = {
					name = links
					value = var:red_gold_links
				}
			}
		}
		if = {
			limit = {
				scope:links = 2
			}
			add_character_flag = red_gold_candidate
		}
		else = {
			add_character_flag = red_gold_candidate_lesser
		}
	}

	if = { # Iron
		limit = {
			any_character_artifact = {
				artifact_type = maester_chain
				has_variable = iron_links
				save_temporary_scope_value_as = {
					name = links
					value = var:iron_links
				}
			}
		}
		if = {
			limit = {
				scope:links = 2
			}
			add_character_flag = iron_candidate
		}
		else = {
			add_character_flag = iron_candidate_lesser
		}
	}

	if = { # Lead
		limit = {
			any_character_artifact = {
				artifact_type = maester_chain
				has_variable = lead_links
				save_temporary_scope_value_as = {
					name = links
					value = var:lead_links
				}
			}
		}
		if = {
			limit = {
				scope:links = 2
			}
			add_character_flag = lead_candidate
		}
		else = {
			add_character_flag = lead_candidate_lesser
		}
	}

	if = { # Pewter
		limit = {
			any_character_artifact = {
				artifact_type = maester_chain
				has_variable = pewter_links
				save_temporary_scope_value_as = {
					name = links
					value = var:pewter_links
				}
			}
		}
		if = {
			limit = {
				scope:links = 2
			}
			add_character_flag = pewter_candidate
		}
		else = {
			add_character_flag = pewter_candidate_lesser
		}
	}

	if = { # Platinum
		limit = {
			any_character_artifact = {
				artifact_type = maester_chain
				has_variable = platinum_links
				save_temporary_scope_value_as = {
					name = links
					value = var:platinum_links
				}
			}
		}
		if = {
			limit = {
				scope:links = 2
			}
			add_character_flag = platinum_candidate
		}
		else = {
			add_character_flag = platinum_candidate_lesser
		}
	}

	if = { # Silver
		limit = {
			any_character_artifact = {
				artifact_type = maester_chain
				has_variable = silver_links
				save_temporary_scope_value_as = {
					name = links
					value = var:silver_links
				}
			}
		}
		if = {
			limit = {
				scope:links = 2
			}
			add_character_flag = silver_candidate
		}
		else = {
			add_character_flag = silver_candidate_lesser
		}
	}

	if = { # Steel
		limit = {
			any_character_artifact = {
				artifact_type = maester_chain
				has_variable = steel_links
				save_temporary_scope_value_as = {
					name = links
					value = var:steel_links
				}
			}
		}
		if = {
			limit = {
				scope:links = 2
			}
			add_character_flag = steel_candidate
		}
		else = {
			add_character_flag = steel_candidate_lesser
		}
	}

	if = { # Tin
		limit = {
			any_character_artifact = {
				artifact_type = maester_chain
				has_variable = tin_links
				save_temporary_scope_value_as = {
					name = links
					value = var:tin_links
				}
			}
		}
		if = {
			limit = {
				scope:links = 2
			}
			add_character_flag = tin_candidate
		}
		else = {
			add_character_flag = tin_candidate_lesser
		}
	}

	if = { # Bismuth
		limit = {
			any_character_artifact = {
				artifact_type = maester_chain
				has_variable = bismuth_links
				save_temporary_scope_value_as = {
					name = links
					value = var:bismuth_links
				}
			}
		}
		if = {
			limit = {
				scope:links = 2
			}
			add_character_flag = bismuth_candidate
		}
		else = {
			add_character_flag = bismuth_candidate_lesser
		}
	}

	if = { # Cast Iron
		limit = {
			any_character_artifact = {
				artifact_type = maester_chain
				has_variable = cast_iron_links
				save_temporary_scope_value_as = {
					name = links
					value = var:cast_iron_links
				}
			}
		}
		if = {
			limit = {
				scope:links = 2
			}
			add_character_flag = cast_iron_candidate
		}
		else = {
			add_character_flag = cast_iron_candidate_lesser
		}
	}

	if = { # Antimony
		limit = {
			any_character_artifact = {
				artifact_type = maester_chain
				has_variable = antimony_links
				save_temporary_scope_value_as = {
					name = links
					value = var:antimony_links
				}
			}
		}
		if = {
			limit = {
				scope:links = 2
			}
			add_character_flag = antimony_candidate
		}
		else = {
			add_character_flag = antimony_candidate_lesser
		}
	}

	if = { # Nickel
		limit = {
			any_character_artifact = {
				artifact_type = maester_chain
				has_variable = nickel_links
				save_temporary_scope_value_as = {
					name = links
					value = var:nickel_links
				}
			}
		}
		if = {
			limit = {
				scope:links = 2
			}
			add_character_flag = nickel_candidate
		}
		else = {
			add_character_flag = nickel_candidate_lesser
		}
	}

	if = { # White Copper
		limit = {
			any_character_artifact = {
				artifact_type = maester_chain
				has_variable = white_copper_links
				save_temporary_scope_value_as = {
					name = links
					value = var:white_copper_links
				}
			}
		}
		if = {
			limit = {
				scope:links = 2
			}
			add_character_flag = white_copper_candidate
		}
		else = {
			add_character_flag = white_copper_candidate_lesser
		}
	}

	if = { # Aluminum
		limit = {
			any_character_artifact = {
				artifact_type = maester_chain
				has_variable = aluminum_links
				save_temporary_scope_value_as = {
					name = links
					value = var:aluminum_links
				}
			}
		}
		if = {
			limit = {
				scope:links = 2
			}
			add_character_flag = aluminum_candidate
		}
		else = {
			add_character_flag = aluminum_candidate_lesser
		}
	}

	if = { # Zinc
		limit = {
			any_character_artifact = {
				artifact_type = maester_chain
				has_variable = zinc_links
				save_temporary_scope_value_as = {
					name = links
					value = var:zinc_links
				}
			}
		}
		if = {
			limit = {
				scope:links = 2
			}
			add_character_flag = zinc_candidate
		}
		else = {
			add_character_flag = zinc_candidate_lesser
		}
	}

	if = { # Valyrian Steel
		limit = {
			any_character_artifact = {
				artifact_type = maester_chain
				has_variable = vs_links
				save_temporary_scope_value_as = {
					name = links
					value = var:vs_links
				}
			}
		}
		if = {
			limit = {
				scope:links = 2
			}
			add_character_flag = vs_candidate
		}
		else = {
			add_character_flag = vs_candidate_lesser
		}
	}

	#Set up personality trait
	if = {
		limit = {
			NOR = {
				has_trait = scholar
				has_trait = theologian
				has_trait = whole_of_body
				has_trait = lifestyle_mystic
				has_trait = lifestyle_herbalist
				has_trait = lifestyle_gardener
				has_trait = architect
				has_trait = diplomat
				has_trait = administrator
				has_trait = torturer
				has_trait = shrewd
				has_trait = journaller
				has_trait = schemer
			}
		}
		random_list = {
			1 = { #Scholar
				#Anyone
				add_trait = scholar
			}
			2 = { #Theologian
				trigger = {
					OR = {
						has_character_flag = bismuth_candidate # Faiths
						has_character_flag = bronze_candidate # Astronomy
					}
				}
				add_trait = theologian
			}
			1 = { # Whole of Body
				trigger = {
					OR = {
						has_character_flag = silver_candidate # Medicine
					}
				}
				add_trait = whole_of_body
			} #Mystic
			3 = {
				trigger = {
					OR = {
						has_character_flag = vs_candidate
					}
				}
				add_trait = lifestyle_mystic
			} #Herbalist
			2 = {
				trigger = {
					OR = {
						has_character_flag = silver_candidate # Medicine
						has_character_flag = platinum_candidate # Agriculture
						has_character_flag = lead_candidate # Poisons
					}
				}
				add_trait = lifestyle_herbalist
			} #Gardener
			2 = {
				trigger = {
					OR = {
						has_character_flag = antimony_candidate # Geography
						has_character_flag = silver_candidate # Healing
						has_character_flag = platinum_candidate # Agriculture
					}
				}
				add_trait = lifestyle_gardener
			} #Architect
			1 = {
				trigger = {
					OR = {
						has_character_flag = pewter_candidate #Architecture
						has_character_flag = zinc_candidate # Engineering
						has_character_flag = antimony_candidate # Geography
					}
				}
				add_trait = architect
			} #Diplomat
			2 = {
				trigger = {
					OR = {
						has_character_flag = black_iron_candidate # Ravenry
						has_character_flag = brass_candidate # Geneology
						has_character_flag = white_copper_candidate # Poly Sci
					}
				}
				add_trait = diplomat
			} #Administrator
			2 = {
				trigger = {
					OR = {
						has_character_flag = yellow_gold_candidate # Money and Accounts
						has_character_flag = aluminum_candidate # Logistics and Supply
						has_character_flag = cast_iron_candidate #Husbandry
					}
				}
				add_trait = administrator
			} #Torturer
			2 = {
				trigger = {
					OR = {
						has_character_flag = electrum_candidate #Cyphers
						has_character_flag = lead_candidate # Poisons
						has_character_flag = nickel_candidate #Alchemy
					}
				}
				add_trait = torturer
			} #Shrewd
			1 = {
				#Honestly anyone works for this
				add_trait = shrewd
			} #Journaller
			1 = {
				#Honestly anyone works for this
				#But we can boost some
				modifier = {
					factor = 2
					OR = {
						has_character_flag = bronze_candidate # Astronomy
						has_character_flag = copper_candidate # History
						has_character_flag = bismuth_candidate # Faiths
					}
				}
				add_trait = journaller
			} #Schemer
			3 = {
				trigger = {
					OR = {
						has_character_flag = black_iron_candidate #Ravenry
						has_character_flag = electrum_candidate #Cyphers
						has_character_flag = lead_candidate # Poisons
						has_character_flag = white_copper_candidate # Poly Sci
					}
				}
				add_trait = schemer
			}
			10 = {} #Some chance for no trait, can fine tune
		}
	}

	if = {
		limit = {
			NOT = { has_trait = lifestyle_physician }
			OR = {
				has_character_flag = lead_candidate # Poisons
				has_character_flag = lead_candidate_lesser
				has_character_flag = silver_candidate # Medicine
				has_character_flag = silver_candidate_lesser
				has_character_flag = nickel_candidate # Alchemical Studies
				has_character_flag = nickel_candidate_lesser
			}
		}
		random_list = {
			1 = {
				add_trait = lifestyle_physician
			}
			1= {}
		}
	}
}

#Called to promote the candidate to archmaester
agot_progress_to_archmaester_effect = {
	$ARCHMAESTER_CANDIDATE$ = { save_scope_as = archmaester_candidate }

	scope:archmaester_candidate = {
		#Set up archmaester,.specialty specific traits
		if = {
			limit = {
				NOT = {
					exists = scope:old_archmaester
				}
			}
			random_list = {
				1 = {
					trigger = {
						NOT = {
							any_living_maester = {
								has_inactive_trait = archmaester_black_iron
							}
						}
					}
					make_trait_inactive = archmaester_black_iron
				}
				1 = {
					trigger = {
						NOT = {
							any_living_maester = {
								has_inactive_trait = archmaester_brass
							}
						}
					}
					make_trait_inactive = archmaester_brass
				}
				1 = {
					trigger = {
						NOT = {
							any_living_maester = {
								has_inactive_trait = archmaester_bronze
							}
						}
					}
					make_trait_inactive = archmaester_bronze
				}
				1 = {
					trigger = {
						NOT = {
							any_living_maester = {
								has_inactive_trait = archmaester_copper
							}
						}
					}
					make_trait_inactive = archmaester_copper
				}
				1 = {
					trigger = {
						NOT = {
							any_living_maester = {
								has_inactive_trait = archmaester_electrum
							}
						}
					}
					make_trait_inactive = archmaester_electrum
				}
				1 = {
					trigger = {
						NOT = {
							any_living_maester = {
								has_inactive_trait = archmaester_yellow_gold
							}
						}
					}
					make_trait_inactive = archmaester_yellow_gold
				}
				1 = {
					trigger = {
						NOT = {
							any_living_maester = {
								has_inactive_trait = archmaester_red_gold
							}
						}
					}
					make_trait_inactive = archmaester_red_gold
				}
				1 = {
					trigger = {
						NOT = {
							any_living_maester = {
								has_inactive_trait = archmaester_iron
							}
						}
					}
					make_trait_inactive = archmaester_iron
				}
				1 = {
					trigger = {
						NOT = {
							any_living_maester = {
								has_inactive_trait = archmaester_pewter
							}
						}
					}
					make_trait_inactive = archmaester_pewter
				}
				1 = {
					trigger = {
						NOT = {
							any_living_maester = {
								has_inactive_trait = archmaester_platinum
							}
						}
					}
					make_trait_inactive = archmaester_platinum
				}
				1 = {
					trigger = {
						NOT = {
							any_living_maester = {
								has_inactive_trait = archmaester_lead
							}
						}
					}
					make_trait_inactive = archmaester_lead
				}
				1 = {
					trigger = {
						NOT = {
							any_living_maester = {
								has_inactive_trait = archmaester_silver
							}
						}
					}
					make_trait_inactive = archmaester_silver
				}
				1 = {
					trigger = {
						NOT = {
							any_living_maester = {
								has_inactive_trait = archmaester_steel
							}
						}
					}
					make_trait_inactive = archmaester_steel
				}
				1 = {
					trigger = {
						NOT = {
							any_living_maester = {
								has_inactive_trait = archmaester_tin
							}
						}
					}
					make_trait_inactive = archmaester_tin
				}
				1 = {
					trigger = {
						NOT = {
							any_living_maester = {
								has_inactive_trait = archmaester_bismuth
							}
						}
					}
					make_trait_inactive = archmaester_bismuth
				}
				1 = {
					trigger = {
						NOT = {
							any_living_maester = {
								has_inactive_trait = archmaester_cast_iron
							}
						}
					}
					make_trait_inactive = archmaester_cast_iron
				}
				1 = {
					trigger = {
						NOT = {
							any_living_maester = {
								has_inactive_trait = archmaester_antimony
							}
						}
					}
					make_trait_inactive = archmaester_antimony
				}
				1 = {
					trigger = {
						NOT = {
							any_living_maester = {
								has_inactive_trait = archmaester_nickel
							}
						}
					}
					make_trait_inactive = archmaester_nickel
				}
				1 = {
					trigger = {
						NOT = {
							any_living_maester = {
								has_inactive_trait = archmaester_white_copper
							}
						}
					}
					make_trait_inactive = archmaester_white_copper
				}
				1 = {
					trigger = {
						NOT = {
							any_living_maester = {
								has_inactive_trait = archmaester_aluminum
							}
						}
					}
					make_trait_inactive = archmaester_aluminum
				}
				1 = {
					trigger = {
						NOT = {
							any_living_maester = {
								has_inactive_trait = archmaester_zinc
							}
						}
					}
					make_trait_inactive = archmaester_zinc
				}
				1 = {
					trigger = {
						NOT = {
							any_living_maester = {
								has_inactive_trait = archmaester_vs
							}
						}
					}
					make_trait_inactive = archmaester_vs
				}
				1 = { # Should only fire if all archmaesters are alive
					trigger = {
						AND = {
							any_living_maester = {
								has_inactive_trait = archmaester_black_iron
							}
							any_living_maester = {
								has_inactive_trait = archmaester_brass
							}
							any_living_maester = {
								has_inactive_trait = archmaester_bronze
							}
							any_living_maester = {
								has_inactive_trait = archmaester_copper
							}
							any_living_maester = {
								has_inactive_trait = archmaester_electrum
							}
							any_living_maester = {
								has_inactive_trait = archmaester_yellow_gold
							}
							any_living_maester = {
								has_inactive_trait = archmaester_red_gold
							}
							any_living_maester = {
								has_inactive_trait = archmaester_iron
							}
							any_living_maester = {
								has_inactive_trait = archmaester_lead
							}
							any_living_maester = {
								has_inactive_trait = archmaester_pewter
							}
							any_living_maester = {
								has_inactive_trait = archmaester_platinum
							}
							any_living_maester = {
								has_inactive_trait = archmaester_silver
							}
							any_living_maester = {
								has_inactive_trait = archmaester_steel
							}
							any_living_maester = {
								has_inactive_trait = archmaester_tin
							}
							any_living_maester = {
								has_inactive_trait = archmaester_bismuth
							}
							any_living_maester = {
								has_inactive_trait = archmaester_cast_iron
							}
							any_living_maester = {
								has_inactive_trait = archmaester_antimony
							}
							any_living_maester = {
								has_inactive_trait = archmaester_nickel
							}
							any_living_maester = {
								has_inactive_trait = archmaester_white_copper
							}
							any_living_maester = {
								has_inactive_trait = archmaester_aluminum
							}
							any_living_maester = {
								has_inactive_trait = archmaester_zinc
							}
							any_living_maester = {
								has_inactive_trait = archmaester_vs
							}
						}
					}
					set_local_variable = {
						name = archmaesters_full
						value = yes
					}
				}
			}
		}
		else = {
			scope:old_archmaester = {
				switch = {
					trigger = has_inactive_trait
					archmaester_black_iron = {
						prev = {
							if = {
								limit = {
									NOT = { has_inactive_trait = archmaester_black_iron }
								}
								make_trait_inactive = archmaester_black_iron
							}
						}
						random_character_artifact = {
							limit = {
								artifact_type = archmaester_mask
								var:specialty ?= flag:black_iron
							}
							save_scope_as = mask
						}

						random_character_artifact = {
							limit = {
								artifact_type = archmaester_ring
								var:specialty ?= flag:black_iron
							}
							save_scope_as = ring
						}

						random_character_artifact = {
							limit = {
								artifact_type = archmaester_rod
								var:specialty ?= flag:black_iron
							}
							save_scope_as = rod
						}
					}
					archmaester_brass = {
						prev = {
							if = {
								limit = {
									NOT = { has_inactive_trait = archmaester_brass }
								}
								make_trait_inactive = archmaester_brass
							}
						}
						random_character_artifact = {
							limit = {
								artifact_type = archmaester_mask
								var:specialty ?= flag:brass
							}
							save_scope_as = mask
						}

						random_character_artifact = {
							limit = {
								artifact_type = archmaester_ring
								var:specialty ?= flag:brass
							}
							save_scope_as = ring
						}

						random_character_artifact = {
							limit = {
								artifact_type = archmaester_rod
								var:specialty ?= flag:brass
							}
							save_scope_as = rod
						}
					}
					archmaester_bronze = {
						prev = {
							if = {
								limit = {
									NOT = { has_inactive_trait = archmaester_bronze }
								}
								make_trait_inactive = archmaester_bronze
							}
						}
						random_character_artifact = {
							limit = {
								artifact_type = archmaester_mask
								var:specialty ?= flag:bronze
							}
							save_scope_as = mask
						}

						random_character_artifact = {
							limit = {
								artifact_type = archmaester_ring
								var:specialty ?= flag:bronze
							}
							save_scope_as = ring
						}

						random_character_artifact = {
							limit = {
								artifact_type = archmaester_rod
								var:specialty ?= flag:bronze
							}
							save_scope_as = rod
						}
					}
					archmaester_copper = {
						prev = {
							if = {
								limit = {
									NOT = { has_inactive_trait = archmaester_copper }
								}
								make_trait_inactive = archmaester_copper
							}
						}
						random_character_artifact = {
							limit = {
								artifact_type = archmaester_mask
								var:specialty ?= flag:copper
							}
							save_scope_as = mask
						}

						random_character_artifact = {
							limit = {
								artifact_type = archmaester_ring
								var:specialty ?= flag:copper
							}
							save_scope_as = ring
						}

						random_character_artifact = {
							limit = {
								artifact_type = archmaester_rod
								var:specialty ?= flag:copper
							}
							save_scope_as = rod
						}
					}
					archmaester_electrum = {
						prev = {
							if = {
								limit = {
									NOT = { has_inactive_trait = archmaester_electrum }
								}
								make_trait_inactive = archmaester_electrum
							}
						}
						random_character_artifact = {
							limit = {
								artifact_type = archmaester_mask
								var:specialty ?= flag:electrum
							}
							save_scope_as = mask
						}

						random_character_artifact = {
							limit = {
								artifact_type = archmaester_ring
								var:specialty ?= flag:electrum
							}
							save_scope_as = ring
						}

						random_character_artifact = {
							limit = {
								artifact_type = archmaester_rod
								var:specialty ?= flag:electrum
							}
							save_scope_as = rod
						}
					}
					archmaester_yellow_gold = {
						prev = {
							if = {
								limit = {
									NOT = { has_inactive_trait = archmaester_yellow_gold }
								}
								make_trait_inactive = archmaester_yellow_gold
							}
						}
						random_character_artifact = {
							limit = {
								artifact_type = archmaester_mask
								var:specialty ?= flag:yellow_gold
							}
							save_scope_as = mask
						}

						random_character_artifact = {
							limit = {
								artifact_type = archmaester_ring
								var:specialty ?= flag:yellow_gold
							}
							save_scope_as = ring
						}

						random_character_artifact = {
							limit = {
								artifact_type = archmaester_rod
								var:specialty ?= flag:yellow_gold
							}
							save_scope_as = rod
						}
					}
					archmaester_red_gold = {
						prev = {
							if = {
								limit = {
									NOT = { has_inactive_trait = archmaester_red_gold }
								}
								make_trait_inactive = archmaester_red_gold
							}
						}
						random_character_artifact = {
							limit = {
								artifact_type = archmaester_mask
								var:specialty ?= flag:red_gold
							}
							save_scope_as = mask
						}

						random_character_artifact = {
							limit = {
								artifact_type = archmaester_ring
								var:specialty ?= flag:red_gold
							}
							save_scope_as = ring
						}

						random_character_artifact = {
							limit = {
								artifact_type = archmaester_rod
								var:specialty ?= flag:red_gold
							}
							save_scope_as = rod
						}
					}
					archmaester_iron = {
						prev = {
							if = {
								limit = {
									NOT = { has_inactive_trait = archmaester_iron }
								}
								make_trait_inactive = archmaester_iron
							}
						}
						random_character_artifact = {
							limit = {
								artifact_type = archmaester_mask
								var:specialty ?= flag:iron
							}
							save_scope_as = mask
						}

						random_character_artifact = {
							limit = {
								artifact_type = archmaester_ring
								var:specialty ?= flag:iron
							}
							save_scope_as = ring
						}

						random_character_artifact = {
							limit = {
								artifact_type = archmaester_rod
								var:specialty ?= flag:iron
							}
							save_scope_as = rod
						}
					}
					archmaester_lead = {
						prev = {
							if = {
								limit = {
									NOT = { has_inactive_trait = archmaester_lead }
								}
								make_trait_inactive = archmaester_lead
							}
						}
						random_character_artifact = {
							limit = {
								artifact_type = archmaester_mask
								var:specialty ?= flag:lead
							}
							save_scope_as = mask
						}

						random_character_artifact = {
							limit = {
								artifact_type = archmaester_ring
								var:specialty ?= flag:lead
							}
							save_scope_as = ring
						}

						random_character_artifact = {
							limit = {
								artifact_type = archmaester_rod
								var:specialty ?= flag:lead
							}
							save_scope_as = rod
						}
					}
					archmaester_pewter = {
						prev = {
							if = {
								limit = {
									NOT = { has_inactive_trait = archmaester_pewter }
								}
								make_trait_inactive = archmaester_pewter
							}
						}
						random_character_artifact = {
							limit = {
								artifact_type = archmaester_mask
								var:specialty ?= flag:pewter
							}
							save_scope_as = mask
						}

						random_character_artifact = {
							limit = {
								artifact_type = archmaester_ring
								var:specialty ?= flag:pewter
							}
							save_scope_as = ring
						}

						random_character_artifact = {
							limit = {
								artifact_type = archmaester_rod
								var:specialty ?= flag:pewter
							}
							save_scope_as = rod
						}
					}
					archmaester_platinum = {
						prev = {
							if = {
								limit = {
									NOT = { has_inactive_trait = archmaester_platinum }
								}
								make_trait_inactive = archmaester_platinum
							}
						}
						random_character_artifact = {
							limit = {
								artifact_type = archmaester_mask
								var:specialty ?= flag:platinum
							}
							save_scope_as = mask
						}

						random_character_artifact = {
							limit = {
								artifact_type = archmaester_ring
								var:specialty ?= flag:platinum
							}
							save_scope_as = ring
						}

						random_character_artifact = {
							limit = {
								artifact_type = archmaester_rod
								var:specialty ?= flag:platinum
							}
							save_scope_as = rod
						}
					}
					archmaester_silver = {
						prev = {
							if = {
								limit = {
									NOT = { has_inactive_trait = archmaester_silver }
								}
								make_trait_inactive = archmaester_silver
							}
						}
						random_character_artifact = {
							limit = {
								artifact_type = archmaester_mask
								var:specialty ?= flag:silver
							}
							save_scope_as = mask
						}

						random_character_artifact = {
							limit = {
								artifact_type = archmaester_ring
								var:specialty ?= flag:silver
							}
							save_scope_as = ring
						}

						random_character_artifact = {
							limit = {
								artifact_type = archmaester_rod
								var:specialty ?= flag:silver
							}
							save_scope_as = rod
						}
					}
					archmaester_steel = {
						prev = {
							if = {
								limit = {
									NOT = { has_inactive_trait = archmaester_steel }
								}
								make_trait_inactive = archmaester_steel
							}
						}
						random_character_artifact = {
							limit = {
								artifact_type = archmaester_mask
								var:specialty ?= flag:steel
							}
							save_scope_as = mask
						}

						random_character_artifact = {
							limit = {
								artifact_type = archmaester_ring
								var:specialty ?= flag:steel
							}
							save_scope_as = ring
						}

						random_character_artifact = {
							limit = {
								artifact_type = archmaester_rod
								var:specialty ?= flag:steel
							}
							save_scope_as = rod
						}
					}
					archmaester_tin = {
						prev = {
							if = {
								limit = {
									NOT = { has_inactive_trait = archmaester_tin }
								}
								make_trait_inactive = archmaester_tin
							}
						}
						random_character_artifact = {
							limit = {
								artifact_type = archmaester_mask
								var:specialty ?= flag:tin
							}
							save_scope_as = mask
						}

						random_character_artifact = {
							limit = {
								artifact_type = archmaester_ring
								var:specialty ?= flag:tin
							}
							save_scope_as = ring
						}

						random_character_artifact = {
							limit = {
								artifact_type = archmaester_rod
								var:specialty ?= flag:tin
							}
							save_scope_as = rod
						}
					}
					archmaester_bismuth = {
						prev = {
							if = {
								limit = {
									NOT = { has_inactive_trait = archmaester_bismuth }
								}
								make_trait_inactive = archmaester_bismuth
							}
						}
						random_character_artifact = {
							limit = {
								artifact_type = archmaester_mask
								var:specialty ?= flag:bismuth
							}
							save_scope_as = mask
						}

						random_character_artifact = {
							limit = {
								artifact_type = archmaester_ring
								var:specialty ?= flag:bismuth
							}
							save_scope_as = ring
						}

						random_character_artifact = {
							limit = {
								artifact_type = archmaester_rod
								var:specialty ?= flag:bismuth
							}
							save_scope_as = rod
						}
					}
					archmaester_cast_iron = {
						prev = {
							if = {
								limit = {
									NOT = { has_inactive_trait = archmaester_cast_iron }
								}
								make_trait_inactive = archmaester_cast_iron
							}
						}
						random_character_artifact = {
							limit = {
								artifact_type = archmaester_mask
								var:specialty ?= flag:cast_iron
							}
							save_scope_as = mask
						}

						random_character_artifact = {
							limit = {
								artifact_type = archmaester_ring
								var:specialty ?= flag:cast_iron
							}
							save_scope_as = ring
						}

						random_character_artifact = {
							limit = {
								artifact_type = archmaester_rod
								var:specialty ?= flag:cast_iron
							}
							save_scope_as = rod
						}
					}
					archmaester_antimony = {
						prev = {
							if = {
								limit = {
									NOT = { has_inactive_trait = archmaester_antimony }
								}
								make_trait_inactive = archmaester_antimony
							}
						}
						random_character_artifact = {
							limit = {
								artifact_type = archmaester_mask
								var:specialty ?= flag:antimony
							}
							save_scope_as = mask
						}

						random_character_artifact = {
							limit = {
								artifact_type = archmaester_ring
								var:specialty ?= flag:antimony
							}
							save_scope_as = ring
						}

						random_character_artifact = {
							limit = {
								artifact_type = archmaester_rod
								var:specialty ?= flag:antimony
							}
							save_scope_as = rod
						}
					}
					archmaester_nickel = {
						prev = {
							if = {
								limit = {
									NOT = { has_inactive_trait = archmaester_nickel }
								}
								make_trait_inactive = archmaester_nickel
							}
						}
						random_character_artifact = {
							limit = {
								artifact_type = archmaester_mask
								var:specialty ?= flag:nickel
							}
							save_scope_as = mask
						}

						random_character_artifact = {
							limit = {
								artifact_type = archmaester_ring
								var:specialty ?= flag:nickel
							}
							save_scope_as = ring
						}

						random_character_artifact = {
							limit = {
								artifact_type = archmaester_rod
								var:specialty ?= flag:nickel
							}
							save_scope_as = rod
						}
					}
					archmaester_white_copper = {
						prev = {
							if = {
								limit = {
									NOT = { has_inactive_trait = archmaester_white_copper }
								}
								make_trait_inactive = archmaester_white_copper
							}
						}
						random_character_artifact = {
							limit = {
								artifact_type = archmaester_mask
								var:specialty ?= flag:white_copper
							}
							save_scope_as = mask
						}

						random_character_artifact = {
							limit = {
								artifact_type = archmaester_ring
								var:specialty ?= flag:white_copper
							}
							save_scope_as = ring
						}

						random_character_artifact = {
							limit = {
								artifact_type = archmaester_rod
								var:specialty ?= flag:white_copper
							}
							save_scope_as = rod
						}
					}
					archmaester_aluminum = {
						prev = {
							if = {
								limit = {
									NOT = { has_inactive_trait = archmaester_aluminum }
								}
								make_trait_inactive = archmaester_aluminum
							}
						}
						random_character_artifact = {
							limit = {
								artifact_type = archmaester_mask
								var:specialty ?= flag:aluminum
							}
							save_scope_as = mask
						}

						random_character_artifact = {
							limit = {
								artifact_type = archmaester_ring
								var:specialty ?= flag:aluminum
							}
							save_scope_as = ring
						}

						random_character_artifact = {
							limit = {
								artifact_type = archmaester_rod
								var:specialty ?= flag:aluminum
							}
							save_scope_as = rod
						}
					}
					archmaester_zinc = {
						prev = {
							if = {
								limit = {
									NOT = { has_inactive_trait = archmaester_zinc }
								}
								make_trait_inactive = archmaester_zinc
							}
						}
						random_character_artifact = {
							limit = {
								artifact_type = archmaester_mask
								var:specialty ?= flag:zinc
							}
							save_scope_as = mask
						}

						random_character_artifact = {
							limit = {
								artifact_type = archmaester_ring
								var:specialty ?= flag:zinc
							}
							save_scope_as = ring
						}

						random_character_artifact = {
							limit = {
								artifact_type = archmaester_rod
								var:specialty ?= flag:zinc
							}
							save_scope_as = rod
						}
					}
					archmaester_vs = {
						prev = {
							if = {
								limit = {
									NOT = { has_inactive_trait = archmaester_vs }
								}
								make_trait_inactive = archmaester_vs
							}
						}
						random_character_artifact = {
							limit = {
								artifact_type = archmaester_mask
								var:specialty ?= flag:vs
							}
							save_scope_as = mask
						}

						random_character_artifact = {
							limit = {
								artifact_type = archmaester_ring
								var:specialty ?= flag:vs
							}
							save_scope_as = ring
						}

						random_character_artifact = {
							limit = {
								artifact_type = archmaester_rod
								var:specialty ?= flag:vs
							}
							save_scope_as = rod
						}
					}
				}
			}
		}


		if = {
			limit = {
				NOT = {
					var:archmaesters_full ?= yes
				}
			}

			add_trait = archmaester

			if = {
				limit = {
					NOT = {
						location ?= global_var:citadel_title.title_province
					}
				}

				if = {
					limit = {
						has_character_flag = blocked_from_leaving
					}
					remove_character_flag = blocked_from_leaving
				}

				global_var:citadel_title.holder = {
					add_courtier = prev
				}
			}

			#Change ownership of artifacts or make them if they don't exist
			if = {
				limit = {
					exists = scope:mask
				}
				scope:mask = {
					set_owner = scope:archmaester_candidate
					equip_artifact_to_owner_replace = yes
				}
			}
			else = {
				agot_create_artifact_archmaester_mask_effect = { OWNER = scope:archmaester_candidate }
			}

			if = {
				limit = {
					exists = scope:ring
				}
				scope:ring = {
					set_owner = scope:archmaester_candidate
					equip_artifact_to_owner_replace = yes
				}
			}
			else = {
				agot_create_artifact_archmaester_ring_effect = { OWNER = scope:archmaester_candidate }
			}

			if = {
				limit = {
					exists = scope:rod
				}
				scope:rod = {
					set_owner = scope:archmaester_candidate
					equip_artifact_to_owner_replace = yes
				}
			}
			else = {
				agot_create_artifact_archmaester_rod_effect = { OWNER = scope:archmaester_candidate }
			}

			create_character_memory = {
				type = agot_became_archmaester
			}
		}

		if = {
			limit = {
				scope:old_archmaester ?= {
					has_inactive_trait = archmaester_vs
				}
			}

			scope:old_archmaester = {
				random_character_artifact = {
					limit = {
						has_variable = vs_candle
					}
					set_owner = {
						target = scope:archmaester_candidate
					}
				}
			}
		}
	}
}

#An effect to fill the archmaester ranks at game start
agot_seed_archmaesters_effect = {
	set_local_variable = {
		name = living_archmaesters
		value = 0
	}

	every_living_maester = {
		limit = {
			has_trait = archmaester
		}
		change_local_variable = {
			name = living_archmaesters
			add = 1
		}
	}

	set_local_variable = {
		name = archmaesters_to_seed
		value = 22
	}

	change_local_variable = {
		name = archmaesters_to_seed
		subtract = local_var:living_archmaesters
	}

	while = {
		count < local_var:archmaesters_to_seed

		create_character = {
			employer = global_var:citadel_title.holder
			template = archmaester_character
			age = { 40 60 }
			dynasty = none
			save_scope_as = archmaester
		}
	}
}

agot_grab_new_maester_effect = {
	if = {  #find maester
		limit = {
			any_pool_character = {
				province = scope:ruler.capital_province
				has_trait_xp = {
					trait = maester
					value = 100
				}
				NOT = {
					has_trait = archmaester
				}
				is_adult = yes
			}
		}
		random_pool_character = {
			province = scope:ruler.capital_province
			limit = {
				has_trait_xp = {
					trait = maester
					value = 100
				}
				NOT = {
					has_trait = archmaester
				}
				is_adult = yes
			}
			save_scope_as = new_maester
		}
	}
	else_if = {
		limit = {
			global_var:citadel_title.holder = {
				any_courtier_or_guest = {
					has_trait_xp = {
						trait = maester
						value = 100
					}
					NOR = {
						has_trait = archmaester
						has_character_flag = maester_researcher
					}
					is_adult = yes
				}
			}
			OR = {
				highest_held_title_tier > tier_county
				is_ai = no
			}
		}
		global_var:citadel_title.holder = {
			random_courtier_or_guest = {
				limit = {
					has_trait_xp = {
						trait = maester
						value = 100
					}
					NOR = {
						has_trait = archmaester
						has_character_flag = maester_researcher
					}
					is_adult = yes
				}
				save_scope_as = new_maester
				if = {
					limit = {
						has_character_flag = blocked_from_leaving
					}
					remove_character_flag = blocked_from_leaving
				}
			}
		}
	}
	else = {
		create_character = {
			location = scope:ruler.capital_province
			template = maester_character
			save_scope_as = new_maester
			age = { 18 50 }
			dynasty = none
		}
	}
}

agot_seed_maesters_effect = {
	every_ruler = {
		limit = {
			capital_county.title_province = { geographical_region = world_westeros_seven_kingdoms }
			can_employ_court_position_type = maester_court_position
			NOT = { employs_court_position = maester_court_position }
		}
		save_scope_as = ruler
		agot_grab_new_maester_effect = yes
		if = {
			limit = { exists = scope:new_maester }
			set_court_physician_effect = {
				EMPLOYER = scope:ruler
				PHYSICIAN = scope:new_maester
			}
		}
	}
}

agot_find_new_grandmaester_effect = {
	save_scope_as = current_grandmaester
	random_living_maester = {
		limit = {
			NOT = { this = scope:current_grandmaester }
			has_trait_xp = {
				trait = maester
				value = 100
			}
			is_adult = yes
			NOR = {
				has_trait = archmaester
				has_inactive_trait = grandmaester
				is_landed = yes
				liege_or_court_owner ?= {
					is_at_war = yes
				}
				has_trait = nightswatch
			}
			is_ai = yes
		}

		weight = {
			base = 0
			modifier = {
				add = diplomacy
			}
			modifier = {
				add = 25
				has_same_culture_as = title:e_the_iron_throne.holder
			}

			modifier = {
				factor = 2
				dynasty = title:e_the_iron_throne.holder.dynasty
			}

			modifier = {
				add = 20
				NOT = { dynasty = title:e_the_iron_throne.holder.dynasty }
				is_lowborn = no
			}
		}
		save_scope_as = grandmaester_candidate
	}

	if = {
		limit = {
			NOT = { exists = scope:grandmaester_candidate }
		}
		create_character = {
			location = title:b_the_citadel.title_province
			template = maester_character
			save_scope_as = grandmaester_candidate
			age = { 18 50 }
			dynasty = none
		}
	}

	if = {
		limit = {
			any_character_artifact = {
				artifact_type = grandmaester_chain
			}
		}
		random_character_artifact = {
			limit = {
				artifact_type = grandmaester_chain
			}
			set_owner = scope:grandmaester_candidate
		}
	}

	title:e_the_iron_throne.holder = {
		trigger_event = agot_maester.1002
	}
}

agot_progress_to_grandmaester_effect = {
	$GRANDMAESTER_CANDIDATE$ = { save_scope_as = grandmaester_candidate }

	scope:grandmaester_candidate = {
		if = {
			limit = {
				NOT = {
					has_inactive_trait = grandmaester
				}
			}
			make_trait_inactive = grandmaester
		}

		if = { # Maester was called to be grandmaester, should be able to get a new one
			limit = {
				scope:grandmaester_candidate.employer ?= {
					has_character_flag = recently_employed_maester
				}
			}
			scope:grandmaester_candidate.employer = {
				remove_character_flag = recently_employed_maester
			}
		}
		create_character_memory = { type = agot_became_grandmaester }

		if = {
			limit = {
				has_character_flag = blocked_from_leaving
			}
			remove_character_flag = blocked_from_leaving
		}

		if = {
			limit = {
				NOT = {
					any_character_artifact = {
						artifact_type = grandmaester_chain
					}
				}
			}

			if = {
				limit = {
					global_var:citadel_title.holder ?= {
						any_character_artifact = {
							artifact_type = grandmaester_chain
						}
					}
				}
				global_var:citadel_title.holder ?= {
					random_character_artifact = {
						limit = {
							artifact_type = grandmaester_chain
						}
						set_owner = {
							target = scope:grandmaester_candidate
							history = {
								type = given
								recipient = scope:grandmaester_candidate
							}
						}
					}
				}
			}
			else = {
				agot_create_artifact_grandmaester_chain_effect = { OWNER = scope:grandmaester_candidate }
			}
		}

	}
	title:e_the_iron_throne.holder = {
		if = {
			limit = {
				NOT = {
					scope:grandmaester_candidate = {
						liege_or_court_owner ?= prev
					}
				}
			}
			add_courtier = scope:grandmaester_candidate
		}

		if = {
			limit = {
				any_court_position_holder = {
					type = maester_court_position
					save_temporary_scope_as = current_maester
				}
			}

			if = {
				limit = {
					NOT = { scope:current_maester = scope:grandmaester_candidate }
				}
				replace_court_position = {
					recipient = scope:grandmaester_candidate
					holder = scope:current_maester
					court_position = maester_court_position
				}
			}
		}
		else = {
			set_court_physician_effect = {
				EMPLOYER = title:e_the_iron_throne.holder
				PHYSICIAN = scope:grandmaester_candidate
			}
		}

		if = { # Send maester to citadel
			limit = {
				exists = scope:current_maester
				NOT = { scope:current_maester = scope:grandmaester_candidate }
				NOT = {
					global_var:citadel_title.holder  = {
						any_courtier_or_guest = {
							this = scope:current_maester
						}
					}
				}
			}
			global_var:citadel_title.holder = {
				add_courtier = scope:current_maester
			}
		}

	}

	scope:grandmaester_candidate = {
		random_character_artifact = {
			limit = {
				artifact_type = grandmaester_chain
			}
			equip_artifact_to_owner_replace = yes
		}
	}
}

agot_seneschal_election_effect = {
	$CURRENT_SENESCHAL$ = { save_scope_as = current_seneschal }

	scope:current_seneschal = {
		every_courtier = {
			limit = {
				has_trait = archmaester
				NOT = { has_character_flag = recent_seneschal }
			}
			add_to_list = potential_seneschal
		}

		random_in_list = {
			list = potential_seneschal
			limit = {
				NOR = {
					has_trait = incapable
					is_imprisoned = yes
				}
			}

			save_scope_as = new_seneschal
		}

		if = { # In case every archmaester has the flag somehow
			limit = {
				NOT = { exists = scope:new_seneschal}
			}
			random_living_maester = {
				limit = {
					has_trait = archmaester
				}
				save_scope_as = new_seneschal
			}
		}

		every_in_list = {
			list = potential_seneschal
			remove_from_list = potential_seneschal
		}

		if = {
			limit = {
				NOT = {
					exists = scope:old_archmaester
				}
			}

			scope:new_seneschal = {
				add_to_variable_list = {
					name = citadel_courtiers
					target = scope:current_seneschal
				}
				add_character_flag = {
					flag = recent_seneschal
					years = 10
				}
			}
		}
		else = {
			scope:new_seneschal = {
				add_character_flag = {
					flag = election_death
					years = 1
				}
				add_character_flag = {
					flag = recent_seneschal
					years = 10
				}
			}
		}

		every_courtier_or_guest = {
			limit = {
				NOT = { this = scope:new_seneschal }
			}
			save_temporary_scope_as = citadel_courtier
			scope:new_seneschal = {
				add_to_variable_list = {
					name = citadel_courtiers
					target = scope:citadel_courtier
				}
			}
		}

		if = {
			limit = {
				any_character_artifact = {
					artifact_type = grandmaester_chain
				}
			}
			random_character_artifact = {
				limit = {
					artifact_type = grandmaester_chain
				}
				set_owner = {
					target = scope:new_seneschal
					generate_history = no
				}
			}
		}

		every_character_artifact = {
			limit = {
				artifact_type = glass_candle
			}
			set_owner = {
				target = scope:new_seneschal
			}
		}
	}

	scope:new_seneschal = {
		remove_trait = maester

		if = {
			limit = { has_trait = disinherited }
			remove_trait = disinherited
			set_variable = {
				name = is_disinherited
				value = yes
				days = 5
			}
		}
		if = {
			limit = { has_trait = eunuch_1 }
			remove_trait = eunuch_1
			set_variable = {
				name = is_eunuch
				value = yes
				days = 5
			}
		}
		if = {
			limit = { has_trait = beardless_eunuch }
			remove_trait = beardless_eunuch
			set_variable = {
				name = is_beardless_eunuch
				value = yes
				days = 5
			}
		}
		if = {
			limit = { has_trait = devoted }
			remove_trait = devoted
			set_variable = {
				name = is_devoted
				value = yes
				days = 5
			}
		}
		if = {
			limit = { has_trait = order_member }
			remove_trait = order_member
			set_variable = {
				name = is_order_member
				value = yes
				days = 5
			}
		}
		if = {
			limit = { has_trait = bastard }
			remove_trait = bastard
			set_variable = {
				name = is_bastard
				value = yes
				days = 5
			}
		}
		if = {
			limit = { has_trait = bastard_founder }
			remove_trait = bastard_founder
			set_variable = {
				name = is_bastard_founder
				value = yes
				days = 5
			}
		}
	}

	scope:new_seneschal = {
		global_var:citadel_title.holder = {
			create_title_and_vassal_change = {
				type = granted
				save_scope_as = change
				add_claim_on_loss = no
			}

			global_var:citadel_title = {

				change_title_holder = {
					holder = scope:new_seneschal
					change = scope:change
					take_baronies = yes
				}
			}
		}
		resolve_title_and_vassal_change = scope:change
	}

	# The rest is handled in agot_on_title_gain_citadel
}

agot_expel_appropriate_maester_effect = {
	if = {
		limit = {
			has_trait = archmaester
		}
		agot_expel_archmaester_effect = yes
	}
	else_if = {
		limit = {
			has_inactive_trait = grandmaester
		}
		agot_expel_grandmaester_effect = yes
	}
	else = {
		agot_expel_maester_effect = yes
	}
	random_owned_story = {
		limit = {
			story_type = story_maester
		}
		end_story = yes
	}
}

agot_expel_maester_effect = {
	random_character_artifact = {
		limit = {
			OR = {
				artifact_type = maester_chain
				artifact_type = maester_link_collection
				artifact_type = maester_link
			}
		}
		destroy_artifact = this
	}

	if = {
		limit = {
			has_character_flag = blocked_from_leaving
		}

		remove_character_flag = blocked_from_leaving
	}

	if = {
		limit = {
			has_trait_xp = {
				trait = maester
				value = 100
			}
		}
		remove_trait = maester
		add_trait = disgraced_maester

		if = {
			limit = {
				NOR = {
					scope:banish ?= yes
					scope:agot_banish_to_essos ?= yes
				}
			}

			if = {
				limit = {
					NOT = {
						liege_or_court_owner ?= global_var:citadel_title.holder
					}
				}
				save_scope_as = disgraced_maester
				liege_or_court_owner ?= {
					trigger_event = agot_maester.1006
				}
			}
			else_if = {
				limit = {
					is_imprisoned = no
					is_incapable = no
				}

				random_county_in_region = {
					region = world_essos
					limit = {
						NOT = {
							root.liege_or_court_owner.capital_province ?= this.title_province
						}
					}
					title_province = {
						save_scope_as = exile_title
					}
				}
				move_to_pool_at = scope:exile_title
			}
		}
	}
	else = {
		remove_trait = maester
		if = {
			limit = {
				NOR = {
					scope:banish ?= yes
					scope:agot_banish_to_essos ?= yes
				}
				is_imprisoned = no
				is_incapable = no
			}
			random_county_in_region = {
				region = world_essos
				limit = {
					NOT = {
						root.liege_or_court_owner.capital_province ?= this.title_province
					}
				}
				title_province = {
					save_scope_as = exile_title
				}
			}
			move_to_pool_at = scope:exile_title
		}
	}
}

agot_expel_archmaester_effect = {
	trigger_event = agot_maester.9012
	if = {
		limit = {
			is_landed = yes
		}
		save_scope_as = old_archmaester
		agot_seneschal_election_effect = { CURRENT_SENESCHAL = scope:old_archmaester }
	}
	remove_trait = archmaester
	trigger_event = {
		id = agot_maester.9013
		days = 1
	}
	agot_expel_maester_effect = yes
}

agot_expel_grandmaester_effect = {
	trigger_event = agot_maester.9014

	make_trait_active = grandmaester
	remove_trait = grandmaester

	agot_expel_maester_effect = yes
}
# Just gets a random maester in the location
# The idea was to use it for picking maesters for memories
agot_random_maester_in_location_effect = {
	$LOCATION$ = { save_scope_as = maester_location }
	random_living_maester = {
		limit = {
			has_trait_xp = {
				trait = maester
				value = 100
			}
			location = scope:maester_location
			NOT = { root = this }
		}
		save_scope_as = maester
	}
}

agot_random_maester_death_effect = {
	random_list = {
		40 = {
			add_character_modifier = stress_drinking_binge
			death = { death_reason = death_drinking_passive }
		}
		40 = {
			death = { death_reason = death_accident }
		}
		20 = {
			death = { death_reason = death_vanished }
		}
	}
}

agot_seed_acolytes_effect = {
	while = {
		count < 30
		create_character = { #Each acolyte gets a random assortment of links
			location = root.capital_province
			template = acolyte_character
			save_scope_as = acolyte
			dynasty = none
		}

		scope:acolyte = {
			set_employer = root
			add_character_flag = blocked_from_leaving
		}
	}
}

agot_make_former_acolyte_effect = {
	create_character = {
		location = root.capital_province
		template = acolyte_character
		save_scope_as = acolyte
		dynasty = none
	}

	scope:acolyte = {
		random_character_artifact = {
			limit = {
				OR = {
					artifact_type = maester_link
					artifact_type = maester_link_collection
				}
			}
			destroy_artifact = this
		}
		remove_trait = maester
		add_character_flag = former_acolyte
	}
}

agot_citadel_recover_lost_rats_effect = {
	if = { #Send novices, acolytes, archmaesters back
		limit = {
			OR = {
				NOT = { exists = this.liege_or_court_owner }
				NOT = { this.liege_or_court_owner ?= global_var:citadel_title.holder }
			}
			OR = {
				has_trait_xp = {
					trait = maester
					value < 100
				}
				AND = {
					has_trait = archmaester
					NOT = { this = global_var:citadel_title.holder }
				}
			}
		}

		if = {
			limit = {
				has_character_flag = blocked_from_leaving
			}

			remove_character_flag = blocked_from_leaving
		}
		random_held_title = {
			save_scope_as = held_title
		}
		if = { #Kill the landed ones
			limit = {
				OR = {
					exists = scope:held_title
					is_ruler = yes
					is_landed = yes
				}
			}
			death = { death_reason = death_accident }
		}
		else = {
			set_employer = global_var:citadel_title.holder
			add_character_flag = blocked_from_leaving
		}
	}
	else_if = { #Send wandering maesters back, courts are fine, they are grown ups
		limit = {
			OR = {
				NOT = { exists = this.liege_or_court_owner }
				is_ruler = yes
				is_landed = yes
			}
			NOT = {
				has_trait = archmaester
			}
			has_trait_xp = {
				trait = maester
				value = 100
			}
		}

		if = {
			limit = {
				has_character_flag = blocked_from_leaving
			}

			remove_character_flag = blocked_from_leaving
		}

		random_held_title = {
			save_scope_as = maester_held_title
		}
		if = { #Kill the landed ones
			limit = {
				OR = {
					exists = scope:maester_held_title
					is_ruler = yes
					is_landed = yes
				}
			}
			death = { death_reason = death_accident }
		}
		else = {
			set_employer = global_var:citadel_title.holder
			add_character_flag = blocked_from_leaving
		}
	}
}

agot_equip_archmaester_artifacts_effect = {
	every_equipped_character_artifact = {
		unequip_artifact_from_owner = yes
	}

	random_character_artifact = {
		limit = {
			artifact_type = archmaester_rod
		}
		equip_artifact_to_owner = yes
	}

	random_character_artifact = {
		limit = {
			artifact_type = archmaester_ring
		}
		equip_artifact_to_owner = yes
	}

	random_character_artifact = {
		limit = {
			artifact_type = archmaester_mask
		}
		equip_artifact_to_owner = yes
	}

	random_character_artifact = {
		limit = {
			artifact_type = maester_chain
		}
		equip_artifact_to_owner = yes
	}
}
agot_citadel_transfer_effect = {

	#TLDR:
	# Find an available province in the reach and give it to an archmaester
	# Old citadel is the soon to be ruin
	# New citadel is the new province
	# Saves new citadel to the global variable citadel_title
	if = {
		limit = {
			any_county_in_region = {
				region = world_westeros_the_reach
				holder = {
					is_ai = yes
					culture = { has_innovation = innovation_maesters }
				}
				any_county_province = {
					has_holding_type = city_holding
					is_county_capital = no
					barony = {
						holder = {
							is_ai = yes
						}
						is_capital_barony = no
					}
				}
			}
		}

		random_county_in_region = {
			region = world_westeros_the_reach
			limit = {
				holder = {
					is_ai = yes
					culture = { has_innovation = innovation_maesters }
				}
				any_county_province = {
					has_holding_type = city_holding
					barony = {
						holder = {
							is_ai = yes
						}
						is_capital_barony = no
					}
				}
			}
			random_county_province = {
				limit = {
					has_holding_type = city_holding
					barony = {
						holder = {
							is_ai = yes
						}
						is_capital_barony = no
					}
				}
				barony = {
					save_scope_as = new_citadel
				}
			}
		}
	}

	# If there are no available cities we try to make one
	if = {
		limit = {
			NOT = {
				exists = scope:new_citadel
			}
		}

		random_county_in_region = {
			region = world_westeros_the_reach
			limit = {
				holder = {
					is_ai = yes
					culture = { has_innovation = innovation_maesters }
				}
				any_county_province = {
					has_holding = no
				}
			}
			random_county_province = {
				limit = {
					has_holding = no
				}
				barony = {
					save_scope_as = new_citadel
				}
				set_holding_type = city_holding
			}
		}
	}

	global_var:citadel_title = {
		save_scope_as = old_citadel
	}

	scope:old_citadel.holder = {

		# Add every courtier to transfer to new spot
		every_courtier_or_guest = {
			scope:old_citadel.holder = {
				add_to_variable_list = {
					name = citadel_courtiers
					target = prev
				}
			}
		}

		# Make title transfer possible
		remove_trait = maester

		if = {
			limit = { has_trait = disinherited }
			remove_trait = disinherited
			set_variable = {
				name = is_disinherited
				value = yes
				days = 5
			}
		}
		if = {
			limit = { has_trait = eunuch_1 }
			remove_trait = eunuch_1
			set_variable = {
				name = is_eunuch
				value = yes
				days = 5
			}
		}
		if = {
			limit = { has_trait = beardless_eunuch }
			remove_trait = beardless_eunuch
			set_variable = {
				name = is_beardless_eunuch
				value = yes
				days = 5
			}
		}
		if = {
			limit = { has_trait = devoted }
			remove_trait = devoted
			set_variable = {
				name = is_devoted
				value = yes
				days = 5
			}
		}
		if = {
			limit = { has_trait = order_member }
			remove_trait = order_member
			set_variable = {
				name = is_order_member
				value = yes
				days = 5
			}
		}
		if = {
			limit = { has_trait = bastard }
			remove_trait = bastard
			set_variable = {
				name = is_bastard
				value = yes
				days = 5
			}
		}
		if = {
			limit = { has_trait = bastard_founder }
			remove_trait = bastard_founder
			set_variable = {
				name = is_bastard_founder
				value = yes
				days = 5
			}
		}
	}

	set_global_variable = {
		name = citadel_title
		value = scope:new_citadel
	}

	# Set up title transfer to new seneschal
	scope:new_citadel.holder = {
		global_var:citadel_title.holder = {
			create_title_and_vassal_change = {
				type = granted
				save_scope_as = change
				add_claim_on_loss = no
			}

			global_var:citadel_title = {

				change_title_holder = {
					holder = scope:old_citadel.holder
					change = scope:change
					take_baronies = yes
				}
			}
		}
		resolve_title_and_vassal_change = scope:change
	}

	global_var:citadel_title.title_province = {
		add_special_building = the_citadel_02
	}
	# Every thing else is resolved in agot_on_title_gain_citadel

}

agot_citadel_maintenance_effect = {
	save_scope_as = maester_candidate

	if = {
		limit = {
			is_human = yes
		}

		if = {
			limit = {
				is_male = no
			}

			if = {
				limit = {
					has_trait = maester
				}
				remove_trait = maester
				random_character_artifact = {
					limit = {
						OR = {
							artifact_type = maester_link
							artifact_type = maester_chain
							artifact_type = maester_link_collection
						}
					}
					destroy_artifact = this
				}
			}
			set_employer = title:d_oldtown.holder
		}
		else = {

			if = {
				limit = {
					age >= 8
					NOT = { has_trait = maester }
				}
				agot_send_to_citadel_effect = { MAESTER_CANDIDATE = scope:maester_candidate }
			}

			if = {
				limit = {
					NOT = { has_character_flag = blocked_from_leaving }
				}

				add_character_flag = blocked_from_leaving
			}

			if = {
				limit = {
					has_character_flag = traveling_maester
				}
				remove_character_flag = traveling_maester
			}
		}
	}
}