
########################################################
#### This file is autogenerated by injectormaker.py ####
################# Last run: 2021-08-24 #################
########################################################
## This file contains "MAIN_KEY_hypercomplex" iterators for unscoped types "MAIN_KEY" over "ITERATION_KEY"
## This is intended for intermediate parsing functions such as those defined as metainjectors, and takes parameters:
# CONTROLLER: switch, random_list, if, etc; some function which allows effects inside it.
# PRESTATEMENT_KEY, PRESTATEMENT_ARG: For example trigger = has_trait or limit = {has_trait = honest}
# PREFIX, SUFFIX: Wrapper for passing case data to random lists or switches
# APPLY: Scripted effect, taking $ITERATION_KEY$. For example, if ITERATION_KEY is "LIFESTYLE" then the APPLY should be of the form some_lifestyle_effect = {LIFESTYLE = my_key}
# EXTRA_KEY, EXTRA_ARG: Potential extra arguments to pass to APPLY. Can be commented out or used to pass extra arguments.

#####################
### Metainjectors ###
#####################
# These handle the basic formats expected to be accessible by any type of injector
# Similar functions may be defined on a case-by-case basis.
# Allows evaluation of simple assign functions in otherwise complex assign injectors
simply_assign = { # APPLY and ARGUMENT
	$APPLY$ = $ARGUMENT$
}
# Switch parses a flag into a string key from TYPE
parse_type_flag_complex = { # parse_type_flag_complex = {TYPE, KEY, APPLY, FLAG}
	$TYPE$_hypercomplex = {
		CONTROLLER = switch
		PRESTATEMENT_KEY = trigger
		PRESTATEMENT_ARG = $FLAG$
		PREFIX = "flag:"
		SUFFIX = ""
		APPLY = $APPLY$
		KEY = $KEY$
		EXTRA_KEY = "#"
		EXTRA_ARG = "#"
	}
}
# Switch with any simple_assign trigger over the keys
switch_type_complex = { # TYPE, KEY, TRIGGER = simple_assign, APPLY = scripted_effect {KEY}
	$TYPE$_hypercomplex = {
		CONTROLLER = switch
		PRESTATEMENT_KEY = trigger
		PRESTATEMENT_ARG = $TRIGGER$
		PREFIX = ""
		SUFFIX = ""
		APPLY = $APPLY$
		KEY = $KEY$
		EXTRA_KEY = "#"
		EXTRA_ARG = "#"
	}
}
# Executes APPLY = {KEY = key} for every key in TYPE
every_type_complex = { # every_type_complex = {TYPE, KEY, APPLY}
	$TYPE$_hypercomplex = {
		CONTROLLER = if
		PRESTATEMENT_KEY = "limit"
		PRESTATEMENT_ARG = "{always = yes}"
		PREFIX = "if = {limit = {always = yes}#"
		SUFFIX = "#"
		APPLY = $APPLY$
		KEY = $KEY$
		EXTRA_KEY = "#"
		EXTRA_ARG = "#"
	}
}
# Executes APPLY = {KEY = key} for a random key in TYPE
random_type_complex = { # random_type_complex = {TYPE, KEY, APPLY}
	$TYPE$_hypercomplex = {
		CONTROLLER = random_list
		PRESTATEMENT_KEY = "#"
		PRESTATEMENT_ARG = "#"
		PREFIX = "1 = {#"
		SUFFIX = "}#"
		APPLY = $APPLY$
		KEY = $KEY$
		EXTRA_KEY = "#"
		EXTRA_ARG = "#"
	}
}
## Metainjectors for APPLY = simple_assign. Same endpoint usage as complex assign.
# Switch parses a flag into a string key from TYPE
parse_type_flag_simple = { # TYPE, FLAG = flag, APPLY = simple_assign
	$TYPE$_hypercomplex = {
		CONTROLLER = switch
		PRESTATEMENT_KEY = trigger
		PRESTATEMENT_ARG = $FLAG$
		PREFIX = "flag:"
		SUFFIX = ""
		APPLY = simply_assign
		KEY = ARGUMENT
		EXTRA_KEY = APPLY
		EXTRA_ARG = $APPLY$
	}
}
# Switch with any simple_assign trigger over the keys in TYPE
switch_type_simple = { # TYPE, TRIGGER = simple_assign, APPLY = simple_assign
	$TYPE$_hypercomplex = {
		CONTROLLER = switch
		PRESTATEMENT_KEY = trigger
		PRESTATEMENT_ARG = $TRIGGER$
		PREFIX = ""
		SUFFIX = ""
		APPLY = simply_assign
		KEY = ARGUMENT
		EXTRA_KEY = APPLY
		EXTRA_ARG = $APPLY$
	}
}
# Executes APPLY = KEY for every KEY in TYPE
every_type_simple = { # {TYPE, APPLY}
	$TYPE$_hypercomplex = {
		CONTROLLER = if
		PRESTATEMENT_KEY = "limit"
		PRESTATEMENT_ARG = "{always = yes}"
		PREFIX = "if = {limit = {always = yes}#"
		SUFFIX = "#"
		APPLY = simply_assign
		KEY = ARGUMENT
		EXTRA_KEY = APPLY
		EXTRA_ARG = $APPLY$
	}
}
# Executes APPLY = KEY for a random KEY in TYPE
random_type_simple = { # TYPE, APPLY = simple_assign
	$TYPE$_hypercomplex = {
		CONTROLLER = random_list
		PRESTATEMENT_KEY = "#"
		PRESTATEMENT_ARG = "#"
		PREFIX = "1 = {#" 
		SUFFIX = "}#"
		APPLY = simply_assign
		KEY = ARGUMENT
		EXTRA_KEY = APPLY
		EXTRA_ARG = $APPLY$
	}
}

##############################################################
#### Main key: patron_name: Iteration key: PATRON
##############################################################
# Execute APPLY for the PATRON key passed as a flag:FLAG.
# parse_patron_name_flag_complex = {PATRON = flag APPLY = scripted_effect}
# parse_patron_name_flag_simple  = {PATRON = flag APPLY = simple_effect}
parse_patron_name_flag_complex   = {parse_type_flag_complex  = {TYPE = patron_name APPLY = $APPLY$ FLAG = $PATRON$  KEY = PATRON}}
parse_patron_name_flag_simple    = {parse_type_flag_simple   = {TYPE = patron_name APPLY = $APPLY$ FLAG = $PATRON$}}
# Execute APPLY in a switch statement for the keys
# switch_patron_name_complex     = {APPLY = scripted_effect TRIGGER = simple_trigger}
# switch_patron_name_simple      = {APPLY = simple_effect   TRIGGER = simple_trigger}
switch_patron_name_complex       = {switch_type_complex      = {TYPE = patron_name APPLY = $APPLY$ TRIGGER = $TRIGGER$  KEY = PATRON}}
switch_patron_name_simple        = {switch_type_simple       = {TYPE = patron_name APPLY = $APPLY$ TRIGGER = $TRIGGER$}}
# Execute APPLY for every patron_name key
# every_patron_name_complex      = {APPLY = scripted_effect}
# every_patron_name_simple       = {APPLY = simple_effect}
every_patron_name_complex        = {every_type_complex       = {TYPE = patron_name APPLY = $APPLY$ KEY = PATRON}}
every_patron_name_simple         = {every_type_simple        = {TYPE = patron_name APPLY = $APPLY$}}
# Execute APPLY for a random patron_name key
# random_patron_name_complex     = {APPLY = scripted_effect}
# random_patron_name_simple      = {APPLY = simple_effect}
random_patron_name_complex       = {random_type_complex      = {TYPE = patron_name APPLY = $APPLY$ KEY = PATRON}}
random_patron_name_simple        = {random_type_simple       = {TYPE = patron_name APPLY = $APPLY$}}
### Hypercomplex iterator for unscoped type "patron_name" over PATRON:
patron_name_hypercomplex = {
	$CONTROLLER$ = {
		$PRESTATEMENT_KEY$ = $PRESTATEMENT_ARG$
		$PREFIX$the_father$SUFFIX$ = {
			$APPLY$ = {
				$KEY$ = the_father
				$EXTRA_KEY$ = $EXTRA_ARG$
			}
		}
		$PREFIX$the_mother$SUFFIX$ = {
			$APPLY$ = {
				$KEY$ = the_mother
				$EXTRA_KEY$ = $EXTRA_ARG$
			}
		}
		$PREFIX$the_maiden$SUFFIX$ = {
			$APPLY$ = {
				$KEY$ = the_maiden
				$EXTRA_KEY$ = $EXTRA_ARG$
			}
		}
		$PREFIX$the_smith$SUFFIX$ = {
			$APPLY$ = {
				$KEY$ = the_smith
				$EXTRA_KEY$ = $EXTRA_ARG$
			}
		}
		$PREFIX$the_warrior$SUFFIX$ = {
			$APPLY$ = {
				$KEY$ = the_warrior
				$EXTRA_KEY$ = $EXTRA_ARG$
			}
		}
		$PREFIX$the_crone$SUFFIX$ = {
			$APPLY$ = {
				$KEY$ = the_crone
				$EXTRA_KEY$ = $EXTRA_ARG$
			}
		}
		$PREFIX$the_stranger$SUFFIX$ = {
			$APPLY$ = {
				$KEY$ = the_stranger
				$EXTRA_KEY$ = $EXTRA_ARG$
			}
		}
		$PREFIX$old_gods_streams$SUFFIX$ = {
			$APPLY$ = {
				$KEY$ = old_gods_streams
				$EXTRA_KEY$ = $EXTRA_ARG$
			}
		}
		$PREFIX$old_gods_forests$SUFFIX$ = {
			$APPLY$ = {
				$KEY$ = old_gods_forests
				$EXTRA_KEY$ = $EXTRA_ARG$
			}
		}
		$PREFIX$old_gods_stones$SUFFIX$ = {
			$APPLY$ = {
				$KEY$ = old_gods_stones
				$EXTRA_KEY$ = $EXTRA_ARG$
			}
		}
		$PREFIX$old_gods_dunes$SUFFIX$ = {
			$APPLY$ = {
				$KEY$ = old_gods_dunes
				$EXTRA_KEY$ = $EXTRA_ARG$
			}
		}
		$PREFIX$old_gods_tundra$SUFFIX$ = {
			$APPLY$ = {
				$KEY$ = old_gods_tundra
				$EXTRA_KEY$ = $EXTRA_ARG$
			}
		}
		$PREFIX$old_gods_ice$SUFFIX$ = {
			$APPLY$ = {
				$KEY$ = old_gods_ice
				$EXTRA_KEY$ = $EXTRA_ARG$
			}
		}
		$PREFIX$old_gods_caves$SUFFIX$ = {
			$APPLY$ = {
				$KEY$ = old_gods_caves
				$EXTRA_KEY$ = $EXTRA_ARG$
			}
		}
		$PREFIX$blood_of_rhllor$SUFFIX$ = {
			$APPLY$ = {
				$KEY$ = blood_of_rhllor
				$EXTRA_KEY$ = $EXTRA_ARG$
			}
		}
		$PREFIX$fire_of_rhllor$SUFFIX$ = {
			$APPLY$ = {
				$KEY$ = fire_of_rhllor
				$EXTRA_KEY$ = $EXTRA_ARG$
			}
		}
		$PREFIX$light_of_rhllor$SUFFIX$ = {
			$APPLY$ = {
				$KEY$ = light_of_rhllor
				$EXTRA_KEY$ = $EXTRA_ARG$
			}
		}
		$PREFIX$azor_ahai$SUFFIX$ = {
			$APPLY$ = {
				$KEY$ = azor_ahai
				$EXTRA_KEY$ = $EXTRA_ARG$
			}
		}
		$PREFIX$shadow_of_rhllor$SUFFIX$ = {
			$APPLY$ = {
				$KEY$ = shadow_of_rhllor
				$EXTRA_KEY$ = $EXTRA_ARG$
			}
		}
		$PREFIX$hyrkoon$SUFFIX$ = {
			$APPLY$ = {
				$KEY$ = hyrkoon
				$EXTRA_KEY$ = $EXTRA_ARG$
			}
		}
		$PREFIX$grey_king$SUFFIX$ = {
			$APPLY$ = {
				$KEY$ = grey_king
				$EXTRA_KEY$ = $EXTRA_ARG$
			}
		}
		$PREFIX$naga$SUFFIX$ = {
			$APPLY$ = {
				$KEY$ = naga
				$EXTRA_KEY$ = $EXTRA_ARG$
			}
		}
		$PREFIX$mermaid_queen$SUFFIX$ = {
			$APPLY$ = {
				$KEY$ = mermaid_queen
				$EXTRA_KEY$ = $EXTRA_ARG$
			}
		}
		$PREFIX$galon_whitestaff$SUFFIX$ = {
			$APPLY$ = {
				$KEY$ = galon_whitestaff
				$EXTRA_KEY$ = $EXTRA_ARG$
			}
		}
		$PREFIX$belarion$SUFFIX$ = {
			$APPLY$ = {
				$KEY$ = belarion
				$EXTRA_KEY$ = $EXTRA_ARG$
			}
		}
		$PREFIX$vhagar$SUFFIX$ = {
			$APPLY$ = {
				$KEY$ = vhagar
				$EXTRA_KEY$ = $EXTRA_ARG$
			}
		}
		$PREFIX$meraxes$SUFFIX$ = {
			$APPLY$ = {
				$KEY$ = meraxes
				$EXTRA_KEY$ = $EXTRA_ARG$
			}
		}
		$PREFIX$syrax$SUFFIX$ = {
			$APPLY$ = {
				$KEY$ = syrax
				$EXTRA_KEY$ = $EXTRA_ARG$
			}
		}
		$PREFIX$caraxes$SUFFIX$ = {
			$APPLY$ = {
				$KEY$ = caraxes
				$EXTRA_KEY$ = $EXTRA_ARG$
			}
		}
    }
}
