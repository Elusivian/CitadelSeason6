on_declared_war = {
	###############################
	##### Attacker music
	###############################
	if = {
		limit = {
			exists = scope:war # silence error when building description before war exists
			scope:war = { using_holy_war_cb_trigger = yes } # going CB->war->is this war's CB a certain type->yes
		}
		scope:attacker = { play_music_cue = mx_cue_crusade_starts }
	}
	else_if = {
		limit = {
			exists = scope:war
			OR = {
				scope:attacker = { fp3_character_any_involvement_persian_struggle_trigger = yes }
				scope:defender = { fp3_character_any_involvement_persian_struggle_trigger = yes }
			}
		}
		scope:attacker = { play_music_cue = strugglewar_cue }
	}
	else_if = {
		limit = {
			exists = scope:war
			OR = {
				scope:attacker = { fp2_character_any_involvement_iberian_struggle_trigger = yes }
				scope:defender = { fp2_character_any_involvement_iberian_struggle_trigger = yes }
			}
		}
		scope:attacker = { play_music_cue = mx_IberiaWar }
	}
	else_if = {
		limit = {
			exists = scope:war
			scope:attacker = { fp1_is_norse_tribal = yes }
		}
		scope:attacker = { play_music_cue = mx_raid }
	}
	else = {
		scope:attacker = { play_music_cue = mx_cue_war_declared }
	}
	###############################
	##### Defender music
	###############################
	if = {
		limit = {
			exists = scope:war
			OR = {
				scope:attacker = { fp2_character_any_involvement_iberian_struggle_trigger = yes }
				scope:defender = { fp2_character_any_involvement_iberian_struggle_trigger = yes }
			}
		}
		scope:defender = { play_music_cue = mx_IberiaWar }
	}
	else_if = {
		limit = {
			exists = scope:war
			OR = {
				scope:attacker = { fp3_character_any_involvement_persian_struggle_trigger = yes }
				scope:defender = { fp3_character_any_involvement_persian_struggle_trigger = yes }
			}
		}
		scope:defender = { play_music_cue = strugglewar_cue }
	}
	else_if = {
		limit = {
			exists = scope:war
			scope:attacker = { fp1_is_norse_tribal = yes }
		}
		scope:defender = { play_music_cue = mx_raid }
	}

	else = {
		scope:defender = {
			play_music_cue = mx_cue_war_declared
		}
	}

	# miv
	if = {
		limit = {
			NOT = { has_game_rule = miv_starting_disabled }
			interactive_start_date = current_date
			has_global_variable = miv_is_loaded
		}
		custom_tooltip = start_war_date_tooltip
	}

	if = {
		limit = {
			scope:attacker = {
				is_ai = no
			}
			scope:attacker = { is_vassal_or_below_of = scope:defender }
			OR = { NOT = { interactive_start_date = current_date } has_game_rule = miv_starting_disabled }
		}
		custom_tooltip = civil_war_tooltip
	}

	if = {
		limit = {
			scope:attacker = {
				is_ai = no
			}
			NOT = {
				scope:attacker = { is_vassal_or_below_of = scope:defender }
			}
			OR = { NOT = { interactive_start_date = current_date } has_game_rule = miv_starting_disabled }
		}

		# external wars
		if = {
			limit = {
				NOT = { has_game_rule = border_vassals_join_disabled }
			}
			scope:defender = {
				every_vassal_or_below = {
					if = {
						limit = {
							NOT = { scope:defender = { has_character_flag = dont_call_vassals } }
							highest_held_title_tier > tier_barony
							max_military_strength > 100
							any_sub_realm_county = {
								any_neighboring_county = {
									holder = { 
										OR = {
											is_vassal_or_below_of = scope:attacker
											this = scope:attacker
										}
									}
								}
							}
						}

						if = {
							limit = {
								NOT = { has_game_rule = defiant_vassals_disabled }
								OR = {
									opinion = {
										target = liege
										value <= 5
									}
									is_at_war_with = scope:defender
									is_at_war_with = liege
									liege = { is_at_war_with = scope:defender }
									AND = {
										NOT = { is_vassal_of = scope:defender }
										liege = {
											OR = {
												AND = {
													is_at_war_with = scope:attacker
													opinion = {
														target = liege
														value <= -5
													}
												}
												AND = {
													NOT = { is_at_war_with = scope:attacker }
													opinion = {
														target = liege
														value <= 5
													}
												}
											}
										}
									}
								}
							}
							add_to_list = interactive_defenders_refuses
						}
						else = {
							add_to_list = interactive_defenders
						}					
					}
				}
			}

			scope:attacker = {
				every_vassal_or_below = {
					if = {
						limit = {
							NOT = { scope:attacker = { has_character_flag = dont_call_vassals } }
							highest_held_title_tier > tier_barony
							max_military_strength > 100
							any_sub_realm_county = {
								any_neighboring_county = {
									holder = { 
										OR = {
											is_vassal_or_below_of = scope:defender
											this = scope:defender
										}
									}
								}
							}
						}
						if = {
							limit = {
								NOT = { has_game_rule = defiant_vassals_disabled }
								OR = {
									opinion = {
										target = liege
										value <= 10
									}
									is_at_war_with = scope:attacker
									is_at_war_with = liege
									liege = { is_at_war_with = scope:attacker }
									AND = {
										NOT = { is_vassal_of = scope:attacker }
										liege = {
											OR = {
												AND = {
													is_at_war_with = scope:defender
													opinion = {
														target = liege
														value <= -5
													}
												}
												AND = {
													NOT = { is_at_war_with = scope:defender }
													opinion = {
														target = liege
														value <= 10
													}
												}
											}
										}
									}
								}
							}
							add_to_list = interactive_attackers_refuses
						}
						else = {
							add_to_list = interactive_attackers
						}
					}
				}
			}
		}

		# bannermen
		if = {
			limit = {
				has_game_rule = call_the_banners_enabled
			}
			scope:defender = {
				every_vassal = {
					limit = {
						NOT = { scope:defender = { has_character_flag = dont_call_vassals } }
						OR = {
							AND = {
								scope:defender = { highest_held_title_tier < tier_empire }
								NOT = {
									scope:defender = {
										any_held_title = {
											count >= 2
											tier = tier_kingdom
										}
									}
								}
								highest_held_title_tier > tier_barony
							}
							highest_held_title_tier > tier_county
						} 
						is_landed = yes
						max_military_strength > 200
						NOT = {
							any_sub_realm_county = {
								any_neighboring_county = {
									holder = { 
										OR = {
											is_vassal_or_below_of = scope:attacker
											this = scope:attacker
										}
									}
								}
							}
						}
					}
					if = {
						limit = {
							OR = {
								opinion = {
									target = scope:defender
									value <= 15
								}
								is_at_war_with = scope:defender
							}
							
						}
						add_to_list = interactive_defenders_bannermen_refuses
					}
					else = {
						add_to_list = interactive_defenders
					}
				}
			}

			scope:attacker = {
				every_vassal = {
					limit = {
						NOT = { scope:attacker = { has_character_flag = dont_call_vassals } }
						OR = {
							AND = {
								scope:attacker = { highest_held_title_tier < tier_empire }
								NOT = {
									scope:attacker = {
										any_held_title = {
											count >= 2
											tier = tier_kingdom
										}
									}
								}
								highest_held_title_tier > tier_barony
							}
							highest_held_title_tier > tier_county
						} 
						is_landed = yes
						max_military_strength > 200
						NOT = {
							any_sub_realm_county = {
								any_neighboring_county = {
									holder = { 
										OR = {
											is_vassal_or_below_of = scope:defender
											this = scope:defender
										}
									}
								}
							}
						}
					}
					if = {
						limit = {
							OR = {
								opinion = {
									target = scope:attacker
									value <= 20
								}
								is_at_war_with = scope:attacker
							}
						}
						add_to_list = interactive_attackers_bannermen_refuses
					}
					else = {
						add_to_list = interactive_attackers
					}
				}
			}
		}

		# vassal claimant
		if = {
			limit = { 
				NOT = { scope:attacker = { has_character_flag = dont_call_vassals } }
				NOT = { has_game_rule = vassals_join_claims_disabled }
				scope:attacker = { is_ai = no }
				exists = scope:claimant
				scope:claimant = { is_vassal_or_below_of = scope:attacker }
				OR = { NOT = { interactive_start_date = current_date } has_game_rule = miv_starting_disabled }
			}
				
			scope:claimant = {
				remove_from_list = interactive_attackers
				remove_from_list = interactive_attackers_refuses

				if = {
					limit = {
						is_at_war_with = liege
					}
					add_to_list = interactive_attackers_refuses
				}
				else = {
					add_to_list = interactive_attackers
				}
			}	
		}
	
		# title holders
		if = {
			limit = {
				NOT = { scope:defender = { has_character_flag = dont_call_vassals } }
				NOT = { has_game_rule = vassals_defend_titles_disabled }
				OR = { NOT = { interactive_start_date = current_date } has_game_rule = miv_starting_disabled }
				scope:attacker = { is_ai = no }
			}

			every_in_list = {
				list = target_titles
	
				if = {
					limit = {
						exists = holder
						holder = {
							is_vassal_or_below_of = scope:defender
							highest_held_title_tier > tier_barony
							max_military_strength > 100 
							is_landed = yes
						}
					}
					holder = { 
						remove_from_list = interactive_defenders
						remove_from_list = interactive_defenders_refuses

						if = {
							limit = {
								is_at_war_with = liege
							}
							add_to_list = interactive_defenders_refuses
						}
						else = {
							add_to_list = interactive_defenders
						}
					}
				}
			}
		}

		# war participants
		if = {
			limit = {
				#has_game_rule = war_participants_miv_enabled
				always = no
			}
			every_in_list = {
				list = interactive_attackers
				limit = {
					is_vassal_of = scope:attacker
				}

				save_temporary_scope_as = participant

				every_ally = {
					limit = {
						is_vassal_of = scope:participant
						NOT = { scope:participant = { has_character_flag = dont_call_vassals } }
						highest_held_title_tier > tier_barony
						max_military_strength > 100
						is_landed = yes
						opinion = {
							target = scope:participant
							value >= 80
						}
					}
					remove_from_list = interactive_attackers
					remove_from_list = interactive_attackers_refuses
					add_to_list = interactive_attackers
				}
			}
			every_in_list = {
				list = interactive_defenders
				limit = {
					is_vassal_of = scope:defender
				}

				save_temporary_scope_as = participant

				every_ally = {
					limit = {
						is_vassal_of = scope:participant
						NOT = { scope:participant = { has_character_flag = dont_call_vassals } }
						highest_held_title_tier > tier_barony
						max_military_strength > 100
						is_landed = yes
						opinion = {
							target = scope:participant
							value >= 80
						}
					}
					remove_from_list = interactive_defenders
					remove_from_list = interactive_defenders_refuses
					add_to_list = interactive_defenders
				}
			}
		}

		# oathbreakers
		if = {
			limit = {
				has_game_rule = miv_oathbreakers_enabled
			}
			# ally
			scope:attacker = {
				every_ally = {
					limit = {
						is_vassal_or_below_of = scope:defender
						NOT = {
							any_in_list = {
								list = interactive_defenders
								this = prev
							}
						}
						NOT = {
							any_in_list = {
								list = interactive_attackers
								this = prev
							}
						}
					}
					remove_from_list = interactive_defenders_refuses
					add_to_list = interactive_oathbreakers_defenders
				}
			}
			scope:defender = {
				every_ally = {
					limit = {
						is_vassal_or_below_of = scope:attacker
						NOT = {
							any_in_list = {
								list = interactive_defenders
								this = prev
							}
						}
						NOT = {
							any_in_list = {
								list = interactive_attackers
								this = prev
							}
						}
					}
					remove_from_list = interactive_attackers_refuses
					add_to_list = interactive_oathbreakers_attackers
				}
			}

			# rival
			scope:attacker = {
				every_vassal_or_below = {
					limit = {
						is_ai = yes
						NOT = { is_allied_to = scope:defender }
						NOT = { is_allied_to = scope:attacker }
						OR = {
							has_relation_rival = scope:attacker
							has_relation_nemesis = scope:attacker
						}
						NOT = {
							any_in_list = {
								list = interactive_defenders
								this = prev
							}
						}
						NOT = {
							any_in_list = {
								list = interactive_attackers
								this = prev
							}
						}
						is_landed = yes
						max_military_strength > 200
						highest_held_title_tier > tier_barony
						NOT = {
							is_at_war_with = scope:attacker
						}
						NOT = {
							is_at_war_with = scope:defender
						}
					}

					remove_from_list = interactive_attackers_refuses
					add_to_list = interactive_oathbreakers_attackers
				}
			}
			scope:defender = {
				every_vassal_or_below = {
					limit = {
						is_ai = yes
						NOT = { is_allied_to = scope:defender }
						NOT = { is_allied_to = scope:attacker }
						OR = {
							has_relation_rival = scope:defender
							has_relation_nemesis = scope:defender
						}
						NOT = {
							any_in_list = {
								list = interactive_defenders
								this = prev
							}
						}
						NOT = {
							any_in_list = {
								list = interactive_attackers
								this = prev
							}
						}
						is_landed = yes
						max_military_strength > 200
						highest_held_title_tier > tier_barony
						NOT = {
							is_at_war_with = scope:attacker
						}
						NOT = {
							is_at_war_with = scope:defender
						}
					}

					remove_from_list = interactive_defenders_refuses
					add_to_list = interactive_oathbreakers_defenders
				}
			}
		}

		# list attacking vassals
		custom_description_no_bullet = {
			text = interactive_attackers_ui_tooltip_text
			value = interactive_tooltip_attacking_strength
		}

		# player can disable call to arms via a decision
		if = {
			limit = {
				scope:attacker = {
					has_character_flag = dont_call_vassals
				}
			}
			custom_tooltip = dont_call_vassals_tooltip
		}

		# accept

		# claimant, king
		every_in_list = {
			list = interactive_attackers 
			save_temporary_scope_as = vassal
			if = {
				limit = {
					highest_held_title_tier > tier_duchy 
				}
				if = {
					limit = {
						exists = scope:claimant
						scope:claimant = { 
							this = scope:vassal
						}
					}
					custom_description_no_bullet = {
						text = interactive_vassal_accepts_claimant_tooltip_text
						object = scope:vassal
						value = interactive_tooltip_vassal_strength
					}
				}
			}
		}

		# claimant, duke
		every_in_list = {
			list = interactive_attackers 
			save_temporary_scope_as = vassal
			if = {
				limit = {
					highest_held_title_tier = tier_duchy 
				}
				if = {
					limit = {
						exists = scope:claimant
						scope:claimant = { 
							this = scope:vassal
						}
					}
					custom_description_no_bullet = {
						text = interactive_vassal_accepts_claimant_tooltip_text
						object = scope:vassal
						value = interactive_tooltip_vassal_strength
					}
				}
			}
		}

		# claimant, count
		every_in_list = {
			list = interactive_attackers 
			save_temporary_scope_as = vassal
			if = {
				limit = {
					highest_held_title_tier < tier_duchy 
				}
				if = {
					limit = {
						exists = scope:claimant
						scope:claimant = { 
							this = scope:vassal
						}
					}
					custom_description_no_bullet = {
						text = interactive_vassal_accepts_claimant_tooltip_text
						object = scope:vassal
						value = interactive_tooltip_vassal_strength
					}
				}
			}
		}

		# rest, king
		every_in_list = {
			list = interactive_attackers 
			save_temporary_scope_as = vassal
			if = {
				limit = {
					highest_held_title_tier > tier_duchy 
				}
				if = {
					limit = {
						exists = scope:claimant
						scope:claimant = { 
							this = scope:vassal
						}
					}
					# do nothing
				}
				else = {
					custom_description_no_bullet = {
						text = interactive_vassal_accepts_tooltip_text
						object = scope:vassal
						value = interactive_tooltip_vassal_strength
					}
				}
			}
		}

		# rest, duke
		every_in_list = {
			list = interactive_attackers 
			save_temporary_scope_as = vassal
			if = {
				limit = {
					highest_held_title_tier = tier_duchy 
				}
				if = {
					limit = {
						exists = scope:claimant
						scope:claimant = { 
							this = scope:vassal
						}
					}
					# do nothing
				}
				else = {
					custom_description_no_bullet = {
						text = interactive_vassal_accepts_tooltip_text
						object = scope:vassal
						value = interactive_tooltip_vassal_strength
					}
				}
			}
		}

		# rest, count
		every_in_list = {
			list = interactive_attackers 
			save_temporary_scope_as = vassal
			if = {
				limit = {
					highest_held_title_tier < tier_duchy 
				}
				if = {
					limit = {
						exists = scope:claimant
						scope:claimant = { 
							this = scope:vassal
						}
					}
					# do nothing
				}
				else = {
					custom_description_no_bullet = {
						text = interactive_vassal_accepts_tooltip_text
						object = scope:vassal
						value = interactive_tooltip_vassal_strength
					}
				}
			}
		}

		# oathbreakers tooltip
		if = {
			limit = {
				has_game_rule = miv_oathbreakers_enabled
			}
			every_in_list = {
				list = interactive_oathbreakers_attackers 

				custom_description_no_bullet = {
					text = interactive_oathbreaker_tooltip_text
					object = this
				}
			}
		}

		# refuse attacker
		# king, refuses primary
		every_in_list = {
			list = interactive_attackers_refuses
			save_temporary_scope_as = vassal
			if = {
				limit = {
					highest_held_title_tier > tier_duchy 
				}
				if = {
					limit = {
						is_vassal_of = scope:attacker
					}
					custom_description_no_bullet = {
						text = interactive_vassal_refuses_tooltip_text
						object = scope:vassal
					}
				}
			}
		}

		# duke, refuses primary
		every_in_list = {
			list = interactive_attackers_refuses
			save_temporary_scope_as = vassal
			if = {
				limit = {
					highest_held_title_tier = tier_duchy
				}
				if = {
					limit = {
						is_vassal_of = scope:attacker
					}
					custom_description_no_bullet = {
						text = interactive_vassal_refuses_tooltip_text
						object = scope:vassal
					}
				}
			}
		}

		# count, refuses primary
		every_in_list = {
			list = interactive_attackers_refuses
			save_temporary_scope_as = vassal
			if = {
				limit = {
					highest_held_title_tier < tier_duchy
				}
				if = {
					limit = {
						is_vassal_of = scope:attacker
					}
					custom_description_no_bullet = {
						text = interactive_vassal_refuses_tooltip_text
						object = scope:vassal
					}
				}
			}
		}

		# king, refuses liege
		every_in_list = {
			list = interactive_attackers_refuses
			save_temporary_scope_as = vassal
			if = {
				limit = {
					highest_held_title_tier > tier_duchy 
				}
				if = {
					limit = {
						NOT = { is_vassal_of = scope:attacker }
						OR = {
							opinion = {
								target = liege
								value <= 10
							}
							is_at_war_with = liege
						}
					}
					custom_description_no_bullet = {
						text = interactive_vassal_refuses_liege_tooltip_text
						object = scope:vassal
					}
				}
			}
		}

		# duke, refuses liege
		every_in_list = {
			list = interactive_attackers_refuses
			save_temporary_scope_as = vassal
			if = {
				limit = {
					highest_held_title_tier = tier_duchy
				}
				if = {
					limit = {
						NOT = { is_vassal_of = scope:attacker }
						OR = {
							opinion = {
								target = liege
								value <= 10
							}
							is_at_war_with = liege
						}
					}
					custom_description_no_bullet = {
						text = interactive_vassal_refuses_liege_tooltip_text
						object = scope:vassal
					}
				}
			}
		}

		# count, refuses liege
		every_in_list = {
			list = interactive_attackers_refuses
			save_temporary_scope_as = vassal
			if = {
				limit = {
					highest_held_title_tier < tier_duchy
				}
				if = {
					limit = {
						NOT = { is_vassal_of = scope:attacker }
						OR = {
							opinion = {
								target = liege
								value <= 10
							}
							is_at_war_with = liege
						}
					}
					custom_description_no_bullet = {
						text = interactive_vassal_refuses_liege_tooltip_text
						object = scope:vassal
					}
				}
			}
		}

		# king, liege blocked
		every_in_list = {
			list = interactive_attackers_refuses
			save_temporary_scope_as = vassal
			if = {
				limit = {
					highest_held_title_tier > tier_duchy 
				}
				if = {
					limit = {
						NOT = { is_vassal_of = scope:attacker }
						opinion = {
							target = liege
							value > 10
						}
						liege = {
							OR = {
								opinion = {
									target = liege
									value <= 10
								}
								is_at_war_with = liege
							}
						}
					}
					custom_description_no_bullet = {
						text = interactive_vassal_refuses_liege_blocked_tooltip_text
						object = scope:vassal
					}
				}
			}
		}

		# duke, liege blocked
		every_in_list = {
			list = interactive_attackers_refuses
			save_temporary_scope_as = vassal
			if = {
				limit = {
					highest_held_title_tier = tier_duchy
				}
				if = {
					limit = {
						NOT = { is_vassal_of = scope:attacker }
						opinion = {
							target = liege
							value > 10
						}
						liege = {
							OR = {
								opinion = {
									target = liege
									value <= 10
								}
								is_at_war_with = liege
							}
						}
					}
					custom_description_no_bullet = {
						text = interactive_vassal_refuses_liege_blocked_tooltip_text
						object = scope:vassal
					}
				}
			}
		}

		# count, liege blocked
		every_in_list = {
			list = interactive_attackers_refuses
			save_temporary_scope_as = vassal
			if = {
				limit = {
					highest_held_title_tier < tier_duchy
				}
				if = {
					limit = {
						NOT = { is_vassal_of = scope:attacker }
						opinion = {
							target = liege
							value > 10
						}
						liege = {
							OR = {
								opinion = {
									target = liege
									value <= 10
								}
								is_at_war_with = liege
							}
						}
					}
					custom_description_no_bullet = {
						text = interactive_vassal_refuses_liege_blocked_tooltip_text
						object = scope:vassal
					}
				}
			}
		}

		# generic catch all for non applicables
		every_in_list = {
			list = interactive_attackers_refuses
			save_temporary_scope_as = vassal
			if = {
				limit = {
					NOR = {
						is_vassal_of = scope:attacker

						AND = {
							NOT = { is_vassal_of = scope:attacker }
							OR = {
								opinion = {
									target = liege
									value <= 10
								}
								is_at_war_with = liege
							}
						}

						AND = {
							NOT = { is_vassal_of = scope:attacker }
							opinion = {
								target = liege
								value > 10
							}
							liege = {
								OR = {
									opinion = {
										target = liege
										value <= 10
									}
									is_at_war_with = liege
								}
							}
						}
					}
				}
				custom_description_no_bullet = {
					text = interactive_vassal_refuses_tooltip_text
					object = scope:vassal
				}
			}
		}

		# attacking bannermen tooltip
		if = {
			limit = {
				has_game_rule = call_the_banners_enabled
				interactive_tooltip_attacking_bannermen_count > 0
			}
			custom_description_no_bullet = {
				text = interactive_bannermen_refuse_tooltip_text
				value = interactive_tooltip_attacking_bannermen_count
			}
		}

		# list defending vassals
		custom_description_no_bullet = {
			text = interactive_defenders_ui_tooltip_text
			value = interactive_tooltip_defending_strength
		}

		# player can disable call to arms via a decision
		if = {
			limit = {
				scope:defender = {
					has_character_flag = dont_call_vassals
				}
			}
			custom_tooltip = they_dont_call_vassals_tooltip
		}

		# accept
		# title holder, king
		every_in_list = {
			list = interactive_defenders 
			save_temporary_scope_as = vassal
			if = {
				limit = {
					highest_held_title_tier > tier_duchy 
				}
				if = {
					limit = {
						any_in_list = {
							list = target_titles
							exists = holder
							holder = {
								this = scope:vassal
							}
						}
					}
					custom_description_no_bullet = {
						text = interactive_vassal_accepts_title_holder_tooltip_text
						object = scope:vassal
						value = interactive_tooltip_vassal_strength
					}
				}
			}
		}

		# title holder, duke
		every_in_list = {
			list = interactive_defenders 
			save_temporary_scope_as = vassal
			if = {
				limit = {
					highest_held_title_tier = tier_duchy 
				}
				if = {
					limit = {
						any_in_list = {
							list = target_titles
							exists = holder
							holder = {
								this = scope:vassal
							}
						}
					}
					custom_description_no_bullet = {
						text = interactive_vassal_accepts_title_holder_tooltip_text
						object = scope:vassal
						value = interactive_tooltip_vassal_strength
					}
				}
			}
		}

		# title holder, count
		every_in_list = {
			list = interactive_defenders 
			save_temporary_scope_as = vassal
			if = {
				limit = {
					highest_held_title_tier < tier_duchy 
				}
				if = {
					limit = {
						any_in_list = {
							list = target_titles
							exists = holder
							holder = {
								this = scope:vassal
							}
						}
					}
					custom_description_no_bullet = {
						text = interactive_vassal_accepts_title_holder_tooltip_text
						object = scope:vassal
						value = interactive_tooltip_vassal_strength
					}
				}
			}
		}

		# rest, king
		every_in_list = {
			list = interactive_defenders 
			save_temporary_scope_as = vassal
			if = {
				limit = {
					highest_held_title_tier > tier_duchy 
				}
				if = {
					limit = {
						any_in_list = {
							list = target_titles
							exists = holder
							holder = {
								this = scope:vassal
							}
						}
					}
					# do nothing
				}
				else = {
					custom_description_no_bullet = {
						text = interactive_vassal_accepts_tooltip_text
						object = scope:vassal
						value = interactive_tooltip_vassal_strength
					}
				}
			}
		}

		# rest, duke
		every_in_list = {
			list = interactive_defenders 
			save_temporary_scope_as = vassal
			if = {
				limit = {
					highest_held_title_tier = tier_duchy 
				}
				if = {
					limit = {
						any_in_list = {
							list = target_titles
							exists = holder
							holder = {
								this = scope:vassal
							}
						}
					}
					# do nothing
				}
				else = {
					custom_description_no_bullet = {
						text = interactive_vassal_accepts_tooltip_text
						object = scope:vassal
						value = interactive_tooltip_vassal_strength
					}
				}
			}
		}

		# rest, count
		every_in_list = {
			list = interactive_defenders 
			save_temporary_scope_as = vassal
			if = {
				limit = {
					highest_held_title_tier < tier_duchy 
				}
				if = {
					limit = {
						any_in_list = {
							list = target_titles
							exists = holder
							holder = {
								this = scope:vassal
							}
						}
					}
					# do nothing
				}
				else = {
					custom_description_no_bullet = {
						text = interactive_vassal_accepts_tooltip_text
						object = scope:vassal
						value = interactive_tooltip_vassal_strength
					}
				}
			}
		}

		# oathbreakers tooltip
		if = {
			limit = {
				has_game_rule = miv_oathbreakers_enabled
			}
			every_in_list = {
				list = interactive_oathbreakers_defenders 

				custom_description_no_bullet = {
					text = interactive_oathbreaker_tooltip_text
					object = this
				}
			}
		}

		# refuse defender
		# king, refuses primary
		every_in_list = {
			list = interactive_defenders_refuses
			save_temporary_scope_as = vassal
			if = {
				limit = {
					highest_held_title_tier > tier_duchy 
				}
				if = {
					limit = {
						is_vassal_of = scope:defender
					}
					custom_description_no_bullet = {
						text = interactive_vassal_refuses_tooltip_text
						object = scope:vassal
					}
				}
			}
		}

		# duke, refuses primary
		every_in_list = {
			list = interactive_defenders_refuses
			save_temporary_scope_as = vassal
			if = {
				limit = {
					highest_held_title_tier = tier_duchy
				}
				if = {
					limit = {
						is_vassal_of = scope:defender
					}
					custom_description_no_bullet = {
						text = interactive_vassal_refuses_tooltip_text
						object = scope:vassal
					}
				}
			}
		}

		# count, refuses primary
		every_in_list = {
			list = interactive_defenders_refuses
			save_temporary_scope_as = vassal
			if = {
				limit = {
					highest_held_title_tier < tier_duchy
				}
				if = {
					limit = {
						is_vassal_of = scope:defender
					}
					custom_description_no_bullet = {
						text = interactive_vassal_refuses_tooltip_text
						object = scope:vassal
					}
				}
			}
		}

		# king, refuses liege
		every_in_list = {
			list = interactive_defenders_refuses
			save_temporary_scope_as = vassal
			if = {
				limit = {
					highest_held_title_tier > tier_duchy 
				}
				if = {
					limit = {
						NOT = { is_vassal_of = scope:defender }
						OR = {
							opinion = {
								target = liege
								value <= 5
							}
							is_at_war_with = liege
						}
					}
					custom_description_no_bullet = {
						text = interactive_vassal_refuses_liege_tooltip_text
						object = scope:vassal
					}
				}
			}
		}

		# duke, refuses liege
		every_in_list = {
			list = interactive_defenders_refuses
			save_temporary_scope_as = vassal
			if = {
				limit = {
					highest_held_title_tier = tier_duchy
				}
				if = {
					limit = {
						NOT = { is_vassal_of = scope:defender }
						OR = {
							opinion = {
								target = liege
								value <= 5
							}
							is_at_war_with = liege
						}
					}
					custom_description_no_bullet = {
						text = interactive_vassal_refuses_liege_tooltip_text
						object = scope:vassal
					}
				}
			}
		}

		# count, refuses liege
		every_in_list = {
			list = interactive_defenders_refuses
			save_temporary_scope_as = vassal
			if = {
				limit = {
					highest_held_title_tier < tier_duchy
				}
				if = {
					limit = {
						NOT = { is_vassal_of = scope:defender }
						OR = {
							opinion = {
								target = liege
								value <= 5
							}
							is_at_war_with = liege
						}
					}
					custom_description_no_bullet = {
						text = interactive_vassal_refuses_liege_tooltip_text
						object = scope:vassal
					}
				}
			}
		}

		# king, liege blocked
		every_in_list = {
			list = interactive_defenders_refuses
			save_temporary_scope_as = vassal
			if = {
				limit = {
					highest_held_title_tier > tier_duchy 
				}
				if = {
					limit = {
						NOT = { is_vassal_of = scope:defender }
						opinion = {
							target = liege
							value > 5
						}
						liege = {
							OR = {
								opinion = {
									target = liege
									value <= 5
								}
								is_at_war_with = liege
							}
						}
					}
					custom_description_no_bullet = {
						text = interactive_vassal_refuses_liege_blocked_tooltip_text
						object = scope:vassal
					}
				}
			}
		}

		# duke, liege blocked
		every_in_list = {
			list = interactive_defenders_refuses
			save_temporary_scope_as = vassal
			if = {
				limit = {
					highest_held_title_tier = tier_duchy
				}
				if = {
					limit = {
						NOT = { is_vassal_of = scope:defender }
						opinion = {
							target = liege
							value > 5
						}
						liege = {
							OR = {
								opinion = {
									target = liege
									value <= 5
								}
								is_at_war_with = liege
							}
						}
					}
					custom_description_no_bullet = {
						text = interactive_vassal_refuses_liege_blocked_tooltip_text
						object = scope:vassal
					}
				}
			}
		}

		# count, liege blocked
		every_in_list = {
			list = interactive_defenders_refuses
			save_temporary_scope_as = vassal
			if = {
				limit = {
					highest_held_title_tier < tier_duchy
				}
				if = {
					limit = {
						NOT = { is_vassal_of = scope:defender }
						opinion = {
							target = liege
							value > 5
						}
						liege = {
							OR = {
								opinion = {
									target = liege
									value <= 5
								}
								is_at_war_with = liege
							}
						}
					}
					custom_description_no_bullet = {
						text = interactive_vassal_refuses_liege_blocked_tooltip_text
						object = scope:vassal
					}
				}
			}
		}

		# generic catch all for non applicables
		every_in_list = {
			list = interactive_defenders_refuses
			save_temporary_scope_as = vassal
			if = {
				limit = {
					NOR = {
						is_vassal_of = scope:defender

						AND = {
							NOT = { is_vassal_of = scope:defender }
							OR = {
								opinion = {
									target = liege
									value <= 5
								}
								is_at_war_with = liege
							}
						}

						AND = {
							NOT = { is_vassal_of = scope:defender }
							opinion = {
								target = liege
								value > 5
							}
							liege = {
								OR = {
									opinion = {
										target = liege
										value <= 5
									}
									is_at_war_with = liege
								}
							}
						}
					}
				}
				custom_description_no_bullet = {
					text = interactive_vassal_refuses_tooltip_text
					object = scope:vassal
				}
			}
		}

		# defending bannermen tooltip
		if = {
			limit = {
				has_game_rule = call_the_banners_enabled
				interactive_tooltip_defending_bannermen_count > 0
			}
			custom_description_no_bullet = {
				text = interactive_bannermen_refuse_tooltip_text
				value = interactive_tooltip_defending_bannermen_count
			}
		}

		# end tooltip
		custom_description_no_bullet = {
			text = interactive_other_effects_tooltip_text
		}

		# war exhaustion tooltip
		if = {
			limit = {
				NOT = { has_game_rule = war_exhaustion_miv_disabled }
				interactive_tooltip_attacking_count > 0
			}
			custom_description_no_bullet = {
				text = interactive_war_exhaustion_tooltip_text
				value = interactive_tooltip_attacking_count
			}
		}
	}

	###############################
	##### Effects
	###############################

	#There is no fighting in the admin room!
	if = {
		limit = {
			scope:attacker = {
				OR = {
					government_has_flag = government_is_feudal
					government_has_flag = government_is_clan
					government_has_flag = government_is_tribal
				}			
				liege ?= {
					government_has_flag = government_is_administrative
				}
			}
			scope:defender = {
				government_has_flag = government_is_administrative
				liege ?= scope:attacker.liege
			}
		}
		custom_description_no_bullet = {
			text = on_declared_war_in_admin
		}
		scope:attacker.liege = {
			add_opinion = {
				target = scope:attacker
				modifier = declared_war_in_admin
			}
		}
	}

	# Breaking Truce
	if = {
		limit = {
			scope:attacker = {
				has_truce = scope:defender
			}
		}
		scope:attacker = {
			custom_description_no_bullet = {
				text = attack_breaking_truce_text
			}

			# Remove the war target from the bought_truce_list if they're in it
			if = {
				limit = {
					has_purchased_truce_with_char = { TARGET = scope:defender }
				}
				remove_list_variable = {
					name = bought_truce_list
					target = scope:recipient
				}
			}

			if = {
				limit = {
					NOT = { has_perk = flexible_truces_perk }
				}
				add_prestige = break_truce_prestige_loss
				add_prestige_level = break_truce_prestige_level_loss
			}

			# miv: fix for vanilla issue with adventurers not having a valid legitimacy type
			if = {
				limit = {
					is_landed = yes
				}
				add_legitimacy = {
					value = medium_legitimacy_loss
					multiply = primary_title.tier
				}
			}
			add_character_modifier = {
				modifier = broke_truce
				years = 3
			}

			# Struggle Catalysts.
			if = {
				limit = {
					any_character_struggle = {
						involvement = involved
						activate_struggle_catalyst_secondary_character_involvement_involved_trigger = {
							CATALYST = catalyst_broke_truce_against_important_character
							CHAR = scope:defender
						}
					}
				}
				every_character_struggle = {
					involvement = involved
					limit = {
						activate_struggle_catalyst_secondary_character_involvement_involved_trigger = {
							CATALYST = catalyst_broke_truce_against_important_character
							CHAR = scope:defender
						}
					}
					activate_struggle_catalyst = {
						catalyst = catalyst_broke_truce_against_important_character
						character = scope:attacker
					}
				}
			}
		}
	}
	# Breaking Alliance
	if = {
		limit = {
			scope:attacker = {
				is_allied_to = scope:defender
			}
		}
		scope:attacker = {
			break_alliance_due_to_attack_effect = { TARGET = scope:defender }
		}
	}
	# BP2: Attacking Warden
	if = {
		limit = {
			scope:attacker = {
				any_home_court_hostage = { is_hostage_of = scope:defender }
			}
		}
		scope:attacker = {
			add_prestige = break_truce_prestige_loss
			add_prestige_level = break_truce_prestige_level_loss
			add_character_modifier = {
				modifier = attacked_warden
				years = 5
			}
			# Hostages they hold (yours)
			every_home_court_hostage = {
				save_scope_as = hostage
				every_close_family_member = {
					limit = {
						NOT = { this = scope:attacker }
					}
					custom = attacked_warden_tt
					add_opinion = {
						modifier = attacked_warden
						target = scope:attacker
					}
				}
				if = {
					limit = { is_hostage_of = scope:defender }
					custom_description_no_bullet = {
						text = attack_breaking_truce_hostage
						subject = scope:defender
						object = scope:hostage
					}
				}
			}
		}
	}
	# BP2: Attacking Home Court
	if = {
		limit = {
			scope:attacker = {
				any_warden_hostage = { is_hostage_from = scope:defender }
			}
		}
		scope:attacker = {
			# Hostages you hold (theirs)
			every_warden_hostage = {
				save_scope_as = hostage
				if = {
					limit = { is_hostage_from = scope:defender }
					custom_description_no_bullet = {
						text = attack_breaking_truce_hostage
						subject = scope:attacker
						object = scope:hostage
					}
				}
			}
			add_prestige = break_truce_prestige_loss
			add_prestige_level = break_truce_prestige_level_loss
			add_character_modifier = {
				modifier = attacked_home_court
				years = 5
			}
			# Hostages they hold (yours)
			every_home_court_hostage = {
				save_scope_as = hostage
				every_close_family_member = {
					limit = {
						NOT = { this = scope:attacker }
					}
					custom = attacked_warden_tt
					add_opinion = {
						modifier = attacked_home_court
						target = scope:attacker
					}
				}
				if = {
					limit = { is_hostage_of = scope:defender }
					custom_description_no_bullet = {
						text = attack_breaking_truce_hostage
						subject = scope:defender
						object = scope:hostage
					}
				}
			}
		}
	}

	# MIV change: rival for tribal subjugation CB, applies to all
	if = {
		limit = {
			exists = scope:war
			scope:war = {
				using_cb = tribal_subjugation_cb
			}
		}
		scope:defender = {
			set_relation_rival = scope:attacker
		}
	}

	# Opinion

	# MIV CHANGE: hidden effect
	hidden_effect = {
	scope:defender = {
		add_opinion = {
			target = scope:attacker
			modifier = declared_war
		}
	}
	if = {
		limit = {
			NOT = {
				scope:attacker = {
					is_parent_of = scope:defender
				}
			}
		}
		if = {
			limit = {
				scope:defender = {
					has_father = yes
				}
			}
			scope:defender = {
				father = {
					add_opinion = {
						target = scope:attacker
						modifier = declared_war_on_son_daughter
					}
				}
			}
		}
		if = {
			limit = {
				scope:defender = {
					has_mother = yes
				}
			}
			scope:defender = {
				mother = {
					add_opinion = {
						target = scope:attacker
						modifier = declared_war_on_son_daughter
					}
				}
			}
		}
	}
	if = {
		limit = {
			NOT = { scope:attacker.culture = scope:defender.culture }
			scope:attacker = { is_landed = yes }
			scope:defender = { is_landed = yes }
		}
		scope:defender.culture = {
			change_cultural_acceptance = {
				target = scope:attacker.culture
				value = declare_war_culture_acceptance_impact
				desc = cultural_acceptance_loss_declared_war
			}
		}
	}
	}
	
	scope:attacker = {
		if = {
			limit = {
				any_vassal = {
					has_vassal_stance = parochial
				}
				eighty_percent_of_current_military_strength <= scope:defender.current_military_strength
			}
			custom_tooltip = parochial_vassal_disapproves_war
			hidden_effect = {
				every_vassal = {
					limit = {
						has_vassal_stance = parochial
					}
					add_opinion = {
						target = scope:attacker
						modifier = parochial_disapproves_strong_war_enemy_opinion
					}
				}
			}
		}
	}
	
	# If we're a clan this interaction affects unity
	add_clan_unity_interaction_effect = {
		CHARACTER = scope:attacker
		TARGET = scope:defender
		VALUE = massive_unity_loss
		DESC = clan_unity_declared_war.desc
		REVERSE_NON_HOUSE_TARGET = no
	}
	
	intrigue_duel_on_attack_effect = yes
}

war_for_imprison_effect = {
	if = {
		limit = {
			OR = {
				scope:actor = { is_ai = no } 
				scope:recipient = { is_ai = no }
			}
		}
		scope:recipient = {
			save_scope_value_as = {
				name = war_for_imprisonment_flavour
				value = yes
			}
			start_war = {
				casus_belli = refused_liege_demand_war
				target = scope:actor
			}
		}
		scope:recipient = {
			add_opinion = {
				target = scope:actor
				modifier = attempted_arrest_opinion
			}
		}
	}
}

war_for_revoke_effect = {
	if = {
		limit = {
			OR = {
				$REBEL$ = { is_ai = no } 
				$LIEGE$ = { is_ai = no }
			}
		}
		$REBEL$ = {
			save_scope_value_as = {
				name = war_for_revocation_flavour
				value = yes
			}
			start_war = {
				casus_belli = refused_liege_demand_war
				target = $LIEGE$
			}
		}
		$REBEL$ = {
			add_opinion = {
				target = $LIEGE$
				modifier = attempted_arrest_opinion
			}
		}
	}
}

war_for_retraction_effect = {
	if = {
		limit = {
			OR = {
				scope:actor = { is_ai = no } 
				scope:recipient = { is_ai = no }
			}
		}
		scope:recipient = {
			save_scope_value_as = {
				name = war_for_retraction_flavour
				value = yes
			}
			start_war = {
				casus_belli = refused_liege_demand_war
				target = scope:actor
			}
		}
		scope:recipient = {
			add_opinion = {
				target = scope:actor
				modifier = attempted_arrest_opinion
			}
		}
	}
}

# miv: vanilla bugfix for this firing incorrectly
laamp_as_mercenary_payout_effect = {
	scope:war = {
		if = {
			limit = {
				any_war_participant = {
					# added is_landed = no
					is_landed = no
					has_character_flag = joined_as_mercenary
					is_attacker_in_war = scope:war
					NOT = { is_leader_in_war = scope:war }
					OR = {
						has_raised_armies = yes
						scope:war = {
							war_contribution = {
								target = prev
								value > 0
							}
						}
					}
				}
			}
			every_war_participant = {
				limit = {
					# added is_landed = no
					is_landed = no
					has_character_flag = joined_as_mercenary
					is_attacker_in_war = scope:war
					NOT = { is_leader_in_war = scope:war }
					OR = {
						has_raised_armies = yes
						scope:war = {
							war_contribution = {
								target = prev
								value > 0
							}
						}
					}
				}
				add_to_list = laamp_mercenaries
			}
			primary_attacker = {
				save_scope_as = employer
				trigger_event = {
					id = ep3_interactions_events.0121
					days = { 3 7 }
				}
			}
		}
		if = {
			limit = {
				any_war_participant = {
					# added is_landed = no
					is_landed = no
					has_character_flag = joined_as_mercenary
					is_defender_in_war = scope:war
					NOT = { is_leader_in_war = scope:war }
					OR = {
						has_raised_armies = yes
						scope:war = {
							war_contribution = {
								target = prev
								value > 0
							}
						}
					}
				}
			}
			every_war_participant = {
				limit = {
					# added is_landed = no
					is_landed = no
					has_character_flag = joined_as_mercenary
					is_defender_in_war = scope:war
					NOT = { is_leader_in_war = scope:war }
					OR = {
						has_raised_armies = yes
						scope:war = {
							war_contribution = {
								target = prev
								value > 0
							}
						}
					}
				}
				add_to_list = laamp_mercenaries
			}
			primary_defender = {
				save_scope_as = employer
				trigger_event = {
					id = ep3_interactions_events.0121
					days = { 3 7 }
				}
			}
		}
	}
	
}