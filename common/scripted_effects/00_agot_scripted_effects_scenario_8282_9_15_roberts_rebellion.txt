### SETUP EFFECTS ###

agot_8282_9_15_rr_scenario_setup = {
	if = { # fire only if you used ruler designer; else there is no war
		limit = { NOT = { title:k_the_stormlands.holder = character:Baratheon_2 } }

		title:k_the_stormlands.holder = {
			start_war = {
				cb = agot_rebellion_war
				target = title:e_the_iron_throne.holder
				target_title = title:e_the_iron_throne
				target_title = title:k_the_crownlands
				target_title = title:d_kings_landing
				target_title = title:c_kings_landing
				#target_title = title:d_dragonstone
				#target_title = title:c_dragonstone
			}
			every_character_war = {
				add_attacker = title:k_the_vale.holder
				add_attacker = title:k_the_north.holder
				add_attacker = title:k_the_riverlands.holder
			}
		}
	}
	if = { # fire only if you used ruler designer; else there is no war
		limit = { NOT = { title:e_the_iron_throne.holder = character:Targaryen_1  } }

		title:e_the_iron_throne.holder = {
			add_character_flag = { flag = mw_init_event_blocker days = 2 }
			every_character_war = {
				add_defender = title:k_the_reach.holder
				add_defender = title:k_dorne.holder
				add_defender = title:d_kingswood.holder
				add_defender = title:d_dark_harrow.holder
				add_defender = title:d_nestridge.holder
				add_defender = title:d_grandview.holder
				add_defender = title:d_gulltown.holder
			}
		}
	}

	title:e_the_iron_throne.holder = { save_scope_as = historical_setup }

	### SET UP REBEL LEADERS
	hidden_effect = { # Robert aganist Targaryens
		agot_mw_scenario_rebel_setup = {
			MODE = flag:mw_internal
			REBEL_MAY_VASSALIZE = no
			HELD_TITLE = title:k_the_stormlands
			CASUS_BELLI = agot_rebellion_war
			PRE_WAR_LIEGE = title:e_the_iron_throne.holder
			MW_TARGET = title:e_the_iron_throne.holder
		}
		# ADD REBEL SUPPORTERS #
		# Add vassal rebels
		title:k_the_stormlands.holder = {
			save_scope_as = mw_rebel_leader_robert
			every_vassal_or_below = {
				limit = {
					primary_title.tier > tier_barony
					NOT = {
						OR = {
							primary_title = title:k_the_most_devout
						}
					}
				}

				scope:mw_rebel_story = {
					add_to_variable_list = {
						name = mw_rebel_supporter_list
						target = prev
					}
				}
			}
		}
		# Add independent rebels
		agot_mw_add_character_to_mw_list = {
			CHARACTER_SCOPE = title:k_the_north.holder
			STORY_SCOPE = scope:mw_rebel_story
			LIST = mw_rebel_supporter_list
			PRE_WAR_LIEGE_SCOPE = title:e_the_iron_throne.holder
		}
		agot_mw_add_character_to_mw_list = {
			CHARACTER_SCOPE = title:k_the_riverlands.holder
			STORY_SCOPE = scope:mw_rebel_story
			LIST = mw_rebel_supporter_list
			PRE_WAR_LIEGE_SCOPE = title:e_the_iron_throne.holder
		}
		agot_mw_add_character_to_mw_list = {
			CHARACTER_SCOPE = title:k_the_stormlands.holder
			STORY_SCOPE = scope:mw_rebel_story
			LIST = mw_rebel_supporter_list
			PRE_WAR_LIEGE_SCOPE = title:e_the_iron_throne.holder
		}
		agot_mw_add_character_to_mw_list = {
			CHARACTER_SCOPE = title:k_the_vale.holder
			STORY_SCOPE = scope:mw_rebel_story
			LIST = mw_rebel_supporter_list
			PRE_WAR_LIEGE_SCOPE = title:e_the_iron_throne.holder
		}
	}
	######

	### SET UP CROWN
	agot_mw_scenario_crown_setup = { HELD_TITLE = title:e_the_iron_throne }
	# ADD LOYALISTS #
	# Add vassal loyalists
	title:e_the_iron_throne.holder = {
		every_vassal_or_below = {
			limit = {
				primary_title.tier > tier_barony
				NOT = {
					OR = {
						primary_title = title:k_the_most_devout
					}
				}
			}

			scope:mw_crown_story = {
				add_to_variable_list = {
					name = mw_loyalist_list
					target = prev
				}
			}
		}
	}
	agot_mw_add_character_to_mw_list = {
		CHARACTER_SCOPE = title:d_lakehaven.holder
		STORY_SCOPE = scope:mw_crown_story
		LIST = mw_loyalist_list
		PRE_WAR_LIEGE_SCOPE = title:k_the_riverlands.holder
	}
	agot_mw_add_character_to_mw_list = {
		CHARACTER_SCOPE = title:d_maidenpool.holder
		STORY_SCOPE = scope:mw_crown_story
		LIST = mw_loyalist_list
		PRE_WAR_LIEGE_SCOPE = title:k_the_riverlands.holder
	}
	agot_mw_add_character_to_mw_list = {
		CHARACTER_SCOPE = title:d_tridents_mouth.holder
		STORY_SCOPE = scope:mw_crown_story
		LIST = mw_loyalist_list
		PRE_WAR_LIEGE_SCOPE = title:k_the_riverlands.holder
	}
	agot_mw_add_character_to_mw_list = {
		CHARACTER_SCOPE = title:d_willow_wood.holder
		STORY_SCOPE = scope:mw_crown_story
		LIST = mw_loyalist_list
		PRE_WAR_LIEGE_SCOPE = title:k_the_riverlands.holder
	}
	agot_mw_add_character_to_mw_list = {
		CHARACTER_SCOPE = title:d_grandview.holder
		STORY_SCOPE = scope:mw_crown_story
		LIST = mw_loyalist_list
		PRE_WAR_LIEGE_SCOPE = title:k_the_stormlands.holder
	}
	agot_mw_add_character_to_mw_list = {
		CHARACTER_SCOPE = title:d_kingswood.holder
		STORY_SCOPE = scope:mw_crown_story
		LIST = mw_loyalist_list
		PRE_WAR_LIEGE_SCOPE = title:k_the_stormlands.holder
	}
	agot_mw_add_character_to_mw_list = {
		CHARACTER_SCOPE = title:d_nestridge.holder
		STORY_SCOPE = scope:mw_crown_story
		LIST = mw_loyalist_list
		PRE_WAR_LIEGE_SCOPE = title:k_the_stormlands.holder
	}
	agot_mw_add_character_to_mw_list = {
		CHARACTER_SCOPE = title:d_whentway.holder
		STORY_SCOPE = scope:mw_crown_story
		LIST = mw_loyalist_list
		PRE_WAR_LIEGE_SCOPE = title:k_the_stormlands.holder
	}
	agot_mw_add_character_to_mw_list = {
		CHARACTER_SCOPE = title:d_gulltown.holder
		STORY_SCOPE = scope:mw_crown_story
		LIST = mw_loyalist_list
		PRE_WAR_LIEGE_SCOPE = title:k_the_vale.holder
	}
	######

	### ADD NEUTRALS ###
	agot_mw_add_character_to_mw_list = {
		CHARACTER_SCOPE = title:k_the_iron_islands.holder
		STORY_SCOPE = scope:mw_crown_story
		LIST = mw_neutral_list
		PRE_WAR_LIEGE_SCOPE = title:e_the_iron_throne.holder
	}
	agot_mw_add_character_to_mw_list = {
		CHARACTER_SCOPE = title:k_the_westerlands.holder
		STORY_SCOPE = scope:mw_crown_story
		LIST = mw_neutral_list
		PRE_WAR_LIEGE_SCOPE = title:e_the_iron_throne.holder
	}
	agot_mw_add_character_to_mw_list = {
		CHARACTER_SCOPE = title:d_the_crossing.holder
		STORY_SCOPE = scope:mw_crown_story
		LIST = mw_neutral_list
		PRE_WAR_LIEGE_SCOPE = title:k_the_riverlands.holder
	}
	agot_mw_add_character_to_mw_list = {
		CHARACTER_SCOPE = title:d_harrenhal.holder
		STORY_SCOPE = scope:mw_crown_story
		LIST = mw_neutral_list
		PRE_WAR_LIEGE_SCOPE = title:k_the_riverlands.holder
	}
	######

	### SET OPINIONS ###
	agot_mw_set_opinions_up = { REBEL_STORY_OWNER_SCOPE = scope:mw_rebel_leader_robert }
	######


	##### SCENARIO STORY CYCLE SETUP #####
	title:k_the_stormlands.holder = {
		create_story = { # Initialize Robert's Rebellion
			type = story_agot_scenario_rr
			save_scope_as = scenario_rr_story
		}
		scope:scenario_rr_story = {
			set_variable = { name = usurper_war value = scope:current_war }
			set_variable = {
				name	= agot_rr_war_status
				value	= flag:ongoing
			}
		}
		scope:mw_rebel_story = {
			set_variable = { name = linked_scenario_story value = scope:scenario_rr_story }
		}
	}
	#######

	### CANON CHILDREN STORY CYCLE SETUP ###
	agot_canon_children_setup_story_cycles_effect = yes
	######


	##### OTHER #####
	character:Dayne_5 = {
		add_character_flag = agot_is_at_unknown_place
		#RIP spawn_activity
		# title:b_tower_of_joy.title_province = {
		# 	spawn_activity = {
		# 		owner = character:Dayne_5
		# 		type = activity_kinguard_bodyguard
		# 	}
		# }
	}
	character:Whent_5 = {
		add_character_flag = agot_is_at_unknown_place
		#RIP spawn_activity
		# title:b_tower_of_joy.title_province = {
		# 	spawn_activity = {
		# 		owner = character:Whent_5
		# 		type = activity_kinguard_bodyguard
		# 	}
		# }
	}
	character:Hightower_3 = {
		add_character_flag = agot_is_at_unknown_place
		#RIP spawn_activity
		# title:b_tower_of_joy.title_province = {
		# 	spawn_activity = {
		# 		owner = character:Hightower_3
		# 		type = activity_kinguard_bodyguard
		# 	}
		# }
	}
	character:Stark_5 = {
		add_character_flag = agot_is_at_unknown_place
		#RIP spawn_activity
		# title:b_tower_of_joy.title_province = {
		# 	spawn_activity = {
		# 		owner = character:Stark_5
		# 		type = activity_missing
		# 	}
		# }
	}

	#If from ruler designer, invalidate the war
	if = {
		limit = {
			OR = {
				NOT = { title:k_the_stormlands.holder = character:Baratheon_2 }
				NOT = { title:e_the_iron_throne.holder = character:Targaryen_1 }
			}
		}
		every_ruler = {
			every_character_war = {
				limit = { always = yes }
				end_war = invalidated
			}
		}
	}
}

agot_rr_remove_cersei_infertility = {
	character:Lannister_6  = {
		remove_trait = refusing_marriage
		remove_character_modifier = agot_rr_cersei_infertility
	}
}

agot_rr_remove_lyanna_infertility = {
	character:Stark_5  = {
		remove_trait = refusing_marriage
		remove_character_modifier = agot_rr_lyanna_infertility
		remove_variable = agot_rr_months_of_pregnancy_lyanna
	}
}

agot_rr_remove_yearly_1010_abductor_flag = {
	character:Dayne_5 = {
		if = {
			limit = { is_alive = yes }

			remove_character_flag = yearly_1010_abductor
			remove_character_flag = agot_is_at_unknown_place
			#RIP spawn_activity
			# hidden_effect = {
			# 	character:Dayne_5.activity = {
			# 		complete_activity = yes
			# 	}
			# }
		}
	}
	character:Whent_5 = {
		if = {
			limit = { is_alive = yes }

			remove_character_flag = yearly_1010_abductor
			remove_character_flag = agot_is_at_unknown_place
			#RIP spawn_activity
			# hidden_effect = {
			# 	character:Whent_5.activity = {
			# 		complete_activity = yes
			# 	}
			# }
		}
	}
	character:Hightower_3 = {
		if = {
			limit = { is_alive = yes }

			remove_character_flag = yearly_1010_abductor
			remove_character_flag = agot_is_at_unknown_place
			#RIP spawn_activity
			# hidden_effect = {
			# 	character:Hightower_3.activity = {
			# 		complete_activity = yes
			# 	}
			# }
		}
	}
}

### TOJ EFFECTS ###

agot_scenario_rr_toj_companion_setup = {
	# Add historic companions
	if = {
		limit = {
			agot_has_historical_events_trigger = yes
		}
		if = {
			limit = { character:Reed_1 = { is_alive = yes } }
			add_to_variable_list = {
				name = agot_toj_possible_companions
				target = character:Reed_1
			}
		}
		if = {
			limit = { character:Dustin_1 = { is_alive = yes } }
			add_to_variable_list = {
				name = agot_toj_possible_companions
				target = character:Dustin_1
			}
		}
		if = {
			limit = { character:Glover_2 = { is_alive = yes } }
			add_to_variable_list = {
				name = agot_toj_possible_companions
				target = character:Glover_2
			}
		}
		if = {
			limit = { character:Cassel_2 = { is_alive = yes } }
			add_to_variable_list = {
				name = agot_toj_possible_companions
				target = character:Cassel_2
			}
		}
		if = {
			limit = { character:Ryswell_10 = { is_alive = yes } }
			add_to_variable_list = {
				name = agot_toj_possible_companions
				target = character:Ryswell_10
			}
		}
		if = {
			limit = { character:Wull_4 = { is_alive = yes } }
			add_to_variable_list = {
				name = agot_toj_possible_companions
				target = character:Wull_4
			}
		}
	}
	every_living_character = {
		limit = {
			has_relation_friend = prev
			NOT = { is_target_in_variable_list = { name = agot_toj_possible_companions target = scope:agot_toj_chain_leader } } # Characters that are already in list are not be eligible
			NOT = { this = character:Baratheon_2 }
			age > 15
		}
		root = {
			add_to_variable_list = {
				name = agot_toj_possible_companions
				target = prev
			}
		}
	}
	every_vassal_or_below = {
		limit = {
			NOT = { is_target_in_variable_list = { name = agot_toj_possible_companions target = scope:agot_toj_chain_leader } } # Characters that are already in list are not be eligible
			prowess > 15
			OR = {
				has_trait_rank = { trait = education_martial_prowess rank > 2 }
				has_trait = lifestyle_blademaster
			}
			NOT = { this = character:Baratheon_2 }
			age > 15
		}
		root = {
			add_to_variable_list = {
				name = agot_toj_possible_companions
				target = prev
			}
		}
	}
	# Companion leader should not end up on the lists, if he does though we need to add another trigger
}

agot_scenario_rr_toj_get_companions_setup = {
	ordered_in_list = {
		variable = agot_toj_possible_companions
		order_by = {
			value = 0
			if = {
				limit = {
					# historical characters should always be used
					has_game_rule = agot_story_historical_events_historical_outcomes
					OR = {
						this = character:Reed_1
						this = character:Dustin_1
						this = character:Glover_2
						this = character:Cassel_2
						this = character:Ryswell_10
						this = character:Wull_4
					}
				}
				add = 1000
			}
			if = {
				limit = {
					# historical characters should usually be used
					has_game_rule = agot_story_historical_events_weighted_outcomes
					OR = {
						this = character:Reed_1
						this = character:Dustin_1
						this = character:Glover_2
						this = character:Cassel_2
						this = character:Ryswell_10
						this = character:Wull_4
					}
				}
				add = 500
			}
			# Below look for replacements if above are not filling all slots
			if = {
				limit = {
					prowess > 12
				}
				add = 500
			}
			if = {
				limit = {
					has_relation_friend = prev
				}
				add = 400
			}
			if = {
				limit = {
					has_trait = lifestyle_blademaster
				}
				add = 300
			}
		}
		max = 6

		trigger_event = agot_scenario_rr_toj.0002 # Possible companions are asked to join
	}
}

agot_scenario_rr_get_birth_outcome = {
	if = {
		limit = {
			NOT = {
				has_global_variable = agot_scenario_rr_get_birth_outcome_fired
			}
		}
		set_global_variable = agot_scenario_rr_get_birth_outcome_fired
		random_list = { # all chances are 50%
			0 = { # Lyanna alive, baby alive, child is male
				set_variable = {
					name = agot_rr_lyanna_birth_outcome
					value = flag:alive_alive
				}
				modifier = {
					add = agot_nonhistoric_outcome_4
				}
			}
			0 = { # Lyanna dead, baby alive, child is male
				set_variable = {
					name = agot_rr_lyanna_birth_outcome
					value = flag:dead_alive
				}
				modifier = {
					add = agot_historic_outcome_4
				}
			}
			0 = { # Lyanna alive, baby dead
				set_variable = {
					name = agot_rr_lyanna_birth_outcome
					value = flag:alive_dead
				}
				modifier = {
					add = agot_nonhistoric_outcome_4
				}
			}
			0 = { # Lyanna dead, baby dead
				set_variable = {
					name = agot_rr_lyanna_birth_outcome
					value = flag:dead_dead
				}
				modifier = {
					add = agot_nonhistoric_outcome_4
				}
			}
		}
	}
	else = {
		if = {
			limit = {
				has_global_variable = agot_scenario_rr_get_birth_outcome_fired
			}
		}
	}
}

agot_scenario_rr_toj_create_baby_snow_effect = {
	create_character = {
		age = 0
		random_traits = no
		#mother = character:Stark_5
		real_father = character:Targaryen_3
		location = character:Stark_5.location
		gender_female_chance = {
			value = agot_canon_children_male_female_chance
		}
		faith = faith:old_gods_south
		culture = culture:northman
		dynasty = none
		trait = bastard
		random_traits = no
		save_scope_as = baby_snow
	}
	hidden_effect = {
		scope:baby_snow = {
			if = {
				limit = { is_male = yes }
				change_first_name = "Jon"
			}
			if = {
				limit = { is_female = yes }
				change_first_name = "Joanna"
			}
			copy_inheritable_appearance_from = character:Stark_67
			make_trait_inactive = surname_snow #Gives bastard surname
			set_real_mother = character:Stark_5
			make_trait_inactive = dark_brown_hair
			make_trait_inactive = grey_eyes
			make_trait_inactive = is_stark_7
		}
		title:e_the_iron_throne = {
			set_variable = {
				name = agot_faegon_jon_snow_char
				value = scope:baby_snow
			}
			set_variable = {
				name = agot_faegon_jae_birth_year
				value = current_year
			}
		}
		if = {
			limit = { exists = character:Stark_5.liege_or_court_owner }
			character:Stark_5.liege_or_court_owner = { add_courtier ?= scope:baby_snow }
		}
	}
}

agot_scenario_rr_get_baby_birth_lyanna_death_effect = {
	if = {
		limit = {
			OR = {
				scope:agot_lyanna_preg_outcome = flag:alive_alive
				scope:agot_lyanna_preg_outcome = flag:dead_alive
			}
		}
		agot_scenario_rr_toj_create_baby_snow_effect = yes
	}
	if = {
		limit = {
			OR = {
				scope:agot_lyanna_preg_outcome = flag:dead_alive
				scope:agot_lyanna_preg_outcome = flag:dead_dead
			}
		}
		character:Stark_5 = { death = { death_reason = death_childbirth } }

		title:k_the_westerlands.holder = { # Cersei/Robert Marriage
			trigger_event = {
				id = agot_events_rr_minor.0111
				days = { 5 10 }
			}
		}

		set_variable = {
			name	= agot_rr_cersei_marriage
			value	= flag:fired
		}
	}
}

agot_kingsguard_plot_fetch_kingsguard_scope = {
	if = {
		limit = { character:Dayne_5 = { is_alive = yes } }
		character:Dayne_5 = { save_scope_as = scoped_kingsguard }
	}
	else_if = {
		limit = { character:Hightower_3 = { is_alive = yes } }
		character:Hightower_3 = { save_scope_as = scoped_kingsguard }
	}
	else_if = {
		limit = { character:Whent_5 = { is_alive = yes } }
		character:Whent_5 = { save_scope_as = scoped_kingsguard }
	}
}

agot_baby_snow_set_foster_father = {
	hidden_effect = {
		scope:baby_snow = {
			give_nickname = nick_sand
			set_house = root.house

			if = {
				limit = { is_male = yes }
				change_first_name = "Ulrick" #Famous SOTM from the reign of Daeron II
			}
			if = {
				limit = { is_female = yes }
				change_first_name = "Dyanna" #After Dyanna Dayne, Wife of King Maekar
			}
		}
		scope:baby_snow = {
			set_father = $NEW_FATHER$
		}
		add_courtier = scope:baby_snow
		character:Hightower_3 = {
			if = {
				limit = { is_alive = yes }

				death = { death_reason = death_disappearance }
			}
		}
		character:Whent_5 = {
			if = {
				limit = { is_alive = yes }

				death = { death_reason = death_disappearance }
			}
		}
		character:Dayne_5 = {
			if = {
				limit = { is_alive = yes }

				death = { death_reason = death_disappearance }
			}
		}
	}
	custom_tooltip = agot_scenario_rr_toj.0101.tooltip
	$NEW_FATHER$ = {
		add_secret = {
			type = secret_agot_disputed_heritage
			target = scope:baby_snow
			save_scope_as = snow_secret
		}
		if = {
			limit = {
				NOT = { this = root }
			}
			root = {
				add_secret = {
					type = secret_agot_disputed_heritage
					target = scope:baby_snow
					save_scope_as = snow_secret
				}
			}
		}
	}
}

agot_scenario_rr_toj_release_lyanna_from_prison = {
	character:Stark_5 = {
		remove_character_flag = yearly_1010_abducted
		remove_character_flag = agot_is_at_unknown_place
		#RIP spawn_activity
		# hidden_effect = {
		# 	character:Stark_5.activity = {
		# 		complete_activity = yes
		# 	}
		# }
	}
}

agot_scenario_rr_toj_marry_lyanna_disinherit_effect = {
	custom_tooltip = {
		text = AGOT_SCENARIO_RR_TOJ_MARRY_LYANNA_DISINHERIT

		every_child = {
			limit = {
				NOR = {
					has_trait = bastard
					has_trait = legitimized_bastard
				}
			}
			add_trait = disinherited
		}

		every_spouse = {
			add_opinion = {
				modifier = divorced_me_opinion
				target = root
			}
			every_close_or_extended_family_member = {
				add_opinion = {
					modifier = divorced_close_kin
					target = root
				}
			}
			root = { divorce = prev }
		}
		character:Stark_5 = {
			if = {
				limit = {
					is_betrothed = yes
				}
				break_betrothal = betrothed
			}
			if = {
				limit = {
					has_trait = refusing_marriage
				}
				remove_trait = refusing_marriage
			}
		}
		marry = character:Stark_5
		set_relation_soulmate = { reason = lover_longing target = character:Stark_5 }

		hidden_effect = {
			if = {
				limit = { exists = scope:baby_snow } # baby snow must be born/alive
				agot_scenario_rr_rhaegar_baby_snow_trueborn = yes
			}
			character:Stark_5 = {
				agot_create_artifact_crown_of_winter_roses_lyanna_effect = { OWNER = this CREATOR = character:Targaryen_3 }
				scope:newly_created_artifact = { equip_artifact_to_owner_replace = yes }
				trigger_event = {
					id = agot_secret_events.1000
					days = { 30 730 }
				}
			}
		}
	}
}

agot_scenario_rr_toj_marry_lyanna_effect = {
	custom_tooltip = {
		text = AGOT_SCENARIO_RR_TOJ_MARRY_LYANNA

		every_spouse = {
			add_opinion = {
				modifier = divorced_me_opinion
				target = root
			}
			every_close_or_extended_family_member = {
				add_opinion = {
					modifier = divorced_close_kin
					target = root
				}
			}
			root = { divorce = prev }
		}
		character:Stark_5 = {
			if = {
				limit = {
					is_betrothed = yes
				}
				break_betrothal = betrothed
			}
		}
		marry = character:Stark_5
		set_relation_soulmate = { reason = lover_longing target = character:Stark_5 }

		hidden_effect = {
			if = {
				limit = { exists = scope:baby_snow } # baby snow must be born/alive
				agot_scenario_rr_rhaegar_baby_snow_trueborn = yes
			}
			character:Stark_5 = {
				agot_create_artifact_crown_of_winter_roses_lyanna_effect = { OWNER = this CREATOR = character:Targaryen_3 }
				scope:newly_created_artifact = { equip_artifact_to_owner_replace = yes }
				trigger_event = {
					id = agot_secret_events.1000
					days = { 30 730 }
				}
			}
		}
	}
}

agot_scenario_rr_rhaegar_baby_snow_trueborn = {
	scope:baby_snow = {
		remove_trait = bastard
		set_house = root.house
		set_father = root
		set_mother = character:Stark_5
		set_culture = root.culture
		set_character_faith = root.faith
		remove_nickname = yes
		if = {
			limit = { is_female = yes }
			change_first_name = "Visenya"
		}
		else_if = {
			limit = { is_female = no }
			change_first_name = "Aemon"
		}
		agot_create_artifact_dragon_doll_05_effect = { OWNER = this CREATOR = character:Stark_5 }
	}
	add_courtier = scope:baby_snow
}

agot_scenario_rr_rhaegar_baby_snow_bastard = {
	scope:baby_snow = {
		set_house = root.house
		set_father = root
		set_mother = character:Stark_5
		set_culture = root.culture
		set_character_faith = root.faith
		remove_nickname = yes
		give_nickname = nick_waters
		add_trait = bastard
		if = {
			limit = { is_female = yes }
			change_first_name = "Visenya"
		}
		else_if = {
			limit = { is_female = no }
			change_first_name = "Aemon"
		}
		agot_create_artifact_dragon_doll_05_effect = { OWNER = this CREATOR = character:Stark_5 }
	}
	add_courtier = scope:baby_snow
}

agot_scenario_rr_rhaegar_baby_snow_legitimized_bastard = {
	scope:baby_snow = {
		set_house = root.house
		set_father = root
		set_mother = character:Stark_5
		set_culture = root.culture
		set_character_faith = root.faith
		remove_trait = bastard
		remove_nickname = yes
		add_trait = legitimized_bastard
		if = {
			limit = { is_female = yes }
			change_first_name = "Visenya"
		}
		else_if = {
			limit = { is_female = no }
			change_first_name = "Aemon"
		}
		agot_create_artifact_dragon_doll_05_effect = { OWNER = this CREATOR = character:Stark_5 }
	}
	add_courtier = scope:baby_snow
}

# agot_KL_RUIN_EFFECT = {
# 	hidden_effect = {
# 		create_character = {
# 			age = 20
# 			gender = male
# 			location = title:c_kings_landing.title_province
# 			random_traits = no
# 			name = "Ruin"
# 			trait = ruin
# 			faith = faith:the_seven_main
# 			culture = culture:high_valyrian
# 			dynasty = none
# 			save_scope_as = KL_ruin
# 		}
# 	}
# 	set_holding_type = ruin_holding
# 	add_building = large_ruin_01
# 	add_building = ruin_renowned_01
# 	add_building = ruin_wildfire_01

# 	create_title_and_vassal_change = {
# 		type = granted
# 		save_scope_as = change
# 		add_claim_on_loss = yes
# 	}
# 	barony = {
# 		change_title_holder = {
# 			holder = scope:KL_ruin
# 			change = scope:change
# 		}
# 		set_coa = ruins_coa
# 	}
# 	resolve_title_and_vassal_change = scope:change

# 	scope:KL_ruin = {
# 		set_sexuality = asexual
# 		change_government = ruins_government
# 	}
# }

# testingaboveeffect = {
# 	hidden_effect = {
# 		create_character = {
# 			age = 20
# 			#gender = female
# 			location = title:c_kings_landing.title_province
# 			random_traits = no
# 			name = "Ruin"
# 			trait = ruin
# 			sexuality = asexual
# 			faith = faith:the_seven_main
# 			culture = culture:high_valyrian
# 			save_scope_as = KL_ruin
# 		}
# 	}
# 	scope:KL_ruin = {
# 		change_government = ruins_government
# 	}
# 	set_holding_type = ruin_holding
# 	add_building = large_ruin_01
# 	add_building = ruin_renowned_01
# 	add_building = ruin_wildfire_01

# 	create_title_and_vassal_change = {
# 		type = granted
# 		save_scope_as = change
# 		add_claim_on_loss = yes
# 	}
# 	title:c_kings_landing = {
# 		change_title_holder = {
# 			holder = scope:KL_ruin
# 			change = scope:change
# 		}
# 		set_coa = ruins_coa
# 	}
# 	resolve_title_and_vassal_change = scope:change

# 	title:c_kings_landing = {
# 		every_county_province = {
# 			agot_KL_RUIN_EFFECT = yes
# 		}
# 	}
# }