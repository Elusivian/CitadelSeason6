knight_none = {
	type = knight

	chance = {
		base = 1750 #Hambone halved
		#AGOT Disabled, same chances as AI
		# modifier = {
		# 	factor = 1.5
		# 	has_perk = stalwart_leader_perk
		# 	is_ai = no
		# }
		modifier = {
			factor = 1.15
			has_perk = stalwart_leader_perk
			#AGOT Disabled
			# is_ai = yes
		}
		modifier = {
			factor = 1.25
			exists = dynasty
			dynasty = {
				has_dynasty_perk = warfare_legacy_3
			}
		}
		
		# Wounded knights hang back
		modifier = {
			factor = 1.1
			has_trait_rank = {
				trait = wounded
				rank = 1
			}
		}
		modifier = {
			factor = 1.2
			has_trait_rank = {
				trait = wounded
				rank = 2
			}
		}
		modifier = {
			factor = 1.3
			OR = {
				has_trait_rank = {
					trait = wounded
					rank = 3
				}
				has_trait = maimed
			}
		}
	}
}

knight_berserker_attack = {
	type = knight

	is_valid = {
		has_trait = berserker
		scope:combat_side.enemy_side = {
			any_side_knight = {
				is_alive = yes
				this.prowess <= root.prowess_for_combat_event_opponent
			}
		}
		#AGOT Added
		is_current_dragonrider_warfare = no
	}

	chance = {
		base = 30
		modifier = {
			factor = 1.5
			has_perk = stalwart_leader_perk
			is_ai = no
		}
		modifier = {
			factor = 1.15
			has_perk = stalwart_leader_perk
			is_ai = yes
		}
		modifier = {
			factor = 1.25
			exists = dynasty
			dynasty = {
				has_dynasty_perk = warfare_legacy_3
			}
		}

		modifier = {
			factor = 2
			has_trait = wrathful
		}
		modifier = {
			factor = 10
			has_trait = giant
		}
		modifier = {
			factor = 1.25
			has_trait_rank = {
				trait = wounded
				rank = 1
			}
		}
		modifier = {
			factor = 1.25
			has_trait_rank = {
				trait = wounded
				rank = 2
			}
		}
		modifier = {
			factor = 1.25
			has_trait_rank = {
				trait = wounded
				rank = 3
			}
		}
		modifier = {
			factor = 0.25
			OR = {
				has_trait = one_legged
				has_trait = disfigured
				has_trait = one_eyed
				has_trait = maimed
			}
		}
	}

	effect = {
		if = {
			limit = {
				scope:combat_side.enemy_side = {
					any_side_knight = {
						is_alive = yes
						this.prowess <= root.prowess_for_combat_event_opponent
						#AGOT Added
						is_current_dragonrider_warfare = no
					}
				}
			}
			scope:combat_side.enemy_side = {
				random_side_knight = {
					limit = {
						is_alive = yes
						this.prowess <= root.prowess_for_combat_event_opponent
						#AGOT Added
						is_current_dragonrider_warfare = no
					}
					save_temporary_scope_as = enemy_knight
				}
			}
			if = {
				limit = {
					root = { is_alive = yes }
					scope:enemy_knight = { is_alive = yes }
				}
				add_prestige = knight_prestige_gain_on_kill
				knight_increase_prowess_chance_effect = yes
				berserker_kill_version_randomization_effect = yes
				scope:enemy_knight = {
					if = {
						limit = {
							exists = accolade
							accolade = { is_accolade_active = yes }
						}
						accolade = { add_glory = minimal_glory_gain }
					}
				}
			}
		}
	}
}

knight_become_berserker = {
	type = knight

	is_valid = {
		faith = {
			has_doctrine = tenet_warmonger
		}
		OR = {
			#AGOT Modified
			# culture = { has_cultural_pillar = heritage_north_germanic }
			# religion = religion:germanic_religion
			culture = { agot_is_wildling_culture = yes }
			religion = religion:old_gods_religion
		}
		NOR = {
			has_trait = craven
			has_trait = berserker
			has_trait = calm
		}
		#AGOT Added
		is_current_dragonrider_warfare = no
	}

	chance = {
		base = 30
		modifier = {
			factor = 1.5
			has_perk = stalwart_leader_perk
			is_ai = no
		}
		modifier = {
			factor = 1.15
			has_perk = stalwart_leader_perk
			is_ai = yes
		}
		modifier = {
			factor = 1.25
			exists = dynasty
			dynasty = {
				has_dynasty_perk = warfare_legacy_3
			}
		}
		modifier = {
			factor = 5
			has_trait = wrathful
		}
		modifier = {
			factor = 5
			has_trait = giant
		}
		modifier = {
			factor = 3
			has_trait = impatient
		}
		modifier = {
			factor = 2
			has_trait = sadistic
		}
		modifier = {
			factor = 2
			has_trait = brave
		}
		modifier = {
			factor = 2
			has_trait = ambitious
		}
		#AGOT Modified
		# modifier = {
		# 	factor = 2
		# 	culture = { has_cultural_pillar = heritage_north_germanic }
		# }
		modifier = {
			factor = 2
			culture = { agot_is_wildling_culture = yes }
		}
		modifier = {
			factor = 0.5
			has_trait = content
		}
		modifier = {
			factor = 0.25
			has_trait = compassionate
		}
		modifier = {
			factor = 0.25
			has_trait = temperate
		}
		modifier = {
			factor = 0.25
			has_trait = lazy
		}
		modifier = {
			factor = 0.25
			has_trait = patient
		}
		modifier = {
			factor = 0.5
			has_trait_rank = {
				trait = wounded
				rank = 1
			}
		}
		modifier = {
			factor = 0.5
			has_trait_rank = {
				trait = wounded
				rank = 2
			}
		}
		modifier = {
			factor = 0.25
			has_trait_rank = {
				trait = wounded
				rank = 3
			}
		}
		modifier = {
			factor = 0.5
			OR = {
				has_trait = one_legged
				has_trait = disfigured
				has_trait = one_eyed
				has_trait = maimed
			}
		}
	}

	effect = {
		if = {
			limit = {
				scope:combat_side.enemy_side = {
					any_side_knight = {
						this.prowess <= root.prowess_for_combat_event_opponent
					}
				}
			}
			scope:combat_side.enemy_side = {
				random_side_knight = {
					limit = {
						this.prowess <= root.prowess_for_combat_event_opponent
					}
					save_temporary_scope_as = enemy_knight
				}
			}
			if = {
				limit = {
					root = { is_alive = yes }
					scope:enemy_knight = { is_alive = yes }
				}
				scope:combat_side = {
					battle_event = {
						key = "berserker_rage_killed_enemy"
						left_portrait = root
						right_portrait = scope:enemy_knight
						type = death
						target_right = yes
					}
				}
				add_prestige = knight_prestige_gain_on_kill
				knight_increase_prowess_chance_effect = yes
				add_trait = berserker
				scope:enemy_knight = {
					death = {
						death_reason = death_head_ripped_off
						killer = root
					}
				}
			}
		}
		else = {
			if = {
				limit = {
					root = { is_alive = yes }
				}
				scope:combat_side = {
					battle_event = {
						key = "berserker_rage_no_enemy"
						left_portrait = root
						type = death
						target_right = yes
					}
				}
				add_trait = berserker
			}
		}
		if = {
			limit = {
				is_acclaimed = yes
				accolade = {
					is_accolade_active = yes
				}
			}
			accolade = {
				add_glory = minimal_glory_gain
			}
		}
	}
}

knight_shieldmaiden_attack = {
	type = knight

	is_valid = {
		has_trait = shieldmaiden
		scope:combat_side.enemy_side = {
			any_side_knight = {
				is_alive = yes
				this.prowess <= root.prowess_for_combat_event_opponent
			}
		}
		#AGOT Added
		is_current_dragonrider_warfare = no
	}

	chance = {
		base = 30
		modifier = {
			factor = 1.5
			has_perk = stalwart_leader_perk
			is_ai = no
		}
		modifier = {
			factor = 1.15
			has_perk = stalwart_leader_perk
			is_ai = yes
		}
		modifier = {
			factor = 1.25
			exists = dynasty
			dynasty = {
				has_dynasty_perk = warfare_legacy_3
			}
		}
		modifier = {
			factor = 2
			has_trait = wrathful
		}
		modifier = {
			factor = 10
			has_trait = giant
		}
		modifier = {
			factor = 1.25
			has_trait_rank = {
				trait = wounded
				rank = 1
			}
		}
		modifier = {
			factor = 1.25
			has_trait_rank = {
				trait = wounded
				rank = 2
			}
		}
		modifier = {
			factor = 1.25
			has_trait_rank = {
				trait = wounded
				rank = 3
			}
		}
		modifier = {
			factor = 0.25
			OR = {
				has_trait = one_legged
				has_trait = disfigured
				has_trait = one_eyed
				has_trait = maimed
			}
		}
	}

	effect = {
		if = {
			limit = {
				scope:combat_side.enemy_side = {
					any_side_knight = {
						is_alive = yes
						this.prowess <= root.prowess_for_combat_event_opponent
					}
				}
			}
			scope:combat_side.enemy_side = {
				random_side_knight = {
					limit = {
						is_alive = yes
						this.prowess <= root.prowess_for_combat_event_opponent
					}
					save_temporary_scope_as = enemy_knight
				}
			}
			if = {
				limit = {
					root = { is_alive = yes }
					scope:enemy_knight = { is_alive = yes }
				}
				add_prestige = knight_prestige_gain_on_kill
				knight_increase_prowess_chance_effect = yes
				shieldmaiden_kill_version_randomisation_effect = yes
				scope:enemy_knight = {
					if = {
						limit = {
							exists = accolade
							accolade = { is_accolade_active = yes }
						}
						# Shieldmaidens are especially good at earning glory.
						accolade = { add_glory = minor_glory_gain }
					}
				}
			}
		}
	}
}

knight_becomes_incapable = {
	type = knight

	is_valid = {
		is_incapable = no
		#AGOT Added
		is_current_dragonrider_warfare = no
	}

	chance = {
		# This is just random bad luck of suffering a serious head injury.
		base = 5 #Hambone
	}

	effect = {
		# Long as we're alive, conk 'em out.
		if = {
			limit = { is_alive = yes }
			add_trait = incapable
			create_character_memory = { type = became_incapable_due_to_battle_concussion }
			# We have to do this weird double-scoping due to some kind of dark pact with Code, else things won't work.
			scope:new_memory = { save_scope_as = battle_memory }
			scope:battle_memory = {
				set_variable = {
					name = battle_location
					value = root.location
				}
			}
		}
	}
}

knight_wounded = {
	type = knight

	is_valid = {
		NOT = {
			has_trait_rank = {
				trait = wounded
				rank = 3
			}
		}
		# AGOT Added
		is_current_dragonrider_warfare = no
	}

	chance = {
		base = 200 #Hambone doubled
		modifier = {
			factor = { # Prowess directly reduces chance of injury/death
				#AGOT Modified
				# value = 40 # Value at which 'immortality' happens
				value = 80
				subtract = prowess
				#AGOT Disabled
				# if = {
				# 	limit = {
				# 		has_court_position = garuda_court_position
				# 	}
				# 	add = garuda_prowess_svalue
				# }
				#AGOT Added
				if = {
					limit = {
						has_court_position = household_guard_court_position
					}
					subtract = household_guard_prowess_svalue
				}
				#AGOT Modified
				# divide = 40
				divide = 80
				min = 0.1 # Everyone dies.
			}
		}
		modifier = { # Reduce chance when outnumbering the enemy
			factor = {
				value = scope:combat_side.enemy_side.side_strength
				divide = scope:combat_side.side_strength
				multiply = 1.2 # Outnumbering 2-1 reduces chance by 30%
				max = 1
			}
			scope:combat_side.side_strength > scope:combat_side.enemy_side.side_strength
		}
		modifier = {
			factor = 1.05
			culture = {
				has_cultural_parameter = knights_slightly_more_prone_to_injury
			}
		}
		modifier = {
			factor = 1.1
			faith = {
				has_doctrine_parameter = death_is_glory
			}
		}
		#AGOT Disabled
		# modifier = {
		# 	factor = 4
		# 	has_court_position = garuda_court_position
		# }
		modifier = {
			factor = 2
			has_trait = brave
		}
		modifier = {
			factor = 0.5
			has_trait = craven
		}
		#House Knight defends family
		## Low decrease chance.
		modifier = {
			factor = accolade_defends_family_actual_low_value
			exists = house
			exists = liege.house
			house = liege.house
			scope:combat_side = {
				OR = {
					any_side_knight = {
						exists = accolade
						accolade = {
							is_accolade_active = yes
							has_accolade_parameter = accolade_defends_family_low
							
						}
					}
					any_side_commander = {
						exists = accolade
						accolade = {
							is_accolade_active = yes
							has_accolade_parameter = accolade_defends_family_low
						}
					}
				}
				# Not cumulative with subsequent ranks.
				NOR = {
					any_side_knight = {
						exists = accolade
						accolade = {
							is_accolade_active = yes
							OR = {
								has_accolade_parameter = accolade_defends_family_medium
								has_accolade_parameter = accolade_defends_family_high
							}
						}
					}
					any_side_commander = {
						exists = accolade
						accolade = {
							is_accolade_active = yes
							OR = {
								has_accolade_parameter = accolade_defends_family_medium
								has_accolade_parameter = accolade_defends_family_high
							}
						}
					}
				}
			}
		}
		## Medium decrease chance.
		modifier = {
			factor = accolade_defends_family_actual_medium_value
			exists = house
			exists = liege.house
			house = liege.house
			scope:combat_side = {
				OR = {
					any_side_knight = {
						exists = accolade
						accolade = {
							is_accolade_active = yes
							has_accolade_parameter = accolade_defends_family_medium
						}
					}
					any_side_commander = {
						exists = accolade
						accolade = {
							is_accolade_active = yes
							has_accolade_parameter = accolade_defends_family_medium
						}
					}
				}
				# Not cumulative with the subsequent rank.
				NOR = {
					any_side_knight = {
						exists = accolade
						accolade = {
							is_accolade_active = yes
							has_accolade_parameter = accolade_defends_family_high
						}
					}
					any_side_commander = {
						exists = accolade
						accolade = {
							is_accolade_active = yes
							has_accolade_parameter = accolade_defends_family_high
						}
					}
				}
			}
		}
		## High decrease chance.
		modifier = {
			factor = accolade_defends_family_actual_high_value
			exists = house
			exists = liege.house
			house = liege.house
			scope:combat_side = {
				OR = {
					any_side_knight = {
						exists = accolade
						accolade = {
							is_accolade_active = yes
							has_accolade_parameter = accolade_defends_family_high
						}
					}
					any_side_commander = {
						exists = accolade
						accolade = {
							is_accolade_active = yes
							has_accolade_parameter = accolade_defends_family_high
						}
					}
				}
			}
		}

		#AGOT Added
		modifier = {
			factor = 0.95
			has_character_modifier = agot_has_squire_modifier
		}
	}

	effect = {
		if = {
			limit = {
				scope:combat_side.enemy_side = {
					any_side_knight = {
						this.prowess >= root.prowess_for_combat_event_opponent
					}
				}
			}
			scope:combat_side.enemy_side = {
				random_side_knight = {
					limit = {
						this.prowess >= root.prowess_for_combat_event_opponent
					}
					save_temporary_scope_as = enemy_knight
					add_prestige = knight_prestige_gain_on_wound_inverse
					knight_increase_prowess_chance_effect = yes
				}
			}
			scope:combat_side = {
				battle_event = {
					key = "knight_wounded_by_enemy"
					left_portrait = root
					right_portrait = scope:enemy_knight
					type = wound
				}
			}
			increase_wounds_effect = { REASON = fight }
			# Scope:enemy_knight gets some glory.
			scope:enemy_knight = {
				if = {
					limit = {
						exists = accolade
						accolade = { is_accolade_active = yes }
					}
					accolade = { add_glory = minimal_glory_gain }
				}
			}
		}
		else = {
			scope:combat_side = {
				battle_event = {
					key = "knight_wounded_no_enemy"
					left_portrait = root
					type = wound
				}
			}
			increase_wounds_effect = { REASON = fight }
		}
	}
}

knight_maimed = {
	type = knight

	is_valid = {
		NAND = {
			has_trait = one_legged
			has_trait = disfigured
			has_trait = one_eyed
			has_trait = maimed
		}
		# AGOT Added
		is_current_dragonrider_warfare = no
	}

	chance = {
		base = 80 #Hambone doubled
		modifier = {
			factor = { # Prowess directly reduces chance of injury/death
				#AGOT Modified
				# value = 30 # Value at which 'immortality' happens
				value = 80
				subtract = prowess
				#AGOT Disabled
				# if = {
				# 	limit = {
				# 		has_court_position = garuda_court_position
				# 	}
				# 	add = garuda_prowess_svalue
				# }
				#AGOT Added
				if = {
					limit = {
						has_court_position = household_guard_court_position
					}
					subtract = household_guard_prowess_svalue
				}
				#AGOT Modified
				#divide = 30
				divide = 80
				min = 0.1 # Everyone dies.
			}
		}
		modifier = { # Reduce chance when outnumbering the enemy
			factor = {
				value = scope:combat_side.enemy_side.side_strength
				divide = scope:combat_side.side_strength
				multiply = 1.2 # Outnumbering 2-1 reduces chance by 30%
				max = 1
			}
			scope:combat_side.side_strength > scope:combat_side.enemy_side.side_strength
		}
		# modifier = { # No deaths when vastly outnumbering the enemy
		# 	factor = 0
		# 	scope:combat_side.side_strength > scope:combat_side.enemy_side.vastly_outnumbered_combat_side_threshold
		# }
		modifier = {
			factor = 1.05
			culture = {
				has_cultural_parameter = knights_slightly_more_prone_to_injury
			}
		}
		modifier = {
			factor = 1.1
			faith = {
				has_doctrine_parameter = death_is_glory
			}
		}
		#AGOT Disabled
		# modifier = {
		# 	factor = 3
		# 	has_court_position = garuda_court_position
		# }
		modifier = {
			factor = 2
			has_trait = brave
		}
		modifier = {
			factor = 0.5
			has_trait = craven
		}
		#House Knight defends family
		## Low decrease chance.
		modifier = {
			factor = accolade_defends_family_actual_low_value
			exists = house
			exists = liege.house
			house = liege.house
			scope:combat_side = {
				OR = {
					any_side_knight = {
						exists = accolade
						accolade = {
							is_accolade_active = yes
							has_accolade_parameter = accolade_defends_family_low
						}
					}
					any_side_commander = {
						exists = accolade
						accolade = {
							is_accolade_active = yes
							has_accolade_parameter = accolade_defends_family_low
						}
					}
				}
				# Not cumulative with subsequent ranks.
				NOR = {
					any_side_knight = {
						exists = accolade
						accolade = {
							is_accolade_active = yes
							OR = {
								has_accolade_parameter = accolade_defends_family_medium
								has_accolade_parameter = accolade_defends_family_high
							}
						}
					}
					any_side_commander = {
						exists = accolade
						accolade = {
							is_accolade_active = yes
							OR = {
								has_accolade_parameter = accolade_defends_family_medium
								has_accolade_parameter = accolade_defends_family_high
							}
						}
					}
				}
			}
		}
		## Medium decrease chance.
		modifier = {
			factor = accolade_defends_family_actual_medium_value
			exists = house
			exists = liege.house
			house = liege.house
			scope:combat_side = {
				OR = {
					any_side_knight = {
						exists = accolade
						accolade = {
							is_accolade_active = yes
							has_accolade_parameter = accolade_defends_family_medium
						}
					}
					any_side_commander = {
						exists = accolade
						accolade = {
							is_accolade_active = yes
							has_accolade_parameter = accolade_defends_family_medium
						}
					}
				}
				# Not cumulative with the subsequent rank.
				NOR = {
					any_side_knight = {
						exists = accolade
						accolade = {
							is_accolade_active = yes
							has_accolade_parameter = accolade_defends_family_high
						}
					}
					any_side_commander = {
						exists = accolade
						accolade = {
							is_accolade_active = yes
							has_accolade_parameter = accolade_defends_family_high
						}
					}
				}
			}
		}
		## High decrease chance.
		modifier = {
			factor = accolade_defends_family_actual_high_value
			exists = house
			exists = liege.house
			house = liege.house
			scope:combat_side = {
				OR = {
					any_side_knight = {
						exists = accolade
						accolade = {
							is_accolade_active = yes
							has_accolade_parameter = accolade_defends_family_high
						}
					}
					any_side_commander = {
						exists = accolade
						accolade = {
							is_accolade_active = yes
							has_accolade_parameter = accolade_defends_family_high
						}
					}
				}
			}
		}

		#AGOT Added
		modifier = {
			factor = 0.95
			has_character_modifier = agot_has_squire_modifier
		}
	}

	effect = {
		if = {
			limit = {
				scope:combat_side.enemy_side = {
					any_side_knight = {
						this.prowess >= root.prowess_for_combat_event_opponent
					}
				}
			}
			scope:combat_side.enemy_side = {
				random_side_knight = {
					limit = {
						this.prowess >= root.prowess_for_combat_event_opponent
					}
					save_temporary_scope_as = enemy_knight
					add_prestige = knight_prestige_gain_on_wound_inverse
					knight_increase_prowess_chance_effect = yes
				}
			}
			scope:combat_side = {
				battle_event = {
					key = "knight_maimed_by_enemy"
					left_portrait = root
					right_portrait = scope:enemy_knight
					type = wound
				}
			}
			maimed_in_battle_effect = yes
			# Scope:enemy_knight gets some glory.
			scope:enemy_knight = {
				if = {
					limit = {
						exists = accolade
						accolade = { is_accolade_active = yes }
					}
					accolade = { add_glory = minimal_glory_gain }
				}
			}
		}
		else = {
			scope:combat_side = {
				battle_event = {
					key = "knight_maimed_no_enemy"
					left_portrait = root
					type = wound
				}
			}
			maimed_in_battle_effect = yes
		}
	}
}

knight_killed = {
	type = knight
	
	#AGOT Added
	is_valid = {
		is_current_dragonrider_warfare = no
	}
	#End AGOT Added

	chance = {
		base = 100 #Hambone upped
		modifier = {
			factor = { # Prowess directly reduces chance of injury/death
				#AGOT Modified
				# value = 30 # Value at which 'immortality' happens
				value = 80
				subtract = prowess
				#AGOT Disabled
				# if = {
				# 	limit = {
				# 		has_court_position = garuda_court_position
				# 	}
				# 	add = garuda_prowess_svalue
				# }
				#AGOT Added
				if = {
					limit = {
						has_court_position = household_guard_court_position
					}
					subtract = household_guard_prowess_svalue
				}
				#AGOT Modified
				# divide = 30
				divide = 80
				min = 0.1 # Everyone dies.
			}
		}
		modifier = { # Reduce chance when outnumbering the enemy
			factor = {
				value = scope:combat_side.enemy_side.side_strength
				divide = scope:combat_side.side_strength
				multiply = 1.2 # Outnumbering 2-1 reduces chance by 30%
				max = 1
			}
			scope:combat_side.side_strength > scope:combat_side.enemy_side.side_strength
		}
		# modifier = { # No deaths when vastly outnumbering the enemy
		# 	factor = 0
		# 	scope:combat_side.side_strength > scope:combat_side.enemy_side.vastly_outnumbered_combat_side_threshold
		# }
		modifier = {
			factor = 1.05
			culture = {
				has_cultural_parameter = knights_slightly_more_prone_to_injury
			}
		}
		modifier = {
			factor = 1.1
			faith = {
				has_doctrine_parameter = death_is_glory
			}
		}
		#AGOT Disabled
		# modifier = {
		# 	factor = 3
		# 	has_court_position = garuda_court_position
		# }
		modifier = {
			factor = 2
			has_trait = brave
		}
		modifier = {
			factor = 0.5
			has_trait = craven
		}
		modifier = {
			factor = 4
			has_trait_rank = {
				trait = wounded
				rank = 3
			}
		}
		# Accolades.
		## Low increase chance.
		modifier = {
			factor = accolade_hostile_knight_death_in_battle_actual_low_value
			scope:combat_side = {
				OR = {
					any_side_knight = {
						exists = accolade
						accolade = {
							is_accolade_active = yes
							has_accolade_parameter = accolade_increase_hostile_knight_death_low
						}
					}
					any_side_commander = {
						exists = accolade
						accolade = {
							is_accolade_active = yes
							has_accolade_parameter = accolade_increase_hostile_knight_death_low
						}
					}
				}
				# Not cumulative with subsequent ranks.
				NOR = {
					any_side_knight = {
						exists = accolade
						accolade = {
							is_accolade_active = yes
							OR = {
								has_accolade_parameter = accolade_increase_hostile_knight_death_medium
								has_accolade_parameter = accolade_increase_hostile_knight_death_high
							}
						}
					}
					any_side_commander = {
						exists = accolade
						accolade = {
							is_accolade_active = yes
							OR = {
								has_accolade_parameter = accolade_increase_hostile_knight_death_medium
								has_accolade_parameter = accolade_increase_hostile_knight_death_high
							}
						}
					}
				}
			}
		}
		## Medium increase chance.
		modifier = {
			factor = accolade_hostile_knight_death_in_battle_actual_medium_value
			scope:combat_side = {
				OR = {
					any_side_knight = {
						exists = accolade
						accolade = {
							is_accolade_active = yes
							has_accolade_parameter = accolade_increase_hostile_knight_death_medium
						}
					}
					any_side_commander = {
						exists = accolade
						accolade = {
							is_accolade_active = yes
							has_accolade_parameter = accolade_increase_hostile_knight_death_medium
						}
					}
				}
				# Not cumulative with the subsequent rank.
				NOR = {
					any_side_knight = {
						exists = accolade
						accolade = {
							is_accolade_active = yes
							has_accolade_parameter = accolade_increase_hostile_knight_death_high
						}
					}
					any_side_commander = {
						exists = accolade
						accolade = {
							is_accolade_active = yes
							has_accolade_parameter = accolade_increase_hostile_knight_death_high
						}
					}
				}
			}
		}
		## High increase chance.
		modifier = {
			factor = accolade_hostile_knight_death_in_battle_actual_high_value
			scope:combat_side = {
				OR = {
					any_side_knight = {
						exists = accolade
						accolade = {
							is_accolade_active = yes
							has_accolade_parameter = accolade_increase_hostile_knight_death_high
						}
					}
					any_side_commander = {
						exists = accolade
						accolade = {
							is_accolade_active = yes
							has_accolade_parameter = accolade_increase_hostile_knight_death_high
						}
					}
				}
			}
		}
		#House Knight defends family
		## Low decrease chance.
		modifier = {
			factor = accolade_defends_family_actual_low_value
			exists = house
			exists = liege.house
			house = liege.house
			scope:combat_side = {
				OR = {
					any_side_knight = {
						exists = accolade
						accolade = {
							is_accolade_active = yes
							has_accolade_parameter = accolade_defends_family_low
						}
					}
					any_side_commander = {
						exists = accolade
						accolade = {
							is_accolade_active = yes
							has_accolade_parameter = accolade_defends_family_low
						}
					}
				}
				# Not cumulative with subsequent ranks.
				NOR = {
					any_side_knight = {
						exists = accolade
						accolade = {
							is_accolade_active = yes
							OR = {
								has_accolade_parameter = accolade_defends_family_medium
								has_accolade_parameter = accolade_defends_family_high
							}
						}
					}
					any_side_commander = {
						exists = accolade
						accolade = {
							is_accolade_active = yes
							OR = {
								has_accolade_parameter = accolade_defends_family_medium
								has_accolade_parameter = accolade_defends_family_high
							}
						}
					}
				}
			}
		}
		## Medium decrease chance.
		modifier = {
			factor = accolade_defends_family_actual_medium_value
			exists = house
			exists = liege.house
			house = liege.house
			scope:combat_side = {
				OR = {
					any_side_knight = {
						exists = accolade
						accolade = {
							is_accolade_active = yes
							has_accolade_parameter = accolade_defends_family_medium
						}
					}
					any_side_commander = {
						exists = accolade
						accolade = {
							is_accolade_active = yes
							has_accolade_parameter = accolade_defends_family_medium
						}
					}
				}
				# Not cumulative with the subsequent rank.
				NOR = {
					any_side_knight = {
						exists = accolade
						accolade = {
							is_accolade_active = yes
							has_accolade_parameter = accolade_defends_family_high
						}
					}
					any_side_commander = {
						exists = accolade
						accolade = {
							is_accolade_active = yes
							has_accolade_parameter = accolade_defends_family_high
						}
					}
				}
			}
		}
		## High decrease chance.
		modifier = {
			factor = accolade_defends_family_actual_high_value
			exists = house
			exists = liege.house
			house = liege.house
			scope:combat_side = {
				OR = {
					any_side_knight = {
						exists = accolade
						accolade = {
							is_accolade_active = yes
							has_accolade_parameter = accolade_defends_family_high
						}
					}
					any_side_commander = {
						exists = accolade
						accolade = {
							is_accolade_active = yes
							has_accolade_parameter = accolade_defends_family_high
						}
					}
				}
			}
		}

		#AGOT Added
		modifier = {
			factor = 0.95
			has_character_modifier = agot_has_squire_modifier
		}
	}

	effect = {
		if = {
			limit = {
				has_variable = hold_court_8050_knight
				employer = {
					has_variable = hold_court_8050_promise
					var:hold_court_8050_promise = PREV
				}
			}
			save_scope_as = knight
			location = { save_scope_as = battle_location }
			var:hold_court_8050_knight = { save_scope_as = vassal }
			remove_variable = hold_court_8050_knight
			employer = {
				remove_variable = hold_court_8050_promise
				trigger_event = {
					id = hold_court.8053
					days = 1
				}
			}
		}
		save_died_in_battle_variables_effect = {
			ENEMY = scope:combat_side.enemy_side.side_primary_participant
			LEADER = scope:combat_side.side_primary_participant
			LOCATION = scope:combat_side.combat.location
		}
		if = {
			limit = {
				scope:combat_side.enemy_side = {
					any_side_knight = {
						this.prowess >= root.prowess_for_combat_event_opponent
						#AGOT Added
						is_current_dragonrider_warfare = no
					}
				}
			}
			scope:combat_side.enemy_side = {
				random_side_knight = {
					limit = {
						this.prowess >= root.prowess_for_combat_event_opponent
						#AGOT Added
						is_current_dragonrider_warfare = no
					}
					save_temporary_scope_as = enemy_knight
					add_prestige = knight_prestige_gain_on_kill_inverse
					knight_increase_prowess_chance_effect = yes
					# Scope:enemy_knight gets some glory.
					scope:enemy_knight = {
						if = {
							limit = {
								exists = accolade
								accolade = { is_accolade_active = yes }
							}
							accolade = { add_glory = minor_glory_gain }
						}
					}
				}
			}
			#AGOT Modified
#			if = {
#				limit = {
#					root = { is_alive = yes }
#					scope:enemy_knight = { is_alive = yes }
#				}
#				scope:combat_side = {
#					battle_event = {
#						key = "knight_killed_by_enemy"
#						left_portrait = root
#						right_portrait = scope:enemy_knight
#						type = death
#					}
#					# For after-battle messaging
#					add_to_variable_list = {
#						name = slain_side_knights
#						target = root
#					}
#				}
#				death = {
#					death_reason = death_battle
#					killer = scope:enemy_knight
#				}
#			}
			if = {
				limit = {
					root = {
						agot_dying_king_trigger = yes
					}
				}
				root = {
					save_scope_as = crown_theft_king
					scope:crown_theft_king = { crown_theft_battle_effect = yes }
				}
			}
			else_if = {
				limit = {
					root = { is_alive = yes }
					scope:enemy_knight = { is_alive = yes }
				}
				scope:combat_side = {
					battle_event = {
						key = "knight_killed_by_enemy"
						left_portrait = root
						right_portrait = scope:enemy_knight
						type = death
					}
					# For after-battle messaging
					add_to_variable_list = {
						name = slain_side_knights
						target = root
					}
				}
				death = {
					death_reason = death_battle
					killer = scope:enemy_knight
				}
			}
		}
		else = {
			scope:combat_side = {
				battle_event = {
					key = "knight_killed_no_enemy"
					left_portrait = root
					type = death
				}
				# For after-battle messaging
				add_to_variable_list = {
					name = slain_side_knights
					target = root
				}
			}
			death = {
				death_reason = death_battle
			}
		}
		if = {
			limit = {
				is_acclaimed = yes
			}
			accolade = {
				add_glory = minor_glory_gain
			}
		}
	}
}

# AGOT Added
knight_dragon_attack = {
	type = knight

	is_valid = {
		is_current_dragonrider_warfare = yes
		scope:combat_side.enemy_side = {
			any_side_knight = {
				is_alive = yes
				is_current_dragonrider_warfare = no
				prowess < root.var:current_dragon.prowess_for_combat_event_opponent # Dragons have prowess so this is fine
			}
		}
	}

	chance = {
		base = 0
		modifier = {
			add = var:current_dragon.dragon_combat_effectiveness
			factor = 0.2
			always = yes
		}

		modifier = {
			factor = 2
			var:current_dragon = { has_trait = dragon_bloodthirsty }
		}
		modifier = {
			factor = 1.5
			var:current_dragon = { has_trait = dragon_aggressive }
		}
		modifier = {
			factor = 1.25
			var:current_dragon = { has_trait = dragon_impulsive }
		}
		modifier = {
			factor = 0.75
			var:current_dragon = { has_trait = dragon_calculating }
		}
		modifier = {
			factor = 0.5
			var:current_dragon = { has_trait = dragon_friendly }
		}
		modifier = {
			factor = 0.25
			var:current_dragon = { has_trait = dragon_skittish }
		}
		modifier = {
			factor = 0.25
			var:current_dragon = { 
				OR = {
					has_trait = dragon_wounded_1
					has_trait = dragon_wounded_2
					has_trait = dragon_wounded_3
					has_trait = dragon_wounded_4
					has_trait = dragon_wounded_5
				}
			}
		}
	}

	effect = {
		if = {
			limit = {
				scope:combat_side.enemy_side = {
					any_side_knight = {
						is_alive = yes
						is_current_dragonrider_warfare = no
					}
				}
			}
			scope:combat_side.enemy_side = {
				random_side_knight = {
					limit = {
						is_alive = yes
						is_current_dragonrider_warfare = no
						prowess < root.var:current_dragon.prowess_for_combat_event_opponent
					}
					save_temporary_scope_as = enemy_knight
				}
			}
			if = {
				limit = {
					root = { is_alive = yes }
					scope:enemy_knight = { is_alive = yes }
				}
				dragon_kill_version_randomization_effect = yes
				scope:enemy_knight = {
					if = {
						limit = {
							exists = accolade
							accolade = { is_accolade_active = yes }
						}
						accolade = { add_glory = minimal_glory_gain }
					}
				}
			}
		}
	}
}

knight_dragon_joined_battle = {
	type = knight

	is_valid = {
		is_current_dragonrider_warfare = yes
		var:current_dragon = { NOT = { has_character_flag = recently_joined_battle } }
	}

	chance = {
		base = 100000
	}

	effect = {
		# Get dragonrider
		save_scope_as = dragonrider_in_battle
		var:current_dragon = {
			save_scope_as = dragon_in_battle
		}
		location = { # Save the location of the battle
			save_scope_as = battle_location
		}
		# Get commander
		scope:combat_side = {
			if = {
				limit = {
					exists = side_commander
				}
				side_commander = {
					save_scope_as = dragon_commander_in_battle
				}
			}
		}
		# Get dragonrider enemy
		if = {
			limit = {
				scope:combat_side.enemy_side = {
					OR = {
						any_side_knight = { # Enemy knight is alive, is dragonrider, and has a dragon
							is_alive = yes
							is_current_dragonrider_warfare = yes
						}
						any_side_commander = { # Enemy commander is alive, is dragonrider, and has a dragon
							is_alive = yes
							is_current_dragonrider_warfare = yes
						}
					}
				}
			}
			scope:combat_side.enemy_side = { # Grab appropriate enemy dragonrider, commanders are prioritized
				random_side_knight = {
					limit = {
						is_alive = yes
						is_current_dragonrider_warfare = yes
					}
					save_scope_as = enemy_dragonrider
				}
				random_side_commander = {
					limit = {
						is_alive = yes
						is_current_dragonrider_warfare = yes
					}
					save_scope_as = enemy_dragonrider
				}
			}
		}
		# Get non-dragonrider enemy
		if = {
			limit = {
				scope:combat_side.enemy_side = {
					any_side_knight = {
						is_alive = yes
						is_current_dragonrider_warfare = no
					}
				}
			}
			scope:combat_side.enemy_side = {
				random_side_knight = {
					limit = {
						is_alive = yes
						is_current_dragonrider_warfare = no
					}
					save_scope_as = enemy_knight
				}
			}
		}
		# Get enemy commander
		scope:combat_side.enemy_side = {
			if = {
				limit = { exists = side_commander }
				side_commander = {
					save_scope_as = enemy_commander_in_battle
					if = { # Duel primary commander first if possible
						limit = {
							is_alive = yes
							is_current_dragonrider_warfare = yes
						}
						save_scope_as = enemy_dragonrider
					}
				}
			}
		}
		# Add flag to dragon
		scope:dragon_in_battle = {
			add_character_flag = {
				flag = recently_joined_battle
				days = 15
			}
		}
		# Call dragon warfare events
		scope:dragonrider_in_battle = {
			agot_call_dragon_warfare_events = yes
		}
	}
}

#AGOT Added, currently disabled
# knight_duell = {  # AGOT added by Ronko
# 	type = knight
# 	is_valid = {
# 		#is_ai = no
# 		is_alive = yes
# 		NOT = { has_character_flag = already_fighting }
# 		# prevent duels from deciding wars as the outcome can be quite random
# 		NOT = {
# 			AND = {
# 				exists = scope:combat_side.combat.combat_war.primary_attacker
# 				scope:combat_side.combat.combat_war.primary_attacker = root
# 			}
# 		}
# 		NOT = {
# 			AND = {
# 				exists = scope:combat_side.combat.combat_war.primary_defender
# 				scope:combat_side.combat.combat_war.primary_defender = root
# 			}
# 		}
# 		NOT = {
# 			AND = {
# 				exists = scope:combat_side.combat.combat_war.primary_attacker.primary_heir
# 				scope:combat_side.combat.combat_war.primary_attacker.primary_heir = root
# 			}
# 		}
# 		NOT = {
# 			AND = {
# 				exists = scope:combat_side.combat.combat_war.primary_defender.primary_heir
# 				scope:combat_side.combat.combat_war.primary_defender.primary_heir = root
# 			}
# 		}
# 		NOT = {
# 			AND = {
# 				exists = scope:combat_side.combat.combat_war.primary_attacker.player_heir
# 				scope:combat_side.combat.combat_war.primary_attacker.player_heir = root
# 			}
# 		}
# 		NOT = {
# 			AND = {
# 				exists = scope:combat_side.combat.combat_war.primary_defender.player_heir
# 				scope:combat_side.combat.combat_war.primary_defender.player_heir = root
# 			}
# 		}
# 	}
# 	chance = {
# 		base = 120
# 		modifier = {
# 		 	factor = 2
# 		 	has_trait = brave
# 		}
# 		modifier = {
# 		 	factor = 0.5
# 		 	has_trait = craven
# 		}
# 	}
# 	effect = {
# 		scope:combat_side.enemy_side = {
# 			random_side_knight = {
# 				limit = {
# 					is_alive = yes
# 					NOT = { has_character_flag = already_fighting }
# 					# prevent duels from deciding wars as the outcome can be quite random
# 					NOT = {
# 						AND = {
# 							exists = scope:combat_side.combat.combat_war.primary_attacker
# 							this = scope:combat_side.combat.combat_war.primary_attacker
# 						}
# 					}
# 					NOT = {
# 						AND = {
# 							exists = scope:combat_side.combat.combat_war.primary_defender
# 							this = scope:combat_side.combat.combat_war.primary_defender
# 						}
# 					}
# 					NOT = {
# 						AND = {
# 							exists = scope:combat_side.combat.combat_war.primary_attacker.primary_heir
# 							this = scope:combat_side.combat.combat_war.primary_attacker.primary_heir
# 						}
# 					}
# 					NOT = {
# 						AND = {
# 							exists = scope:combat_side.combat.combat_war.primary_defender.primary_heir
# 							this = scope:combat_side.combat.combat_war.primary_defender.primary_heir
# 						}
# 					}
# 					NOT = {
# 						AND = {
# 							exists = scope:combat_side.combat.combat_war.primary_attacker.player_heir
# 							this = scope:combat_side.combat.combat_war.primary_attacker.player_heir
# 						}
# 					}
# 					NOT = {
# 						AND = {
# 							exists = scope:combat_side.combat.combat_war.primary_defender.player_heir
# 							this = scope:combat_side.combat.combat_war.primary_defender.player_heir
# 						}
# 					}
# 				}
# 				save_temporary_scope_as = enemy_knight
# 			}
# 		}
# 		if = {
# 			limit = {
# 				#exists = scope:enemy_knight
# 				scope:enemy_knight ?= { is_alive = yes }
# 				#scope:enemy_knight ?= { is_at_same_location = root }
# 				scope:enemy_knight ?= { NOT = { has_character_flag = already_fighting } }
# 				NOT = { has_character_flag = already_fighting }
# 			}
# 			add_character_flag = already_fighting
# 			scope:enemy_knight = { add_character_flag = already_fighting }
# 			configure_start_single_combat_effect = {
# 				SC_INITIATOR = root
# 				SC_ATTACKER = root
# 				SC_DEFENDER = scope:enemy_knight
# 				FATALITY = possible
# 				FIXED = no
# 				LOCALE = battlefield
# 				OUTPUT_EVENT = agot_battlefield_duel.0001
# 				INVALIDATION_EVENT = single_combat.1006
# 			}
# 		}
# 	}
