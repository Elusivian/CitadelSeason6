story_dragon_alive = {
	on_setup = {

	}

	on_end = {

	}

	on_owner_death = {
		if = {
			limit = {
				story_owner = {
					has_variable = pitted_dragon_location
				}
			}
			story_owner = {
				save_scope_as = dying_dragon
			}
			story_owner = {
				var:pitted_dragon_location = {
					remove_list_variable = {
						name = dragons_in_pit
						target = scope:dying_dragon
					}
				}
			}
		}
		story_owner = { agot_remove_wild_dragon_county_modifier = yes }
		scope:story = { end_story = yes }
	}
	effect_group = { # Daily
		days = 1
		triggered_effect = { # Make sure there is only one dragon + rider location
			trigger = {
				story_owner = {
					exists = var:current_rider # I have a rider
					var:current_rider = {
						is_alive = yes
					}
					OR = {
						AND = { # I am in a location that is not the same as my rider
							exists = var:current_rider.location
							OR = {
								NOT = { location = var:current_rider.location }
								AND = {
									has_character_flag = in_dragonpit
									NOT = { var:pitted_dragon_location = var:current_rider.location.county }
								}
							}
						}
						AND = { # I am wandering and my rider is not
							NOT = { exists = court_owner }
							exists = var:current_rider.court_owner
						}
						AND = { # My rider is wandering and I am not
							NOT = { exists = var:current_rider.court_owner }
							exists = court_owner
						}
					}
				}
			}
			effect = {
				story_owner = {
					if = {
						limit = { # Dragon has somehow left rider court
							exists = var:current_rider
							var:current_rider = { is_ruler = yes }
							NOT = { court_owner = var:current_rider }
						}
						set_employer = var:current_rider
						return_to_court = yes
						# If the dragon's owner is landed and they're not in their court, free them from the pit and send them to their owner
						if = {
							limit = {
								has_character_flag = in_dragonpit
							}
							save_scope_as = i_am_a_dragon_in_pit
							agot_remove_from_dragonpit_skip_county_effects = { DRAGON = scope:i_am_a_dragon_in_pit }
						}
					}
					else_if = { # If the rider does have a dragonpit in their new capital, remove the dragon from their pit and bring them to the rider's capital's dragonpit
						limit = {
							exists = var:current_rider
							var:current_rider = {
								is_ruler = yes
								capital_county = {
									agot_title_is_an_active_dragonpit = yes
								}
							}
							court_owner = var:current_rider
							has_character_flag = in_dragonpit
							NOT = { var:pitted_dragon_location = var:current_rider.capital_county }
						}
						save_scope_as = i_am_a_dragon_in_pit
						agot_remove_from_dragonpit_skip_county_effects = { DRAGON = scope:i_am_a_dragon_in_pit }
						agot_send_to_dragonpit_no_event = {
							DRAGON = scope:i_am_a_dragon_in_pit
							DRAGONPIT_COUNTY = var:current_rider.capital_county
						}
						var:current_rider = {
							capital_county = {
								save_scope_as = capital
							}
							send_interface_toast = {
								title = agot_dragon_pit_moved_to_capital_pit.t
								custom_tooltip = agot_dragon_pit_moved_to_capital_pit.tt
								left_icon = scope:i_am_a_dragon_in_pit
							}
						}
					}
					else_if = { # If the rider does NOT have a dragonpit, remove the dragon from their pit (which is NOT held by their rider) and bring them to the rider's new court location
						limit = {
							exists = var:current_rider
							var:current_rider = {
								is_ruler = yes
								capital_county = {
									agot_title_is_an_active_dragonpit = no
								}
							}
							court_owner = var:current_rider
							has_character_flag = in_dragonpit
							NOT = {
								var:pitted_dragon_location.holder = var:current_rider
							}
							NOT = { var:pitted_dragon_location = var:current_rider.capital_county }
						}
						save_scope_as = i_am_a_dragon_in_pit
						agot_remove_from_dragonpit_skip_county_effects = { DRAGON = scope:i_am_a_dragon_in_pit }
					}
					else_if = { # Sometimes when freed from the pit they will stick to that location instead of returning to their ruler-rider
						limit = {
							exists = var:current_rider
							var:current_rider = {
								is_ruler = yes
							}
							court_owner = var:current_rider
							NOR = {
								location = var:current_rider.location
								has_character_flag = in_dragonpit
							}
						}
						set_location = var:current_rider.location
					}
					else_if = {
						limit = { # Dragon is wandering
							NOT = { exists = court_owner }
						}
						if = { # If rider is in court, make dragon join court
							limit = {
								exists = var:current_rider
								exists = var:current_rider.court_owner
								var:current_rider = { # Rider is courtier
									is_courtier_of = court_owner
								}
							}
							set_employer = var:current_rider.court_owner
							return_to_court = yes
						}
						else_if = {
							limit = {
								exists = var:current_rider
								exists = var:current_rider.court_owner
								var:current_rider = { # Rider is visiting court
									NOT = { is_courtier_of = court_owner }
								}
							}
							var:current_rider.court_owner = {
								add_visiting_courtier = var:current_rider.var:current_dragon
							}
						}
						# Else dragon and rider are both wandering and can continue till rider joins a court
					}
					else_if = {
						limit = { # Rider is wandering
							exists = court_owner
							exists = var:current_rider
							NOT = { exists = var:current_rider.court_owner }
						}
						move_to_pool = yes
						# If the dragonrider is wandering, free the dragon from the pit
						if = {
							limit = {
								has_character_flag = in_dragonpit
							}
							save_scope_as = i_am_a_dragon_in_pit
							agot_remove_from_dragonpit_skip_county_effects = { DRAGON = scope:i_am_a_dragon_in_pit }
						}
					}
					else_if = {
						limit = { # Dragon has left mutual court
							exists = var:current_rider
							var:current_rider = { is_ruler = no }
							NOT = { court_owner = var:current_rider.court_owner }
						}
						set_employer = var:current_rider.court_owner
						return_to_court = yes
						# If the dragonrider is NOT a ruler, and the dragon is NOT in the same court but IS pitted, release the dragon from the pit and move them to the rider's court
						if = {
							limit = {
								has_character_flag = in_dragonpit
							}
							save_scope_as = i_am_a_dragon_in_pit
							agot_remove_from_dragonpit_skip_county_effects = { DRAGON = scope:i_am_a_dragon_in_pit }
						}
					}
				}
			}
		}
		triggered_effect = { # Apply the story of the dragon at war
			trigger = {
				story_owner = { exists = var:current_rider }
				NOT = { story_owner = { owns_story_of_type = story_dragon_at_war } } # Don't have two stories
				# The rider is in an army
				story_owner.var:current_rider = {
					is_in_army = yes
					is_current_dragonrider_warfare = yes
				}
			}
			effect = {
				story_owner = {
					create_story = story_dragon_at_war
				}
			}
		}
		triggered_effect = { # Maintainance to make sure the dragonrider is alive else clear vars
			trigger = {
				story_owner = {
					exists = var:current_rider
					var:current_rider = { is_alive = no }
				}
			}
			effect = {
				story_owner = {
					add_to_variable_list = {
						name = past_riders
						target = var:current_rider
					}
					remove_variable = current_rider
					clear_variable_list = current_rider_list
				}
			}
		}
		triggered_effect = { # Maintainance to make sure the dragon remains in a pit if they still have the flags.
			trigger = {
				story_owner = {
					has_character_flag = in_dragonpit
					exists = var:pitted_dragon_location
					OR = {
						NOT = { employer = var:pitted_dragon_location.holder }
						NOT = {
							location.county ?= var:pitted_dragon_location
						}
					}
				}
			}
			effect = {
				story_owner = {
					if = {
						limit = {
							exists = var:pitted_dragon_location
							NOT = { employer = var:pitted_dragon_location.holder }
						}
						set_employer = var:pitted_dragon_location.holder
						return_to_court = yes
					}
					else_if = {
						limit = {
							exists = var:pitted_dragon_location
							NOT = { location.county ?= var:pitted_dragon_location }
						}
						set_location = var:pitted_dragon_location.title_province
					}
				}
			}
		}
		triggered_effect = { # Wild dragon maintnance
			trigger = {
				story_owner = {
					NOR = {
						has_character_flag = in_dragonpit
						has_character_flag = owned_dragon
					}
				}
			}
			effect = {
				story_owner = {
					save_scope_as = wild_dragon
					if = { # Add the proper modifier to the current location
						limit = {
							location.county ?= {
								NOT = { has_county_modifier = agot_wild_dragon_modifier }
							}
						}
						location.county ?= {
							add_county_modifier = agot_wild_dragon_modifier
						}
					}

					if = { # Remove modifier from old location if applicable
						limit = {
							exists = location.county
							NOT = { var:current_location.county ?= location.county }
							var:current_location.county ?= {
								has_county_modifier = agot_wild_dragon_modifier
							}

							# Shouldn't remove if there's another dragon present there
							NOT = {
								any_living_dragon = {
									NOT = { this = scope:wild_dragon }
									AND = {
										NOT = { has_character_flag = owned_dragon }
										location.county ?= scope:wild_dragon.location.county
									}
								}
							}
						}
						var:current_location.county ?= {
							remove_county_modifier = agot_wild_dragon_modifier
						}
					}

					# I could probably save county instead to cut down on .county
					# But this makes it slightly more open to other uses
					set_variable = {
						name = current_location
						value = location
					}
				}
			}
		}
		triggered_effect = { # If owned or pitted, remove wild dragon modifier
			trigger = {
				story_owner = {
					OR = {
						has_character_flag = in_dragonpit
						has_character_flag = owned_dragon
					}
					has_variable = current_location
				}
			}
			effect = {
				story_owner = {
					save_scope_as = owned_dragon

					if = { # Remove modifier from old location if applicable
						limit = {
							var:current_location.county ?= {
								has_county_modifier = agot_wild_dragon_modifier
							}
							# Shouldn't remove if there's another dragon present there
							NOT = {
								any_living_dragon = {
									NOT = { this = scope:owned_dragon }
									AND = {
										NOT = { has_character_flag = owned_dragon }
										location.county ?= scope:owned_dragon.var:current_location.county
									}
								}
							}
						}
						var:current_location.county = {
							remove_county_modifier = agot_wild_dragon_modifier
						}
					}

					remove_variable = current_location # Will get reset when a wild dragon again
				}
			}
		}
	}

	effect_group = { # Monthly
		days = 30
		triggered_effect = { # Apply the dragon's monthly growth if destined
			trigger = {
				story_owner = {
					age < 2 # Don't do this to non-baby dragons
					has_trait = dragon_destined
					OR = {
						NOT = { exists = var:dragon_destined_count }
						var:dragon_destined_count < 13
					}
				}
			}
			effect = {
				story_owner = {
					add_prowess_skill = 3
					change_dragon_size = {
						VALUE = 3
					}
					if = {
						limit = { NOT = { exists = var:dragon_destined_count } }
						set_variable = {
							name = dragon_destined_count
							value = 1
						}
					}
					else = {
						change_variable = {
							name = dragon_destined_count
							add = 1
						}
					}
				}
			}
		}
		triggered_effect = { # Apply aesthetic modifier if ugly / majestic
			trigger = {
				story_owner = {
					exists = var:current_rider
					OR = {
						has_trait = dragon_ugly
						has_trait = dragon_majestic
					}
				}
			}
			effect = {
				story_owner = {
					if = {
						limit = { has_trait = dragon_ugly }
						var:current_rider = {
							add_character_modifier = {
								modifier = agot_ugly_dragon_rider
								days = 30
							}
						}
					}
					else = {
						var:current_rider = {
							add_character_modifier = {
								modifier = agot_majestic_dragon_rider
								days = 30
							}
						}
					}
				}
			}
		}
		triggered_effect = { # Heal from wounds
			trigger = {
				story_owner = {
					OR = {
						has_trait = dragon_wounded_5
						has_trait = dragon_wounded_4
						has_trait = dragon_wounded_3
						has_trait = dragon_wounded_2
						has_trait = dragon_wounded_1
					}
				}
			}
			effect = {
				story_owner = {
					if = {
						limit = { has_trait = dragon_wounded_5 }
						random_list = {
							90 = {} # Do nothing
							10 = { # Lower the wound
								remove_trait = dragon_wounded_5
								add_trait = dragon_wounded_4
							}
						}
					}
					else_if = {
						limit = { has_trait = dragon_wounded_4 }
						random_list = {
							80 = {} # Do nothing
							20 = { # Lower the wound
								remove_trait = dragon_wounded_4
								add_trait = dragon_wounded_3
							}
						}
					}
					else_if = {
						limit = { has_trait = dragon_wounded_3 }
						random_list = {
							70 = {} # Do nothing
							30 = { # Lower the wound
								remove_trait = dragon_wounded_3
								add_trait = dragon_wounded_2
							}
						}
					}
					else_if = {
						limit = { has_trait = dragon_wounded_2 }
						random_list = {
							60 = {} # Do nothing
							40 = { # Lower the wound
								remove_trait = dragon_wounded_2
								add_trait = dragon_wounded_1
							}
						}
					}
					else = {
						random_list = {
							50 = {} # Do nothing
							50 = { # Remove the last wound
								remove_trait = dragon_wounded_1
								if = {
									limit = {
										exists = var:current_rider
									}
									save_temporary_scope_as = dragon
									var:current_rider = {
										send_interface_toast = {
											title = agot_dragon_healed.t
											custom_tooltip = agot_dragon_healed.tt
											left_icon = scope:dragon
										}
									}
								}
							}
						}
					}
				}
			}
		}
		triggered_effect = { # Chance to reveal gender, MTTH of 10 years
			trigger = {
				story_owner = {
					has_variable = dragon_gender_hidden
					age >= 3 # Just to prevent it from happening TOO early
				}
			}
			effect = {
				random_list = {
					99 = {}
					1 = {
						random_list = { # 0.25% - 1% chance to happen per month, so MTTH is about 10 years when wild
							75 = {
								modifier = {
									factor = 0.5
									story_owner = {
										has_character_flag = owned_dragon
									}
								}
								modifier = {
									factor = 0
									story_owner = {
										exists = var:current_rider
										var:current_rider = { is_current_dragonrider = yes }
									}
								}
							}
							25 = {
								story_owner = {
									save_scope_as = dragon
									if = {
										limit = {
											exists = var:current_rider
										}
										if = {
											limit = {
												var:current_rider = { is_ruler = yes }
											}
											var:current_rider = {
												trigger_event = {
													id = agot_dragon.0016
													days = { 0 20 }
												}
											}
										}
										if = { # Also notify husband/wife if the rider is married
											limit = {
												exists = var:current_rider.primary_spouse
												var:current_rider.primary_spouse = { is_ruler = yes }
											}
											var:current_rider.primary_spouse = {
												trigger_event = {
													id = agot_dragon.0016
													days = { 0 20 }
												}
											}
										}
										# Also notify parents if the riders parent is landed
										if = {
											limit = {
												exists = var:current_rider.father
												var:current_rider.father = { is_ruler = yes }
												NOT = { var:current_rider.father = { this = prev.var:current_rider.primary_spouse } } #....CK3 man, the things I have to check
											}
											var:current_rider.father = {
												trigger_event = {
													id = agot_dragon.0016
													days = { 0 20 }
												}
											}
										}
										if = {
											limit = {
												exists = var:current_rider.mother
												var:current_rider.mother = { is_ruler = yes }
												NOT = { var:current_rider.mother = { this = prev.var:current_rider.primary_spouse } } #....CK3 man, the things I have to check
											}
											var:current_rider.mother = {
												trigger_event = {
													id = agot_dragon.0016
													days = { 0 20 }
												}
											}
										}
										# Finally, notify children if the rider has any and they are landed
										var:current_rider = {
											every_child = {
												limit = {
													NOT = { this = prev.primary_spouse }
													is_ruler = yes
												}
												trigger_event = {
													id = agot_dragon.0016
													days = { 0 20 }
												}
											}
										}
									}
									else = {
										if = {
											limit = { # Dragonrider age range is above range of this event
												agot_dragon_has_young_child_owner = { DRAGON = scope:dragon }
											}
											scope:dragon = {
												random_relation = {
													type = agot_dragon
													limit = { # I guess rechecking isn't necessary when only one
														age <= 10
														age >= 3
														is_ruler = no
													}
													save_scope_as = child
												}
											}
											court_owner ?= {
												# If you get here, the child should always reveal honestly
												trigger_event = {
													id = agot_dragon.0030
													days = { 0 20 }
												}
												# If this is too high we can even it out with random_list and agot_dragon.0016
											}
										}
										else = {
											court_owner ?= {
												trigger_event = {
													id = agot_dragon.0016
													days = { 0 20 }
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}

	effect_group = { # Yearly
		days = 365
		triggered_effect = { # Make bonded unlanded AI tame their dragons
			trigger = {
				story_owner = {
					dragon_size > dragon_taming_minimum_size # Is of a size that can be tamed
					any_relation = { # And has a bonded ai that is unlanded
						type = agot_dragon
						is_landed = no
						is_ai = yes
						is_human = yes
						NOT = { has_trait = dragonrider }
						is_imprisoned = no
						age >= 10
					}
				}
			}
			effect = {
				story_owner = {
					save_scope_as = dragon
					random_relation = {
						type = agot_dragon
						limit = {
							is_landed = no
							is_ai = yes
							is_human = yes
							NOT = { has_trait = dragonrider }
							is_imprisoned = no
							age >= 10
						}
						save_scope_as = tamer
						trigger_event = { id = dragon_taming_events.0201 days = { 0 14 } }
					}
				}
			}
		}
		triggered_effect = { # Cannibal trait - wild
			trigger = {
				story_owner = {
					has_trait = dragon_cannibal
				}
			}
			effect = {
				story_owner = {
					save_scope_as = cannibal_dragon
					random_list = {
						19 = {
							modifier = {
								add = 30
								NOT = { has_game_rule = agot_silly_mode }
								location.duchy ?= title:d_dragonstone
							}
						}
						1 = { # Every 20 years on average
							# Wild v Wild dragon cannibalism
							location = {
								duchy = {
									save_scope_as = hunting_region
								}
							}
							if = {
								limit = {
									any_living_dragon = {
										NOT = { this = scope:cannibal_dragon }
										NOT = { has_character_flag = owned_dragon }
										location = { duchy = scope:hunting_region }
										dragon_combat_effectiveness < scope:cannibal_dragon.dragon_combat_effectiveness
									}
								}
								every_living_dragon = {
									limit = {
										NOT = { this = scope:cannibal_dragon }
										NOT = { has_character_flag = owned_dragon }
										location = { duchy = scope:hunting_region }
										dragon_combat_effectiveness < scope:cannibal_dragon.dragon_combat_effectiveness
									}
									save_scope_as = target_dragon
								}
								if = {
									limit = {
										exists = scope:target_dragon
									}
									scope:cannibal_dragon = {
										random_list = { # Always a risk
											50 = {}
											50 = {
												wound_dragon = yes
											}
										}
										random_list = { # Second chance only if size is big enough
											50 = {
												modifier = {
													add = dragon_combat_effectiveness
												}
											}
											50 = {
												modifier = {
													add = scope:target_dragon.dragon_combat_effectiveness
												}
												wound_dragon = yes
											}
										}
									}
									scope:target_dragon = {
										random_list = {
											80 = { # Escaped
												modifier = {
													has_game_rule = agot_silly_mode
													add = -30
												}
												modifier = {
													add = {
														value = 20
														if = {
															limit = {
																has_game_rule = agot_silly_mode
															}
															add = 5
														}
													}
													OR = {
														has_trait = dragon_swift
														scope:cannibal_dragon = { has_trait = dragon_slow }
													}
												}
												modifier = {
													add = dragon_combat_effectiveness
													NOT = { has_game_rule = agot_silly_mode }
												}
												random_list = {
													50 = {
														# No wounds
													}
													30 = {
														wound_dragon = yes
													}
													20 = {
														wound_dragon = yes
													}
												}
											}
											20 = { # Eaten
												modifier = {
													has_game_rule = agot_silly_mode
													add = 30
												}
												modifier = {
													add = {
														value = 20
														if = {
															limit = {
																has_game_rule = agot_silly_mode
															}
															add = 5
														}
													}
													OR = {
														has_trait = dragon_slow
														scope:cannibal_dragon = { has_trait = dragon_swift }
													}
												}
												modifier = {
													add = 60
													NOT = { has_game_rule = agot_silly_mode }
													can_dragon_chomp = {
														CHOMPING_DRAGON = scope:cannibal_dragon
														CHOMPED_DRAGON = scope:target_dragon
													}
												}
												scope:cannibal_dragon = {
													change_dragon_size = {
														VALUE = 1 # Yum
													}
												}
												death = {
													death_reason = death_dragon_ate
													killer = scope:cannibal_dragon
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
		triggered_effect = { # Childhood dragon events
			trigger = {
				story_owner = {
					NOT = { has_character_flag = agot_dragon.0040 }
					dragon_size >= 10
					dragon_size <= 15
				}
			}
			effect = {
				story_owner = {
					save_scope_as = dragon
					random = {
						chance = 50
						if = {
							limit = {
								agot_dragon_has_young_child_owner = { DRAGON = scope:dragon }
							}
							court_owner ?= {
								random_courtier_or_guest = {
									limit = {
										age <= 10
										age >= 3
										any_relation = {
											type = agot_dragon
											this = scope:dragon
										}
									}
									save_scope_as = child
								}
								trigger_event = {
									id = agot_dragon.0040
									days = { 0 20 }
								}
							}
						}
					}
				}
			}
		}
		triggered_effect = {
			trigger = {
				story_owner = {
					has_variable = horn_binder
					has_variable = binding_strength
				}
			}
			effect = {
				story_owner = {
					remove_character_flag = recently_rebound
					trigger_event = {
						id = agot_decisions_events.0104
						days = { 1 364 }
					}
				}
			}
		}
	}
}

story_dragon_at_war = {
	on_setup = {
		story_owner = {
			if = {
				limit = { has_character_flag = in_dragonpit }
				agot_remove_from_dragonpit_war = { DRAGON = this }
			}
		}
	}

	on_end = {
		story_owner = {
			# Return to dragonpit if appropriate
			if = {
				limit = { has_variable = return_pitted_dragon_location }
				agot_send_to_dragonpit_war = { DRAGON = this }
			}
			# Remove supporting army modifier
			remove_character_modifier = dragon_supporting_army
			# Remove army support from currently supported army
			if = {
				limit = {
					exists = var:supporting_army_of
					var:supporting_army_of = {
						is_alive = yes
					}
				}
				var:supporting_army_of = {
					dragon_army_modifier_calculation = yes
				}
				remove_variable = supporting_army_of
			}
		}
	}

	on_owner_death = {
		scope:story = { end_story = yes }
	}

	effect_group = {
		days = 1
		triggered_effect = {
			trigger = { # Ending triggers
				story_owner = {
					OR = {
						NOT = { exists = var:current_rider }
						var:current_rider = { # If the rider dies, stops being the rider, or isn't in an army then end the story
							OR = {
								is_alive = no
								is_in_army = no
								is_current_dragonrider_warfare = no
							}
						}
					}
				}
			}
			effect = {
				scope:story = { end_story = yes }
			}
		}
		triggered_effect = { # Apply army modifiers
			trigger = {
				story_owner = {
					exists = var:current_rider
					var:current_rider = {
						is_in_army = yes
						is_current_dragonrider_warfare = yes
					}
				}
			}
			effect = {
				story_owner = {
					var:current_rider = {
						if = {
							limit = {
								OR = {
									exists = commanding_army
									AND = {
										exists = knight_army
										exists = knight_army.army_commander
									}
								}
							}
							# Get the commander and the army as their own scopes
							commanding_army ?= {
								save_scope_as = dragon_army
							}
							knight_army ?= {
								save_scope_as = dragon_army
							}
							scope:dragon_army ?= {
								army_commander = { save_scope_as = dragon_army_commander }
								# Apply the siege modifier to army commanders
								if = {
									limit = {
										is_army_in_siege = yes
										is_army_in_combat = no
									}
									location = {
										every_army_in_location = { # Needs to be every army to work in assisting ally army sieges
											army_commander ?= {
												if = {
													add_character_modifier = {
														modifier = dragon_siege_modifier_passive
														days = 3 # Short time means it won't help in adjacent sieges only this one
													}
												}
											}
										}
									}
								}
							}
							scope:dragon_army_commander ?= {
								# Apply the modifier to this army commander
								if = {
									limit = {
										NOT = { has_character_flag = calculated_dragon_modifier } # And isn't already being calculated in a battle
									}
									dragon_army_modifier_calculation = yes
								}
							}
						}
					}
				}
			}
		}
	}

	effect_group = { # Check for AI to do dragon siege event
		days = 7
		triggered_effect = {
			trigger = {
				story_owner = {
					AND = {
						NOT = { has_trait = dragon_wounded_2 }
						NOT = { has_trait = dragon_wounded_3 }
						NOT = { has_trait = dragon_wounded_4 }
						NOT = { has_trait = dragon_wounded_5 }
					}
					var:current_rider = {
						is_ai = yes
						is_alive = yes
						is_in_army = yes
						is_current_dragonrider_warfare = yes
						NOR = {
							has_trait = wounded_2
							has_trait = wounded_3
							has_trait = incapable
							has_trait = infirm
							has_trait = craven
							health < 2
						}
						OR = {
							AND = { # Is commander and in siege where dragon can siege
								is_commanding_army = yes
								commanding_army = {
									is_army_in_siege = yes
									is_army_in_combat = no
									location = {
										NOR = {
											# Is not already ruin
											has_variable = dragon_siege_modifier_massive
											# Cannot be damaged by you anymore as the dragon is not big enough
											AND = {
												has_variable = dragon_siege_modifier_major
												root = {
													story_owner.dragon_size < level_eight_dragon_size
												}
											}
											AND = {
												has_variable = dragon_siege_modifier_medium
												root = {
													story_owner.dragon_size < level_five_dragon_size
												}
											}
										}
										NOT = { # Can't dragon siege pirate dens
											has_holding_type = pirate_den_holding
										}
									}
								}
							}
							AND = { # Is knight and in siege where dragon can siege
								is_knight = yes
								exists = knight_army
								knight_army = {
									is_army_in_siege = yes
									is_army_in_combat = no
									location = {
										NOR = {
											# Is not already ruin
											has_variable = dragon_siege_modifier_massive
											# Cannot be damaged by you anymore as the dragon is not big enough
											AND = {
												has_variable = dragon_siege_modifier_major
												root = {
													story_owner.dragon_size < level_eight_dragon_size
												}
											}
											AND = {
												has_variable = dragon_siege_modifier_medium
												root = {
													story_owner.dragon_size < level_five_dragon_size
												}
											}
										}
										NOT = { # Can't dragon siege pirate dens
											has_holding_type = pirate_den_holding
										}
									}
								}
							}
						}
					}
				}
			}
			effect = { # In 1 year of sieging, they should do 1 dragon siege event
				random_list = {
					98 = {} # Do nothing
					2 = { # Trigger dragon siege event
						story_owner = {
							var:current_rider = {
								trigger_event = agot_dragon_siege.0001
							}
						}
					}
				}
			}
		}
	}
}