#asoiaf_force_spouse_heir_designation_interaction = { #disabled because Paradox made the designate_heir effect only work on direct children now
#	icon = heir
#	category = interaction_category_prison
#	desc = asoiaf_force_spouse_heir_designation_interaction_desc
#	use_diplomatic_range = no
#	
#	is_highlighted = {
#		NOR = {
#			scope:actor = { has_trait = compassionate }
#			scope:actor = { has_trait = generous }
#			#scope:actor = { has_trait = honorable }
#			scope:actor = { has_trait = just }
#			scope:actor = { has_trait = content }
#		}
#	}
#	
#	cooldown_against_recipient = { years = 1 }
#
#	is_shown = {
#		scope:actor = {
#			is_spouse_of = scope:recipient
#			NOT = { is_heir_of = scope:recipient }
#			#OR = { #not even ambitious characters would disrupt the feudal order like this; you need to be a sadistic torturer to do it
#			#	has_trait = sadistic
#			#	has_trait = torturer
#			#}
#		}
#		scope:recipient = {
#			is_human = yes
#			is_landed = yes
#			highest_held_title_tier > tier_barony #barony not playable
#			is_imprisoned_by = scope:actor
#		}
#	}
#	
#	auto_accept = yes
#
#	is_valid_showing_failures_only = {
#		custom_tooltip = {
#			text = asoiaf_spouse_has_been_tortured
#			trigger_if = {
#				scope:recipient = {
#					has_character_modifier = recently_tortured
#				}
#			}
#		}
#		custom_tooltip = {
#			text = asoiaf_spouse_is_in_dungeon
#			trigger_if = {
#				scope:recipient = {
#					is_in_prison_type = dungeon #only a dungeon is brutal enough to break their will
#				}
#			}
#		}
#		scope:actor = {
#			NOR = { #can't do this to your friends or soulmates (but yes to lovers, as you might've seduced them for selfish reasons...)
#				has_relation_friend = scope:recipient
#				has_relation_best_friend = scope:recipient
#				has_relation_soulmate = scope:recipient
#			}
#		}
#		custom_tooltip = {
#			text = asoiaf_is_sadistic_or_torturer
#			trigger_if = {
#				scope:actor = { #not even ambitious characters would disrupt the feudal order like this; you need to be a sadistic torturer to do it
#					OR = {
#						has_trait = sadistic
#						has_trait = torturer
#					}
#				}
#			}
#		}
#		scope:actor = { prestige >= 1000 }
#	}
#
#	on_accept = {
#		scope:recipient = {
#			set_designated_heir = scope:actor
#			add_stress = monumental_stress_gain
#		}
#		scope:actor = {
#			add_prestige = { subtract = 1000 }
#			reverse_add_opinion = { #spouse hates you for doing this
#				target = scope:recipient
#				modifier = hate_opinion
#				opinion = -80
#			}
#			change_strife_opinion = massive_strife_gain #miniscule; minor; medium; major; massive; monumental
#			add_tyranny = major_tyranny_value
#			if = {
#				limit = {
#					OR = {
#						has_trait = compassionate
#						has_trait = generous
#						#has_trait = honorable
#						has_trait = just
#						has_trait = content
#					}
#				}
#				add_stress = massive_stress_gain
#			}
#		}
#	}
#}

asoiaf_designate_heir_interaction = {
	icon = heir

	category = interaction_category_diplomacy

	desc = asoiaf_designate_heir_interaction_desc

	is_shown = {
		scope:recipient = {
			is_human = yes
			NOT = { is_heir_of = scope:actor }
			#OR = {
			#	is_close_or_extended_family_of = scope:actor
			#	house = scope:actor.house
			#}
			is_child_of = scope:recipient #changed to only children because Paradox hard-coded the effect to only work on a lord's direct children
			NAND = {
				has_trait = disinherited
				dynasty ?= scope:actor.dynasty #recipient has been disinherited in the actor's dynasty (game automatically rejects them as heir, so better to just hide them)
			}
		}
		NOT = { #AGOT+: ONLY show when the vanilla interaction does NOT show (less than full crown authority)
			scope:actor = {
				can_designate_heir_trigger = yes
			}
		}
		NOT = {
			scope:recipient = scope:actor.designated_heir
		}
		NOT = {
			scope:recipient = scope:actor
		}
		NOT = {
			scope:recipient = {
				is_parent_of = scope:actor #AGOT+ added: for some reason designating parents results in a crash
			}
		}

		#AGOT Added, none of these people are eligible heirs
		NOR = {
			scope:recipient = scope:actor.designated_heir
			scope:recipient = { has_trait = nightswatch }
			scope:recipient = { has_trait = septon }
			scope:recipient = { has_trait = silent_sister } #AGOT+ added
			scope:recipient = { has_trait = maester }
			scope:recipient = { has_trait = devoted }
		}
	}

	is_valid_showing_failures_only = {
		scope:recipient = {
			is_busy_in_events_localised = yes
			NOR = {
				has_trait = disinherited
				has_trait = order_member
				has_trait = bastard
				has_trait = kingsguard
			}
		}
		scope:actor = { prestige >= 1500 } #keep cost same as base interaction
	}

	on_auto_accept = {
		scope:recipient = {
			trigger_event = char_interaction.0120
		}
	}

	on_accept = {
		scope:actor = {
			send_interface_toast = {
				title = designate_heir_interaction_notification

				left_icon = scope:actor					
				right_icon = scope:recipient

				set_designated_heir = scope:recipient
				add_prestige = { subtract = 1500 } #keep cost same as base interaction
				add_tyranny = massive_tyranny_value
			}
		}
		scope:actor = {
			reverse_add_opinion = {
				target = scope:recipient
				modifier = grateful_opinion
				opinion = 50
			}
		}
	}

	auto_accept = yes
}

asoiaf_dismiss_kingsguard_interaction = {
	icon = icon_kingsguard
	category = interaction_category_diplomacy
	desc = asoiaf_dismiss_kingsguard_interaction_desc
	use_diplomatic_range = no
	
	#cooldown = { years = 1 }

	is_shown = {
		OR = {
			scope:actor = { #you are the king himself
				primary_title = {
					has_variable = kingsguard
				}
			}
			AND = { #you are the king's regent
				scope:actor = {
					exists = liege
					is_diarch_of_target = liege
				}
				scope:actor.liege = {
					primary_title = {
						has_variable = kingsguard
					}
				}
			}
		}
		scope:recipient = {
			is_human = yes
			has_trait = kingsguard
			OR = {
				top_liege = scope:actor #for if actor is king
				top_liege = scope:actor.liege #for if actor is regent
			}
		}
	}
	
	auto_accept = yes

	is_valid_showing_failures_only = {
		custom_tooltip = { #temporary until the AGOT team fixes the "Appoint Lord Commander" interaction and integrates the title/book artefact into it
			text = asoiaf_recipient_is_lord_commander_of_the_kingsguard
			trigger_if = {
				scope:recipient = {
					NOT = { has_title = title:d_kingsguard }
				}
			}
		}
		scope:actor = {
			NOT = { has_trait = incapable }
		}
		scope:actor = { #eventually make it 1000 for the king and 2000 for the regent
			prestige >= 1500
		}
		custom_tooltip = {
			text = asoiaf_is_in_entrenched_regency
			trigger_if = {
				NOT = {
					scope:actor = { #specifically the king, not the king's regent
						primary_title = {
							has_variable = kingsguard
						}
						has_diarchy_active_parameter = diarchy_type_is_entrenched_regency
					}
				}
			}
		}
	}

	on_accept = {
		if = { #if actor is the king himself, save scope for later
			limit = {
				scope:actor = {
					primary_title = {
						has_variable = kingsguard
					}
				}
			}
			scope:actor = { save_scope_as = asoiaf_dismissing_monarch }
		}
		if = { #if actor's title doesn't have kingsguard variable (ie, so he's not the king), save his top liege as the dismissing monarch
			limit = {
				scope:actor = {
					primary_title = {
						NOT = { has_variable = kingsguard }
					}
				}
			}
			scope:actor.top_liege = { save_scope_as = asoiaf_dismissing_monarch }
		}
		scope:asoiaf_dismissing_monarch = {
			send_interface_toast = {
				title = asoiaf_kingsguard_dismissal_notification
				left_icon = scope:asoiaf_dismissing_monarch					
				right_icon = scope:recipient
				
				add_prestige = { subtract = 1500 }
				add_tyranny = massive_tyranny_value
			}
			primary_title = {
				if = {
					limit = {
						exists = var:kingsguard_1
						var:kingsguard_1 = scope:recipient
					}
					remove_variable = kingsguard_1
				}
				else_if = {
					limit = {
						exists = var:kingsguard_2
						var:kingsguard_2 = scope:recipient
					}
					remove_variable = kingsguard_2
				}
				else_if = {
					limit = {
						exists = var:kingsguard_3
						var:kingsguard_3 = scope:recipient
					}
					remove_variable = kingsguard_3
				}
				else_if = {
					limit = {
						exists = var:kingsguard_4
						var:kingsguard_4 = scope:recipient
					}
					remove_variable = kingsguard_4
				}
				else_if = {
					limit = {
						exists = var:kingsguard_5
						var:kingsguard_5 = scope:recipient
					}
					remove_variable = kingsguard_5
				}
				else_if = {
					limit = {
						exists = var:kingsguard_6
						var:kingsguard_6 = scope:recipient
					}
					remove_variable = kingsguard_6
				}
			}
		}
		if = { #King's regent dismissal effects
			limit = {
				AND = {
					scope:actor = {
						exists = liege
						is_diarch_of_target = liege
					}
					scope:actor.liege = {
						primary_title = {
							has_variable = kingsguard
						}
					}
				}
			}
			scope:actor = {
				reverse_add_opinion = { #kingsguard hates you for illegally dismissing them, especially since you're not even the king
					target = scope:recipient
					modifier = hate_opinion
					opinion = -60
				}
				add_prestige = { subtract = 1500 }
				change_strife_opinion = monumental_strife_gain #miniscule; minor; medium; major; massive; monumental
			}
		}
		scope:recipient = { #general effects on recipient kingsguard
			#agot_on_fired_from_kingsguard = yes #seems to auto-trigger the death event which looks broken since no kingsguard actually died
			fired_from_council_position_effect = yes #these are just the effects inside the agot_on_fired_from_kingsguard effect
			remove_character_flag = blocked_from_leaving
			remove_trait = kingsguard
			hidden_effect = { agot_kingsguard_destroy_artifacts = yes }
			
			#hidden_effect = { #Lord Commander maintenance
			#	if = { #for dealing with the Lord Commander title
			#		limit = {
			#			has_title = title:d_kingsguard
			#		}
			#		destroy_title = title:d_kingsguard
			#	}
			#	agot_kingsguard_destroy_artifacts = yes
			#	if = {
			#		limit = {
			#			OR = {
			#				has_council_position = kingsguard_lord_commander
			#				has_character_flag = lord_commander
			#			}
			#		}
			#		random_character_artifact = {
			#			limit = {
			#				has_variable = white_book
			#			}
			#			set_owner = scope:asoiaf_dismissing_monarch
			#		}
			#	}
			#}
			
			create_character_memory = {
				type = asoiaf_kingsguard_dismissal_memory
				participants = {
					king = scope:asoiaf_dismissing_monarch
				}
			}
		}
		every_player = {
			limit = {
				NOT = scope:actor #no double notifications for the dismisser
				#location = {
				#	geographical_region = world_westeros_seven_kingdoms
				#}
				is_vassal_or_below_of = scope:asoiaf_dismissing_monarch #only those in the King's realm
			}
			send_interface_toast = {
				type = msg_created_new_house #just so it appears
				title = asoiaf_kingsguard_dismissal_notification
				left_icon = scope:asoiaf_dismissing_monarch
				right_icon = scope:recipient
				desc = asoiaf_kingsguard_dismissal_notification_desc
			}
		}
	}
}