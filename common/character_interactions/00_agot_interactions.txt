mark_as_captive_interaction = {
	category = interaction_category_friendly

	desc = mark_as_captive_interaction_desc
	interface_priority = 40
	use_diplomatic_range = no

	auto_accept = yes
	on_accept = {
		scope:actor = {
			add_to_variable_list = {
				name = marked_as_captive
				target = scope:recipient
			}
		}
		scope:recipient = {
			add_to_variable_list = {
				name = marked_as_captive_by
				target = scope:actor
			}
		}
	}
	ai_frequency = 12 #Added to remove error
	ai_potential = { always = no }
	ai_targets = { ai_recipients = spouses } #Added to prevent error
	is_shown = {
		scope:actor = {
			is_ai = no
			is_human = yes
			scope:recipient = { NOT = { is_courtier_of = scope:actor } }
			OR = {
				dynasty = scope:recipient.dynasty
				has_relation_lover = scope:recipient
				has_relation_friend = scope:recipient
				any_former_spouse = { this = scope:recipient }
			}
		}
		scope:recipient = {
			is_landed = no
			is_human = yes
			OR = {
				any_spouse = {
					is_male = yes
					patrilinear_marriage = yes
				}
				any_spouse = {
					is_female = yes
					matrilinear_marriage = yes
				}
				is_concubine = yes
			}
		}
		scope:actor = {
			NOT = {
				is_target_in_variable_list = {
					name = marked_as_captive
					target = scope:recipient
				}
			}
		}
		NOT = { scope:actor = scope:recipient }
	}
}

unmark_as_captive_interaction = {
	category = interaction_category_friendly

	desc = unmark_as_captive_interaction_desc
	interface_priority = 40
	use_diplomatic_range = no

	auto_accept = yes
	on_accept = {
		scope:actor = {
			remove_list_variable = {
				name = marked_as_captive
				target = scope:recipient
			}
		}
		scope:recipient = {
			remove_list_variable = {
				name = marked_as_captive_by
				target = scope:actor
			}
		}
	}
	ai_frequency = 12 #Added to remove error
	ai_potential = { always = no }
	ai_targets = { ai_recipients = spouses } #Added to prevent error
	is_shown = {
		scope:actor = {
			is_human = yes
			is_target_in_variable_list = {
				name = marked_as_captive
				target = scope:recipient
			}
		}
		NOT = { scope:actor = scope:recipient }
	}
}

# mark_for_freedom_interaction = {
# 	category = interaction_category_prison

# 	desc = mark_for_freedom_interaction_desc
# 	interface_priority = 40
# 	use_diplomatic_range = no

# 	auto_accept = yes
# 	on_accept = {
# 		scope:actor = {
# 			add_to_variable_list = {
# 				name = marked_for_freedom
# 				target = scope:recipient
# 			}
# 		}
# 		scope:recipient = {
# 			add_to_variable_list = {
# 				name = marked_for_freedom_by
# 				target = scope:actor
# 			}
# 		}
# 	}
# 	ai_frequency = 12 #Added to remove error
# 	ai_potential = { always = no }
# 	ai_targets = { ai_recipients = spouses } #Added to prevent error
# 	is_shown = {
# 		scope:recipient = {
# 			is_imprisoned = yes
# 			NOT = { is_imprisoned_by = scope:actor }
# 		}
# 		scope:actor = {
# 			NOT = {
# 				is_target_in_variable_list = {
# 					name = marked_for_freedom
# 					target = scope:recipient
# 				}
# 			}
# 		}
# 		NOT = { scope:actor = scope:recipient }
# 	}
# }

# unmark_for_freedom_interaction = {
# 	category = interaction_category_friendly

# 	desc = unmark_for_freedom_interaction_desc
# 	interface_priority = 40
# 	use_diplomatic_range = no

# 	auto_accept = yes
# 	on_accept = {
# 		scope:actor = {
# 			remove_list_variable = {
# 				name = marked_for_freedom
# 				target = scope:recipient
# 			}
# 		}
# 		scope:recipient = {
# 			remove_list_variable = {
# 				name = marked_for_freedom_by
# 				target = scope:actor
# 			}
# 		}
# 	}
# 	ai_frequency = 12 #Added to remove error
# 	ai_potential = { always = no }
# 	ai_targets = { ai_recipients = spouses } #Added to prevent error
# 	is_shown = {
# 		scope:actor = {
# 			is_target_in_variable_list = {
# 				name = marked_for_freedom
# 				target = scope:recipient
# 			}
# 		}
# 		NOT = { scope:actor = scope:recipient }
# 	}
# }

legitimize_bastard_liege_interaction = {
	category = interaction_category_vassal

	special_interaction = legitimize_bastard

	greeting = positive
	notification_text = ASK_TO_legitimize_bastard_interaction

	desc = legitimize_bastard_liege_interaction_desc

	redirect = {
		scope:recipient = {
			save_scope_as = secondary_recipient
			scope:actor.top_liege = { save_scope_as = recipient }
		}

	}

	is_shown = {
		scope:secondary_recipient = {
			is_human = yes
		}
		scope:actor.top_liege.faith  = {
			has_doctrine_parameter = bastards_legitimize
		}
		scope:actor.faith = {
			has_doctrine_parameter = bastards_legitimize
		}
		scope:secondary_recipient = {
			faith = {
				has_doctrine_parameter = bastards_legitimize
			}
			has_trait = bastard
			OR = {
				father = scope:actor
				mother = scope:actor
				scope:actor.house.house_head = scope:actor
			}
			OR = {
				house = scope:actor.house
				AND = {
					OR = {
						father.house = scope:actor.house
						mother.house = scope:actor.house
					}
					has_dynasty = no
				}
			}
		}
		scope:actor = {
			is_lowborn = no
			is_concubine = no
			is_independent_ruler = no
			is_human = yes
		}
		scope:recipient = { 
			is_busy_in_events_localised = yes 
			is_human = yes 
		}
	}

	is_valid_showing_failures_only = {

	}

	cost = {
		prestige = {
			value = bastard_legitimization_prestige_cost
		}
		renown = {
			value = 0
			if = {
				limit = {
					scope:actor = { is_ai = no }
				}
				add = medium_dynasty_prestige_value
			}
		}
	}

	ai_accept = {
		base = -80

		modifier = {
			trigger = {
				NOT = { scope:actor = scope:actor.top_liege }
			}
			add = {
				value = scope:actor.prestige_level
				multiply = 20
			}
			desc = PRESTIGOUS_IN_OUR_HOUSE
		}

		modifier = {
			trigger = {
				always = scope:hook
			}
			add = 50
			desc = SCHEME_WEAK_HOOK_USED
		}

		opinion_modifier = {
			trigger = {
				NOT = { scope:actor = scope:actor.top_liege }
			}
			who = scope:recipient
			opinion_target = scope:actor
			multiplier = 1
		}

		opinion_modifier = {
			trigger = {
				NOT = { scope:actor = scope:actor.top_liege }
			}
			who = scope:recipient
			opinion_target = scope:secondary_recipient
			multiplier = 0.25
		}

		modifier = {
			add = intimidated_external_reason_value
			scope:recipient = {
				NOT = { target_is_liege_or_above = scope:actor }
				has_dread_level_towards = {
					target = scope:actor
					level = 1
				}
			}
			desc = INTIMIDATED_REASON
		}
		modifier = {
			add = cowed_external_reason_value
			scope:recipient = {
				NOT = { target_is_liege_or_above = scope:actor }
				has_dread_level_towards = {
					target = scope:actor
					level = 2
				}
			}
			desc = COWED_REASON
		}
	}

	auto_accept = {
		OR = {
			scope:actor = { agot_is_independent_ruler = yes }
			AND = {
				always = scope:hook
				scope:actor = { has_strong_hook = scope:recipient }
			}
		}
	}

	on_accept = {
		scope:actor = {
			stress_impact = {
				arrogant = minor_stress_impact_gain
			}

			legitimize_bastard_interaction_opinions_effect = {
				BASTARD = scope:secondary_recipient
				HOUSE_HEAD = scope:actor.top_liege
				LEGITIMIZER = scope:actor
			}

			if = {
				limit = { always = scope:hook }
				scope:actor = {
					use_hook = scope:recipient
				}
			}
		}
	}

	on_decline = {
		scope:actor = {
			send_interface_toast = {
				title = legitimize_bastard_interaction_decline_notification

				left_icon = scope:actor.top_liege
				right_icon = scope:secondary_recipient
			}
		}
	}

	send_option = {
		is_shown = {
			NOT = { scope:actor = scope:recipient }
		}
		is_valid = {
			scope:actor = {
				has_usable_hook = scope:recipient
			}
		}
		flag = hook
		localization = SCHEME_HOOK
	}
	should_use_extra_icon = {
		scope:actor = { has_usable_hook = scope:recipient }
	}
	extra_icon = "gfx/interface/icons/character_interactions/hook_icon.dds"

	send_options_exclusive = no
}

agot_goad_interaction = {
	category = interaction_category_hostile

	desc = agot_goad_interaction_desc
	icon = irritable
	interface_priority = 60
	use_diplomatic_range = yes

	auto_accept = yes

	cost = {
		prestige = minor_prestige_value
		piety = minor_piety_value
	}

	cooldown = { years = 2 }

	on_accept = {

	scope:actor = {
		reverse_add_opinion = {
			modifier = insulted_opinion
			target = scope:recipient
			opinion = -15
		}

			duel = {
				skill = intrigue
				target = scope:recipient

				50 = {
					compare_modifier = {
						value = scope:duel_value
						multiplier = 2.5
						min = -35
					}

					send_interface_toast = {
					title = goad.success_title
						scope:recipient = {
							add_character_modifier = {
								modifier = agot_goaded
								years = 3
							}
							add_character_flag = {
								flag = been_goaded
								years = 5
							}
						}
					}
				}
				50 = { #failure
					compare_modifier = {
						value = scope:duel_value
						multiplier = -2.5
						min = -35
					}
					send_interface_toast = {
					title = goad.failure_title
						add_stress = medium_stress_gain
						if = {
							limit = {
								can_set_relation_potential_rival_trigger = { CHARACTER = scope:recipient }
							}
							random = {
								chance = 25
								set_relation_potential_rival = scope:recipient
							}
						}
					}
				}
			}
		}
	}
	ai_frequency = 12

	ai_potential = { always = yes}
	ai_targets = {
		ai_recipients = neighboring_rulers
		ai_recipients = peer_vassals
		max = 3
	}
	is_shown = {
		scope:actor = {
			is_adult = yes
			is_human = yes
			NOT = {
				has_trait = honest
				has_trait = just
				has_trait = compassionate
				has_trait = shy
				# has_trait = honorable #Hambone
				has_trait = ruin
			}
			scope:recipient = { NOT = { is_courtier_of = scope:actor } }
		}
		scope:recipient = {
			is_ai = yes
			is_adult = yes
			is_human = yes
			NOT = {
				has_character_flag = been_goaded
			}
		}
		NOT = { scope:actor = scope:recipient }
	}
}

raise_to_nobility_interaction = {
	icon = icon_dynasty
	category = interaction_category_friendly
	common_interaction = yes
	interface_priority = 200
	desc = raise_to_nobility_interaction_desc

	ai_targets = {
		ai_recipients = scripted_relations
	}
	ai_target_quick_trigger = {
		adult = yes
	}
	ai_frequency = 60

	is_shown = {
		NOT = {
			scope:recipient = scope:actor
		}

		scope:actor = {
			is_landed = yes
			government_has_flag = government_is_feudal
		}

		scope:recipient = {
			is_human = yes
			is_lowborn = yes
			is_courtier_of = scope:actor
			NOT = { has_trait = maester }
			NOT = { has_trait = septon }
		}
	}

	is_valid_showing_failures_only = {
		scope:actor.gold >= gift_value
		scope:recipient = { is_busy_in_events_localised = yes }
	}

	cost = {
		prestige = 200
		gold = 50
	}

	on_accept = {
		hidden_effect = {
			scope:recipient = {
				add_character_flag = becoming_nobility
				create_dynamic_title = {
					tier = duchy
					name = placeholder
				}
				create_title_and_vassal_change = {
					type = created
					save_scope_as = change
					add_claim_on_loss = no
				}
				scope:new_title = {
					set_capital_county = scope:actor.capital_county
					set_landless_title = yes
					set_destroy_on_gain_same_tier = yes
					set_no_automatic_claims = yes
					set_can_be_named_after_dynasty = no
					change_title_holder = {
						holder = prev
						change = scope:change
					}
				}
				resolve_title_and_vassal_change = scope:change
				scope:new_title = {
					generate_coa = yes
				}
				destroy_title = scope:new_title

				set_global_variable = {
					name = cadet_new_name
					value = scope:recipient
				}

				scope:recipient.house = {
					set_house_name = cadet_name
					if = {
						limit = {
							scope:recipient = {
								has_character_flag = has_personal_coa
							}
						}
						set_coa = scope:recipient.var:my_personal_coa.house
					}
				}

				remove_global_variable = cadet_new_name
			}
			scope:actor = {
				add_courtier = scope:recipient
			}
		}

		scope:recipient = {
			custom_tooltip = raise_to_nobility_tt

			add_opinion = {
				target = scope:actor
				opinion = 50
				modifier = raised_me_to_nobility_opinion
			}

			add_gold = 50
		}

		scope:actor = {
			if = {
				limit = {
					can_add_hook = {
						target = scope:recipient
						type = loyalty_hook
					}
				}
				add_hook = {
					type = loyalty_hook
					target = scope:recipient
				}
			}
		}
	}

	ai_potential = {
		is_available_at_peace_ai_adult = yes
		short_term_gold >= medium_gold_value
		prestige > 500
	}

	auto_accept = yes

	ai_will_do = {
		base = 0

		modifier = {
			add = 30
			scope:recipient = {
				OR = {
					has_secret_relation_lover = scope:actor
					has_relation_lover = scope:actor
					has_relation_soulmate = scope:actor
					has_relation_friend = scope:actor
					has_relation_best_friend = scope:actor
				}
			}
		}
	}
}

recall_wanderer_interaction = {
	category = interaction_category_friendly

	desc = recall_wanderer_interaction_desc
	interface_priority = 50
	use_diplomatic_range = no

	auto_accept = yes

	is_shown = {
		scope:actor = {
			is_ai = no
			is_human = yes
			NOT = { scope:actor = scope:recipient }
		}
		scope:recipient = {
			OR = {
				is_great_grandchild_of = scope:actor
				is_grandchild_of = scope:actor
				is_child_of = scope:actor
			}
			scope:recipient.house = scope:actor.house
			is_ruler = no
			is_human = yes
			NOT = { in_diplomatic_range = scope:actor }
		}
	}

	is_valid_showing_failures_only = {
		can_recruit_character_to_court_trigger = {
			RECRUITER = scope:actor
			RECRUITEE = scope:recipient
		}
	}

	on_accept = {
		hidden_effect = {
			if = {
				limit = {
					exists = scope:recipient.liege
				}
				scope:recipient.liege = {
					send_interface_message = {
						type = event_generic_neutral
						title = msg_courtier_left_court_interaction_title

						right_icon = scope:recipient

						show_as_tooltip = {
							remove_courtier_or_guest = scope:recipient
						}
					}
				}
			}
		}

		scope:actor = {
			send_interface_message = {
				type = event_generic_neutral
				title = invite_to_court_interaction_notification
				right_icon = scope:recipient

				scope:recipient = {
					every_traveling_family_member = {
						scope:actor = { add_courtier = prev }
						hidden_effect = {
							return_to_court = yes
						}
					}
				}
			}
		}
	}
}

reveal_royal_bastardry_interaction = {
	icon = icon_dynasty
	category = interaction_category_friendly
	desc = reveal_royal_bastardry_interaction_desc
	interface_priority = 100

	is_shown = {
		scope:actor = {
			is_human = yes
			OR = {
				any_known_secret = { # Knows Jon Snow secret
					secret_type = secret_agot_disputed_heritage
					secret_target = {
						real_paternal_held_iron_throne_claim = yes
						this = scope:recipient
					}
				}
				any_known_secret = { # Knows other claiment secret
					secret_type = secret_disputed_heritage
					secret_target = {
						real_paternal_held_iron_throne_claim = yes
						this = scope:recipient
					}
				}
				any_known_secret = { # Knows other claiment unmarried secret
					secret_type = secret_unmarried_illegitimate_child
					secret_target = {
						real_paternal_held_iron_throne_claim = yes
						this = scope:recipient
					}
				}
			}
			NOT = { has_character_flag = told_true_parentage }
		}
		scope:recipient = {
			is_human = yes
			NOT = { this = scope:actor } # Only reveal self by decision
		}
	}

	is_valid_showing_failures_only = {
		scope:actor = {
			is_adult = yes
			is_at_home = yes
		}
		scope:recipient = {
			is_adult = yes
		}
	}

	cost = {
		# Nothing
	}

	auto_accept = yes

	on_accept = {
		scope:actor = {
			add_character_flag = told_true_parentage
			random_known_secret = {
				limit = {
					secret_type = secret_agot_disputed_heritage
					secret_target = {
						real_paternal_held_iron_throne_claim = yes
						this = scope:recipient
					}
				}
				save_scope_as = heritage_secret
				secret_target = {
					save_scope_as = reveal_scope
				}
			}
			random_known_secret = {
				limit = {
					secret_type = secret_disputed_heritage
					secret_target = {
						real_paternal_held_iron_throne_claim = yes
						this = scope:recipient
					}
				}
				save_scope_as = heritage_secret
				secret_target = {
					save_scope_as = reveal_scope
				}
			}
			random_known_secret = {
				limit = {
					secret_type = secret_unmarried_illegitimate_child
					secret_target = {
						real_paternal_held_iron_throne_claim = yes
						this = scope:recipient
					}
				}
				save_scope_as = heritage_secret
				secret_target = {
					save_scope_as = reveal_scope
				}
			}
			trigger_event = agot_events_bastard.0900
		}
	}

	on_decline = {
		# N/A
	}
}

##################
# Prometheus Duel Interactions
# by Valaddar
##################

# challenge_anyone_prom_lethal_to_single_combat_interaction = { #Hambone removed because we have freeholders
# 	icon = icon_combat
# 	interface_priority = 30
# 	common_interaction = yes
# 	category = interaction_category_hostile
# 	ai_maybe = yes
# 	ai_max_reply_days = 0
# 	popup_on_receive = yes
# 	pause_on_receive = yes
# 	desc = challenge_anyone_prom_lethal_to_single_combat_interaction_desc

# 	greeting = negative
# 	notification_text = REQUEST_TRIAL_BY_COMBAT_TEXT

# 	is_shown = {
# 		# Can't duel yourself.
# 		NOT = { scope:actor = scope:recipient }
# 		OR = {
# 			AND = { 
# 				scope:actor = { is_commanding_army = yes }
# 				scope:recipient = { is_commanding_army = yes }
# 			}
# 			AND = {
# 				scope:actor = { is_in_army = yes }
# 				scope:recipient = { is_in_army = yes }
# 			}
# 			AND = { 
# 				scope:actor = { is_commanding_army = yes }
# 				scope:recipient = { is_in_army = yes }
# 			}
# 			AND = {
# 				scope:actor = { is_in_army = yes }
# 				scope:recipient = { is_commanding_army = yes }
# 			}
# 		}
# 		scope:actor.location = scope:recipient.location
# 	}

# 	is_valid_showing_failures_only = {
# 		# Scope:actor must be able to fight personally.
# 		scope:actor = { can_start_single_combat_trigger = yes }
# 		# Scope:recipient must be able to fight personally.
# 		scope:recipient = { can_start_single_combat_trigger = yes }
# 		# Scope:recipient must not be banned from single combat.
# 		scope:recipient = {
# 			custom_description = {
# 				text = fp1_tbc_recipient_banned_from_combat
# 				can_start_single_combat_banned_checks_trigger = no
# 			}
# 		}
# 		# Neither of the characters can be imprisoned.
# 		scope:actor = { is_imprisoned = no }
# 		scope:recipient = { is_imprisoned = no }
# 	}

# 	auto_accept = yes


# 	can_send = {
# 		scope:actor = {
# 			custom_description = {
# 				text = "character_interactions_hostile_actions_disabled_delay"
# 				NOT = { has_character_flag = flag_hostile_actions_disabled_delay }
# 			}
# 		}
# 	}
	
# 	cooldown_against_recipient = { years = 0 }

# 	on_send = {
# 		scope:actor = {
# 			add_character_flag = {
# 				flag = flag_hostile_actions_disabled_delay
# 				days = 10
# 			}
# 		}
# 	}

# 	on_accept = {
# 		# Set up the bout immediately.
# 		## First inform.
# 		scope:actor = {
# 			custom_tooltip = prom_challenge_to_single_combat_interaction.enter_lethal_bout.tt
# 			custom_tooltip = prom_challenge_to_single_combat_interaction.loser_dies.tt
# 		}
# 		## Finally, begin.
# 		configure_start_single_combat_effect = {
# 			SC_INITIATOR = scope:actor
# 			SC_ATTACKER = scope:actor
# 			SC_DEFENDER = scope:recipient
# 			FATALITY = always
# 			FIXED = no
# 			LOCALE = terrain_scope
# 			OUTPUT_EVENT = prom_single_combat.9991
# 			INVALIDATION_EVENT = prom_single_combat.9992
# 		}


# 		# If we're a clan this interaction affects unity
# 		if = {
# 			limit = {
# 				scope:actor = {
# 					exists = scope:actor.house
# 					house = { # But only if we have high unity!
# 						OR = {
# 							has_house_unity_stage = harmonious
# 							has_house_unity_stage = friendly
# 						}
# 					}
# 				}
# 			}
# 			add_clan_unity_interaction_effect = {
# 				CHARACTER = scope:actor
# 				TARGET = scope:recipient
# 				VALUE = medium_unity_loss
# 				DESC = clan_unity_challenge_to_combat.desc
# 				REVERSE_NON_HOUSE_TARGET = no
# 			}
# 			custom_description_no_bullet = { text = active_unity_level_description_tt }
# 		}
# 	}

# 	on_decline = {
# 		# Scope:actor decline processing.
# 		scope:actor = {
# 			# Inform them of the decline & scope:recipient loses some prestige.
# 			send_interface_toast = {
# 				title = challenge_to_single_combat_interaction.challenge_rejected.t
# 				left_icon = scope:recipient
# 				right_icon = scope:actor
# 				scope:recipient = { add_prestige = medium_prestige_loss }
# 				show_as_tooltip = {
# 					add_prestige = medium_prestige_value
# 				}
# 			}
# 			hidden_effect = {
# 				add_prestige_no_experience = medium_prestige_value
# 			}
# 			# Cooldown is removed.
# 			hidden_effect = { remove_interaction_cooldown = challenge_to_single_combat_interaction }
# 			# Clear up hostile actions flag.
# 			if = {
# 				limit = {
# 					has_character_flag = flag_hostile_actions_disabled_delay
# 				}
# 				remove_character_flag = flag_hostile_actions_disabled_delay
# 			}
# 		}
# 	}

# 	auto_accept = no

# 	ai_accept = {
# 		base = 0 # Try to make it 0 for most interactions

# 		# Relative fightan ability.
# 		modifier = {
# 			desc = CTSC_RELATIVE_PROWESS
# 			scope:actor.prowess < scope:recipient.prowess
# 			add = {
# 				value = scope:recipient.prowess
# 				subtract = scope:actor.prowess
# 				multiply = 2
# 			}
# 		}
# 		modifier = {
# 			desc = CTSC_RELATIVE_PROWESS
# 			scope:recipient.prowess < scope:actor.prowess
# 			add = {
# 				value = scope:actor.prowess
# 				subtract = scope:recipient.prowess
# 				multiply = -2
# 			}
# 		}
# 		# Weight up for personality values.
# 		ai_value_modifier = {
# 			who = scope:recipient
# 			ai_boldness = {
# 				if = {
# 					limit = {
# 						scope:recipient = {
# 							ai_boldness > 0
# 							ai_rationality < 0
# 						}
# 					}
# 					value = 2
# 				}
# 				else_if = {
# 					limit = {
# 						scope:recipient = {
# 							NOT = { ai_boldness = 0 }
# 						}
# 					}
# 					value = 1
# 				}
# 			}
# 			ai_vengefulness = {
# 				if = {
# 					limit = {
# 						scope:recipient = {
# 							NOT = { ai_vengefulness = 0 }
# 						}
# 					}
# 					value = 0.75
# 				}
# 			}
# 			ai_honor = {
# 				if = {
# 					limit = {
# 						scope:recipient = {
# 							ai_honor > 0
# 						}
# 					}
# 					value = 0.5
# 				}
# 			}
# 		}
# 		# Apply tier differences.
# 		## King -> Baron.
# 		modifier = {
# 			desc = AI_REFUSAL_RANK_DIFFERENCE
# 			scope:actor = {
# 				tier_difference = {
# 					target = scope:recipient
# 					value >= 4
# 				}
# 			}
# 			add = 15
# 		}
# 		## Duke -> Baron.
# 		modifier = {
# 			desc = AI_REFUSAL_RANK_DIFFERENCE
# 			scope:actor = {
# 				tier_difference = {
# 					target = scope:recipient
# 					value = 3
# 				}
# 			}
# 			add = 10
# 		}
# 		## Count -> Baron.
# 		modifier = {
# 			desc = AI_REFUSAL_RANK_DIFFERENCE
# 			scope:actor = {
# 				tier_difference = {
# 					target = scope:recipient
# 					value = 2
# 				}
# 			}
# 			add = 5
# 		}
# 		## King <- Baron.
# 		modifier = {
# 			desc = AI_REFUSAL_RANK_DIFFERENCE
# 			scope:actor = {
# 				tier_difference = {
# 					target = scope:recipient
# 					value = -2
# 				}
# 			}
# 			add = -10
# 		}
# 		## Duke <- Baron.
# 		modifier = {
# 			desc = AI_REFUSAL_RANK_DIFFERENCE
# 			scope:actor = {
# 				tier_difference = {
# 					target = scope:recipient
# 					value = -3
# 				}
# 			}
# 			add = -20
# 		}
# 		## Count <- Baron.
# 		modifier = {
# 			desc = AI_REFUSAL_RANK_DIFFERENCE
# 			scope:actor = {
# 				tier_difference = {
# 					target = scope:recipient
# 					value <= -4
# 				}
# 			}
# 			add = -30
# 		}
# 		# Nemesis modifier.
# 		modifier = {
# 			desc = offer_vassalization_interaction_aibehavior_nemesis_tt
# 			trigger = {
# 				scope:recipient = {
# 					has_relation_nemesis = scope:actor
# 				}
# 			}
# 			add = 50
# 		}

# 		# Unity modifiers
# 		evaluate_action_decreasing_house_unity = {
# 			VALUE = 100
# 		}
# 	}

# 	# AI
# 	ai_potential = {
# 		can_challenge_rival_to_single_combat_trigger = yes
# 		NOT = { has_trait = craven }
# 		num_of_relation_rival > 0
# 		is_imprisoned = no
# 		can_start_single_combat_trigger = yes
# 	}
	
# 	ai_target_quick_trigger = {
# 		adult = yes
# 	}
# 	ai_targets = {
# 		ai_recipients = scripted_relations
# 	}

# 	ai_frequency = 60

# 	ai_will_do = {
# 		base = -50
		
# 		# Factor for personality (excluding realism).
# 		modifier = {
# 			add = {
# 				value = ai_boldness
# 				multiply = 1
# 			}
# 		}
# 		modifier = { add = ai_vengefulness }
# 		modifier = {
# 			add = {
# 				value = ai_energy
# 				multiply = -0.25
# 			}
# 		}

# 		# Unity modifiers
# 		evaluate_action_decreasing_house_unity = {
# 			VALUE = 100
# 		}

# 		# Don't challenge kinslayer-counting family, unless they're your nemesis.
# 		modifier = {
# 			scope:actor = {
# 				murdering_character_is_kinslaying_in_faith_trigger = {
# 					CHARACTER = scope:recipient
# 					FAITH = scope:actor.faith
# 				}
# 			}
# 			scope:recipient = {
# 				NOT = { has_relation_nemesis = scope:actor }
# 			}
# 			add = -1000
# 		}
# 		# Don't challenge your spouse, unless they're your nemesis.
# 		modifier = {
# 			scope:recipient = {
# 				is_spouse_of = scope:actor
# 				NOT = { has_relation_nemesis = scope:actor }
# 			}
# 			add = -1000
# 		}
# 		# Don't challenge people hopelessly out of your league unless you're really, really not seeing things clearly.
# 		modifier = {
# 			scope:actor = {
# 				prowess_diff = {
# 					target = scope:recipient
# 					value <= -15
# 				}
# 				ai_rationality >= high_negative_ai_value
# 			}
# 			add = -1000
# 		}
# 	}
# }