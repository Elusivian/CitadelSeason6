##########
# Blackfyre Claimant
#########

agot_blackfyre_claim = {
	group = civil_war
	ai_only_against_liege = yes
	target_titles = none
	allowed_for_character = {
	}

	allowed_against_character = {
	}

	white_peace_possible = no
	allow_hostages = no

	valid_to_start = {
	}

	on_invalidated_desc = {
		first_valid = {
			triggered_desc = {
				trigger = {
					NOT = { scope:claimant = scope:attacker }
					scope:claimant = { is_alive = no }
				}
				desc = msg_claim_war_invalidated_claimant_unavailable_dead_message
			}
			triggered_desc = {
				trigger = {
					scope:claimant = {
						NOR = {
							this = scope:attacker
							NOR = {
								is_vassal_or_below_of = scope:attacker
								is_courtier_of = scope:attacker
							}
						}
					}
				}
				desc = msg_claim_war_invalidated_claimant_unavailable_not_vassal_message
			}
			desc = msg_claim_war_invalidated_message
		}
	}

	should_invalidate = {
	}

	on_declaration = {
		on_declared_war = yes

		blackfyre_war_declared = yes #historical blackfyre loyalists get decisisons - increase number of rebellions by one
	}

	on_victory_desc = {
		first_valid = {
			#triggered_desc = {
			#	trigger = { has_variable = mw_is_usurpation_war }
			#	desc = depose_war_victory_desc_defender
			#}
			#triggered_desc = {
			#	trigger = { NOT = { has_variable = mw_is_usurpation_war } }
			#	desc = depose_war_victory_desc_defender
			#}
			triggered_desc = {
				trigger = {
					scope:attacker = { is_local_player = yes }
				}
				desc = agot_faegon_landing_war_victory_desc_attacker
			}
			desc = agot_faegon_landing_war_victory_desc
		}
	}

	on_victory = {
		scope:attacker = { show_pow_release_message_effect = yes }
		scope:attacker = {
			add_character_flag = {
				flag = victorious_mw_rebel
				days = 60
			}
		}
		#Destroy Blackfyre Host
		scope:attacker = {
			#trigger_event = agot_blackfyre.0001
			destroy_title = title:e_blackfyre_rebellion
		}

		scope:defender = {
			every_held_title = {
				limit = {
					NAND = {
						tier = tier_barony
						is_capital_barony = yes
					}
				}
				add_to_list = target_titles
			}
		}

		create_title_and_vassal_change = {
			type = conquest
			save_scope_as = change
			add_claim_on_loss = yes
		}

		#Grab everything the King holds.
		every_in_list = {
			list = target_titles
			change_title_holder = {
				holder = scope:attacker
				change = scope:change
			}
		}

		#Gab Dragonstone here too

		resolve_title_and_vassal_change = scope:change

		hidden_effect = {
			scope:attacker = {
				add_truce_both_ways = {
					character = scope:defender
					days = 1825
					war = root.war
					result = victory
				}
				#Move capital to Kings Landing
				set_realm_capital = title:c_kings_landing
			}
		}
		hidden_effect = {
			scope:defender = {
				if = {
					limit = {
						any_owned_story = {
							story_type = story_agot_mw_crown
							NOT = {
								any_in_list = {
									variable = mw_rebel_leader_list

									NOT = { this = scope:attacker }

									count >= 1
								}
							}
						}
					}
					random_owned_story = {
						limit = { story_type = story_agot_mw_crown }
						save_scope_as = mw_crown_story
					}

					scope:attacker = {
						imprison = {
							target = scope:defender
							type = dungeon
						}
						random_owned_story = {
							limit = { story_type = story_agot_mw_rebel }
							save_scope_as = mw_rebel_story

							every_in_list = {
								variable = mw_rebel_supporter_list

								limit = {
									is_alive = yes
									has_variable = pre_war_liege
								}

								#scope:mw_crown_story = { add_to_variable_list = { name = mw_temp_rebel_list target = prev } } # AGOT TODO disabled since it is set but never used
							}
						}
					}
				}
			}
		}

		# TODO imprison important characters

		scope:defender = {
			# If we win the rebellion, our liege loses any legal right to imprison us/banish us/revoke our titles.
			consume_all_criminal_reasons_effect = {
				LIEGE = scope:defender
				CRIMINAL = scope:attacker
			}
			# Remove offending HumSac modifiers.
			hidden_effect = { fp1_remove_humsac_offended_counties_effect = yes }
			# Then our liege is deposed (but the imprisonment loss remains true for their heir).
		}

		every_in_list = {
			list = defenders

			if = { # Imprison them if they aren't imprisoned.
				limit = {
					is_imprisoned = no
					NOT = { this = scope:attacker }
				}
				hard_imprison_character_effect = {
					TARGET = this
					IMPRISONER = scope:attacker
				}
			}
		}

		hidden_effect = {
			if = {
				limit = {
					character:Tall_1 = { is_alive = yes }
					character:Tall_1 = { has_trait = kingsguard }
				}
				title:e_the_iron_throne.holder = {
					trigger_event = {
						id = agot_ninepenny.0070
						days = 1
					}
				}
			}
		}
	}

	on_white_peace_desc = {	}

	on_white_peace = {	}

	on_defeat_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = agot_faegon_landing_defeat_desc_defender
			}
			desc = agot_faegon_landing_defeat_defeat_desc
		}
	}

	on_defeat = {
		scope:attacker = { show_pow_release_message_effect = yes }
		scope:attacker = {
			#If Maelys lose all your titles
			if = {
				limit = {
					this = character:Blackfyre_14
				}
				maelys_title_distribution_effect = {
					MAELYS = scope:attacker
				}
			}
			else = {
				destroy_title = title:e_blackfyre_rebellion
			}
		}
		scope:defender = {
			add_dread = medium_dread_gain
		}
		scope:attacker = {
			hard_imprison_character_effect = {
				TARGET = this
				IMPRISONER = scope:defender
			}
		}
	}

	on_invalidated_desc = agot_faegon_landing_war_invalidated

	check_attacker_inheritance_validity = yes
	check_defender_inheritance_validity = no

	on_primary_attacker_death = invalidate
	on_primary_defender_death = inherit

	transfer_behavior = transfer

	attacker_allies_inherit = yes
	defender_allies_inherit = yes

	war_name = "BLACKFYRE_WAR_NAME" #Count the number of Blackfyre Rebellions here
	my_war_name = "BLACKFYRE_WAR_NAME"
	war_name_base = "BLACKFYRE_WAR_NAME"
	cb_name = "BLACKFYRE_WAR_NAME"

	interface_priority = 80

	use_de_jure_wargoal_only = yes

	attacker_wargoal_percentage = 0.8

	attacker_score_from_occupation_scale = 50
	defender_score_from_occupation_scale = 25
	max_attacker_score_from_battles = 200 #focus more on sieges
	max_defender_score_from_battles = 300 #focus on battles
}

##########
# Ninepenny Conquest !
#########
ninepenny_conquest_cb = {
	mutually_exclusive_titles = {
		always = yes
	}

	allow_hostages = no
	allowed_for_character = {
		always = no
	}
	allowed_against_character = {
		always = yes
	}
	target_titles = all
	target_title_tier = all
	target_de_jure_regions_above = yes
	ignore_effect = change_title_holder
	combine_into_one = yes


	is_allowed_claim_title = {
		scope:claimant =  {
			is_human = yes
			NOT = { has_trait = incapable }
			is_imprisoned = no
			OR = {
				this = scope:attacker
				AND = {
					religion = scope:attacker.religion
					dynasty = scope:attacker.dynasty
				}
			}
		}
	}

	cost = {}

	white_peace_possible = no

	on_declaration = {
		on_declared_war = yes
	}

	should_invalidate = {
	}

	on_invalidated = {
		scope:attacker = { #Will only invalidate if the claimant dies - Write a New Event for this?
			trigger_event = agot_ninepenny.0002
		}
	}
	on_invalidated_desc = msg_claim_war_invalidated_message

	on_victory_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = ninepenny_conquest_cb_victory_desc_defender
			}
			triggered_desc = {
				trigger = { scope:attacker = { is_local_player = yes } }
				desc = ninepenny_conquest_cb_victory_desc_attacker
			}
			desc = ninepenny_conquest_cb_victory_desc
		}
	}

	on_victory = {
		scope:attacker = { show_pow_release_message_effect = yes }

		#EP2 accolade glory gain for winning against higher ranked enemy
		scope:attacker = { accolade_attacker_war_end_glory_gain_high_effect = yes }

		# Set land acquisition type to conquest.
		create_title_and_vassal_change = {
			type = conquest
			save_scope_as = change
			add_claim_on_loss = yes
		}

		# This claim CB makes the claimant a vassal, not sure if necessary otherwise? If so reenable and make independent in an effect below
		setup_claim_cb = {
			titles = target_titles
			attacker = scope:attacker
			defender = scope:defender
			claimant = scope:claimant
			change = scope:change
		}

		scope:defender = {
			every_held_title = {
				limit = {
					NOT = { tier = tier_barony }
				}
				change_title_holder = {
					holder = scope:claimant
					change = scope:change
				}
			}
		}

		resolve_title_and_vassal_change = scope:change

		if = { #Create Stepstones if non existant
			limit = {
				any_in_list = {
					list = target_titles
					this = title:k_the_stepstones
				}
			}
			create_title_and_vassal_change = {
				type = created
				save_scope_as = stepstones
				add_claim_on_loss = no
			}
			title:k_the_stepstones = {
				change_title_holder = {
					holder = scope:claimant
					change = scope:stepstones
				}
			}
			resolve_title_and_vassal_change = scope:stepstones
		}

		if = { #Return Dipsuted Lands Temp Titles to Holders
			limit = {
				exists = title:k_disputed_lands.holder
			}
			create_title_and_vassal_change = {
				type = granted
				save_scope_as = disputed_lands
				add_claim_on_loss = no
			}

			title:k_disputed_lands = {
				every_in_de_jure_hierarchy = {
					limit = {
						holder = scope:claimant
						NOT = { tier = tier_barony }
					}

					change_title_holder_include_vassals = {
						holder = title:k_disputed_lands.holder
						change = scope:disputed_lands
					}
				}
			}
			resolve_title_and_vassal_change = scope:disputed_lands
		}

		modify_all_participants_fame_values = {
			WINNER = scope:attacker
			LOSER = scope:defender
			FAME_BASE = scope:cb_prestige_factor # Set by 'setup_claim_cb'
			IS_RELIGIOUS_WAR = no
			WINNER_FAME_SCALE = 10
			LOSER_FAME_SCALE = -10
			WINNER_ALLY_FAME_SCALE = 10
			LOSER_ALLY_FAME_SCALE = 10
		}

		# truce
		add_truce_attacker_victory_effect = yes

		#Ninepenny King Becomes Independent
		create_title_and_vassal_change = {
			type = independency
			save_scope_as = change
		}
		scope:claimant = {
			becomes_independent = { change = scope:change }
			if = { #Tracking for later events
				limit = {
					is_alive = yes
					is_landed = yes
				}
				add_character_flag = enthroned
			}
		}
		resolve_title_and_vassal_change = scope:change

		scope:claimant = {
			create_band_of_nine_alliances_effect = yes
		}

		#Ninepenny King Assumes Correct Gov
		if = {
			limit = {
				any_in_list = {
					list = target_titles
					OR = {
						this = title:k_lys
						this = title:k_pentos
						this = title:k_tyrosh
						this = title:k_myr
					}
				}
			}
			scope:claimant = {
				set_realm_capital = primary_title.title_capital_county
				change_government = free_city_government

				every_held_title = {
					if = {
						limit = {
							OR = {
								has_title_law = magisterial_life_succession_law
								has_title_law = magisterial_limited_succession_law
							}
						}
						if = {
							limit = { has_title_law = magisterial_life_succession_law }
							remove_title_law = magisterial_life_succession_law
						}
						else_if = {
							limit = { has_title_law = magisterial_limited_succession_law }
							remove_title_law = magisterial_limited_succession_law
						}
						add_title_law = dictatorship_succession_law
					}
				}
			}
		}

		# FP1: note the victory for future memorialisation via stele (if applicable).
		scope:attacker = {
			fp1_remember_recent_conquest_victory_effect = yes
			#Add to Ninepenny Conquest Counter
			random_owned_story = {
				limit = {
					story_type = story_agot_ninepenny_kings
				}
				save_scope_as = ninepenny_story
				change_variable = {
					name = band_of_nine_conquest
					add	= 1
				#Remember the most recent conquest
				}
				if = {
					limit = {
						scope:claimant = character:Blackfyre_14
						any_in_list = {
							list = target_titles
							this = title:k_the_stepstones
						}
					}
					set_variable = {
						name = recent_conquest
						value = title:k_the_stepstones
					}
				}
				else = {
					set_variable = {
						name = recent_conquest
						value = scope:claimant.primary_title
					}
				}
			}

			if = {
				limit = {
					scope:ninepenny_story = {
						has_variable = band_of_nine_conquest
						var:band_of_nine_conquest = 2
						NOT = {
							has_variable = second_npk_conquest
						}
					}
				}
			}
			else_if = { #Second NPK Wars
				limit = {
					scope:ninepenny_story = {
						has_variable = second_npk_conquest
					}
				}
				trigger_event = agot_ninepenny.0021
			}
			else = { #Initial NPK Wars
				trigger_event = agot_ninepenny.0002
			}
		}
	}

	on_white_peace_desc = {}

	on_white_peace = {}

	on_defeat_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = ninepenny_conquest_cb_defeat_desc_defender
			}
			triggered_desc = {
				trigger = { scope:attacker = { is_local_player = yes } }
				desc = ninepenny_conquest_cb_defeat_desc_attacker
			}
			desc = ninepenny_conquest_cb_defeat_desc
		}
	}

	on_defeat = {
		scope:attacker = { show_pow_release_message_effect = yes }

		#EP2 accolade glory gain for winning against higher ranked enemy
		scope:defender = { accolade_defender_war_end_glory_gain_high_effect = yes }

		# lose claims
		if = {
			limit = { scope:attacker = scope:claimant }
			every_in_list = {
				list = target_titles
				scope:claimant = {
					remove_claim = prev
				}
			}
		}

		if = {
			limit = {
				NOT = { scope:claimant = scope:attacker }
				scope:claimant = {
					can_add_hook = {
						type = favor_hook
						target = scope:attacker
					}
				}
			}
			scope:claimant = {
				add_hook = {
					target = scope:attacker
					type = favor_hook
				}
			}
		}

		# Award the appropriate amount of prestige to all participants in the war.
		setup_claim_cb = {
			titles = target_titles
			attacker = scope:attacker
			defender = scope:defender
			claimant = scope:claimant
			victory = no
		}
		modify_all_participants_fame_values = {
			WINNER = scope:defender
			LOSER = scope:attacker
			FAME_BASE = scope:cb_prestige_factor # Set by 'setup_claim_cb'
			IS_RELIGIOUS_WAR = no
			WINNER_FAME_SCALE = scale_10_war_defender_win
			LOSER_FAME_SCALE = -10
			WINNER_ALLY_FAME_SCALE = 10
			LOSER_ALLY_FAME_SCALE = 10
		}

		# Truce
		add_truce_attacker_defeat_effect = yes

		scope:attacker = {
			save_temporary_scope_as = loser
		}
		on_lost_aggression_war_discontent_loss = yes

		#NPK Effects
		scope:attacker = {
			random_owned_story = {
				limit = {
					story_type = story_agot_ninepenny_kings
				}
				save_scope_as = ninepenny_story
			}
		}
		if = { #Second NPK Wars
			limit = {
				scope:ninepenny_story = {
					has_variable = second_npk_conquest
				}
			}
			scope:attacker = {
				trigger_event = agot_ninepenny.0024 #Lost War momentum gone wah wah
			}
		}
		else = {
			#Implode the Band of the Nine
			scope:attacker = { shatter_band_of_nine_alliances_effect = yes }
			maelys_title_distribution_effect = {
				MAELYS = scope:attacker
			}
		}
	}


	on_primary_attacker_death = inherit
	on_primary_defender_death = inherit

	transfer_behavior = transfer

	attacker_allies_inherit = yes
	defender_allies_inherit = yes

	war_name = "NINEPENNY_WAR_NAME"
	interface_priority = 60

	should_show_war_goal_subview = yes

	attacker_wargoal_percentage = 0.8

	max_defender_score_from_occupation = 150
	max_attacker_score_from_occupation = 150

	max_attacker_score_from_battles = 200
	max_defender_score_from_battles = 200

	max_ai_diplo_distance_to_title = 1000
}

##########
# The Reyne Rebellion
#########
reyne_rebellion = {
	icon = dissolution_war
	group = civil_war
	ai_only_against_liege = yes
	allow_hostages = yes
	target_titles = all
	target_title_tier = all
	allowed_for_character = {
		always = no
	}

	allowed_against_character = {
		scope:attacker = {
			liege = scope:defender
		}
	}

	target_de_jure_regions_above = yes

	white_peace_possible = no

	valid_to_start = {
	}

	should_invalidate = {
		scope:attacker = {
			NOT = {
				any_liege_or_above = { this = scope:defender }
			}
		}
	}

	on_declaration = {
		#on_declared_war = yes
		# save the initial target and their tier for conditioning the depose effect
		if = {
			limit = { NOT = { exists = scope:attacker.var:initial_target } }
			scope:attacker = {
				set_variable = {
					name = initial_target
					value = scope:defender
				}

				set_variable = {
					name = target_tier
					value = scope:defender.primary_title.tier
				}
			}
		}
	}

	on_victory_desc = {
		first_valid = {
			triggered_desc = {
				trigger = {
					scope:defender = { is_local_player = yes }
					OR = {
						NOT = { exists = scope:attacker.var:initial_target }
						scope:defender = scope:attacker.var:initial_target
						scope:defender.primary_title.tier <= scope:attacker.var:target_tier
					}
				}
				desc = refused_liege_demand_war_victory_desc_defender
			}
			triggered_desc = {
				trigger = {
					OR = {
						NOT = { exists = scope:attacker.var:initial_target }
						scope:defender = scope:attacker.var:initial_target
						scope:defender.primary_title.tier <= scope:attacker.var:target_tier
					}
				}
				desc = refused_liege_demand_war_victory_desc
			}
		}
	}

	on_victory = {
		scope:attacker = { show_pow_release_message_effect = yes }

		#EP2 Accolade glory gain from winning against higher ranked enemy
		scope:attacker = { accolade_attacker_war_end_glory_gain_med_effect = yes }


		scope:defender = {
			every_held_title = {
				add_to_list = target_titles
			}
			every_vassal = {
				limit = {
					NOT = {
						this = scope:attacker
					}
				}
				add_to_list = vassals_taken
			}
		}

		create_title_and_vassal_change = {
			type = conquest
			save_scope_as = change
			add_claim_on_loss = yes
		}

		#Take Casterly Rock
		every_in_list = {
			list = target_titles
			change_title_holder = {
				holder = scope:attacker
				change = scope:change
			}
		}
		hidden_effect = {
			#And all his vassals
			every_in_list = {
				list = vassals_taken
				change_liege = {
					liege = scope:attacker
					change = scope:change
				}
			}

			scope:attacker = { vassal_contract_set_obligation_level = { type = special_contract level = 0 } }
		}
		resolve_title_and_vassal_change = scope:change

		scope:defender = {
			add_character_flag = {
				flag = recent_liberty_faction_war
				years = 5
			}

			# If we win the rebellion, our liege loses any legal right to imprison us/banish us/revoke our titles.
			consume_all_criminal_reasons_effect = {
				LIEGE = scope:defender
				CRIMINAL = scope:attacker
			}

			add_prestige = -500

			# Then our liege is deposed (but the imprisonment loss remains true for their heir).
			if = {
				limit = { NOT = { exists = scope:attacker.var:initial_target } }
				depose = yes
			}
			else = {
				if = {
					limit = { this = scope:attacker.var:initial_target }
					depose = yes
				}
				else_if = {
					limit = { primary_title.tier <= scope:attacker.var:target_tier }
					depose = yes
				}

				# remove variables
				scope:attacker = {
					remove_variable = initial_target
					remove_variable = target_tier
				}
			}
		}

		scope:attacker = {
			#Trigger the Reign of Castamere Event
		}

		scope:defender = {
			#Set variable in the Story Cycle
			random_owned_story = {
				limit = {
					story_type = story_agot_reyne_rebellion
				}
				set_variable = reyne_rebellion_complete
			}
		}

		hidden_effect = {
			scope:attacker = {
				add_truce_both_ways = {
					character = scope:defender
					days = 1825
					war = root.war
					result = victory
				}
			}
		}

	}

	on_white_peace_desc = {
	}

	on_white_peace = {
	}

	on_defeat_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = refused_liege_demand_war_defeat_desc_defender
			}
			desc = refused_liege_demand_war_defeat_desc
		}

	}

	on_defeat = {
		scope:attacker = { show_pow_release_message_effect = yes }
		scope:defender = {
			add_character_flag = {
				flag = recent_liberty_faction_war
				years = 10
			}
			add_dread = medium_dread_gain

			#Set variable in the Story Cycle
			random_owned_story = {
				limit = {
					story_type = story_agot_reyne_rebellion
				}
				set_variable = reyne_rebellion_complete
			}
		}
		on_lost_request_revolt_war = yes
	}

	on_invalidated_desc = msg_invalidate_war_title

	check_attacker_inheritance_validity = no

	on_primary_attacker_death = invalidate
	on_primary_defender_death = inherit

	transfer_behavior = transfer

	attacker_allies_inherit = yes
	defender_allies_inherit = yes

	war_name = "REYNE_REBELLION_NAME"

	interface_priority = 80

	use_de_jure_wargoal_only = yes

	attacker_wargoal_percentage = 0.8

	max_attacker_score_from_battles = 100
	max_defender_score_from_battles = 50

	max_defender_score_from_occupation = 150
	max_attacker_score_from_occupation = 150

	max_ai_diplo_distance_to_title = 500
}

#####################
# The Rogue Prince Wars
#####################

daemon_stepstones_first_war = {
	icon = dragon_duchy_conquest_cb
	group = event
	ai_only_against_liege = no
	allow_hostages = no
	white_peace_possible = no

	allowed_against_character = {
		# This is a scripted war, it technically does not need this
		# Including this will cause the war to invalidate when the former liege dies!
		# exists = scope:attacker.joined_faction
		# scope:attacker.joined_faction = {
		# 	special_title.holder = scope:defender
		# }
	}

	target_de_jure_regions_above = yes

	valid_to_start = {}

	should_invalidate = {
		OR = {
			scope:attacker = {
				OR = {
					is_current_dragonrider = no
					NOT = { this = character:Targaryen_61 }
				}
			}
			NOT = {
				any_in_list = {
					list = target_titles
					any_in_de_jure_hierarchy = {
						tier = tier_county
						holder = {
							target_is_same_character_or_above = scope:defender
						}
					}
				}
			}
		}
	}

	on_invalidated_desc = msg_religious_war_invalidation_region_message

	on_invalidated = {
		if = {
			limit = {
				scope:attacker = {
					OR = {
						is_alive = no
						is_current_dragonrider = no
					}
				}
			}
			# Lose titles
			create_title_and_vassal_change = {
				type = conquest
				save_scope_as = change
				add_claim_on_loss = yes
			}
			title:c_dwarfstone.holder = {
				every_held_county = {
					limit = {
						duchy = title:d_first_stepstones
					}
					change_title_holder = {
						holder = title:d_first_stepstones.holder
						change = scope:change
						take_baronies = yes
					}
				}
			}
			resolve_title_and_vassal_change = scope:change

			if = {
				limit = {
					character:Targaryen_61 = {
						is_ruler = no
					}
				}
				character:Targaryen_61 = {
					if = {
						limit = {
							is_alive = yes
							NOT = { employer = title:e_the_iron_throne.holder }
						}
					}
					set_employer = title:e_the_iron_throne.holder
				}
				title:e_the_iron_throne.holder = {
					trigger_event = agot_scenario_trp.1009
				}
			}

			# Trigger lose events
			title:c_driftmark.holder = {
				trigger_event = agot_scenario_trp.0102
			}
			scope:defender = {
				trigger_event = agot_scenario_trp.1017
			}
		}
		else_if = {
			limit = {
				title:d_first_stepstones.holder = character:Targaryen_61 # Daemon killed but inherited
			}
			# Make sure Daemon gets titles directly
			create_title_and_vassal_change = {
				type = conquest
				save_scope_as = change
				add_claim_on_loss = yes
			}
			title:d_first_stepstones.holder = {
				every_sub_realm_county = {
					limit = {
						duchy = title:d_first_stepstones
						NOT = { holder = character:Targaryen_61 }
					}
					change_title_holder = {
						holder = character:Targaryen_61
						change = scope:change
						take_baronies = yes
					}
				}
				resolve_title_and_vassal_change = scope:change
			}
		}
	}

	cost = {
		piety = {
			value = 0
		}
		prestige = {
			value = 0
		}
	}

	on_declaration = {
		on_declared_war = yes
	}

	on_victory_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:attacker = { is_local_player = yes } }
				desc = county_conquest_cb_victory_desc_attacker
			}
			desc = county_conquest_cb_victory_desc
		}
	}

	on_victory = {
		scope:attacker = { show_pow_release_message_effect = yes }

		#EP2 accolade glory gain for winning against higher ranked enemy
		scope:attacker = { accolade_attacker_war_end_glory_gain_med_effect = yes }

		create_title_and_vassal_change = {
			type = conquest
			save_scope_as = change
			add_claim_on_loss = yes
		}

		# go through the dejure hierarchy under target titles, transfer eligible vassals and sieze counties from ineligible ones
		every_in_list = {
			list = target_titles
			custom_tooltip = CONQUEST_CB_TITLE

			conquest_cb_title_transfer = {
				RELIGIOUS_WAR = no
			}
		}

		every_in_list = {
			list = vassals_taken
			change_liege = {
				liege = scope:attacker
				change = scope:change
			}
		}

		every_in_list = {
			list = titles_taken
			change_title_holder = {
				holder = scope:attacker
				change = scope:change
				take_baronies = yes
			}
		}

		every_in_list = {
			list = target_titles
			limit = {
				NOT = { holder = scope:attacker }
			}
			change_title_holder = {
				holder = scope:attacker
				change = scope:change
			}
		}

		resolve_title_and_vassal_change = scope:change

		# Prestige Progress for the Attacker
		every_in_list = {
			list = target_titles
			scope:attacker = {
				add_prestige_experience = medium_prestige_value
			}
		}

		# Allies on both sides get full prestige value for helping in the war, based on their war participation.
		modify_allies_of_participants_fame_values = {
			WINNER = scope:attacker
			FAME_BASE = medium_prestige_value
			IS_RELIGIOUS_WAR = no
			WINNER_ALLY_FAME_SCALE = 1
			LOSER_ALLY_FAME_SCALE = 1
		}

		# Truce
		add_truce_attacker_victory_effect = yes

		# FP1: note the victory for future memorialisation via stele (if applicable).
		scope:attacker = { fp1_remember_recent_conquest_victory_effect = yes }

		agot_8106_first_daemon_war_end_effects = yes
	}

	on_white_peace_desc = {
		# White peace is not possible, but this is required for error suppression
	}

	on_defeat_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = county_conquest_cb_defeat_desc_defender
			}
			triggered_desc = {
				trigger = {
					scope:attacker = {
						is_local_player = yes
						has_targeting_faction = yes
					}
				}
				desc = county_conquest_cb_defeat_desc_attacker
			}
			desc = county_conquest_cb_defeat_desc
		}
	}

	on_defeat = {
		scope:attacker = { show_pow_release_message_effect = yes }

		#EP2 accolade glory gain for winning against higher ranked enemy
		scope:defender = { accolade_defender_war_end_glory_gain_med_effect = yes }

		# Prestige loss for the attacker
		scope:attacker = {
			pay_short_term_gold_reparations_effect = {
				GOLD_VALUE = 3
			}
			add_prestige = {
				value = major_prestige_value
				multiply = -1.0
			}
		}

		# Prestige for Defender
		scope:defender = {
			add_prestige_war_defender_effect = {
				PRESTIGE_VALUE = major_prestige_value
			}
		}

		# Allies on both sides get full prestige value for helping in the war, based on their war participation.
		modify_allies_of_participants_fame_values = {
			WINNER = scope:defender
			FAME_BASE = major_prestige_value
			IS_RELIGIOUS_WAR = no
			WINNER_ALLY_FAME_SCALE = 1
			LOSER_ALLY_FAME_SCALE = 1
		}

		add_truce_attacker_defeat_effect = yes

		scope:attacker = {
			save_temporary_scope_as = loser
		}
		on_lost_aggression_war_discontent_loss = yes

		# Lose titles
		create_title_and_vassal_change = {
			type = conquest
			save_scope_as = change
			add_claim_on_loss = yes
		}
		scope:attacker = {
			every_held_county = {
				limit = {
					duchy = title:d_first_stepstones
				}
				change_title_holder = {
					holder = title:d_first_stepstones.holder
					change = scope:change
					take_baronies = yes
				}
			}
		}
		resolve_title_and_vassal_change = scope:change

		if = {
			limit = {
				character:Targaryen_61 = {
					is_ruler = no
				}
			}
			character:Targaryen_61 = {
				if = {
					limit = {
						is_alive = yes
						NOT = { employer = title:e_the_iron_throne.holder }
					}
					set_employer = title:e_the_iron_throne.holder
				}
			}
			title:e_the_iron_throne.holder = {
				trigger_event = agot_scenario_trp.1009
			}
		}

		# Trigger lose events
		title:c_driftmark.holder = {
			trigger_event = agot_scenario_trp.0102
		}
		scope:defender = {
			trigger_event = agot_scenario_trp.1017
		}
	}

	check_attacker_inheritance_validity = no

	on_primary_attacker_death = inherit
	on_primary_defender_death = inherit

	transfer_behavior = transfer

	attacker_allies_inherit = yes
	defender_allies_inherit = yes

	war_name = "DAEMON_FIRST_STEPSTONE_WAR_NAME"
	war_name_base = "DAEMON_FIRST_STEPSTONE_WAR_NAME_BASE"
	cb_name = "DAEMON_FIRST_STEPSTONE_WAR_CB_NAME"

	interface_priority = 79

	use_de_jure_wargoal_only = yes

	attacker_wargoal_percentage = 0.8

	max_defender_score_from_occupation = 150
	max_attacker_score_from_occupation = 150
}

daemon_stepstones_second_war = {
	icon = dragon_kingdom_conquest_cb
	group = event
	ai_only_against_liege = no
	allow_hostages = no
	white_peace_possible = no

	allowed_against_character = {
		# This is a scripted war, it technically does not need this
		# Including this will cause the war to invalidate when the former liege dies!
		# exists = scope:attacker.joined_faction
		# scope:attacker.joined_faction = {
		# 	special_title.holder = scope:defender
		# }
	}

	target_de_jure_regions_above = yes

	valid_to_start = {}

	should_invalidate = {
		OR = {
			scope:attacker = {
				is_current_dragonrider = no
				NOT = { this = character:Targaryen_61 }
			}
			NOT = {
				any_in_list = {
					list = target_titles
					any_in_de_jure_hierarchy = {
						tier = tier_county
						holder = {
							target_is_same_character_or_above = scope:defender
						}
					}
				}
			}
		}
	}

	on_invalidated_desc = msg_religious_war_invalidation_region_message

	on_invalidated = {
		if = {
			limit = { character:Targaryen_61 = { is_alive = no } }
			scope:attacker = { show_pow_release_message_effect = yes }

			#EP2 accolade glory gain for winning against higher ranked enemy
			scope:defender = { accolade_defender_war_end_glory_gain_med_effect = yes }

			# Prestige loss for the attacker
			scope:attacker = {
				pay_short_term_gold_reparations_effect = {
					GOLD_VALUE = 3
				}
				add_prestige = {
					value = major_prestige_value
					multiply = -1.0
				}
			}

			# Prestige for Defender
			scope:defender = {
				add_prestige_war_defender_effect = {
					PRESTIGE_VALUE = major_prestige_value
				}
			}

			# Allies on both sides get full prestige value for helping in the war, based on their war participation.
			modify_allies_of_participants_fame_values = {
				WINNER = scope:defender
				FAME_BASE = major_prestige_value
				IS_RELIGIOUS_WAR = no
				WINNER_ALLY_FAME_SCALE = 1
				LOSER_ALLY_FAME_SCALE = 1
			}

			add_truce_attacker_defeat_effect = yes

			scope:attacker = {
				save_temporary_scope_as = loser
			}
			on_lost_aggression_war_discontent_loss = yes

			# Lose titles
			create_title_and_vassal_change = {
				type = conquest
				save_scope_as = change
				add_claim_on_loss = yes
			}
			title:k_the_stepstones = {
				every_in_de_jure_hierarchy = {
					limit = {
						tier <= tier_kingdom
						tier >= tier_county
						kingdom = title:k_the_stepstones
						exists = holder
						NOT = { holder.top_liege = title:k_the_stepstones.holder }
					}
					change_title_holder = {
						holder = title:k_the_stepstones.holder
						change = scope:change
						take_baronies = yes
					}
				}
			}
			resolve_title_and_vassal_change = scope:change

			if = {
				limit = {
					character:Targaryen_61 = {
						is_ruler = no
					}
				}
				character:Targaryen_61 = {
					if = {
						limit = {
							is_alive = yes
							NOT = { employer = title:e_the_iron_throne.holder }
						}
						set_employer = title:e_the_iron_throne.holder
					}
				}
				title:e_the_iron_throne.holder = {
					trigger_event = agot_scenario_trp.1009
				}
			}

			# Trigger lose events if part of the war
			if = {
				limit = {
					title:c_driftmark.holder = {
						has_character_flag = helped_daemon_second_war
					}
				}
				title:c_driftmark.holder = {
					trigger_event = agot_scenario_trp.0102
				}
			}
			if = {
				limit = {
					title:k_the_stepstones.holder = {
						NOT = { has_title = title:e_three_daughters }
					}
				}
				title:k_the_stepstones.holder = {
					trigger_event = agot_scenario_trp.0203
				}
			}
		}

		#Crabfeeder cleanup; only way to clear designated heir is to force error
		hidden_effect = {
			if = {
				limit = {
					character:Drahar_8 = {
						is_alive = yes
						is_ruler = yes
					}
				}
				character:Drahar_8 = {
					set_designated_heir = scope:none
				}
			}
		}
	}

	cost = {
		piety = {
			value = 0
		}
		prestige = {
			value = 0
		}
	}

	on_declaration = {
		on_declared_war = yes
	}

	on_victory_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:attacker = { is_local_player = yes } }
				desc = county_conquest_cb_victory_desc_attacker
			}
			desc = county_conquest_cb_victory_desc
		}
	}

	on_victory = {
		scope:attacker = { show_pow_release_message_effect = yes }

		#EP2 accolade glory gain for winning against higher ranked enemy
		scope:attacker = { accolade_attacker_war_end_glory_gain_med_effect = yes }

		create_title_and_vassal_change = {
			type = conquest
			save_scope_as = change
			add_claim_on_loss = yes
		}

		# go through the dejure hierarchy under target titles, transfer eligible vassals and sieze counties from ineligible ones
		every_in_list = {
			list = target_titles
			limit = {
				NOT = { this = title:c_tigers_island }
				NOT = { this = title:c_last_refuge }
			}
			custom_tooltip = CONQUEST_CB_TITLE

			conquest_cb_title_transfer = {
				RELIGIOUS_WAR = no
			}
		}

		every_in_list = {
			list = vassals_taken
			limit = {
				NOT = {
					this = title:c_tigers_island.holder
				}
				NOT = {
					this = title:c_last_refuge.holder
				}
			}
			change_liege = {
				liege = scope:attacker
				change = scope:change
			}
		}

		every_in_list = {
			list = titles_taken
			limit = {
				NOT = { this = title:c_tigers_island }
				NOT = { this = title:c_last_refuge }
			}
			change_title_holder = {
				holder = scope:attacker
				change = scope:change
				take_baronies = yes
			}
		}

		every_in_list = {
			list = target_titles
			limit = {
				NOT = { holder = scope:attacker }
				NOT = { this = title:c_tigers_island }
				NOT = { this = title:c_last_refuge }
			}
			change_title_holder = {
				holder = scope:attacker
				change = scope:change
			}
		}

		resolve_title_and_vassal_change = scope:change

		# Prestige Progress for the Attacker
		every_in_list = {
			list = target_titles
			scope:attacker = {
				add_prestige_experience = medium_prestige_value
			}
		}

		# Allies on both sides get full prestige value for helping in the war, based on their war participation.
		modify_allies_of_participants_fame_values = {
			WINNER = scope:attacker
			FAME_BASE = medium_prestige_value
			IS_RELIGIOUS_WAR = no
			WINNER_ALLY_FAME_SCALE = 1
			LOSER_ALLY_FAME_SCALE = 1
		}

		# Truce
		add_truce_attacker_victory_effect = yes

		# FP1: note the victory for future memorialisation via stele (if applicable).
		scope:attacker = { fp1_remember_recent_conquest_victory_effect = yes }

		# Trigger win events
		character:Targaryen_61 = {
			trigger_event = agot_scenario_trp.0003
		}
		if = {
			limit = {
				title:c_driftmark.holder = {
					is_allied_in_war = character:Targaryen_61
				}
			}
			title:c_driftmark.holder = {
				trigger_event = agot_scenario_trp.0103
			}
		}
		# Corlys gets his dragonriders back
		character:Velaryon_31 = {
			primary_spouse = {
				remove_character_flag = agot_not_using_dragon
			}
			every_child = {
				remove_character_flag = agot_not_using_dragon
			}
		}

		#Crabfeeder cleanup; only way to clear designated heir is to force error
		hidden_effect = {
			if = {
				limit = {
					character:Drahar_8 = {
						is_alive = yes
						is_ruler = yes
					}
				}
				character:Drahar_8 = {
					set_designated_heir = scope:none
				}
			}
		}
	}

	on_white_peace_desc = {
		# White peace is not possible, but this is required for error suppression
	}

	on_defeat_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = county_conquest_cb_defeat_desc_defender
			}
			triggered_desc = {
				trigger = {
					scope:attacker = {
						is_local_player = yes
						has_targeting_faction = yes
					}
				}
				desc = county_conquest_cb_defeat_desc_attacker
			}
			desc = county_conquest_cb_defeat_desc
		}
	}

	on_defeat = {
		scope:attacker = { show_pow_release_message_effect = yes }

		#EP2 accolade glory gain for winning against higher ranked enemy
		scope:defender = { accolade_defender_war_end_glory_gain_med_effect = yes }

		# Prestige loss for the attacker
		scope:attacker = {
			pay_short_term_gold_reparations_effect = {
				GOLD_VALUE = 3
			}
			add_prestige = {
				value = major_prestige_value
				multiply = -1.0
			}
		}

		# Prestige for Defender
		scope:defender = {
			add_prestige_war_defender_effect = {
				PRESTIGE_VALUE = major_prestige_value
			}
		}

		# Allies on both sides get full prestige value for helping in the war, based on their war participation.
		modify_allies_of_participants_fame_values = {
			WINNER = scope:defender
			FAME_BASE = major_prestige_value
			IS_RELIGIOUS_WAR = no
			WINNER_ALLY_FAME_SCALE = 1
			LOSER_ALLY_FAME_SCALE = 1
		}

		add_truce_attacker_defeat_effect = yes

		scope:attacker = {
			save_temporary_scope_as = loser
		}
		on_lost_aggression_war_discontent_loss = yes

		# Lose titles
		create_title_and_vassal_change = {
			type = conquest
			save_scope_as = change
			add_claim_on_loss = yes
		}
		scope:attacker = {
			every_held_title = {
				limit = {
					tier <= tier_kingdom
					tier >= tier_county
					kingdom = title:k_the_stepstones
				}
				change_title_holder = {
					holder = title:k_the_stepstones.holder
					change = scope:change
					take_baronies = yes
				}
			}
		}
		resolve_title_and_vassal_change = scope:change

		if = {
			limit = {
				character:Targaryen_61 = {
					is_ruler = no
				}
			}
			character:Targaryen_61 = {
				if = {
					limit = {
						is_alive = yes
						NOT = { employer = title:e_the_iron_throne.holder }
					}
					set_employer = title:e_the_iron_throne.holder
				}
			}
			title:e_the_iron_throne.holder = {
				trigger_event = agot_scenario_trp.1009
			}
		}

		# Trigger lose events if part of the war
		if = {
			limit = {
				title:c_driftmark.holder = {
					has_character_flag = helped_daemon_second_war
				}
			}
			title:c_driftmark.holder = {
				trigger_event = agot_scenario_trp.0102
			}
		}
		if = {
			limit = {
				title:k_the_stepstones.holder = {
					NOT = { has_title = title:e_three_daughters }
				}
			}
			title:k_the_stepstones.holder = {
				trigger_event = agot_scenario_trp.0203
			}
		}

		#Crabfeeder cleanup; only way to clear designated heir is to force error
		hidden_effect = {
			if = {
				limit = {
					character:Drahar_8 = {
						is_alive = yes
						is_ruler = yes
					}
				}
				character:Drahar_8 = {
					set_designated_heir = scope:none
				}
			}
		}
	}

	check_attacker_inheritance_validity = no

	on_primary_attacker_death = inherit
	on_primary_defender_death = inherit

	transfer_behavior = transfer

	attacker_allies_inherit = yes
	defender_allies_inherit = yes

	war_name = "DAEMON_SECOND_STEPSTONE_WAR_NAME"
	war_name_base = "DAEMON_SECOND_STEPSTONE_WAR_NAME_BASE"
	cb_name = "DAEMON_SECOND_STEPSTONE_WAR_CB_NAME"

	interface_priority = 79

	use_de_jure_wargoal_only = yes

	attacker_wargoal_percentage = 0.8

	max_defender_score_from_occupation = 150
	max_attacker_score_from_occupation = 150
}

triarchy_anti_daemon_war = {
	icon = claim_cb
	group = event
	ai_only_against_liege = no
	allow_hostages = no
	white_peace_possible = no

	allowed_against_character = {
		# This is a scripted war, it technically does not need this
		# Including this will cause the war to invalidate when the former liege dies!
		# exists = scope:attacker.joined_faction
		# scope:attacker.joined_faction = {
		# 	special_title.holder = scope:defender
		# }
	}

	target_de_jure_regions_above = yes

	valid_to_start = {}

	cost = {
		piety = {
			value = 0
		}
		prestige = {
			value = 0
		}
	}

	target_titles = claim
	#target_title_tier = all

	on_declaration = {
		on_declared_war = yes
	}

	should_invalidate = {
		OR = {
			NOT = {
				any_in_list = {
					list = target_titles
					any_in_de_jure_hierarchy = {
						tier >= tier_county
						exists = holder
						holder = {
							OR = {
								this = scope:defender
								target_is_liege_or_above = scope:defender
							}
						}
					}
				}
			}
			AND = {
				NOT = { scope:claimant = scope:attacker }
				scope:claimant = {
					OR = {
						is_alive = no
						NOR = {
							is_vassal_or_below_of = scope:attacker
							is_courtier_of = scope:attacker
						}
					}
				}
			}
		}
	}

	on_invalidated_desc = {
		first_valid = {
			triggered_desc = {
				trigger = {
					NOT = { scope:claimant = scope:attacker }
					scope:claimant = { is_alive = no }
				}
				desc = msg_claim_war_invalidated_claimant_unavailable_dead_message
			}
			triggered_desc = {
				trigger = {
					scope:claimant = {
						NOR = {
							this = scope:attacker
							NOR = {
								is_vassal_or_below_of = scope:attacker
								is_courtier_of = scope:attacker
							}
						}
					}
				}
				desc = msg_claim_war_invalidated_claimant_unavailable_not_vassal_message
			}
			desc = msg_claim_war_invalidated_message
		}
	}

	on_invalidated = {
	}

	on_victory_desc = {
		first_valid = {
			triggered_desc = {
				trigger = {
					scope:claimant = { is_local_player = yes }
				}
				desc = claim_cb_victory_desc_attacker_claimant
			}
			triggered_desc = {
				trigger = { scope:attacker = { is_local_player = yes } }
				desc = claim_cb_victory_desc_attacker
			}
			desc = claim_cb_victory_desc
		}
	}

	on_victory = {
		scope:attacker = { show_pow_release_message_effect = yes }

		# Legitimacy
		add_legitimacy_attacker_victory_effect = yes

		#EP2 Accolade glory gain from winning against higher ranked enemy
		scope:attacker = { accolade_attacker_war_end_glory_gain_med_effect = yes }

		create_title_and_vassal_change = {
			type = conquest_claim
			save_scope_as = change
			add_claim_on_loss = yes
		}
		# Create a claim CB which is executed to handle title/vassal changes, in addition to being used to calculate Prestige awards for war participants.
		setup_claim_cb = {
			titles = target_titles
			attacker = scope:attacker
			defender = scope:defender
			claimant = scope:claimant
			change = scope:change
		}

		resolve_title_and_vassal_change = scope:change


		# Lose titles
		create_title_and_vassal_change = {
			type = conquest
			save_scope_as = change
			add_claim_on_loss = yes
		}
		scope:defender = {
			every_held_title = {
				limit = {
					tier < tier_kingdom
					tier >= tier_county
					kingdom = title:k_the_stepstones
				}
				change_title_holder = {
					holder = scope:attacker
					change = scope:change
					take_baronies = yes
				}
			}
		}
		resolve_title_and_vassal_change = scope:change

		create_title_and_vassal_change = {
			type = swear_fealty
			save_scope_as = change
		}
		title:c_last_refuge.holder.top_liege = {
			if = {
				limit = {
					primary_title.tier <= tier_duchy
					is_independent_ruler = yes
				}
				change_liege = {
					liege = scope:attacker
					change = scope:change
				}
			}
		}
		title:c_tigers_island.holder.top_liege = {
			if = {
				limit = {
					primary_title.tier <= tier_duchy
					is_independent_ruler = yes
				}
				change_liege = {
					liege = scope:attacker
					change = scope:change
				}
			}
		}
		resolve_title_and_vassal_change = scope:change

		if = {
			limit = {
				character:Targaryen_61 = {
					is_ruler = no
				}
			}
			character:Targaryen_61 = {
				if = {
					limit = {
						is_alive = yes
						NOT = { employer = title:e_the_iron_throne.holder }
					}
					set_employer = title:e_the_iron_throne.holder
				}
			}
		}

		if = {
			limit = {
				NOT = { scope:claimant = scope:attacker }
				scope:attacker = {
					can_add_hook = {
						type = favor_hook
						target = scope:claimant
					}
				}
			}
			scope:attacker = {
				add_hook = {
					target = scope:claimant
					type = favor_hook
				}
			}
		}

		# Attacker gets Prestige Experience, Defender loses Prestige, all other participants gain Prestige based on their war contribution.
		modify_all_participants_fame_values = {
			WINNER = scope:attacker
			LOSER = scope:defender
			FAME_BASE = scope:cb_prestige_factor # Set by 'setup_claim_cb'
			IS_RELIGIOUS_WAR = no
			WINNER_FAME_SCALE = 10
			LOSER_FAME_SCALE = -10
			WINNER_ALLY_FAME_SCALE = 10
			LOSER_ALLY_FAME_SCALE = 10
		}

		# truce
		add_truce_attacker_victory_effect = yes

		# FP1: note the victory for future memorialisation via stele (if applicable).
		scope:attacker = { fp1_remember_recent_conquest_victory_effect = yes }
	}

	on_white_peace_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = claim_cb_white_peace_desc_defender
			}
			desc = claim_cb_white_peace_desc
		}

	}

	on_white_peace = {
		scope:attacker = {
			show_pow_release_message_effect = yes
			stress_impact = {
				ambitious = medium_stress_impact_gain
				arrogant = medium_stress_impact_gain
			}
		}

		#EP2 accolade glory gain for defender doing alright
		scope:defender = { accolade_defender_war_end_glory_gain_low_effect = yes }

		# press claims
		every_in_list = {
			list = target_titles
			if = {
				limit = { scope:claimant = { has_weak_claim_on = prev } }
				scope:claimant = {
					make_claim_strong = prev
				}
			}
		}

		# Create an 'helper' claim CB which we won't execute, but can use to determine how much Prestige should be given to war participants.
		setup_claim_cb = {
			titles = target_titles
			attacker = scope:attacker
			defender = scope:defender
			claimant = scope:claimant
			victory = no
		}
		# Prestige loss for the attacker
		scope:attacker = {
			add_prestige = {
				value = scope:cb_prestige_factor # Set by 'setup_claim_cb'
				multiply = -5.0
			}
		}
		# Allies on both sides get full prestige value for helping in the war, based on their war participation.
		modify_allies_of_participants_fame_values = {
			WINNER = scope:attacker
			FAME_BASE = scope:cb_prestige_factor # Set by 'setup_claim_cb'
			IS_RELIGIOUS_WAR = no
			WINNER_ALLY_FAME_SCALE = 10
			LOSER_ALLY_FAME_SCALE = 10
		}
		# Defender neither gains nor loses any prestige.
		scope:defender = {
			stress_impact = {
				arrogant = medium_stress_impact_gain
			}
		}

		if = {
			limit = {
				NOT = { scope:claimant = scope:attacker }
				scope:attacker = {
					can_add_hook = {
						type = favor_hook
						target = scope:claimant
					}
				}
			}
			scope:attacker = {
				add_hook = {
					target = scope:claimant
					type = favor_hook
				}
			}
		}

		# Truce
		add_truce_white_peace_effect = yes
	}

	on_defeat_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = claim_cb_defeat_desc_defender
			}
			triggered_desc = {
				trigger = { scope:claimant = { is_local_player = yes } }
				desc = claim_cb_defeat_desc_attacker_claimant
			}
			triggered_desc = {
				trigger = { scope:attacker = { is_local_player = yes } }
				desc = claim_cb_defeat_desc_attacker
			}
			desc = claim_cb_defeat_desc
		}

	}

	on_defeat = {
		scope:attacker = { show_pow_release_message_effect = yes }

		# Legitimacy
		add_legitimacy_attacker_defeat_effect = yes

		#EP2 accolade glory gain for winning against higher ranked enemy
		scope:defender = { accolade_defender_war_end_glory_gain_med_effect = yes }

		# lose claims
		every_in_list = {
			list = target_titles
			scope:claimant = {
				remove_claim = prev
			}
		}

		if = {
			limit = {
				NOT = { scope:claimant = scope:attacker }
				scope:attacker = {
					can_add_hook = {
						type = favor_hook
						target = scope:claimant
					}
				}
			}
			scope:attacker = {
				add_hook = {
					target = scope:claimant
					type = favor_hook
				}
			}
		}

		# Attacker pays gold to the defender as reparations.
		scope:attacker = {
			pay_short_term_gold_reparations_effect = {
				GOLD_VALUE = 3
			}
		}
		# Create an 'helper' claim CB which we won't execute, but can use to determine how much Prestige should be given to war participants.
		setup_claim_cb = {
			titles = target_titles
			attacker = scope:attacker
			defender = scope:defender
			claimant = scope:claimant
			victory = no
		}
		# Attacker loses Prestige, all other war participants gain Prestige (Defender gains full prestige, all allies on both sides gain based on war contribution).
		modify_all_participants_fame_values = {
			WINNER = scope:defender
			LOSER = scope:attacker
			FAME_BASE = scope:cb_prestige_factor # Set by 'setup_claim_cb'
			IS_RELIGIOUS_WAR = no
			WINNER_FAME_SCALE = scale_10_war_defender_win
			LOSER_FAME_SCALE = -10
			WINNER_ALLY_FAME_SCALE = 10
			LOSER_ALLY_FAME_SCALE = 10
		}

		# Truce
		add_truce_attacker_defeat_effect = yes

		scope:attacker = {
			save_temporary_scope_as = loser
		}
		on_lost_aggression_war_discontent_loss = yes
	}

	on_primary_attacker_death = inherit
	on_primary_defender_death = inherit

	transfer_behavior = transfer

	attacker_allies_inherit = yes
	defender_allies_inherit = yes

	war_name = "CLAIM_WAR_NAME"
	my_war_name = "CLAIM_WAR_NAME_MY"
	war_name_base = "CLAIM_WAR_NAME_BASE"
	cb_name = "CLAIM_CB_NAME"
	interface_priority = 60

	should_show_war_goal_subview = yes

	attacker_wargoal_percentage = 0.8

	max_defender_score_from_occupation = 150
	max_attacker_score_from_occupation = 150

	max_ai_diplo_distance_to_title = 1000
}

admiral_subjugation_cb = {
	icon = vassalization
	group = event
	ai_only_against_liege = no
	allow_hostages = no
	white_peace_possible = no

	attacker_score_from_occupation_scale = 150
	attacker_score_from_battles_scale = 150
	defender_score_from_battles_scale = 150


	allowed_against_character = {
		# This is a scripted war, it technically does not need this
		# Including this will cause the war to invalidate when the former liege dies!
		# exists = scope:attacker.joined_faction
		# scope:attacker.joined_faction = {
		# 	special_title.holder = scope:defender
		# }
	}

	target_de_jure_regions_above = yes

	valid_to_start = {}

	should_invalidate = {
		scope:defender = {
			#AGOT Modified, must be true independent
			#is_independent_ruler = no
			agot_is_independent_ruler = no
		}
	}

	on_declaration = {
		on_declared_war = yes
	}

	on_invalidated_desc = msg_subjugation_war_invalidated_message

	on_invalidated = {
	}

	on_victory_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender.primary_title.tier < scope:attacker.primary_title.tier }
				desc = {
					first_valid = {
						triggered_desc = {
							trigger = { scope:attacker = { is_local_player = yes } }
							desc = vassalization_cb_victory_desc_attacker
						}
						triggered_desc = {
							trigger = { scope:defender = { is_local_player = yes } }
							desc = vassalization_cb_victory_desc_defender
						}
						desc = vassalization_cb_victory_desc
					}
				}
			}
			desc = {
				first_valid = {
					triggered_desc = {
						trigger = { scope:attacker = { is_local_player = yes } }
						desc = tribal_subjugation_cb_victory_desc_equal_tier_attacker
					}
					triggered_desc = {
						trigger = { scope:defender = { is_local_player = yes } }
						desc = tribal_subjugation_cb_victory_desc_equal_tier_defender
					}
					desc = tribal_subjugation_cb_victory_desc_equal_tier
				}
			}
		}
		triggered_desc = {
			trigger = { scope:attacker = { is_local_player = yes } }
			desc = subjugation_war_warning_desc
		}
	}

	on_victory = {
		scope:attacker = { show_pow_release_message_effect = yes }

		#EP2 accolade glory gain for winning against higher ranked enemy
		scope:attacker = { accolade_attacker_war_end_glory_gain_high_effect = yes }

		create_title_and_vassal_change = {
			type = swear_fealty
			save_scope_as = change
			add_claim_on_loss = no
		}

		if = {
			limit = {
				scope:defender.primary_title.tier < scope:attacker.primary_title.tier
			}
			scope:defender = {
				change_liege = {
					liege = scope:attacker
					change = scope:change
				}
			}
		}
		else = {
			scope:defender = {
				every_held_title = {
					if = {
						limit = {
							tier = scope:defender.primary_title.tier
						}
						change_title_holder = {
							holder = scope:attacker
							change = scope:change
						}
					}
					else_if = {
						limit = {
							OR = {
								NOT = { exists = scope:secondary_title }
								tier > scope:secondary_title.tier
							}
						}
						save_temporary_scope_as = secondary_title
					}
				}
			}

			scope:defender = {
				if = {
					limit = {
						exists = scope:secondary_title
					}
					every_vassal = {
						limit = {
							primary_title.tier >= scope:secondary_title.tier
							NOT = {
								primary_title.tier = tier_barony
							}
						}
						change_liege = {
							liege = scope:attacker
							change = scope:change
						}
					}
				}
			}

			scope:defender = {
				change_liege = {
					liege = scope:attacker
					change = scope:change
				}
			}
		}

		resolve_title_and_vassal_change = scope:change


		# Prestige level progress for the attacker
		scope:attacker = {
			add_prestige_experience = {
				value = major_prestige_value
			}
		}

		# Prestige loss for the defender
		scope:defender = {
			add_prestige = {
				value = major_prestige_value
				multiply = -1.0
			}
		}

		# Allies on both sides get full prestige value for helping in the war, based on their war participation.
		modify_allies_of_participants_fame_values = {
			WINNER = scope:attacker
			FAME_BASE = major_prestige_value
			IS_RELIGIOUS_WAR = no
			WINNER_ALLY_FAME_SCALE = 1
			LOSER_ALLY_FAME_SCALE = 1
		}

		# Truce
		add_truce_attacker_victory_effect = yes

		# FP1: note the victory for future memorialisation via stele (if applicable).
		scope:attacker = { fp1_remember_recent_conquest_victory_effect = yes }
	}

	on_white_peace_desc = {
	}

	on_white_peace = {
	}

	on_defeat_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:attacker.primary_title.tier < scope:defender.primary_title.tier }
				desc = {
					first_valid = {
						triggered_desc = {
							trigger = { scope:defender = { is_local_player = yes } }
							desc = vassalization_cb_victory_desc_attacker
						}
						triggered_desc = {
							trigger = { scope:attacker = { is_local_player = yes } }
							desc = vassalization_cb_victory_desc_defender
						}
						desc = vassalization_cb_victory_desc
					}
				}
			}
			desc = {
				first_valid = {
					triggered_desc = {
						trigger = { scope:defender = { is_local_player = yes } }
						desc = tribal_subjugation_cb_victory_desc_equal_tier_attacker
					}
					triggered_desc = {
						trigger = { scope:attacker = { is_local_player = yes } }
						desc = tribal_subjugation_cb_victory_desc_equal_tier_defender
					}
					desc = tribal_subjugation_cb_victory_desc_equal_tier
				}
			}
		}
		triggered_desc = {
			trigger = { scope:defender = { is_local_player = yes } }
			desc = subjugation_war_warning_desc
		}
	}

	on_defeat = {
		scope:defender = { show_pow_release_message_effect = yes }

		#EP2 accolade glory gain for winning against higher ranked enemy
		scope:defender = { accolade_attacker_war_end_glory_gain_high_effect = yes }

		create_title_and_vassal_change = {
			type = swear_fealty
			save_scope_as = change
			add_claim_on_loss = no
		}

		if = {
			limit = {
				scope:attacker.primary_title.tier < scope:defender.primary_title.tier
			}
			scope:attacker = {
				change_liege = {
					liege = scope:defender
					change = scope:change
				}
			}
		}
		else = {
			scope:attacker = {
				every_held_title = {
					if = {
						limit = {
							tier = scope:attacker.primary_title.tier
						}
						change_title_holder = {
							holder = scope:defender
							change = scope:change
						}
					}
					else_if = {
						limit = {
							OR = {
								NOT = { exists = scope:secondary_title }
								tier > scope:secondary_title.tier
							}
						}
						save_temporary_scope_as = secondary_title
					}
				}
			}

			scope:attacker = {
				if = {
					limit = {
						exists = scope:secondary_title
					}
					every_vassal = {
						limit = {
							primary_title.tier >= scope:secondary_title.tier
							NOT = {
								primary_title.tier = tier_barony
							}
						}
						change_liege = {
							liege = scope:defender
							change = scope:change
						}
					}
				}
			}

			scope:attacker = {
				change_liege = {
					liege = scope:defender
					change = scope:change
				}
			}
		}

		resolve_title_and_vassal_change = scope:change


		# Prestige level progress for the defender
		scope:defender = {
			add_prestige_experience = {
				value = major_prestige_value
			}
		}

		# Prestige loss for the attacker
		scope:attacker = {
			add_prestige = {
				value = major_prestige_value
				multiply = -1.0
			}
		}

		# Allies on both sides get full prestige value for helping in the war, based on their war participation.
		modify_allies_of_participants_fame_values = {
			WINNER = scope:attacker
			FAME_BASE = major_prestige_value
			IS_RELIGIOUS_WAR = no
			WINNER_ALLY_FAME_SCALE = 1
			LOSER_ALLY_FAME_SCALE = 1
		}

		# Truce
		add_truce_attacker_victory_effect = yes

		# FP1: note the victory for future memorialisation via stele (if applicable).
		scope:defender = { fp1_remember_recent_conquest_victory_effect = yes }
	}

	on_primary_attacker_death = inherit
	on_primary_defender_death = inherit

	attacker_allies_inherit = yes
	defender_allies_inherit = yes

	war_name = "SUBJUGATION_WAR_NAME"
	war_name_base = "SUBJUGATION_WAR_NAME_BASE"
	cb_name = "SUBJUGATION_CB_NAME"
	interface_priority = 59

	ticking_war_score_targets_entire_realm = yes
	max_defender_score_from_occupation = 150
	max_attacker_score_from_occupation = 150
	attacker_ticking_warscore = 0
	attacker_wargoal_percentage = 0.8

	max_ai_diplo_distance_to_title = 500
}

#####################
# Defiance of Duskendale
#####################

agot_duskendale_independence_war = { # Duskendale vs Iron Throne
	group = independence
	allow_hostages = no
	white_peace_possible = no

	allowed_for_character =	{}

	allowed_against_character = {}

	should_invalidate = {}

	valid_to_start = { always = no } # This is an event CB, you should not be allowed to fire it manually

	cost = {
		piety = {
			value = 0
			if = { # Attacking your HoF is impious
				limit = {
					exists = scope:attacker.faith.religious_head
					scope:attacker.faith.religious_head = scope:defender
				}
				if = {
					limit = {
						scope:attacker.faith = {
							has_doctrine = doctrine_spiritual_head
						}
					}
					add = {
						value = massive_piety_value
						desc = CB_ATTACKER_HOF
					}
				}
				else = {
					add = {
						value = medium_piety_value
						desc = CB_ATTACKER_HOF
					}
				}
			}
			if = {
				limit = {
					scope:attacker.faith = scope:defender.faith
					scope:defender = {
						has_government = theocracy_government
					}
				}
				add = {
					value = medium_piety_value
					desc = CB_ATTACKER_THEOCRACY
				}
			}
		}
		prestige = {
			value = 0
			add = {
				value = 500
				desc = CB_BASE_COST
			}
			if = {
				limit = {
					scope:attacker = {
						has_government = tribal_government
					}
				}
				multiply = {
					value = 0.5
					desc = CB_TRIBAL_COST
				}
			}

			#Innovation Prestige Discounts
			if = {
				limit = {
					scope:attacker = {
						culture = {
							has_innovation = innovation_chronicle_writing
							has_innovation = innovation_land_grants
							has_innovation = innovation_rightful_ownership
						}
					}
				}
				multiply = {
					value = 0.7
					desc = CB_ATTACKER_INNOVATIONS
				}
			}
			else_if = {
				limit = {
					scope:attacker = {
						culture = {
							OR = {
								has_innovation = innovation_chronicle_writing
								has_innovation = innovation_land_grants
							}
							OR = {
								has_innovation = innovation_land_grants
								has_innovation = innovation_rightful_ownership
							}
							OR = {
								has_innovation = innovation_chronicle_writing
								has_innovation = innovation_rightful_ownership
							}
						}
					}
				}
				multiply = {
					value = 0.8
					desc = CB_ATTACKER_INNOVATIONS
				}
			}
			else_if = {
				limit = {
					scope:attacker = {
						culture = {
							OR = {
								has_innovation = innovation_chronicle_writing
								has_innovation = innovation_land_grants
								has_innovation = innovation_rightful_ownership
							}
						}
					}
				}
				multiply = {
					value = 0.9
					desc = CB_ATTACKER_INNOVATIONS
				}
			}

			# Bellum Justum Perk
			if = {
				limit = {
					scope:attacker = {
						has_perk = bellum_justum_perk
					}
				}
				multiply = {
					add = bellum_justum_discount_percentage
					divide = 100
					desc = CB_ATTACKER_BELLUM_JUSTUM
				}
			}

			# Dynasty Warfare Perk
			if = {
				limit = {
					scope:attacker = {
						has_dynasty = yes
						dynasty = {
							has_dynasty_perk = warfare_legacy_2
						}
					}
				}
				multiply = {
					value = warfare_legacy_2_discount
					desc = CB_ATTACKER_DYNASTY_WARFARE
				}
			}

			# Culture
			if = {
				limit = {
					scope:attacker = {
						culture = {
							has_cultural_parameter = cheaper_cbs
						}
					}
				}
				multiply = {
					value = 0.8
					desc = "CB_ATTACKER_CULTURE"
				}
			}

			# Vassal contract in-realm cost reduction
			if = {
				limit = {
					scope:attacker = {
						agot_is_independent_ruler = no
						vassal_contract_has_flag = vassal_contract_war_override
						liege = scope:defender.liege
					}
				}
				multiply = {
					value = war_declaration_rights_allowed_cost_reduction
					desc = "CB_ATTACKER_VASSAL_CONTRACT"
				}
			}

			if = {
				limit = {
					has_game_rule = no_cost_casus_belli_costs
				}
				multiply = {
					value = 0
					desc = CB_GAME_RULE_NO_COST
				}
			}
		}
	}

	on_declaration = { on_declared_war = yes }

	on_victory_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { # Desc for only one player attacker
					scope:attacker = {
						is_local_player = yes
					}
				}
				desc = independence_war_victory_desc_local_player_attacker_alone
			}
			triggered_desc = { # Desc for only one attacker, player defender
				trigger = {
					scope:defender = {
						is_local_player = yes
					}
				}
				desc = player_independence_war_victory_desc_local_player_defender_attacker_alone
			}
			desc = independence_war_victory_desc_local_player_attacker_alone # Desc for a third party involved
		}
	}

	on_victory = {
		scope:defender = {
			random_owned_story = {
				limit = { story_type = story_agot_mw_crown }
				save_scope_as = mw_crown_story
			}
			random_owned_story = {
				limit = { story_type = story_agot_scenario_dd }
				save_scope_as = scenario_dd_story
			}

			scope:scenario_dd_story ?= { # The Scenario is Resolved
				set_variable = {
					name = agot_dd_scenario
					value = flag:resolved
				}
				set_variable = {
					name = agot_dd_selmy
					value = flag:resolved
				}
			}
		}
		scope:attacker = {
			show_pow_release_message_effect = yes
			add_character_flag = ai_should_not_transfer

			random_owned_story = {
				limit = { story_type = story_agot_mw_rebel }
				save_scope_as = mw_rebel_story # the attacker side must always be the rebel side!
			}
			remove_variable = pre_war_liege
			agot_mw_clear_data_effect = yes

			if = {
				limit = { has_character_flag = planning_an_activity }
				remove_character_flag = planning_an_activity
			}

			scope:mw_rebel_story = {
				every_in_list = {
					variable = mw_rebel_supporter_list

					if = {
						limit = {
							is_alive = yes
							has_variable = pre_war_liege
						}

						scope:mw_crown_story = { add_to_variable_list = { name = mw_temp_rebel_list target = prev } }
					}
					if = {
						limit = { highest_held_title_tier = tier_kingdom }

						remove_variable = pre_war_liege

						hidden_effect = {
							set_variable = {
								name = independence_war_former_liege
								value = scope:defender
							}
							add_truce_both_ways = {
								character = scope:defender
								days = 1825
								war = root.war
								result = victory
							}
							save_scope_as = current_member

							# Struggle Catalyst
							if = {
								limit = {
									catalyst_gave_independence_to_powerful_diff_faith_culture_vassal_preliminary_trigger = {
										CHAR1 = scope:defender
										CHAR2 = scope:current_member
									}
									any_character_struggle = {
										involvement = involved
										activate_struggle_catalyst_secondary_character_involvement_involved_trigger = {
											CATALYST = catalyst_gave_independence_to_powerful_diff_faith_culture_vassal
											CHAR = scope:current_member
										}
									}
								}
								every_character_struggle = {
									involvement = involved
									limit = {
										activate_struggle_catalyst_secondary_character_involvement_either_trigger = {
											CATALYST = catalyst_gave_independence_to_powerful_diff_faith_culture_vassal
											CHAR = scope:current_member
										}
									}
									activate_struggle_catalyst = {
										catalyst = catalyst_gave_independence_to_powerful_diff_faith_culture_vassal
										character = scope:defender
									}
								}
							}
						}
					}
				}
			}

			hidden_effect = {
				set_variable = {
					name = independence_war_former_liege
					value = scope:defender
				}
				add_truce_both_ways = {
					character = scope:defender
					days = 1825
					war = root.war
					result = victory
				}

				create_title_and_vassal_change = {
					type = independency
					save_scope_as = indpendence_change
					add_claim_on_loss = no
				}
				becomes_independent = {
					change = scope:indpendence_change
				}
				resolve_title_and_vassal_change = scope:indpendence_change
			}

			add_prestige = medium_prestige_value
		}

		# Rebuild the realm
		scope:mw_crown_story ?= { agot_mw_rebuild_realm_effect = { REBUILD_MODE = only_roots TARGET = scope:attacker } }
	}

	on_white_peace_desc = {
		first_valid = {
			triggered_desc = {
				trigger = {
					scope:attacker = {
						any_owned_story = {
							story_type = story_agot_mw_rebel
							any_in_list = {
								variable = mw_rebel_supporter_list
								highest_held_title_tier = tier_kingdom
								count > 1
							}
						}
					}
					scope:defender = { is_local_player = yes }
				}
				desc = independence_war_white_peace_defender_desc
			}
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = player_independence_war_white_peace_defender_desc
			}
			triggered_desc = {
				trigger = {
					scope:attacker = {
						is_local_player = yes
					}
				}
				desc = player_independence_war_white_peace_attacker_desc
			}
			desc = player_independence_war_white_peace_desc # AGOT TODO get a new proper desc here
		}
	}

	on_white_peace = {}

	on_defeat_desc = {
		first_valid = {
			triggered_desc = {
				trigger = {
					scope:attacker = {
						any_owned_story = {
							story_type = story_agot_mw_rebel
							any_in_list = {
								variable = mw_rebel_supporter_list
								highest_held_title_tier = tier_kingdom
								count > 1
							}
						}
					}
					scope:defender = { is_local_player = yes }
				}
				desc = independence_defeat_defender_desc
			}
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = player_independence_defeat_defender_desc
			}
			triggered_desc = {
				trigger = {
					scope:attacker = {
						is_local_player = yes
					}
				}
				desc = player_independence_defeat_attacker_desc
			}
			desc = player_independence_war_defeat_desc
		}
	}

	on_defeat = {
		scope:attacker = {
			show_pow_release_message_effect = yes
			hard_imprison_character_effect = {
				TARGET = this
				IMPRISONER = scope:defender
			}
			scope:defender = {
				add_opinion = {
					target = prev
					modifier = vassal_lost_faction_revolt_war
				}
			}
		}
		scope:defender = {
			add_character_flag = {
				flag = recent_independence_faction_war
				years = faction_war_defeat_cooldown
			}
			add_dread = medium_dread_gain
			# Prestige for Defender
			add_prestige_war_defender_effect = {
				PRESTIGE_VALUE = medium_prestige_value
			}
			add_achievement_flag_effect = { FLAG = achievement_know_your_place_flag }

			# Rebuild the realm
			random_owned_story = {
				limit = { story_type = story_agot_mw_crown }
				save_scope_as = mw_crown_story

				agot_mw_rebuild_realm_effect = { REBUILD_MODE = entire TARGET = scope:attacker }
			}
			random_owned_story = {
				limit = { story_type = story_agot_scenario_dd }
				save_scope_as = scenario_dd_story
			}

			scope:scenario_dd_story ?= { # The Scenario is Resolved
				set_variable = {
					name = agot_dd_scenario
					value = flag:resolved
				}
				set_variable = {
					name = agot_dd_selmy
					value = flag:resolved
				}
			}
		}

		scope:attacker = { # Game Over
			trigger_event = {
				id = agot_scenario_dd.0220
			}
		}
		scope:defender = { # Transition of Power - Immediate
			trigger_event = {
				id = agot_scenario_dd.0201
			}
			remove_character_flag = wear_armor
			remove_character_flag = no_hat
		}
		debug_log = "AGOTDD: Duskendale final independence war completed"
	}

	on_invalidated_desc = msg_invalidate_war_title

	check_attacker_inheritance_validity = no
	check_defender_inheritance_validity = no

	on_primary_attacker_death = inherit
	on_primary_defender_death = inherit

	attacker_allies_inherit = yes
	defender_allies_inherit = yes

	transfer_behavior = transfer

	war_name = "AGOT_DUSKENDALE_INDEPENDENCE_WAR_NAME"

	interface_priority = 120

	attacker_wargoal_percentage = 0.8

	max_attacker_score_from_battles = 100
	max_defender_score_from_battles = 50

	defender_wargoal_percentage = 0.0 # A single occupation will do
}

agot_duskendale_claimant_war = { # Iron Throne vs Duskendale
	group = civil_war
	ai_only_against_liege = no
	target_titles = claim
	allow_hostages = no
	white_peace_possible = no

	allowed_for_character =	{}

	allowed_against_character = {}

	target_de_jure_regions_above = yes

	valid_to_start = { always = no }

	should_invalidate = {}

	on_invalidated_desc = msg_invalidate_war_title

	on_declaration = {}

	on_victory_desc = { desc = claimant_faction_war_victory_desc }

	on_victory = {
		scope:attacker = { show_pow_release_message_effect = yes }
		hidden_effect = {
			scope:attacker = {
				add_truce_both_ways = {
					character = scope:defender
					days = 1825
					war = root.war
					result = victory
				}
			}
		}

		on_claimant_faction_war_win_common = {
			TARGET_TITLES = target_titles
			ATTACKER = scope:attacker
			DEFENDER = scope:defender
			CLAIMANT = scope:claimant
		}
		# Transfer of Power
		if = {
			limit = {
				OR = {
					character:Darklyn_47.house ?= {
						any_house_member = {
							is_alive = yes
							is_landed = yes
							any_held_title = {
								NOR = {
									this = title:d_duskendale
									this = title:c_duskendale
								}
							}
						}
					}
					character:Hollard_34.house ?= {
						any_house_member = {
							is_alive = yes
							is_landed = yes
							any_held_title = { NOT = { this = title:c_crownback } }
						}
					}
				}
			}
			agot_dd_duskendale_title_transfer = { HOLDER = scope:claimant }
		}

		scope:defender = {
			every_in_list = {
				variable = mw_rebel_leader_list

				random_owned_story = {
					limit = { story_type = story_agot_mw_rebel }

					set_variable = { name = mw_target value = scope:claimant }
				}
			}

			random_owned_story = {
				limit = { story_type = story_agot_mw_crown }
				make_story_owner = scope:claimant
				save_scope_as = mw_crown_story
			}

			scope:claimant = {
				scope:attacker = {
					random_owned_story = {
						limit = { story_type = story_agot_mw_rebel }
						save_scope_as = mw_rebel_story

						every_in_list = {
							variable = mw_rebel_supporter_list

							limit = {
								is_alive = yes
								has_variable = pre_war_liege
							}

							scope:mw_crown_story = { add_to_variable_list = { name = mw_temp_rebel_list target = prev } }
						}
					}
					scope:mw_crown_story = { agot_mw_rebuild_realm_effect = { REBUILD_MODE = only_roots TARGET = scope:attacker } }
				}
			}
		}

		scope:attacker = {
			random_owned_story = {
				limit = { story_type = story_agot_scenario_dd }
				save_scope_as = scenario_dd_story
			}
		}

		scope:scenario_dd_story ?= { # The Scenario is Resolved
			set_variable = {
				name = agot_dd_scenario
				value = flag:resolved
			}
			set_variable = {
				name = agot_dd_selmy
				value = flag:resolved
			}
		}
	}

	on_white_peace_desc = { desc = claimant_faction_war_white_peace_desc }

	on_white_peace = {}

	on_defeat_desc = { desc = claimant_faction_war_defeat_desc }

	on_defeat = {
		scope:attacker = { show_pow_release_message_effect = yes }
		on_lost_faction_revolt_war = yes

		scope:defender = {
			add_dread = medium_dread_gain
			add_achievement_flag_effect = { FLAG = achievement_know_your_place_flag }
			if = {
				limit = { has_character_flag = planning_an_activity }
				remove_character_flag = planning_an_activity
			}
		}

		scope:attacker = {
			random_owned_story = {
				limit = { story_type = story_agot_scenario_dd }
				save_scope_as = scenario_dd_story
			}
		}

		scope:scenario_dd_story ?= { # The Scenario is Resolved
			set_variable = {
				name = agot_dd_scenario
				value = flag:resolved
			}
			set_variable = {
				name = agot_dd_selmy
				value = flag:resolved
			}
		}
	}

	check_attacker_inheritance_validity = no

	on_primary_attacker_death = inherit # Cannot inherit faction, else this breaks
	on_primary_defender_death = inherit

	transfer_behavior = transfer

	attacker_allies_inherit = yes
	defender_allies_inherit = yes

	war_name = "CLAIMANT_WAR_NAME"

	interface_priority = 80

	use_de_jure_wargoal_only = yes

	attacker_wargoal_percentage = 0.8

	max_attacker_score_from_battles = 50
	max_defender_score_from_battles = 100

	max_ai_diplo_distance_to_title = 500
}

agot_duskendale_iron_throne_war = { # Duskendale Great Council Result
	group = civil_war
	ai_only_against_liege = no
	target_titles = claim
	allow_hostages = no
	white_peace_possible = no

	allowed_for_character =	{}

	allowed_against_character = {}

	target_de_jure_regions_above = yes

	valid_to_start = { always = no }

	should_invalidate = {}

	on_invalidated_desc = msg_invalidate_war_title

	on_declaration = {}

	on_victory_desc = { desc = claimant_faction_war_victory_desc }

	on_victory = {
		scope:attacker = { show_pow_release_message_effect = yes }
		hidden_effect = {
			scope:attacker = {
				add_truce_both_ways = {
					character = scope:defender
					days = 1825
					war = root.war
					result = victory
				}
			}
		}

		on_claimant_faction_war_win_common = {
			TARGET_TITLES = target_titles
			ATTACKER = scope:attacker
			DEFENDER = scope:defender
			CLAIMANT = scope:claimant
		}

		scope:defender = {
			every_in_list = {
				variable = mw_rebel_leader_list

				random_owned_story = {
					limit = { story_type = story_agot_mw_rebel }

					set_variable = { name = mw_target value = scope:claimant }
				}
			}

			random_owned_story = {
				limit = { story_type = story_agot_mw_crown }
				make_story_owner = scope:claimant
				save_scope_as = mw_crown_story
			}

			scope:claimant = {
				scope:attacker = {
					random_owned_story = {
						limit = { story_type = story_agot_mw_rebel }
						save_scope_as = mw_rebel_story

						every_in_list = {
							variable = mw_rebel_supporter_list

							limit = {
								is_alive = yes
								has_variable = pre_war_liege
							}

							scope:mw_crown_story = { add_to_variable_list = { name = mw_temp_rebel_list target = prev } }
						}
					}
					scope:mw_crown_story = { agot_mw_rebuild_realm_effect = { REBUILD_MODE = only_roots TARGET = scope:attacker } }
				}
			}
		}

		scope:attacker = {
			if = {
				limit = { any_owned_story = { story_type = story_agot_scenario_dd } }
				random_owned_story = {
					limit = { story_type = story_agot_scenario_dd }
					save_scope_as = scenario_dd_story
				}
			}
		}
		scope:defender = {
			if = {
				limit = { any_owned_story = { story_type = story_agot_scenario_dd } }
				random_owned_story = {
					limit = { story_type = story_agot_scenario_dd }
					save_scope_as = scenario_dd_story
				}
			}
		}

		scope:scenario_dd_story ?= { # The Scenario is Resolved
			set_variable = {
				name = agot_dd_scenario
				value = flag:resolved
			}
			set_variable = {
				name = agot_dd_selmy
				value = flag:resolved
			}
		}
	}

	on_white_peace_desc = { desc = claimant_faction_war_white_peace_desc }

	on_white_peace = {}

	on_defeat_desc = { desc = claimant_faction_war_defeat_desc }

	on_defeat = {
		scope:attacker = { show_pow_release_message_effect = yes }
		on_lost_faction_revolt_war = yes

		scope:defender = {
			add_dread = medium_dread_gain
			add_achievement_flag_effect = { FLAG = achievement_know_your_place_flag }
			if = {
				limit = { has_character_flag = planning_an_activity }
				remove_character_flag = planning_an_activity
			}
		}

		scope:attacker = {
			if = {
				limit = { any_owned_story = { story_type = story_agot_scenario_dd } }
				random_owned_story = {
					limit = { story_type = story_agot_scenario_dd }
					save_scope_as = scenario_dd_story
				}
			}
		}
		scope:defender = {
			if = {
				limit = { any_owned_story = { story_type = story_agot_scenario_dd } }
				random_owned_story = {
					limit = { story_type = story_agot_scenario_dd }
					save_scope_as = scenario_dd_story
				}
			}
		}

		scope:scenario_dd_story ?= { # The Scenario is Resolved
			set_variable = {
				name = agot_dd_scenario
				value = flag:resolved
			}
			set_variable = {
				name = agot_dd_selmy
				value = flag:resolved
			}
		}
	}

	check_attacker_inheritance_validity = no

	on_primary_attacker_death = inherit # Cannot inherit faction, else this breaks
	on_primary_defender_death = inherit

	transfer_behavior = transfer

	attacker_allies_inherit = yes
	defender_allies_inherit = yes

	war_name = "CLAIMANT_WAR_NAME"

	interface_priority = 80

	use_de_jure_wargoal_only = yes

	attacker_wargoal_percentage = 0.8

	max_attacker_score_from_battles = 50
	max_defender_score_from_battles = 100

	max_ai_diplo_distance_to_title = 500
}

#######################
# CLAIM CB FOR LAAMPS #
#######################

# Prevents the top liege from becoming involved preventing scenarios where the IT just auto-stomps little old laamps.
# This is the same as the claim cb functionally, except only legitimist laamps can use it.

agot_claim_cb = {
	icon = claim_cb
	group = claim
	target_top_liege_if_outside_realm = no
	mutually_exclusive_titles = {
		NOT = {
			# If pushing personal claims, you can press multiple claims with the Divine Right innovation (High Medieval Era).
			trigger_if = {
				limit = {
					scope:attacker = scope:claimant
				}
				scope:attacker = {
					OR = {
						culture = {
							has_innovation = innovation_chronicle_writing
						}
						AND = {
							government_has_flag = government_is_landless_adventurer
							has_realm_law = camp_purpose_legitimists
							has_variable = legitimist_claimed_title
							var:legitimist_claimed_title = {
								OR = {
									holder = scope:defender
									de_jure_liege = scope:defender
								}
							}
						}
					}
				}
			}
			# If pushing claims for someone else, you need the Rightful Ownership innovation to press multiple claims (Late Medieval Era).
			trigger_else = {
				scope:attacker = {
					culture = {
						has_innovation = innovation_divine_right
					}
				}
			}
		}
	}

	# This whole section was already commented out, I just commented it out more to prevent console errors
	#allowed_for_character = {}
	#AGOT Added
	allowed_for_character = {
		NOT = { has_government = ruins_government }
		AND = {
			is_landless_adventurer = yes
			has_realm_law = camp_purpose_legitimists
		}
	}
	
	# allowed_against_character = {
	# 	faith.religion = scope:attacker.faith.religion
	# }

	#AGOT Added
	allowed_against_character = {
		agot_mw_war_valid_during_megawar = yes
		NOT = { has_government = ruins_government }
	}

	#AGOT Added
	valid_to_start = {
		NOT = {
			scope:target = { agot_invalid_war_target = yes }
		}
	}

	# Root is the title
	# scope:claimant is the claimant
	# scope:attacker is the attacker
	# scope:defender is the defender
	is_allowed_claim_title = {
		trigger_if = {
			limit = {
				scope:attacker = {
					is_ai = yes
					ai_has_conqueror_personality = yes
				}
			}
			tier >= tier_duchy
		}
		custom_description = {
			text = "claimant_titles_held_by_you_or_vassal"
			NOR = {
				holder = scope:attacker
				holder = {
					target_is_liege_or_above = scope:attacker
				}
			}
		}
		scope:claimant = {
			NOT = { has_trait = incapable }
			is_hostage = no
			#AGOT Added, none of these people should be valid claimants
			is_human = yes
			NOR = {
				has_trait = kingsguard
				has_trait = nightswatch
				has_trait = maester
				has_trait = septon
			}
			trigger_if = {
				limit = { NOT = { scope:claimant = scope:attacker } } # You can always press your own claims
				is_imprisoned = no
			}
			#religion = scope:attacker.religion
			# claimant must not be at war against defender for this claim already
			custom_description = {
				text = "claimant_already_pressing_their_claim"
				object = root
				NAND = {
					liege = scope:attacker
					any_character_war = {
						casus_belli = {
							any_target_title = {
								this = root
							}
						}
					}
				}
			}
		}
		scope:attacker = {
			#Cannot press claims against your own vassals, as these must be revoked.
			custom_description = {
				text = "claimant_titles_held_by_attacker_vassals"
				NOT = {
					any_vassal_or_below = {
						has_title = root
					}
				}
			}
		}
		trigger_if = {
			limit = {
				NOT = { scope:claimant = scope:attacker } # You can always press your own claims (though the prestige cost might be high)
			}
			trigger_if = {
				limit = {
					is_weak_claimant_due_to_gender_trigger = { FAITH = scope:attacker.faith CHARACTER = scope:claimant }
				}
				trigger_if = {
					limit = {
						scope:claimant = { is_adult = yes }
					}
					save_temporary_scope_as = treat_claim_as_weak
				}
				trigger_else = {
					always = no
				}
			}
			trigger_else_if = {
				limit = {
					scope:claimant = { is_adult = no }
				}
				save_temporary_scope_as = treat_claim_as_weak
			}
			# making the default behavior explicit if no other trigger_(else_)ifs are valid
			trigger_else = {
				always = yes
			}
		}
		trigger_if = {
			limit = { exists = scope:treat_claim_as_weak }
			holder = {
				custom_description = {
					text = "claim_target_position_is_weak"
					object = scope:attacker
					OR = {
						has_trait = incapable
						is_adult = no
						is_weak_claimant_due_to_gender_trigger = { FAITH = scope:attacker.faith CHARACTER = root.holder }
					}
				}
			}
		}
		#AGOT Added
		NOT = {
			agot_invalid_war_target = yes
		}
		#AGOT Disabled
		#Under Byzantine law, a ruler must be unblemished
		# trigger_if = {
		# 	limit = {
		# 		scope:defender.culture = { has_cultural_parameter = physical_disfigurement_blocks_inheritance }
		# 	}
		# 	scope:claimant = {
		# 		custom_description = {
		# 			text = "byzantine_claimant_is_disfigured"
		# 			object = scope:claimant
		# 			is_eunuch_trigger = no
		# 			NOR = {
		# 				has_trait = incapable
		# 				has_trait = blind
		# 				has_trait = disfigured
		# 				has_trait = maimed
		# 				has_trait = one_eyed
		# 				has_trait = one_legged
		# 				has_trait = clubfooted
		# 				has_trait = hunchbacked
		# 				has_trait = dwarf
		# 			}
		# 		}
		# 	}
		# }
		#AGOT Disabled
		#Under Byzantine law, a ruler must be able to produce children.
		# trigger_if = {
		# 	limit = {
		# 		scope:defender.culture = { has_cultural_parameter = physical_disfigurement_blocks_inheritance }
		# 	}
		# 	scope:claimant = {
		# 		custom_description = {
		# 			text = "byzantine_claimant_is_celibate"
		# 			object = scope:defender
		# 			is_eunuch_trigger = no
		# 			NOR = {
		# 				has_trait = celibate
		# 			}
		# 		}
		# 	}
		# }
	}

	allowed_for_character_display_regardless = {
		#If you're landless, you need the Legitimist camp purpose
		trigger_if = {
			limit = {
				scope:attacker = {
					government_has_flag = government_is_landless_adventurer
				}
			}
			scope:attacker = {
				has_realm_law = camp_purpose_legitimists
			}
		}
	}

	cost = {
		piety = {
			value = 0
			add = common_cb_impious_piety_cost
		}
		prestige = {
			value = 0
			add = claim_cb_prestige_cost
			multiply = common_cb_prestige_cost_multiplier

			if = {
				limit = {
					scope:attacker = {
						has_character_flag = temp_no_claim_war_cost
					}
				}
				multiply = {
					value = 0
					desc = "not_imprisoned_filter" # Says 'free'
				}
			}

			# LEGITIMACY AFFECTS COST
			multiply = {
				value = {
					value = 0
					scope:attacker = {
						if = {
							limit = { has_legitimacy_flag = reduced_claim_cb_cost }
							add = 0.5 
						}
						else_if = {
							limit = { has_legitimacy_flag = very_reduced_claim_cb_cost }
							add = 0.25 
						}
						else_if = {
							limit = { has_legitimacy_flag = extra_reduced_claim_cb_cost }
							add = 0.15 
						}
						else = {
							add = 1
						}
					}
				}
				desc = legitimacy_high_modifier_tt
			}
			multiply = {
				value = {
					value = 0
					scope:attacker = {
						if = {
							limit = { has_legitimacy_flag = massively_increased_claim_cb_cost }
							add = 2.5
						}
						else_if = {
							limit = { has_legitimacy_flag = very_increased_claim_cb_cost }
							add = 2
						}
						else_if = {
							limit = { has_legitimacy_flag = increased_claim_cb_cost }
							add = 1.5
						}
						else = {
							add = 1
						}
					}
				}
				desc = legitimacy_low_modifier_tt
			}
		}
	}

	target_titles = claim
	#target_title_tier = all

	on_declaration = {
		on_declared_war = yes
		if = {
			limit = {
				scope:defender = { is_sibling_of = scope:attacker }
			}
			scope:attacker = {
				add_achievement_flag_effect = { FLAG = achievement_bad_blood_flag }
			}
		}
	}

	should_invalidate = {
		OR = {
			NOT = {
				any_in_list = {
					list = target_titles
					any_in_de_jure_hierarchy = {
						tier >= tier_county
						exists = holder
						holder = {
							OR = {
								this = scope:defender
								target_is_liege_or_above = scope:defender
							}
						}
					}
				}
			}
			AND = { 
				NOT = { scope:claimant = scope:attacker } 
				scope:claimant = {
					OR = {
						is_alive = no 
						NOR = { 
							is_vassal_or_below_of = scope:attacker 
							is_courtier_of = scope:attacker 
						}
					}
				}
			} 
		}
	}

	on_invalidated_desc = {
		first_valid = {
			triggered_desc = {
				trigger = {
					NOT = { scope:claimant = scope:attacker } 
					scope:claimant = { is_alive = no }
				}
				desc = msg_claim_war_invalidated_claimant_unavailable_dead_message
			}
			triggered_desc = {
				trigger = {
					scope:claimant = {
						NOR = { 
							this = scope:attacker 
							NOR = { 
								is_vassal_or_below_of = scope:attacker 
								is_courtier_of = scope:attacker 
							}
						}
					}
				}
				desc = msg_claim_war_invalidated_claimant_unavailable_not_vassal_message
			}
			desc = msg_claim_war_invalidated_message
		}
	}
	
	on_invalidated = {
	}

	on_victory_desc = {
		first_valid = {
			triggered_desc = {
				trigger = {
					scope:claimant = { is_local_player = yes }
				}
				desc = claim_cb_victory_desc_attacker_claimant
			}
			triggered_desc = {
				trigger = { scope:attacker = { is_local_player = yes } }
				desc = claim_cb_victory_desc_attacker
			}
			desc = claim_cb_victory_desc
		}
	}

	on_victory = {
		scope:attacker = {
			#AGOT Disabled
			#if = {
			#	limit = {
			#		is_ai = no
			#		has_realm_law = camp_purpose_legitimists
			#		any_in_list = {
			#			list = target_titles
			#			tier >= tier_kingdom
			#		}
			#	}
			#	add_achievement_global_variable_effect = {
			#		VARIABLE = finished_birthright_achievement
			#		VALUE = yes
			#	}
			#}
			if = {
				limit = {
					is_landless_adventurer = yes
				}
				hidden_effect = {
					if = {
						limit = {
							NOT = { has_trait = adventurer }
						}
						add_trait = adventurer
					}
					save_scope_as = the_adventurer
					every_courtier = {
						limit = {
							is_human = yes
						}
						set_variable = {
							name = former_camp_leader
							value = scope:the_adventurer
						}
						add_trait = adventurer_follower
					}
				}
			}
		}
	
		scope:attacker = { show_pow_release_message_effect = yes }

		# Legitimacy
		add_legitimacy_attacker_victory_effect = yes

		# Influence
		add_influence_attacker_victory_effect = yes

		#EP2 Accolade glory gain from winning against higher ranked enemy
		scope:attacker = { accolade_attacker_war_end_glory_gain_med_effect = yes }

		scope:defender ?= {
			if = {
				limit = {
					is_independent_ruler = yes
					government_allows = administrative
					primary_title = { is_in_list = target_titles }
				}
				every_held_title = {
					limit = {
						is_noble_family_title = no
						tier >= tier_county
					}
					add_to_list = target_titles
				}
			}
		}

		create_title_and_vassal_change = {
			type = conquest_claim
			save_scope_as = change
			add_claim_on_loss = yes
		}

		# EP3 Laamp possibility warning
		scope:defender = { ep3_war_loss_adventurer_tt_effect = yes }
		
		# Create a claim CB which is executed to handle title/vassal changes, in addition to being used to calculate Prestige awards for war participants.
		setup_claim_cb = {
			titles = target_titles
			attacker = scope:attacker
			defender = scope:defender
			claimant = scope:claimant
			change = scope:change
		}

		resolve_title_and_vassal_change = scope:change

		if = {
			limit = {
				NOT = { scope:claimant = scope:attacker }
				scope:claimant.primary_title.tier < scope:attacker.primary_title.tier
				scope:claimant = {
					NOT = { target_is_liege_or_above = scope:attacker }
				}
			}

			create_title_and_vassal_change = {
				type = conquest_claim
				save_scope_as = change_two
				add_claim_on_loss = yes
			}
			scope:claimant = {
				change_liege = {
					liege = scope:attacker
					change = scope:change_two
				}
			}
			resolve_title_and_vassal_change = scope:change_two
		}

		if = {
			limit = {
				NOT = { scope:claimant = scope:attacker }
				scope:attacker = {
					can_add_hook = {
					  	type = favor_hook
					  	target = scope:claimant
					}
				}
			}
			scope:attacker = {
				add_hook = {
		  			target = scope:claimant
		  			type = favor_hook
		 		}
			}
		}

		# Attacker gets Prestige Experience, Defender loses Prestige, all other participants gain Prestige based on their war contribution.
		modify_all_participants_fame_values = {
			WINNER = scope:attacker
			LOSER = scope:defender
			FAME_BASE = scope:cb_prestige_factor # Set by 'setup_claim_cb'
			IS_RELIGIOUS_WAR = no
			WINNER_FAME_SCALE = 10
			LOSER_FAME_SCALE = -10
			WINNER_ALLY_FAME_SCALE = 10
			LOSER_ALLY_FAME_SCALE = 10
		}

		# truce
		add_truce_attacker_victory_effect = yes

		# FP1: note the victory for future memorialisation via stele (if applicable).
		scope:attacker = { fp1_remember_recent_conquest_victory_effect = yes }
	}

	on_white_peace_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = claim_cb_white_peace_desc_defender
			}
			desc = claim_cb_white_peace_desc
		}
		
	}

	on_white_peace = {
		scope:attacker = {
			show_pow_release_message_effect = yes
			stress_impact = {
 				ambitious = medium_stress_impact_gain
 				arrogant = medium_stress_impact_gain
 			}
		}

		#EP2 accolade glory gain for defender doing alright
		scope:defender = { accolade_defender_war_end_glory_gain_low_effect = yes }

		# press claims
		every_in_list = {
			list = target_titles
			if = {
				limit = { scope:claimant = { has_weak_claim_on = prev } }
				scope:claimant = {
					make_claim_strong = prev
				}
			}
		}

		# Create an 'helper' claim CB which we won't execute, but can use to determine how much Prestige should be given to war participants.
		setup_claim_cb = {
			titles = target_titles
			attacker = scope:attacker
			defender = scope:defender
			claimant = scope:claimant
			victory = no
		}
		# Prestige loss for the attacker
		scope:attacker = {
			add_prestige = {
				value = scope:cb_prestige_factor # Set by 'setup_claim_cb'
				multiply = -5.0
			}
		}
		# Allies on both sides get full prestige value for helping in the war, based on their war participation.
		modify_allies_of_participants_fame_values = {
			WINNER = scope:attacker
			FAME_BASE = scope:cb_prestige_factor # Set by 'setup_claim_cb'
			IS_RELIGIOUS_WAR = no
			WINNER_ALLY_FAME_SCALE = 10
			LOSER_ALLY_FAME_SCALE = 10
		}
		# Defender neither gains nor loses any prestige.
		scope:defender = {
			stress_impact = {
 				arrogant = medium_stress_impact_gain
 			}
		}

		if = {
			limit = {
				NOT = { scope:claimant = scope:attacker }
				scope:attacker = {
					can_add_hook = {
					  	type = favor_hook
					  	target = scope:claimant
					}
				}
			}
			scope:attacker = {
				add_hook = {
		  			target = scope:claimant
		  			type = favor_hook
		 		}
			}
		}

		# Truce
		add_truce_white_peace_effect = yes
	}

	on_defeat_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = claim_cb_defeat_desc_defender
			}
			triggered_desc = {
				trigger = { scope:claimant = { is_local_player = yes } }
				desc = claim_cb_defeat_desc_attacker_claimant
			}
			triggered_desc = {
				trigger = { scope:attacker = { is_local_player = yes } }
				desc = claim_cb_defeat_desc_attacker
			}
			desc = claim_cb_defeat_desc
		}
		
	}

	on_defeat = {
		scope:attacker = { show_pow_release_message_effect = yes }
		
		# Legitimacy
		add_legitimacy_attacker_defeat_effect = yes

		# Influence
		add_influence_attacker_defeat_effect = yes

		#EP2 accolade glory gain for winning against higher ranked enemy
		scope:defender = { accolade_defender_war_end_glory_gain_med_effect = yes }

		# lose claims
		every_in_list = {
			list = target_titles
			scope:claimant = {
				remove_claim = prev
			}
		}

		if = {
			limit = {
				NOT = { scope:claimant = scope:attacker }
				scope:attacker = {
					can_add_hook = {
					  	type = favor_hook
					  	target = scope:claimant
					}
				}
			}
			scope:attacker = {
				add_hook = {
		  			target = scope:claimant
		  			type = favor_hook
		 		}
			}
		}

		# Attacker pays gold to the defender as reparations.
		scope:attacker = {
			pay_short_term_gold_reparations_effect = {
				GOLD_VALUE = 3
			}
		}
		# Create an 'helper' claim CB which we won't execute, but can use to determine how much Prestige should be given to war participants.
		setup_claim_cb = {
			titles = target_titles
			attacker = scope:attacker
			defender = scope:defender
			claimant = scope:claimant
			victory = no
		}
		# Attacker loses Prestige, all other war participants gain Prestige (Defender gains full prestige, all allies on both sides gain based on war contribution).
		modify_all_participants_fame_values = {
			WINNER = scope:defender
			LOSER = scope:attacker
			FAME_BASE = scope:cb_prestige_factor # Set by 'setup_claim_cb'
			IS_RELIGIOUS_WAR = no
			WINNER_FAME_SCALE = scale_10_war_defender_win
			LOSER_FAME_SCALE = -10
			WINNER_ALLY_FAME_SCALE = 10
			LOSER_ALLY_FAME_SCALE = 10
		}

		# Truce
		add_truce_attacker_defeat_effect = yes

		scope:attacker = {
			save_temporary_scope_as = loser
		}
		on_lost_aggression_war_discontent_loss = yes
	}

	on_primary_attacker_death = inherit
	on_primary_defender_death = inherit

	transfer_behavior = transfer

	attacker_allies_inherit = yes
	defender_allies_inherit = yes

	war_name = "CLAIM_WAR_NAME"
	my_war_name = "CLAIM_WAR_NAME_MY"
	war_name_base = "CLAIM_WAR_NAME_BASE"
	cb_name = "CLAIM_CB_NAME"
	interface_priority = 60

	should_show_war_goal_subview = yes

	attacker_wargoal_percentage = 0.8
	
	max_defender_score_from_occupation = 150
	max_attacker_score_from_occupation = 150

	max_ai_diplo_distance_to_title = 1000

	ai_score_mult = {
		#There is no fighting in the admin room!
		if = {
			limit = {
				scope:attacker = {
					government_has_flag = government_is_feudal
					liege ?= {
						government_has_flag = government_is_administrative
					}
				}
				scope:defender = {
					government_has_flag = government_is_administrative
					liege ?= scope:attacker.liege
				}
			}
			multiply = 0.4
		}
		#AGOT Disabled
		##Declaring war on the frankokratia leader can really ruin the whole thing
		#if = {
		#	limit = {
		#		scope:defender = {
		#			any_owned_story = {
		#				story_type = frankokratia_story
		#				NOT = { has_variable = franko_war_complete }
		#			}
		#		}
		#	}
		#	multiply = 0
		#}
	}
}

##########
# The Peake Uprising
#########
peake_uprising = {
	icon = dissolution_war
	group = civil_war
	ai_only_against_liege = yes
	allow_hostages = yes
	target_titles = all
	target_title_tier = all
	allowed_for_character = {
		always = no
	}

	allowed_against_character = {
		scope:attacker = {
			liege = scope:defender
		}
	}

	target_de_jure_regions_above = yes

	white_peace_possible = no

	valid_to_start = {
	}

	should_invalidate = {
	}

	on_declaration = {
		#on_declared_war = yes
		# save the initial target and their tier for conditioning the depose effect
		if = {
			limit = { NOT = { exists = scope:attacker.var:initial_target } }
			scope:attacker = {
				set_variable = {
					name = initial_target
					value = scope:defender
				}

				set_variable = {
					name = target_tier
					value = scope:defender.primary_title.tier
				}
			}
		}
	}

	on_victory_desc = {
		
	}

	on_victory = {
		scope:attacker = { show_pow_release_message_effect = yes }

		#EP2 Accolade glory gain from winning against higher ranked enemy
		scope:attacker = { accolade_attacker_war_end_glory_gain_med_effect = yes }

		scope:attacker = {
			add_prestige = 1500
			get_title = title:c_whitegrove
			get_title = title:c_dunstonbury
		}
		create_title_and_vassal_change = {
			type = granted
			save_scope_as = change
			add_claim_on_loss = no
		}

		title:d_cockleswhent = {
			change_title_holder_include_vassals = {
				holder = scope:attacker
				change = scope:change
			}
		}
		resolve_title_and_vassal_change = scope:change

		scope:defender = {
			if = {
				limit = { has_realm_law = crown_authority_1 }
				add_realm_law = crown_authority_0
			}
			if = {
				limit = { has_realm_law = crown_authority_2 }
				add_realm_law = crown_authority_1
			}
			if = {
				limit = { has_realm_law = crown_authority_3 }
				add_realm_law = crown_authority_2
			}
			
			add_prestige = -1000

			every_character_war = {
				limit = {
					is_attacker = scope:attacker
					is_defender = scope:defender
				}
				every_war_attacker = {
					if = {
						limit = {
							can_add_hook = {
								type = favor_hook
								target = scope:defender
							}
						}
						add_hook = {
							type = favor_hook
							target = scope:defender
						}
					}
				}
			}

			add_character_flag = {
				flag = recent_liberty_faction_war
				years = liberty_war_victory_cooldown
			}
		}

		hidden_effect = {
			scope:attacker = {
				add_truce_both_ways = {
					character = scope:defender
					days = 1825
					war = root.war
					result = victory
				}
			}
		}

	}

	on_white_peace_desc = {
	}

	on_white_peace = {
	}

	on_defeat_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = refused_liege_demand_war_defeat_desc_defender
			}
			desc = refused_liege_demand_war_defeat_desc
		}

	}

	on_defeat = {
		scope:attacker = { 
			show_pow_release_message_effect = yes 
			destroy_title = title:d_palemarch
		}
		title:d_orchard_way.holder = {
			get_title = title:c_burkley
		}
		scope:defender = {
			add_character_flag = {
				flag = recent_liberty_faction_war
				years = 10
			}
			add_dread = medium_dread_gain
		}
		on_lost_request_revolt_war = yes
	}

	on_invalidated_desc = msg_invalidate_war_title

	check_attacker_inheritance_validity = no

	on_primary_attacker_death = inherit
	on_primary_defender_death = inherit

	transfer_behavior = transfer

	attacker_allies_inherit = yes
	defender_allies_inherit = yes

	war_name = "PEAKE_UPRISING_WAR"

	interface_priority = 80

	use_de_jure_wargoal_only = yes

	attacker_wargoal_percentage = 0.8

	max_attacker_score_from_battles = 100
	max_defender_score_from_battles = 50

	max_defender_score_from_occupation = 150
	max_attacker_score_from_occupation = 150

	max_ai_diplo_distance_to_title = 500
}