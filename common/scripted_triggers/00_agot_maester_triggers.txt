############################
##### MAESTER TRIGGERS #####
############################

agot_maester_culture_trigger = {
	OR = {
		culture = { has_cultural_pillar = heritage_andal }
		culture = { has_cultural_pillar = heritage_rhoynish }
		culture = { has_cultural_pillar = heritage_first_man }
	}
}

agot_is_maester_candidate = {
	#Trigger for random adult maester candidates
	culture = {
		has_innovation = innovation_maesters
	}
	culture = { agot_is_wildling_culture = no }

	is_lowborn = yes
	is_ruler = no
	is_landed = no
	age < 30
	learning > 10
	has_any_court_position = no
	is_knight = no
	is_available_ai = yes
	is_adult = yes
	is_male = yes
	NOT = {
		any_child = {
			age < 16
		}
	}

	NOR = {
		has_trait = nightswatch
		has_trait = kingsguard
		has_trait = maester
		has_trait = devoted
		has_trait = septon
	}
	AND = {
		exists = liege_or_court_owner
		liege_or_court_owner.capital_province ?= {
			geographical_region = world_westeros_seven_kingdoms
		}
	}
}

agot_is_maester = {
	has_trait_xp = {
		trait = maester
		value = 100
	}
}

agot_any_maester_in_citadel = {
	global_var:citadel_title.holder ?= {
		OR = {
			any_courtier_or_guest = {
				has_trait_xp = {
					trait = maester
					value = 100
				}
				NOT = { root = this }
			}
			AND = { #Seneschal counts too
				has_trait_xp = {
					trait = maester
					value = 100
				}
				NOT = { root = this }
			}
		}
	}
}

agot_is_archmaester_candidate = {
	AND = {
		has_trait_xp = {
			trait = maester
			value = 100
		}
		age > 15
	}

	NOR = {
		liege_or_court_owner ?= {
			is_at_war = yes
		}
		has_trait = archmaester
		has_inactive_trait = grandmaester
		has_trait = nightswatch
	}
}

agot_is_field_qualified = {
	trigger_if = { # Black Iron
		limit = {
			scope:old_archmaester = {
				has_inactive_trait = archmaester_black_iron
			}
		}
		has_character_flag = black_iron_candidate
	}
	trigger_else_if = { # Brass
		limit = {
			scope:old_archmaester = {
				has_inactive_trait = archmaester_brass
			}
		}
		has_character_flag = brass_candidate
	}
	trigger_else_if = { # Bronze
		limit = {
			scope:old_archmaester = {
				has_inactive_trait = archmaester_bronze
			}
		}
		has_character_flag = bronze_candidate
	}
	trigger_else_if = { # Copper
		limit = {
			scope:old_archmaester = {
				has_inactive_trait = archmaester_copper
			}
		}
		has_character_flag = copper_candidate
	}
	trigger_else_if = { # Electrum
		limit = {
			scope:old_archmaester = {
				has_inactive_trait = archmaester_electrum
			}
		}
		has_character_flag = electrum_candidate
	}
	trigger_else_if = { # Yellow Gold
		limit = {
			scope:old_archmaester = {
				has_inactive_trait = archmaester_yellow_gold
			}
		}
		has_character_flag = yellow_gold_candidate
	}
	trigger_else_if = { # Red Gold
		limit = {
			scope:old_archmaester = {
				has_inactive_trait = archmaester_red_gold
			}
		}
		has_character_flag = red_gold_candidate
	}
	trigger_else_if = { # Iron
		limit = {
			scope:old_archmaester = {
				has_inactive_trait = archmaester_iron
			}
		}
		has_character_flag = iron_candidate
	}
	trigger_else_if = { # Lead
		limit = {
			scope:old_archmaester = {
				has_inactive_trait = archmaester_lead
			}
		}
		has_character_flag = lead_candidate
	}
	trigger_else_if = { # Pewter
		limit = {
			scope:old_archmaester = {
				has_inactive_trait = archmaester_pewter
			}
		}
		has_character_flag = pewter_candidate
	}
	trigger_else_if = { # Platinum
		limit = {
			scope:old_archmaester = {
				has_inactive_trait = archmaester_platinum
			}
		}
		has_character_flag = platinum_candidate
	}
	trigger_else_if = { # Silver
		limit = {
			scope:old_archmaester = {
				has_inactive_trait = archmaester_silver
			}
		}
		has_character_flag = silver_candidate
	}
	trigger_else_if = { # Steel
		limit = {
			scope:old_archmaester = {
				has_inactive_trait = archmaester_steel
			}
		}
		has_character_flag = steel_candidate
	}
	trigger_else_if = { # Tin
		limit = {
			scope:old_archmaester = {
				has_inactive_trait = archmaester_tin
			}
		}
		has_character_flag = tin_candidate
	}
	trigger_else_if = { # Bismuth
		limit = {
			scope:old_archmaester = {
				has_inactive_trait = archmaester_bismuth
			}
		}
		has_character_flag = bismuth_candidate
	}
	trigger_else_if = { # Cast Iron
		limit = {
			scope:old_archmaester = {
				has_inactive_trait = archmaester_cast_iron
			}
		}
		has_character_flag = cast_iron_candidate
	}
	trigger_else_if = { # Antimony
		limit = {
			scope:old_archmaester = {
				has_inactive_trait = archmaester_antimony
			}
		}
		has_character_flag = antimony_candidate
	}
	trigger_else_if = { # Nickel
		limit = {
			scope:old_archmaester = {
				has_inactive_trait = archmaester_nickel
			}
		}
		has_character_flag = nickel_candidate
	}
	trigger_else_if = { # White Copper
		limit = {
			scope:old_archmaester = {
				has_inactive_trait = archmaester_white_copper
			}
		}
		has_character_flag = white_copper_candidate
	}
	trigger_else_if = { # Aluminum
		limit = {
			scope:old_archmaester = {
				has_inactive_trait = archmaester_aluminum
			}
		}
		has_character_flag = aluminum_candidate
	}
	trigger_else_if = { # Zinc
		limit = {
			scope:old_archmaester = {
				has_inactive_trait = archmaester_zinc
			}
		}
		has_character_flag = zinc_candidate
	}
	trigger_else_if = { # Valyrian_steel
		limit = {
			scope:old_archmaester = {
				has_inactive_trait = archmaester_vs
			}
		}
		has_character_flag = vs_candidate
	}
	trigger_else = {
		always = no
	}
}

agot_is_field_qualified_lesser = {
	trigger_if = { # Black Iron
		limit = {
			scope:old_archmaester = {
				has_inactive_trait = archmaester_black_iron
			}
		}
		has_character_flag = black_iron_candidate_lesser
	}
	trigger_else_if = { # Brass
		limit = {
			scope:old_archmaester = {
				has_inactive_trait = archmaester_brass
			}
		}
		has_character_flag = brass_candidate_lesser
	}
	trigger_else_if = { # Bronze
		limit = {
			scope:old_archmaester = {
				has_inactive_trait = archmaester_bronze
			}
		}
		has_character_flag = bronze_candidate_lesser
	}
	trigger_else_if = { # Copper
		limit = {
			scope:old_archmaester = {
				has_inactive_trait = archmaester_copper
			}
		}
		has_character_flag = copper_candidate_lesser
	}
	trigger_else_if = { # Electrum
		limit = {
			scope:old_archmaester = {
				has_inactive_trait = archmaester_electrum
			}
		}
		has_character_flag = electrum_candidate_lesser
	}
	trigger_else_if = { # Yellow Gold
		limit = {
			scope:old_archmaester = {
				has_inactive_trait = archmaester_yellow_gold
			}
		}
		has_character_flag = yellow_gold_candidate_lesser
	}
	trigger_else_if = { # Red Gold
		limit = {
			scope:old_archmaester = {
				has_inactive_trait = archmaester_red_gold
			}
		}
		has_character_flag = red_gold_candidate_lesser
	}
	trigger_else_if = { # Iron
		limit = {
			scope:old_archmaester = {
				has_inactive_trait = archmaester_iron
			}
		}
		has_character_flag = iron_candidate_lesser
	}
	trigger_else_if = { # Lead
		limit = {
			scope:old_archmaester = {
				has_inactive_trait = archmaester_lead
			}
		}
		has_character_flag = lead_candidate_lesser
	}
	trigger_else_if = { # Pewter
		limit = {
			scope:old_archmaester = {
				has_inactive_trait = archmaester_pewter
			}
		}
		has_character_flag = pewter_candidate_lesser
	}
	trigger_else_if = { # Platinum
		limit = {
			scope:old_archmaester = {
				has_inactive_trait = archmaester_platinum
			}
		}
		has_character_flag = platinum_candidate_lesser
	}
	trigger_else_if = { # Silver
		limit = {
			scope:old_archmaester = {
				has_inactive_trait = archmaester_silver
			}
		}
		has_character_flag = silver_candidate_lesser
	}
	trigger_else_if = { # Steel
		limit = {
			scope:old_archmaester = {
				has_inactive_trait = archmaester_steel
			}
		}
		has_character_flag = steel_candidate_lesser
	}
	trigger_else_if = { # Tin
		limit = {
			scope:old_archmaester = {
				has_inactive_trait = archmaester_tin
			}
		}
		has_character_flag = tin_candidate_lesser
	}
	trigger_else_if = { # Bismuth
		limit = {
			scope:old_archmaester = {
				has_inactive_trait = archmaester_bismuth
			}
		}
		has_character_flag = bismuth_candidate_lesser
	}
	trigger_else_if = { # Cast Iron
		limit = {
			scope:old_archmaester = {
				has_inactive_trait = archmaester_cast_iron
			}
		}
		has_character_flag = cast_iron_candidate_lesser
	}
	trigger_else_if = { # Antimony
		limit = {
			scope:old_archmaester = {
				has_inactive_trait = archmaester_antimony
			}
		}
		has_character_flag = antimony_candidate_lesser
	}
	trigger_else_if = { # Nickel
		limit = {
			scope:old_archmaester = {
				has_inactive_trait = archmaester_nickel
			}
		}
		has_character_flag = nickel_candidate_lesser
	}
	trigger_else_if = { # White Copper
		limit = {
			scope:old_archmaester = {
				has_inactive_trait = archmaester_white_copper
			}
		}
		has_character_flag = white_copper_candidate_lesser
	}
	trigger_else_if = { # Aluminum
		limit = {
			scope:old_archmaester = {
				has_inactive_trait = archmaester_aluminum
			}
		}
		has_character_flag = aluminum_candidate_lesser
	}
	trigger_else_if = { # Zinc
		limit = {
			scope:old_archmaester = {
				has_inactive_trait = archmaester_zinc
			}
		}
		has_character_flag = zinc_candidate_lesser
	}
	trigger_else_if = { # Valyrian_steel
		limit = {
			scope:old_archmaester = {
				has_inactive_trait = archmaester_vs
			}
		}
		has_character_flag = vs_candidate_lesser
	}
	trigger_else = {
		always = no
	}
}

maester_available_trigger = {
	exists = court_owner
	court_owner = {
		employs_court_position = maester_court_position
		any_court_position_holder = {
			type = maester_court_position
			is_physically_able = yes
		}
	}
}

can_be_maester_of = {
	is_courtier_of = $EMPLOYER$
	is_adult = yes
	basic_is_available_ai = yes
	NOT = { has_trait = incapable }
}

can_punish_maester = {
	save_temporary_scope_as = physician_punisher
	$PHYSICIAN$ = {
		is_alive = yes
		target_is_liege_or_above = scope:physician_punisher
	}
}


maester_can_fail_on_purpose_trigger = {
	scope:physician = {
		dread_modified_ai_boldness = {
			dreaded_character = scope:sick_character
			value > 0
		}
	}
	OR = {
		reverse_opinion = {
			target = scope:physician
			value < 0
		}
		has_relation_rival = scope:physician
		has_relation_potential_rival = scope:maester
	}
	NOT = { scope:physician = scope:sick_character }
}