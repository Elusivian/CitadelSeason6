# kingsguard_scheme = {

# 	skill = diplomacy
# 	desc = sway_desc_general
# 	# cooldown = { months = 2 }
# 	is_secret = no
# 	uses_agents = no
# 	power_per_skill_point = 8
# 	spymaster_power_per_skill_point = 0
# 	resistance_per_skill_point = 0
# 	spymaster_resistance_per_skill_point = 0
# 	uses_resistance = no
# 	minimum_progress_chance = 40
# 	maximum_progress_chance = 95
# 	minimum_success = 20
# 	maximum_success = 95
# 	icon = icon_scheme_personal

# 	allow = {
# 		is_adult = yes
# 		is_imprisoned = no

# 		any_close_or_extended_family_member = {
# 			has_character_modifier = training_for_kingsguard
# 		}

# 		scope:target = {
# 			is_adult = yes
# 			is_imprisoned = no
# 			this = scope:owner.top_liege
# 			primary_title = {
# 				has_variable = kingsguard
# 			}
# 		}

# 		#AI blockers
# 		trigger_if = {
# 			limit = { is_ai = yes }

# 			scope:target = {
# 				OR = {
# 					opinion = {
# 						target = scope:owner
# 						value <= 50
# 					}
# 					AND = {
# 						is_vassal_of = scope:owner
# 						is_a_faction_member = yes
# 					}
# 				}
# 				trigger_if = { #So players don't get spammed by AI sway
# 					limit = {
# 						is_ai = no
# 					}
# 					NOT = {
# 						any_targeting_scheme = {
# 							scheme_type = kingsguard_scheme
# 						}
# 					}
# 				}
# 			}
# 		}
# 	}

# 	valid = {
# 		is_incapable = no
# 		NOT = { is_at_war_with = scope:target }
# 		scope:target = {
# 			OR = {
# 				exists = location
# 				in_diplomatic_range = scope:owner
# 			}
# 		}

# 		scope:target = {
# 			primary_title = {
# 				has_variable = kingsguard
# 			}
# 		}
# 	}

# 	base_success_chance = {
# 		base = 50
# 		#SCHEME OWNER#
# 		#Language
# 		modifier = {
# 			add = 8
# 			scope:owner = { has_trait = diplomat }
# 			desc = SCHEME_BEFRIEND_MY_LIFESTYLE
# 		}
# 		compare_modifier = {
# 			desc = sway_my_diplomacy
# 			target = scope:owner
# 			value = diplomacy
# 			multiplier = 2
# 		}

# 		#Rival penalty
# 		modifier = {
# 			add = -30
# 			desc = sway_my_rival
# 			scope:owner = { has_relation_rival = scope:target }
# 		}

# 		#Rank tier difference (landed target/target whose liege doesn't care)
# 		modifier = { #1 lower rank
# 			add = -10
# 			desc = "LOWER_RANK_THAN_SCHEME_TARGET"
# 			scope:target = {
# 				personal_scheme_success_compare_target_liege_tier_trigger = no
# 			}
# 			scope:owner = {
# 				tier_difference = {
# 					target = scope:target
# 					value = -1
# 				}
# 			}
# 		}
# 		modifier = { #2 lower rank
# 			add = -25
# 			desc = "LOWER_RANK_THAN_SCHEME_TARGET"
# 			scope:target = {
# 				personal_scheme_success_compare_target_liege_tier_trigger = no
# 			}
# 			scope:owner = {
# 				tier_difference = {
# 					target = scope:target
# 					value = -2
# 				}
# 			}
# 		}
# 		modifier = { #3 or less lower rank
# 			add = -50
# 			desc = "LOWER_RANK_THAN_SCHEME_TARGET"
# 			scope:target = {
# 				personal_scheme_success_compare_target_liege_tier_trigger = no
# 			}
# 			scope:owner = {
# 				tier_difference = {
# 					target = scope:target
# 					value <= -3
# 				}
# 			}
# 		}

# 		# Diarchs are better at schemes within their liege's realm
# 		diarch_scheming_within_realm_bonus_modifier = yes

# 		# Thicker Than Water Perk
# 		modifier = {
# 			add = thicker_than_water_bonus
# 			desc = BEFRIEND_THICKER_THAN_WATER_PERK_DESC
# 			scope:owner = {
# 				has_perk = thicker_than_water_perk
# 			}
# 			scope:target = {
# 				is_close_or_extended_family_of = scope:owner
# 			}
# 		}

# 		#Family Feud
# 		house_feud_sway_scheme_success_modifier = yes
# 	}

# 	on_ready = {
# 		random = {
# 			chance = scope:scheme.scheme_success_chance

# 			save_scope_value_as = {
# 				name = scheme_successful
# 				value = yes
# 			}
# 		}
# 		scope:owner = {
# 			if = {
# 				limit = {
# 					exists = scope:scheme_successful
# 				}
# 				trigger_event = {
# 					on_action = sway_success
# 				}
# 			}
# 			else = {
# 				trigger_event = {
# 					on_action = sway_failure
# 				}
# 			}
# 		}
# 	}

# 	on_invalidated = {
# 		scheme_target = {
# 			save_scope_as = target
# 		}
# 		scheme_owner = {
# 			save_scope_as = owner
# 		}
# 		if = {
# 			limit = {
# 				scope:target = { is_alive = no }
# 			}
# 			scope:owner = {
# 				send_interface_toast = {
# 					title = sway_invalidated_title
# 					left_icon = scope:target
# 					custom_tooltip = sway_invalidated_dead
# 				}
# 			}
# 		}
# 		else_if = {
# 			limit = {
# 				scope:owner = {
# 					is_at_war_with = scope:target
# 				}
# 			}
# 			scope:owner = {
# 				send_interface_toast = {
# 					title = sway_invalidated_title
# 					left_icon = scope:target
# 					custom_tooltip = sway_invalidated_war
# 				}
# 			}
# 		}

# 		if = {
# 			limit = {
# 				scope:target = {
# 					NOT = { in_diplomatic_range = scope:owner }
# 				}
# 			}
# 			scope:owner = {
# 				send_interface_toast = {
# 					title = sway_invalidated_title
# 					left_icon = scope:target
# 					custom_description_no_bullet = {
# 						object = scope:target
# 						text = scheme_target_not_in_diplomatic_range
# 					}
# 				}
# 			}
# 		}
# 	}

# 	on_monthly = {
# 		save_scope_as = scheme
# 		scheme_target = { save_scope_as = target }
# 		scheme_owner = {
# 			save_scope_as = owner
# 			trigger_event = { on_action = sway_ongoing }
# 		}
# 	}
# 	success_desc = "SWAY_SUCCESS_DESC"
# }
